shell_cheatSheet

给出最常用的 shell 例子


ref: https://zhuanlan.zhihu.com/p/643448977

https://linuxcommand.org/lc3_writing_shell_scripts.php



========================================
shell 常用内容
----------------------------------------


1. shell 的运行环境
bash GNU项目。tab自动补齐。
sh 是bell labs 开发的，功能较少，跨平台。
zsh 扩展的 bash。



2. 本文的主要内容

变量、数组、循环（for、while）和条件语句（if、case）。学习如何定义和使用函数，以及如何处理输入参数。

通配符匹配文件和目录

进程管理






========================================
变量
----------------------------------------

bash中，使用 = 来给变量赋值，然后使用 $ 来引用变量的值。
注意，= 周围不能有空格。


$ name="Alice"
$ echo $name
Alice




========================================
数组
----------------------------------------

Bash 中，我们可以使用 () 来创建数组，然后使用 ${array[index]} 来引用数组的元素。
数组的索引从 0 开始。


$ colors=("red" "green" "blue")
$ echo ${colors[1]}
green


默认打印第一个元素，下标0：
$ echo ${colors}
red



========================================
循环 for, while
----------------------------------------

1. for 循环 

for variable in list
do
   command1
   command2
   ...
done


例：打印1到5
for i in {1..5}
do 
    echo $i 
done

执行效果：
$ for i in {1..5}
> do
>     echo $i
> done
1
2
3
4
5

可以写成一行： $ for i in {1..5}; do echo $i; done




2. while 循环
while [ condition ]
do
   command1
   command2
   ...
done

例：打印1到5
i=1
while [ $i -le 5 ]
do
	echo $i;
	((i++));
done

或者写成一行：$ i=1; while [ $i -le 5 ]; do echo $i; ((i++)); done
1
2
3
4
5



========================================
条件语句 if, case
----------------------------------------
1. if 语句
if [ condition ]
then
   command1
   command2
   ...
fi

例：检查 name 变量是否为 Alice

name="Alice"
if [ $name = "Alice" ]
then
   echo "Hello, Alice"
fi






2. case 语句
case expression in
   pattern1 )
      command1
      command2
      ;;
   pattern2 )
      command3
      command4
      ;;
   ...
esac

例：检查 $colors 的值

color="red"
case $color in
   "red" )
      echo "The color is red."
      ;;
   "green" )
      echo "The color is green."
      ;;
   "blue" )
      echo "The color is blue."
      ;;
   * )
      echo "Unknown color."
      ;;
esac






========================================
自定义函数、参数、返回值
----------------------------------------
1. 自定义函数
function_name () {
  command1
  command2
  ...
}

也可以使用 function 关键字定义函数：
function function_name {
  command1
  command2
  ...
}

以上另种形式是等价的。





2. 参数

函数的参数可以在函数内部通过 $1、$2、... 来获取，其中 $1 表示第一个参数，$2 表示第二个参数，以此类推。
$0 通常用来表示脚本自身的名字。
$# 用来获取参数的个数。
$@ 和 $* 用来获取所有的参数。



(2)例：定义函数，接收2个参数并打印

print_params () {
  echo "The first parameter is $1."
  echo "The second parameter is $2."
  echo "All parameters are $@."
}

使用：
$ print_params Alice Bob
The first parameter is Alice.
The second parameter is Bob.
All parameters are Alice Bob.




3. 返回值

使用 return 语句给出返回值，但是注意在 Bash 中，return 语句只能返回一个介于 0 到 255 之间的整数，它通常用来表示程序或函数的退出状态，0 表示成功，非 0 值表示各种不同的错误。
如果你想让函数返回其他类型的值，你可以让函数打印这个值，然后在函数外部使用命令替换 ($(command)) 来获取这个值。

例：
get_length () {
  local length=${#1}
  echo $length
}

$ length=$(get_length "Alice")
$ echo "The length is $length."
The length is 5.

在这段代码中，${#1} 表示传递给函数 get_length() 的第一个参数的长度。

具体解释如下：
	${1} 是函数 get_length() 的第一个参数。
	${#1} 返回参数 $1 的长度。

因此，当调用 get_length() 函数时，传递字符串 "Alice" 作为参数，${#1} 将返回字符串的长度，即 5。

最后，将长度存储在变量 length 中，并通过 echo 语句打印出来。输出将是 "The length is 5."


========================================
使用 globbing（通配符）来匹配文件和目录
----------------------------------------
bash 中的通配符和正则表达式有些不同，注意区分记忆。

1. *：匹配任意多个（包括 0 个）字符。例如，*.txt 会匹配所有以 .txt 结尾的文件。

2. ?：匹配任意一个字符。例如，?.txt 会匹配所有只有一个字符并且以 .txt 结尾的文件，如 a.txt、1.txt 等。

3. []：匹配括号中的任意一个字符。例如，[abc].txt 会匹配 a.txt、b.txt 和 c.txt。

4. {}：匹配大括号中的任意一个字符串。例如，{a,b,c}.txt 会匹配 a.txt、b.txt 和 c.txt。

5. **：如果启用了 globstar 选项（通过 shopt -s globstar 命令），** 可以匹配任意多个目录。例如，**/*.txt 会匹配所有目录下的以 .txt 结尾的文件。


可自由组合：
这些 globbing 字符可以组合使用，例如，*.[ch] 会匹配所有以 .c 或 .h 结尾的文件，file?.* 会匹配所有以 file 开头并且只有一个字符的文件，如 file1.txt、file2.txt 等。


隐藏文件 怎么匹配？
注意，globbing 只能匹配已经存在的文件和目录，它不能匹配不存在的路径。此外，如果一个文件或目录的名称以 . 开头，那么这个文件或目录默认是隐藏的，不会被 * 匹配，需要使用 .* 来匹配。





========================================
编写自动化脚本
----------------------------------------
我将提供一个 Bash 脚本的例子，这个脚本会检查一个特定的进程是否正在运行（例如 nginx 服务），如果没有运行，它就会启动这个进程。同时，这个脚本还会在一个特定的目录中查找一个特定的文件（例如在 /var/log 目录中查找 error.log 文件），并把找到的文件路径打印出来。

以下是这个脚本的实现：


#!/bin/bash

# 定义进程名和文件名
process_name="nginx"
file_name="error.log"
directory_to_search="/var/log"

# 检查进程是否在运行
pgrep -x $process_name > /dev/null
if [ $? -ne 0 ]; then
    # 如果进程没有在运行，启动它
    echo "Starting $process_name..."
    sudo service $process_name start
else
    echo "$process_name is already running."
fi

# 查找文件
found_file=$(find $directory_to_search -name $file_name)
if [ -n "$found_file" ]; then
    # 如果找到了文件，打印文件路径
    echo "Found $file_name at $found_file"
else
    echo "Did not find $file_name in $directory_to_search"
fi



在使用这个脚本之前，你需要用 chmod +x script.sh 命令来给这个脚本添加可执行权限（假设这个脚本的文件名是 script.sh）。然后，你可以用 ./script.sh 命令来运行这个脚本。

请注意，这个脚本可能需要 root 权限来启动进程，所以在运行这个脚本时可能需要用 sudo 命令。

这个脚本只是一个例子，你可以根据你的需求来修改进程名、文件名和要搜索的目录。




========================================
----------------------------------------





========================================
----------------------------------------




========================================
----------------------------------------





========================================
----------------------------------------


