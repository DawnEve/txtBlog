linux服务


https://www.digitalocean.com/community/tutorials/how-to-configure-bind-as-a-private-network-dns-server-on-ubuntu-16-04

BIND - The most widely used Name Server Software
https://www.isc.org/downloads/bind/

Bind9: https://wiki.debian.org/Bind9

https://help.ubuntu.com/community/BIND9ServerHowto?_ga=1.92154330.1762401746.1471129044
https://help.ubuntu.com/lts/serverguide/dns-configuration.html?_ga=1.92154330.1762401746.1471129044


(test with Ubuntu1604 is not OK yet.)
(test with CentOS6.8)


Ubuntu服务器命令行环境下VirtualBox的安装和管理
Ubuntu服务器iptables防火墙配置
Ubuntu服务器DNS及DHCP配置
Ubuntu服务器OpenVPN配置
Ubuntu服务器MySQL数据库的安装、配置及优化
Ubuntu服务器rsync／rsnapshot备份管理安装及配置


========================================
Linux系统服务基础
----------------------------------------
1.
服务（Service）是运行在操作系统后台的一个或多个程序。一般是给用户或者其他机器提供服务。
服务通常不中断运行、随时接收请求、提供某项服务。

服务分为本地服务和网络服务。

用户、计算机通过访问固定的IP和端口号访问服务器的某项网络服务。
	- http服务默认80端口。
常见其他服务：
	- 邮件服务mail
	- 文件共享： ftp、SMB、HTTP
	- 网游
	- 域名服务DNS



2.
System V是早期AT&T的操作系统，现今linux的服务管理体系就是沿用System V的服务管理系统。
	7个运行级别。默认3是命令行，5是图形界面。
	System V定义的运行级别的概念
		- 0 关机
		- 3 多用户模式
		- 5 X11图形化概念
		- 6 重新启动
	每个级别下都有对应启动和不启动的服务。
	
	System V定义init为系统启动的第一个进程，pid=1,init查看/etc/inittab中默认运行级别启动对应的服务。对应/etc/init.d/文件夹下的脚本。
	
	
	service命令可以控制这些服务：
		service 服务名 [start|stop|restart|status]
	比如：
		wjl@ubuntu$ service networking restart
		wjl@centOS$ service network restart
		$ service sshd status 
	也可以用ps命令查找某个服务是否正在运行：
$ ps -e | grep sshd
1865 ? 00:00:00 sshd
或者
$ ps -aux | grep sshd



3.
怎么确定哪个服务可以开机运行？

由运行级别定义，对应的文件/etc/rc[0-6].d文件夹。
$ runlevel 
N 5 #当前运行级别是5

$cd /etc/rc5.d/
$ls -l  
里面都是链接。命名规范：
	- 首字母是S表示启动，是K表示不启动。
	- 接着是数字，是启动顺序。
	- 然后是程序名，和链接是一样的。
可以通过修改文件名，确定是否开机启动。
但是直接改文件名太麻烦，更方便的是使用chkconfig命令：
	chkconfig 服务名 [on|off]
	比如：
	chkconfig cups on  #文件打印共享服务
	chkconfig cups off
	chkconfig --list

在ubuntu10.04之前的版本都是使用chkconfig来进行管理，而在之后的版本就没有了，如果想继续使用chkconfig命令，只好自己apt-get install下了。
	$ sudo apt-get install chkconfig  
在这里我给大家介绍另两个命令来配置ubuntu的启动服务，sysv-rc-conf和update-rc.d



3.
除了常驻运行的系统service之外，还有部分服务是由xinetd进行控制的。
xinetd控制那些不会常驻的、功能较为简单的服务。
xinetd本身是一个service。
xinetd太古老了，现在已经慢慢淡出了。




========================================
|-- 设置服务开机启动: systemctl enable docker
----------------------------------------

1.查看是否开机自启动
$ systemctl list-unit-files | grep enable
或者
$ systemctl list-unit-files | grep docker


2. 设置开机自启动
$ sudo systemctl enable docker 


关闭开机自启动
$ sudo systemctl disable docker



ref:
https://www.imooc.com/article/319612




========================================
|-- chkconfig 设置服务开机启动 [centOS] //todo
----------------------------------------

Ubuntu 设置开机自启动，见 ssh/ autossh 开机自启动






1. chkconfig命令主要用来更新（启动或停止）和查询系统服务的运行级别信息
谨记chkconfig不是立即自动禁止或激活一个服务，它只是简单的改变了符号连接。

使用语法：
添加系统服务：chkconfig [--add] [系统服务]

删除系统服务：chkconfig [--del] [系统服务]

显示系统服务：chkconfig [--list] [系统服务]

参数解释:
--add 　增加所指定的系统服务，让chkconfig指令得以管理它，并同时在系统启动的叙述文件内增加相关数据。
--del 　删除所指定的系统服务，不再由chkconfig指令管理，并同时在系统启动的叙述文件内删除相关数据。
--level<等级代号> 　指定读系统服务要在哪一个执行等级中开启或关毕。
      等级0表示：表示关机
      等级1表示：单用户模式
      等级2表示：无网络连接的多用户命令行模式
      等级3表示：有网络连接的多用户命令行模式
      等级4表示：不可用
      等级5表示：带图形界面的多用户模式
      等级6表示：重新启动

(1) 使用范例：
chkconfig --list        #列出所有的系统服务
chkconfig --add httpd        #增加httpd服务
chkconfig --del httpd        #删除httpd服务
chkconfig --level httpd 2345 on        #设置httpd在运行级别为2、3、4、5的情况下都是on（开启）的状态
chkconfig --list        #列出系统所有的服务启动情况
chkconfig --list mysqld        #列出mysqld服务设置情况
chkconfig --level 35 mysqld on        #设定mysqld在等级3和5为开机运行服务，--level 35表示操作只在等级3和5执行，on表示启动，off表示关闭
chkconfig mysqld on        #设定mysqld在各等级为on，“各等级”包括2、3、4、5等级




(2) 如何增加一个服务？
1).服务脚本必须存放在/etc/init.d/目录下；
2).chkconfig --add servicename
    在chkconfig工具服务列表中增加此服务，此时服务会被在/etc/rc.d/rcN.d中赋予K/S入口了；
3).chkconfig mysqld on
    修改服务的默认启动等级。

运行级文件：
每个被chkconfig管理的服务需要在对应的init.d下的脚本加上两行或者更多行的注释。
第一行 chkconfig: 缺省启动的运行级以及启动和停止的优先级。如果某服务缺省不在任何运行级启动，那么使用 - 代替运行级。
第二行 description: 对服务进行描述，可以用\ 跨行注释。


例子: 添加 random(这是我随机想出来的名字) 为开机启动

例如 /etc/init.d/random 包含三行：
#! /bin/bash
# chkconfig: 2345 20 80
# description: Saves and restores system entropy pool for \
# higher quality random number generation.
echo "this is a test service!!!--wjl"


设置该文件可执行
$ sudo chmod +x /etc/init.d/random


查看 random 服务是否启动
我们的启动脚本里面只设置在“35”下面启动
$ sudo chkconfig --level 35 random on
$ chkconfig --list
netconsole     	0:off	1:off	2:off	3:off	4:off	5:off	6:off
network        	0:off	1:off	2:on	3:on	4:on	5:on	6:off
random         	0:off	1:off	2:off	3:on	4:off	5:on	6:off #确实只有35是on的



模拟启动和停止服务
$ /etc/init.d/random stop
this is a test service!!!--wjl
$ /etc/init.d/random start
this is a test service!!!--wjl



删除该服务的开机启动
$ sudo chkconfig --del random
$ chkconfig --list






设置 mysql 只在 runlevel 为1 时启动:
$ chkconfig --level 1 mysqld on
$ chkconfig --list 







========================================
DNS服务及域名系统架构
----------------------------------------
1.
IP地址往往难以记忆，所以通常使用域名进行管理。

2.
DNS客户端解析方法
	文件（/etc/hosts、/etc/networks）
	DNS服务器（定义在 /etc/resolve.conf）
	NIS（用的少，基本被淘汰）
可以通过配置文件/etc/nsswitch.conf控制查询顺序。
	hosts:files dns 
	
3.	
DNS专用查询命令

host命令用于DNS查询
$ host 163.com
163.com has address 123.58.180.8
163.com has address 123.58.180.7
163.com mail is handled by 10 163mx01.mxmail.netease.com.
163.com mail is handled by 50 163mx00.mxmail.netease.com.
163.com mail is handled by 10 163mx03.mxmail.netease.com.
163.com mail is handled by 10 163mx02.mxmail.netease.com.

dig命令获取更详细的dns信息：
$ dig tool.biomooc.com

; <<>> DiG 9.10.3-P4-Ubuntu <<>> tool.biomooc.com
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 12567
;; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 0

;; QUESTION SECTION:
;tool.biomooc.com.	IN	A

;; ANSWER SECTION:
tool.biomooc.com.	600	IN	CNAME	w39.en.tm.
w39.en.tm.	600	IN	A	103.231.13.94

;; Query time: 152 msec
;; SERVER: 127.0.1.1#53(127.0.1.1)
;; WHEN: Sun Aug 14 14:35:09 CST 2016
;; MSG SIZE rcvd: 73

这两个命令都不会使用/etc/nsswitch.conf的配置，只会通过/etc/resolv.conf进行dns查询。


4.
dns域名是一个树状结构，查询的时候根据域名从右向左查询，域名每一级由独立的一个或多个服务器。
域名最后一位还有个点号，指的是根服务器，一般省略。

使用 $ dig +trace 域名 获得更详细的域名追踪流程。


$ dig +trace tool.biomooc.com

; <<>> DiG 9.10.3-P4-Ubuntu <<>> +trace tool.biomooc.com
;; global options: +cmd
.			86400	IN	NS	a.root-servers.net.
.			86400	IN	NS	b.root-servers.net.
.			86400	IN	NS	c.root-servers.net.
.			86400	IN	NS	d.root-servers.net.
.			86400	IN	NS	e.root-servers.net.
.			86400	IN	NS	f.root-servers.net.
.			86400	IN	NS	g.root-servers.net.
.			86400	IN	NS	h.root-servers.net.
.			86400	IN	NS	i.root-servers.net.
.			86400	IN	NS	j.root-servers.net.
.			86400	IN	NS	k.root-servers.net.
.			86400	IN	NS	l.root-servers.net.
.			86400	IN	NS	m.root-servers.net.
.			86400	IN	RRSIG	NS 8 0 518400 20160823050000 20160813040000 46551 . EZZnj84yvOUKWIqVBGk1ecaAm6hQ6s0txTkSGe/dAKpp0ZiVhEjRpRqv k4qwJ6Rz3sHlQa1mh7S3VZXYeZlxTRNyu+Su6fjfmEIoktroaYqi5yGs T29a7JZiPDO4HoQV6zUAssriISIGA/MX5AAsN1u+qSbFM6h3xRccUUhB nHM=
;; Received 927 bytes from 127.0.1.1#53(127.0.1.1) in 2 ms

com.			172800	IN	NS	a.gtld-servers.net.
com.			172800	IN	NS	b.gtld-servers.net.
com.			172800	IN	NS	c.gtld-servers.net.
com.			172800	IN	NS	d.gtld-servers.net.
com.			172800	IN	NS	e.gtld-servers.net.
com.			172800	IN	NS	f.gtld-servers.net.
com.			172800	IN	NS	g.gtld-servers.net.
com.			172800	IN	NS	h.gtld-servers.net.
com.			172800	IN	NS	i.gtld-servers.net.
com.			172800	IN	NS	j.gtld-servers.net.
com.			172800	IN	NS	k.gtld-servers.net.
com.			172800	IN	NS	l.gtld-servers.net.
com.			172800	IN	NS	m.gtld-servers.net.
com.			86400	IN	DS	30909 8 2 E2D3C916F6DEEAC73294E8268FB5885044A833FC5459588F4A9184CF C41A5766
com.			86400	IN	RRSIG	DS 8 1 86400 20160824050000 20160814040000 46551 . Oh8qMtS8xTpWJnOICFpnQAwAUtiEEkDcMvZ3k0PxlGIdWHusOjHfn26R Li8lEIWUF/kBYeIyF03a8JMcwA/9O03BnaQYUmTvFGUFz1bcr6cjf63t a2RuVqKNYuBBafHW2DCXltnEJnK1a3BIamkkMG6sQ/0lWHpPpBSeHE+u uGI=
;; Received 740 bytes from 192.58.128.30#53(j.root-servers.net) in 122 ms

biomooc.com.		172800	IN	NS	dns9.hichina.com.
biomooc.com.		172800	IN	NS	dns10.hichina.com.
CK0POJMG874LJREF7EFN8430QVIT8BSM.com. 86400 IN NSEC3 1 1 0 - CK0Q1GIN43N1ARRC9OSM6QPQR81H5M9A NS SOA RRSIG DNSKEY NSEC3PARAM
CK0POJMG874LJREF7EFN8430QVIT8BSM.com. 86400 IN RRSIG NSEC3 8 2 86400 20160818045655 20160811034655 27452 com. Rrrm+OShYYnljJ2KF6wqUFtdG8V58fnX/gs/rvF/TSktkGbQ0PSbEOej mgmtmBVIykd+wR9UePlwFNIvA/WjSjgNX+FCMC8lB66Q4pGAZgqwsgxK ZtCrJXbS8vdBwHc1qUuTBo0iDfkcba/UTnnajE/KZlrxuS4llZ1KDWOb b08=
230945AV9C19LKS36UGG5LDOKH0A1U4H.com. 86400 IN NSEC3 1 1 0 - 230C435M65C5MMK36130U5G6T5D7RCQM NS DS RRSIG
230945AV9C19LKS36UGG5LDOKH0A1U4H.com. 86400 IN RRSIG NSEC3 8 2 86400 20160819051104 20160812040104 27452 com. gwdr5VpFZF1jjo03FwYkdKizMRJXrZOWrh3qQ64UHK3FWbqneFcglnW2 3Gv7TQirM4s/2ibWaMO+5qlY/h7YG+JF1/3DBPf4B5f0wLrutj6+xBPq 1jiwNuFZdolb/KTwjqhFzQvaVhCDOEJSALa715crOO8WSZ04CsxX9JRf dgQ=
;; Received 673 bytes from 192.42.93.30#53(g.gtld-servers.net) in 213 ms

tool.biomooc.com.	600	IN	CNAME	w39.en.tm.
;; Received 68 bytes from 140.205.228.13#53(dns9.hichina.com) in 46 ms

先查询., 然后是.com.，接着是 biomooc.com.，最后是 tool.biomooc.com.




5.
DNS查询方式：
1）迭代查询 iterative query; 
2）递归查询 recursive query；

实际使用的时候，是同时使用的。



6.
DNS服务器上保存的信息
RR，resource record，除了域名到IP信息，还有很多其他信息。



常见标准资源记录
	SOA(Start Of Authority)
	起始授权记录表示一个授权区的开始

	A (Address)
	将主机名转换为地址。这个字段保存以点分隔的十进制形式的IP地址。任何给定的主机都只能有一个A记录，因为这个记录被认为是授权信息。这个主机的任何附加地址名或地址映射必须用CNAME类型给出

	CNAME (Canonical NAME)
	给定一个主机的别名，主机的别名记录是在这个主机的A记录中指定的

	MX (Mail eXchanger)
	建立邮件交换器记录。MX记录告诉邮件传送进程把邮件送到另一个系统，这个系统知道如何将它递送到它的最终目的地

	NS (Name Server)
	标识一个域的域名服务器。NS资源记录的数据字段包括这个域名服务器的DNS名。我们还需要指定这个名字名字服务器的地址与主机名相匹配的A记录

	PTR (domain name PoinTeR)
	将地址变换成主机名。主机名必须是规范主机名






资源记录（RR，resource record）常用属性有：
	- NAME 名称
	- CLASS 类别
	- TYPE 类型
	- RDATA 数据
如：
	NAME 	CLASS 	TYPE 	RDATA
	www 	IN	A 	192.168.1.1 
	mail	IN	A 	192.168.1.1 
	server1	IN	CNAME 	www 
			IN 	MX 10 mail.xxxx.net.
cname是别名，表明前后是一样的。

Type	意义
A 	IPv4地址
AAAA	IPv6地址
MX 	邮件记录
CNAME 	别名
PTR 	指针（逆向解析）
SRV		服务资源




7.
DNS服务器类型，一般有三种
1）Pramary DNS Server(Master)
	一个域的主服务器保存该域的zone配置文件，该域所有的配置、更改都在该服务器上进行。

2）Secondary DNS Server(Slave)
	从服务器一般作为冗余负载使用，一个域的从服务器从该域的主服务器上抓取zone配置文件，从服务器不进行信息修改，所有的修改与主服务器同步。

3）Caching only Server
	DNS缓存服务器不存在任何zone文件，仅仅依靠缓存为客户端提供服务，通常用于负载均衡及加速访问。一般局域网要配置一台缓存服务器，可以对整个局域网加速。



8.
zone文件

在dns服务器中，一般一个域通过一个zone文件保存该域的相关信息。
zone文件的格式是标准化的。一个典型的zone配置文件内容如下。

STTL	ID
@	IN SOA @ RNAME.iNVALID.(
		0 	;serial #序列号，每次修改增加1
		1D 	;refresh #刷新次数1天
		1H	;retry
		1W	;expire
		JH); minimum
		NS @
		MX 10 mail.xxxx.net.
	www IN A 192.168.1.100 
	mail IN A 192.168.1.200 
	
	
9.
dig命令的高级查询
1）
$ dig -t MX gmail.com

; <<>> DiG 9.10.3-P4-Ubuntu <<>> -t MX gmail.com
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 29669
;; flags: qr rd ra; QUERY: 1, ANSWER: 5, AUTHORITY: 0, ADDITIONAL: 0

;; QUESTION SECTION:
;gmail.com.			IN	MX

;; ANSWER SECTION:
gmail.com.		3600	IN	MX	40 alt4.gmail-smtp-in.l.google.com.
gmail.com.		3600	IN	MX	30 alt3.gmail-smtp-in.l.google.com.
gmail.com.		3600	IN	MX	5 gmail-smtp-in.l.google.com.
gmail.com.		3600	IN	MX	10 alt1.gmail-smtp-in.l.google.com.
gmail.com.		3600	IN	MX	20 alt2.gmail-smtp-in.l.google.com.

;; Query time: 95 msec
;; SERVER: 127.0.1.1#53(127.0.1.1)
;; WHEN: Sun Aug 14 15:13:12 CST 2016
;; MSG SIZE  rcvd: 150

发现gmail的邮件服务器还是挺多的。MX后面的数字式优先级。




$ dig -t cname tool.biomooc.com

; <<>> DiG 9.10.3-P4-Ubuntu <<>> -t cname tool.biomooc.com
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 19822
;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 2

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 4000
;; QUESTION SECTION:
;tool.biomooc.com.		IN	CNAME

;; ANSWER SECTION:
tool.biomooc.com.	600	IN	CNAME	w39.en.tm.

;; ADDITIONAL SECTION:
w39.en.tm.		600	IN	A	103.231.13.94

;; Query time: 105 msec
;; SERVER: 127.0.1.1#53(127.0.1.1)
;; WHEN: Sun Aug 14 15:15:06 CST 2016
;; MSG SIZE  rcvd: 84

2）逆向解析，就是从ip地址到域名的解析：
$ dig -x tool.dawneve.cc 

一般不需要。


3）查询soa信息，就是查询zone文件中的soa信息

$ dig -t soa baidu.com

; <<>> DiG 9.10.3-P4-Ubuntu <<>> -t soa baidu.com
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 8496
;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 2

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 4000
;; QUESTION SECTION:
;baidu.com.			IN	SOA

;; ANSWER SECTION:
baidu.com.		7200	IN	SOA	dns.baidu.com. sa.baidu.com. 2012132640 300 300 2592000 7200

;; ADDITIONAL SECTION:
dns.baidu.com.		28205	IN	A	202.108.22.220

;; Query time: 15 msec
;; SERVER: 127.0.1.1#53(127.0.1.1)
;; WHEN: Sun Aug 14 15:26:24 CST 2016
;; MSG SIZE  rcvd: 97



	
========================================
|-- DNS服务器基础及域主服务器配置: bind 服务
----------------------------------------
1.
BIND (Berkeley Internet Name Domain)是Domain Name System (DNS) 协议的一个实现，提供了DNS主要功能的开放实现，包括
	域名服务器 (named)
	DNS解析库函数
	DNS服务器运行调试所用的工具
是一款开放源码的DNS服务器软件，由美国加州大学Berkeley分校开发和维护的，

按照ISC的调查报告，BIND是世界上使用最多最广泛的域名服务系统。不论你的邮件服务器，WEB服务器或者其他的services如何的安全可靠，DNS的故障会给你带来用户根本无法访问这些服务。

BIND，也是我们常说的named，由于多数网络应用程序使用其功能，所以在很多BIND的弱点及时被发现。主要分为三个版本：

v4
1998年多数UNIX捆绑的是BIND4，已经被多数厂商抛弃了，除了OpenBSD还在使用。OpenBSD核心人为BIND8过于复杂和不安全，所以继续使用BIND4。这样一来BIND8/9的很多优点都不包括在v4中。

v8
就是如今使用最多最广的版本，其详细内容可以参阅 BIND 8+ 域名服务器安全增强

v9
最新版本的BIND，全部重新写过，免费（但是由商业公司资助），也添加了许多新的功能（但是安全上也可能有更多的问题）。BIND9在2000年十月份推出，现在稳定版本是9.3.2。


bind（Berkeley Internet Name Domain）是现今使用最广泛的dns服务器。
bind服务的名称称之为named。
我们可以通过以下命令安装bind。
	$ yum install -y bind bind-chroot bind-utils
	对于ubuntu：
	$ sudo apt-get install bind9 bind9utils bind9-doc
DNS默认使用UDP、TCP协议，使用端口为53（domain）、953（mdc，远程）

2.
BIND配置文件保存在两个位置：
	/etc/named.conf 	- BIND服务主配置文件
	/var/named/ 	- zone文件 

如果安装了bind-chroot，BIND会被封装到一个伪根目录内，配置文件的位置变为：
	/var/named/chroot/etc/named.conf
	/var/named/chroot/var/named/ 
chroot是通过将相关文件封装在一个伪根目录内，达到安全防护的目的，一旦该程序被攻破，将只能访问伪根目录的内容，而不是真是的根目录。
	
	
	
3.
域主服务器（master）是这个域的信息的权威服务器，所有这个域的信息都是由域的主服务器控制，配置一个域的主服务器需要以下几个步骤：

帮助文档提供了一份样本，在 /usr/share/doc/bind-9.8.2/sample/下面。


1）在bind的主配置文件中添加该域的定义
	/var/named/chroot/etc/named.conf 
	options{
		directory	"/var/named";
		listen-on port 53	{127.0.0.1;};
		listen-on-v6 port 53	{::1;};
		
	};
	zone "dawneve.com"{
		type master;
		file "dawneve.com.zone";
	};
2）在/var/named/chroot/var/named中创建该域的zone文件，
	/var/named/dawneve.com.zone，文件很复杂，一般使用named.localhost作为模板。
	需要root用户操作这些文件。
	
# cd /var/named/
# cp named.localhost dawneve.com.zone 
# vim dawneve.com.zone 

$TTL    604800
@       IN      SOA     localhost. root.localhost. (
                              2         ; Serial
                         604800         ; Refresh
                          86400         ; Retry
                        2419200         ; Expire
                         604800 )       ; Negative Cache TTL

	NS	@ 
	            A       127.0.0.1       ; delete this line
	            AAAA    ::1             ; delete this line
		IN MX 10 mail.dawneve.com.
www 	IN 	A 	192.168.1.100 
mail 	IN 	A 	192.168.1.200
tool 	IN 	A 	192.168.1.222

一定要注意：mail.dawneve.com. 最后还有一个点号不能省略！


3）编辑zone文件，添加需要的信息
4）启动bind服务或使bind刷新配置
	(1)启动bind服务或刷新配置：
	service named start 


5）使用host或dig命令检测域信息是否正常。

一般的错误，要么是语法错误。要么是权限错误。要保证都有读权限！

语法检查：
检查主配置文件：
$ named-checkconf /etc/named.conf 
检查zone配置文件：
$ named-checkzone dawneve.com /var/named/dawneve.com.zone 

例如：
$ named-checkconf /etc/named.conf 
wangjl@Ubuntu1604:/var/named$ named-checkzone dawneve.com dawneve.com.zone
zone dawneve.com/IN: loaded serial 2
OK




4.
1）启动bind服务或者刷新配置：
	# service named start 
	# service named reload
2)将本机的dns配置指向本机
/etc/resolv.conf 
nameserver 127.0.0.1 
3)使用host或者dig验证dns配置：
host www.dawneve.com 
dig www.dawneve.com 




========================================
|-- BIND配置排错方法
----------------------------------------
1.
是否启动服务
# service named status 

2.
53号端口是DNS服务使用的，你启动了DNS服务，自然就会监听53号端口。
查看53端口号是否启动：
$ netstat -utln
$ netstat -utln | grep 53 #查看53端口是否开放？

3.
防火墙是否打开了53端口：
可以关掉防火墙。如果想打开防火墙，仅打开53端口的话，这样：
iptables -A INPUT -p tcp --dport 53 -j ACCEPT
iptables -A INPUT -p udp --dport 53 -j ACCEPT

4.
检查 /var/log/messages 的内容，检查错误提示： 
# tail -n 15 /var/log/messages 
# tail -n 15 /var/log/messages | grep named 


5.
检查文件权限：注意文件所属组都要是named，否则报错。
	- 文件包括主配置文件 /etc/named.conf ,域配置文件 /var/named/xx.com.zone 等。
	- 所以使用ls -l检查所属组。
	- 使用cp aa.com.zone bb.com.zone -a #加上-a参数能复制全部信息，包括权限。

	
6.客户机是否使用了默认DNS服务器？
	> ipconfig /all #windows查看dns服务器
	如果使用了特定DNS，请修改为默认DNS。

7.window下是否清楚了dns缓存？
	> ipconfig /flushdns #清理dns缓存

	
========================================
|-- BIND从服务器及缓存服务器配置（从服务器及缓存服务器）
----------------------------------------

1.域从服务器
一个域的从服务器（slave）通常是为了备份及负载均衡使用，所有这个域的信息都是由域的主服务器控制，域slave服务器启动时会从域的主服务器master上抓取指定域的zone配置文件，域slave服务器的配置如下：
1）在bind的主配置文件中添加该域的定义；
2）启动bind服务或使bind刷新配置；
3）查看域的zone文件是否正常抓取到/var/named/slaves目录中；
4）使用host或dig命令检测域信息是否正常。












========================================
系统资源监控 - centOS7 系统资源监控: CPU，内存，磁盘信息
----------------------------------------
1. 原生获取方式

CPU: top 
内存: free 
磁盘信息: df 
动态信息: top

登录 ubuntu 给出的欢迎信息:

System information as of Tue Sep 19 08:38:09 CST 2023
  System load:            0.39
  Usage of /home:         65.3% of 18.16GB
  Memory usage:           6%
  Swap usage:             0%
  Processes:              398
  Users logged in:        1





2. 安装插件 glances
$ sudo apt install glances 

$ glances #将消耗最高系统资源的进程用红色标出


(2)同时还可以远程监控：
在服务器端启动
$ glances -s -B 192.168.1.120

$ glances -s -p 9000
Glances XML-RPC server is running on 0.0.0.0:9000

需要客户端连接？


(3)同时还可以在web页面监控：//todo
$ glances --export-graph --path-graph ./



========================================
|-- 内存： free 
----------------------------------------
总体是先监控上，然后再可视化监控。


1.查看内存使用情况
$ free -m
              total        used        free      shared  buff/cache   available
Mem:          31848       20601        6958           9        4288       10777
Swap:          2047         452        1595


内存资源 6/126G
$ free -g
              total        used        free      shared  buff/cache   available
Mem:            125           6          53           0          66         118
Swap:           122           4         117
参数 -g 是单位，表示数字的单位是 Gb。
同理 -m，表示Mb。



2.详细列出的进程情况，重点关注第10列内存使用占比：
$ top
top - 15:30:58 up 63 days, 23:30, 12 users,  load average: 0.08, 0.22, 0.16
Tasks: 306 total,   1 running, 218 sleeping,   0 stopped,   0 zombie
%Cpu(s):  0.6 us,  0.9 sy,  0.0 ni, 98.4 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
KiB Mem : 32613176 total,  7125644 free, 21096460 used,  4391072 buff/cache
KiB Swap:  2097148 total,  1633840 free,   463308 used. 11035752 avail Mem 

  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND         
 3785 root      20   0 1988144  11436    560 S  15.2  0.0  10472:27 teamviewerd     
  927 avahi     20   0   53316   5900      0 S   1.0  0.0 392:50.44 avahi-daemon    
 1909 root      20   0 1629228   8992   2396 S   0.3  0.0 191:19.48 docker-containe 
 6826 wangjl    20   0  570760  11588    852 S   0.3  0.0 219:11.94 python          
 9745 root      20   0       0      0      0 I   0.3  0.0   0:00.01 kworker/6:2     
 9822 root      20   0       0      0      0 I   0.3  0.0   0:00.11 kworker/8:1     
 9828 wangjl    20   0   43052   4272   3384 R   0.3  0.0   0:00.08 top             
22841 wangjl    20   0  374076  27964   6860 S   0.3  0.1   2:01.09 jupyter-noteboo 
    1 root      20   0  225848   6832   4476 S   0.0  0.0 219:02.59 systemd         
    2 root      20   0       0      0      0 S   0.0  0.0   0:02.60 kthreadd        
    4 root       0 -20       0      0      0 I   0.0  0.0   0:00.00 kworker/0:0H    
    6 root       0 -20       0      0      0 I   0.0  0.0   0:00.00 mm_percpu_wq
#


3.查看消耗内存最多的前5个进程：
$ ps auxw|head -1;ps auxw|sort -rn -k4|head -5
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
wangjl    2007  0.1 62.4 22636272 20380768 ?   Ssl  Oct07   5:11 /home/wangjl/anaconda3/bin/python -m ipykernel_launcher -f /run/user/1001/jupyter/kernel-xxx.json
rstudio+  3116  0.1  0.5 2064636 183256 pts/0  Ssl+ Aug08  92:00 mysqld
root     20357  0.0  0.1 166984 48536 ?        S<s  Sep12   1:37 /lib/systemd/systemd-journald
xrdp      1094  0.0  0.0  24808     0 ?        S    Aug06   0:00 /usr/sbin/xrdp
www-data  8666  0.0  0.0 390052    24 ?        S    Sep11   0:00 /usr/sbin/apache2 -k start






========================================
|-- CPU 信息: /proc/cpuinfo, lscpu, vmstat, 
----------------------------------------
1. 查看cpu信息（信息记录在 /proc/cpuinfo 中）
获取的主要是 CPU 静态信息

(1) 查看一个CPU信息
$ cat /proc/cpuinfo | head -n 27
processor	: 0
vendor_id	: GenuineIntel
cpu family	: 6
model		: 79
model name	: Intel(R) Xeon(R) CPU E5-2680 v4 @ 2.40GHz
stepping	: 1
microcode	: 0xb000040
cpu MHz		: 1200.964
cache size	: 35840 KB
physical id	: 0
siblings	: 28
core id		: 0
cpu cores	: 14
apicid		: 0
initial apicid	: 0
fpu		: yes
fpu_exception	: yes
cpuid level	: 20
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch cpuid_fault epb cat_l3 cdp_l3 invpcid_single pti ssbd ibrs ibpb stibp tpr_shadow vnmi flexpriority ept vpid ept_ad fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm cqm rdt_a rdseed adx smap intel_pt xsaveopt cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local dtherm ida arat pln pts md_clear flush_l1d
bugs		: cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs taa itlb_multihit mmio_stale_data
bogomips	: 4794.51
clflush size	: 64
cache_alignment	: 64
address sizes	: 46 bits physical, 48 bits virtual
power management:


说明:
    Physical id 	#相同表示为同一个物理CPU
    Processor 	#逻辑CPU
    Cpu cores 	#CPU核数，内核个数
    Core id 	#内核id号
    Siblings 	#每个物理CPU里面的逻辑CPU个数


查看CPU型号
$ cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c
12  Intel(R) Xeon(R) W-2135 CPU @ 3.70GHz

查看物理CPU个数
$ cat /proc/cpuinfo | grep "physical id" | sort -u | wc -l  
1
$ cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l
2 #S3 station


查看逻辑CPU个数
$ cat /proc/cpuinfo | grep "processor" | wc -l
12
56 #S3 station



查看CPU内核数
$ cat /proc/cpuinfo | grep "cpu cores" | uniq  
cpu cores	: 6
cpu cores	: 14 #S3 station 查看每个物理CPU中core的个数(即核数) ?


查看单个物理CPU封装的逻辑CPU数量
$ cat /proc/cpuinfo | grep "siblings" | uniq  
siblings        : 12
siblings	: 28  #S3 station



计算是否开启超线程
逻辑CPU > 物理CPU x CPU核数 #开启超线程
逻辑CPU = 物理CPU x CPU核数 #没有开启超线程或不支持超线程

查看是否超线程
$ cat /proc/cpuinfo | grep -e "cpu cores"  -e "siblings" | sort | uniq
cpu cores	: 6
siblings	: 12
说明：如果cpu cores数量和siblings数量一致，则没有启用超线程，否则超线程被启用。


脚本
$ cat cpu.sh   
#!/bin/bash
cpuname=$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c)
physical=$(cat /proc/cpuinfo | grep "physical id" | sort -u | wc -l)
processor=$(cat /proc/cpuinfo | grep "processor" | wc -l)
cpucores=$(cat /proc/cpuinfo  | grep "cpu cores" | uniq)
siblings=$(cat /proc/cpuinfo  | grep "siblings"  | uniq)

echo "* * * * * CPU Information * * * * *"
echo "（CPU型号）cpu name : $cpuname"
echo "（物理CPU个数）physical id is : $physical"
echo "（逻辑CPU个数）processor is : $processor"
echo "（CPU内核数）cpu cores is : $cpucores"
echo "（单个物理CPU的逻辑CPU数）siblings is : $siblings"
#

脚本运行效果
$ sh cpu.sh 
* * * * * CPU Information * * * * *
（CPU型号）cpu name :      12  Intel(R) Xeon(R) W-2135 CPU @ 3.70GHz
（物理CPU个数）physical id is : 1
（逻辑CPU个数）processor is : 12
（CPU内核数）cpu cores is : cpu cores	: 6
（单个物理CPU的逻辑CPU数）siblings is : siblings	: 12



(2) lscpu 命令
$ lscpu
Architecture:        x86_64
CPU op-mode(s):      32-bit, 64-bit
Byte Order:          Little Endian
CPU(s):              56
On-line CPU(s) list: 0-55  #核心数 56个
Thread(s) per core:  2   #每个核2个线程
Core(s) per socket:  14
Socket(s):           2
NUMA node(s):        2
Vendor ID:           GenuineIntel
CPU family:          6
Model:               79
Model name:          Intel(R) Xeon(R) CPU E5-2680 v4 @ 2.40GHz
Stepping:            1
CPU MHz:             1201.166
CPU max MHz:         3300.0000
CPU min MHz:         1200.0000
BogoMIPS:            4794.76
Virtualization:      VT-x
L1d cache:           32K
L1i cache:           32K
L2 cache:            256K
L3 cache:            35840K
NUMA node0 CPU(s):   0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54
NUMA node1 CPU(s):   1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55
Flags:               fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic movbe popcnt aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch cpuid_fault epb cat_l3 cdp_l3 invpcid_single pti tpr_shadow vnmi flexpriority ept vpid ept_ad fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm cqm rdt_a rdseed adx smap intel_pt xsaveopt cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local dtherm ida arat pln pts




(3) 查看本机所有进程的CPU占比之和
$ ps auxw|awk '{if (NR>1){print $3}}' | awk '{CPU_PER+=$1}END{print CPU_PER}'
15
貌似不太对







2. vmstat是Linux系统监控工具，使用vmstat命令可以得到关于进程、内存、内存分页、堵塞IO、traps及CPU活动的信息。

$ vmstat 1
procs  -----------memory------------   --swap--   ---io---- -system-- ------cpu-----
 r  b   swpd   free   buff    cache     si   so    bi    bo   in   cs us sy id wa st
 0  0 463308 7124444 1377552 3014080    0    0    26    33    0    0  1  1 98  0  0
 0  0 463308 7124436 1377552 3014116    0    0     0     0  774 9451  1  1 98  0  0
 0  0 463308 7124436 1377552 3014116    0    0     0     0  338  697  0  0 100  0  0
 0  0 463308 7124436 1377552 3014116    0    0     0     0  649 9562  1  1 98  0  0
 0  0 463308 7124436 1377552 3014116    0    0     0     0  374  686  0  0 100  0  0

r：运行队列中的进程数；b：等待IO的进程数。
swpd：已用虚拟内存大小（k）；free：空闲内存大小；buff：已用缓冲大小；cache：已用缓存大小。
si：每秒从交换区写入内存的大小（kb/s）；so：每秒从内存写入交换分区的大小。

bi：每秒读取的块数；bo每秒写入的块数。
in：每秒中断数，包括时钟中断；cs：每秒上下文切换数。
us(user time)：用户进程执行消耗cpu时间；sy(system time)：系统进程执行消耗cpu时间；id：空闲时间（包括IO等待时间）；wa：等待IO时间。


(2) /proc/stat：
这个文件包含了所有CPU活动的信息，该文件中的所有值都是从系统启动开始累计到当前时刻。可以利用其中信息计算cpu的利用率。
$ cat /proc/stat
cpu  85870228 93600 42725582 6489209034 9137121 0 421790 0 0 0
cpu0 6602769 7449 3339631 541497724 761981 0 142049 0 0 0
cpu1 6611019 7534 3375450 541922359 476956 0 11676 0 0 0
cpu2 6445912 7690 3390426 541996062 566815 0 7825 0 0 0
cpu3 6903904 4741 3354675 541637542 520768 0 5106 0 0 0
cpu4 6398322 5495 3364155 542155286 493559 0 3780 0 0 0

每行每个参数的意思为（以第一行为例，单位：jiffies，1jiffies=0.01秒）：
user（6602769）：从系统启动开始累计到当前时刻，用户态的CPU1时间，不包含 nice值为负进程。
nice（7449）：从系统启动开始累计到当前时刻。
system（3339631）：从系统启动开始累计到当前时刻，nice值为负的进程所占用的CPU时间。
idle（541497724）：从系统启动开始累计到当前时刻，除硬盘IO等待时间以外其它等待时间。
iowait（761981）：从系统启动开始累计到当前时刻，硬盘IO等待时间。
irq（0）：从系统启动开始累计到当前时刻，硬中断时间。
softirq（142049）：从系统启动开始累计到当前时刻，软中断时间。
CPU时间=user+nice+system+idle+iowait+irq+softirq。
CPU利用率=(idle2-idle1)/(cpu2-cpu1)*100。


(3)ps aux：
显示其他用户启动的进程（a）
查看系统中属于自己的进程（x）
启动这个进程的用户和启动时间 （u）
$ ps -aux | sort -k4nr | head -5
wangjl    2007  0.1 62.4 22636272 20380768 ?   Ssl  Oct07   5:11 /home/wangjl/anaconda3/bin/python -m ipykernel_launcher -f /run/user/1001/jupyter/kernel-xx1.json
rstudio+  3116  0.1  0.5 2064636 183256 pts/0  Ssl+ Aug08  92:01 mysqld
wangjl    6111  0.0  0.2 1244588 77036 ?       Ssl  Oct08   0:05 /home/wangjl/anaconda3/bin/python -m ipykernel_launcher -f /run/user/1001/jupyter/kernel-xx2.json
root     20357  0.0  0.1 166984 48560 ?        S<s  Sep12   1:37 /lib/systemd/systemd-journald
wangjl   22934  0.0  0.1 644688 33040 ?        Ssl  Oct04   0:14 /home/wangjl/anaconda3/bin/python -m ipykernel_launcher -f /run/user/1001/jupyter/kernel-xx3.json





========================================
|-- 硬盘: df
----------------------------------------
1.硬盘查看
(0) 查看硬件列表
$ sudo fdisk -l


(1) 查看磁盘使用情况
$ df -lh
Filesystem      Size  Used Avail Use% Mounted on
udev             16G     0   16G   0% /dev
tmpfs           3.2G  1.8M  3.2G   1% /run
/dev/sda2       234G  214G  8.3G  97% /
/dev/sdb        3.6T  2.5T  990G  72% /data

$ df -lh | grep -v loop | grep -v tmpfs
Filesystem            Size  Used Avail Use% Mounted on
udev                   63G     0   63G   0% /dev
/dev/sdb3              34G   11G   22G  32% /
/dev/mapper/os1-var    19G  1.6G   16G  10% /data2
/dev/mapper/os1-root   46G   33G   11G  75% /data
/dev/sdb1              46G   33G   11G  77% /home
/dev/sdc3              94G   19M   89G   1% /tmp
/dev/sdb2              19G  2.7G   16G  15% /var
/dev/sdc5             9.1T  245G  8.4T   3% /rawdata
/dev/sdc4              16T  2.9T   13T  19% /results


(2) -T 参数查看文件类型
$ df -lhT | grep -v loop | grep -v tmpfs
Filesystem           Type      Size  Used Avail Use% Mounted on
/dev/sdb3            ext4       34G   11G   22G  32% /
/dev/mapper/os1-var  ext4       19G  1.6G   16G  10% /data2
/dev/mapper/os1-root ext4       46G   33G   11G  75% /data
/dev/sdb1            ext4       46G   33G   11G  77% /home
/dev/sdc3            ext4       94G   19M   89G   1% /tmp
/dev/sdb2            ext4       19G  2.7G   16G  15% /var
/dev/sdc5            ext4      9.1T  245G  8.4T   3% /rawdata
/dev/sdc4            ext4       16T  2.9T   13T  19% /results






2. 磁盘挂载情况
看最后一列

$ lsblk | grep -v loop
NAME         MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT
sda            8:0    0   100G  0 disk 
└─sda1         8:1    0   100G  0 part 
  ├─os1-root 253:0    0  46.6G  0 lvm  /data
  └─os1-var  253:1    0  18.6G  0 lvm  /data2
sdb            8:16   0   100G  0 disk 
├─sdb1         8:17   0  46.6G  0 part /home
├─sdb2         8:18   0  19.1G  0 part /var
└─sdb3         8:19   0  34.4G  0 part /
sdc            8:32   0  25.3T  0 disk 
├─sdc1         8:33   0     1M  0 part 
├─sdc2         8:34   0 122.1G  0 part [SWAP]
├─sdc3         8:35   0  95.4G  0 part /tmp
├─sdc4         8:36   0    16T  0 part /results
└─sdc5         8:37   0   9.1T  0 part /rawdata










========================================
基于 mysql / Flask / Chart.js 的系统资源监控系统：CPU和内存
----------------------------------------
之前的老版本在 系统安装与维护_磁盘 中。


1. 设置docker 版的 mysql [at J1]
(1) 下载镜像
来自Y station，可能是mysql5.7
@Y$ rsync -avl data/web/docs/DockerImages/dawneve__mysql_latest.image.tar.gz wangjl@gate1.picb.ac.cn:/picb/jinlab/wangjl/
@J1$ mv /picb/jinlab/wangjl/dawneve__mysql_latest.image.tar.gz /home/wangjl/data4/web/docs/images/

(2)导入镜像
$ gunzip -c /home/wangjl/data4/web/docs/images/dawneve__mysql_latest.image.tar.gz | docker load

$ docker images
REPOSITORY      TAG       IMAGE ID       CREATED       SIZE
dawneve/mysql   latest    9e64176cd8a2   7 years ago   407MB

(3) 启动镜像

检测可用端口
	$ sudo iptables -I INPUT -p tcp --dport 8070 -j ACCEPT
	$ python3 -m http.server 8070
	只有8***的端口号是可以暴漏的！

启动镜像:
$ docker run -e MYSQL_DATABASE=monitoring -e MYSQL_ROOT_PASSWORD=123456 \
-p 8070:3306 -v /datapool/wangjl/dockerFile:/var/lib/mysql --name mysql \
-d dawneve/mysql:latest

参数解释:
	--name mysql-container：指定容器的名称。
	-e MYSQL_ROOT_PASSWORD=your_password：设置 root 用户的密码（请替换为实际密码）。
	-d：以后台模式运行容器。
	-p 8070:3306：将容器的 3306 端口映射到主机的 3306 端口。


(4) 连接检测
需要安装mysql客户端，用于登录。

$ sudo yum install mariadb #其他几个服务器没有安装成功: H3, J3, 无docker 登录不上(H2, J2)
	H 1-old 2noRoot-Try 3-wrong-OK
	J 1-OK 2noRoot-Try 3-wrong-OK  #我正好选中唯一可以的H1，真是幸运！

@J1$ mysql -h localhost -P 8070 -u root -p
Enter password: 
ERROR 2002 (HY000): Can't connect to local MySQL server through socket '/var/lib/mysql/mysql.sock' (2)

$ mysql -h 127.0.0.1 -P 8070 -u root -p
> 换成IP竟然可以了!?
> use monitoring;


win 上:
> mysql -h 10.10.117.156 -P 8070 -u root -p
> 也连接上了。

> quit; 
退出


(5) 新建数据表
USE monitoring;

CREATE TABLE system_usage (
    id INT AUTO_INCREMENT PRIMARY KEY,
    timestamp DATETIME NOT NULL,
    cpu_usage FLOAT NOT NULL,
    memory_usage FLOAT NOT NULL
);

MySQL [monitoring]> show tables;
+----------- -----------+
| Tables_in_monitoring |
+----------- -----------+
| system_usage         |
+----------- -----------+
1 row in set (0.00 sec)

查看监控数据：
	USE monitoring;
	SELECT * FROM system_usage;

删除过去7天的日志：
	select * FROM system_usage WHERE timestamp < NOW() - INTERVAL 7 DAY;
	select * FROM system_usage WHERE timestamp < NOW() - INTERVAL 1 HOUR;
	select * FROM system_usage WHERE timestamp < NOW() - INTERVAL 10 MINUTE;

	DELETE FROM system_usage WHERE timestamp < NOW() - INTERVAL 1 HOUR; #过时一小时

MySQL [monitoring]> SELECT      timestamp,      NOW() - INTERVAL 1 MINUTE AS one_minute_ago  FROM      system_usage;
+---------------------+---------------------+
| timestamp           | one_minute_ago      |
+---------------------+---------------------+
| 2024-09-14 15:51:05 | 2024-09-14 08:13:28 |
| 2024-09-14 15:56:56 | 2024-09-14 08:13:28 |
+---------------------+---------------------+


(6) 新增host name 和 IP
ALTER TABLE system_usage
ADD COLUMN host_ip VARCHAR(45),
ADD COLUMN hostname VARCHAR(100);






2. 输入：记录状态
(1) 写脚本
@J1$ cd /datapool/wangjl/web/docs/code/system/
$ cat monitor_CPU_RAM.sh
#!/bin/bash

# MySQL 配置
MYSQL_HOST="10.10.117.156"
MYSQL_PORT="8070"
MYSQL_USER="root"
MYSQL_PASSWORD="123456"
MYSQL_DATABASE="monitoring"

# 获取当前时间
TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")

# 获取 CPU 使用情况，1-100
CPU_USAGE=$(top -bn1 | grep "Cpu(s)" | sed "s/.*, *\([0-9.]*\)%* id.*/\1/" | awk '{print 100 - $1}')

# 获取内存使用情况，1-100
MEMORY_USAGE=$(free | grep Mem | awk '{print $3/$2 * 100.0}')

# 获取主机名
HOST_NAME=$(hostname)
HOST_IP=$(hostname -I | awk '{print $1}')


# 将结果写入 MySQL 数据库
mysql -h"$MYSQL_HOST" -u"$MYSQL_USER" -P"$MYSQL_PORT" -p"$MYSQL_PASSWORD" "$MYSQL_DATABASE" -e "INSERT INTO system_usage (timestamp, cpu_usage, memory_usage, hostname, host_ip) VALUES ('$TIMESTAMP', $CPU_USAGE, $MEMORY_USAGE, '$HOST_NAME', '$HOST_IP');"


(2)测试脚本
$ bash monitor_CPU_RAM.sh

登录数据库查看：
MySQL [monitoring]> SELECT * FROM system_usage;
+----+------------ ---------+-----------+--------------+
| id | timestamp           | cpu_usage | memory_usage |
+----+------------ ---------+-----------+--------------+
|  1 | 2024-09-14 15:51:05 |         1 |      17.9996 |
|  2 | 2024-09-14 15:56:56 |       1.3 |      16.6534 |
+----+------------ ---------+-----------+--------------+


测试：
	选择过时1分钟的数据，没有输出：
	select * FROM system_usage WHERE timestamp < NOW() - INTERVAL 1 MINUTE;

	同时输出不等号左右的时间，发现差了好几个小时，可能是市区不同？
	MySQL [monitoring]> SELECT      timestamp,      NOW() - INTERVAL 1 MINUTE AS one_minute_ago  FROM      system_usage;
	+---------------------+---------------------+
	| timestamp           | one_minute_ago      |
	+---------------------+---------------------+
	| 2024-09-14 15:51:05 | 2024-09-14 08:13:28 |
	| 2024-09-14 15:56:56 | 2024-09-14 08:13:28 |
	+---------------------+---------------------+


	> SET time_zone = 'Asia/Shanghai';  -- 替换为你需要的时区
	再执行上述sql，输出时间接近了。

MySQL [monitoring]> SELECT @@global.time_zone, @@session.time_zone;
+--------------------+---------------------+
| @@global.time_zone | @@session.time_zone |
+--------------------+---------------------+
| SYSTEM             | Asia/Shanghai       |
+--------------------+---------------------+

	> select * FROM system_usage WHERE timestamp < NOW() - INTERVAL 1 MINUTE;
	设置不同的时间，可以显示不同的条目了。



(3) 设置定时任务
设置每6分钟执行一次，一小时共10次采样。
$ crontab -e
*/6 * * * * bash /datapool/wangjl/web/docs/code/system/monitor_CPU_RAM.sh

检查定时任务：$ crontab -l

2) 在J3也记录上
3) H2, J2 没权限。只要有mysql即可，让管理安装。

J2 的crontab效果一直不好，尝试使用shell:
	In tmux$ watch -n 360 /datapool/wangjl/web/docs/code/system/monitor_CPU_RAM.sh






3.可视化输出

(1) 后台给出json数据
$ cd /datapool/wangjl/web/docs/code/system
$ cat flask_app.py
from flask import Flask, jsonify, request
import pymysql
import datetime

app = Flask(__name__)

# MySQL 配置
MYSQL_HOST = '10.10.117.156'  # MySQL 主机
MYSQL_PORT=8070
MYSQL_USER = 'root'  # 替换为你的 MySQL 用户名
MYSQL_PASSWORD = '123456'  # 替换为你的 MySQL 密码
MYSQL_DATABASE = 'monitoring'  # 替换为你的数据库名称

@app.route('/')
def hello():
    return "For json data, pls visit: http://10.10.117.156:8071/api/usage_data"

def get_host_ip():
    """获取主机的 IP 地址"""
    hostname = socket.gethostname() #'jinlab-svr1.icb.ac.cn'
    host_ip=socket.gethostbyname(hostname) #'10.10.117.156'
    return [hostname, host_ip]

@app.route('/api/usage_data', methods=['GET'])
def get_latest_data():
    # 获取查询参数
    start_time = request.args.get('start')
    end_time = request.args.get('end')
    host_ip = request.args.get('ip', "")

    if start_time and end_time:
        # 使用用户提供的时间段
        query_start = datetime.datetime.strptime(start_time, '%Y-%m-%d %H:%M:%S')
        query_end = datetime.datetime.strptime(end_time, '%Y-%m-%d %H:%M:%S')
    else:
        # 默认使用过去3小时
        end_time = datetime.datetime.now()
        start_time = end_time - datetime.timedelta(hours=3)
        query_start = start_time
        query_end = end_time

    # 连接到 MySQL 数据库
    db = pymysql.connect(host=MYSQL_HOST, port=MYSQL_PORT, user=MYSQL_USER, passwd=MYSQL_PASSWORD, db=MYSQL_DATABASE)
    cursor = db.cursor()

    # 查询指定时间段的数据
    #query = "SELECT timestamp, cpu_usage, memory_usage FROM system_usage WHERE timestamp BETWEEN %s AND %s"
    # 查询指定时间段的数据，并添加整数形式的时间戳
    query = """
    SELECT 
        timestamp, 
        UNIX_TIMESTAMP(timestamp) AS unix_timestamp, 
        cpu_usage, 
        memory_usage,
        host_ip,
        hostname
    FROM 
        system_usage 
    WHERE 
        (timestamp BETWEEN %s AND %s)
    """

    # 如果提供了 IP 参数，添加到查询条件中
    if host_ip:
        query += " AND host_ip = %s ORDER BY timestamp;"
        cursor.execute(query, (query_start, query_end, host_ip))
    else:
        query += " ORDER BY timestamp;"
        cursor.execute(query, (query_start, query_end))


    # 获取结果
    results = cursor.fetchall()
    cursor.close()
    db.close()

    # 格式化为字典
    data = []
    for row in results:
        data.append({
            'timestamp': row[0].strftime('%Y-%m-%d %H:%M:%S'),
            'unix_timestamp': row[1],  # 整数形式的时间戳
            'cpu_usage': row[2],
            'memory_usage': row[3],
            'host_ip': row[4],
            'hostname': row[5]
        })

    return jsonify(data)

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=8071)




缺少的依赖包：
	$ pip3 install MySQLdb #报错
	$ pip3 install Flask-MySQLdb #还是报错

	$ sudo yum install mysql-devel #python3-devel
	$ pip3 install mysqlclient  #mysqlclient-2.2.4.tar.gz

	换一个mysql包：
	$ pip3 install pymysql

运行：
	$ python3 flask_app.py

开端口：
	$ sudo iptables -I INPUT -p tcp --dport 8071 -j ACCEPT

访问: http://10.10.117.156:8071/latest_data

怎么设置时间范围参数？
	http://10.10.117.156:8071/api/usage_data?start=2024-09-14%2016:00:00&end=2024-09-14%2017:00:00

支持设置IP
	http://10.10.117.156:8071/api/usage_data?start=2024-09-14%2017:00:00&end=2024-09-14%2018:00:00&ip=10.10.117.156




(2) 前台绘制动态折线图
https://www.chartjs.org/

可用版本见：https://gitee.com/dawnEve/system_moniter











========================================
远程登录、远程桌面服务
----------------------------------------


========================================
|-- win10远程桌面连接Ubuntu18图形界面（xrdp方法）
----------------------------------------
1.连接本局域网内的可以
物理机是ubuntu1804工作站。

查看是否安装有xrdp( remote desktop protocol)
$ ps -aux | grep xrdp
root      1162  0.0  0.0  41652     4 ?        S    Jan13   0:00 /usr/sbin/xrdp-sesman
xrdp      1201  0.0  0.0  25256     4 ?        S    Jan13   0:00 /usr/sbin/xrdp

查看使用的端口号
$ sudo netstat -lnpt | grep xrdp
tcp6       0      0 ::1:3350                :::*                    LISTEN      1162/xrdp-sesman    
tcp6       0      0 :::3389                 :::*                    LISTEN      1201/xrdp
第四列IP后面就是端口号，一个是后台服务3350，一个是供前台连接的端口3389。

在win10开始菜单搜索 远程桌面连接，输入ip:port，一路确定，输入ubuntu用户名和密码，即可登录gnome桌面。

(2) 如果分辨率感觉太大，则可以调节
在win10开始菜单搜索 远程桌面连接， 
点击左下角 显示选项，选择顶部选项卡 显示，滑动条选择一个合适的分辨率，
回到选项卡 常规，在计算机 一栏中输入 IP:port 比如 y.biomooc.com:7000
点击底部 连接 按钮。
输入 ubuntu 用户名和密码，即可登录genome桌面。




2. 连接远方vps失败

重试了一次，先安装gnome
sudo apt-get install ubuntu-gnome-desktop
选择lightDM，回车。

sudo apt install xrdp 
sudo systemctl enable xrdp 

sudo reboot #重启不要登录了。使用win10 远程登录。
填写IP和端口号即可。





3. 可能真的是学校封锁了3389端口。
大局域网内直接连接3389也是连不上，换个端口就正常了。

ubuntu1804下:
安装xrdp，见上一步。

$ sudo vim /etc/xrdp/xrdp.ini 
修改 port=3389为
port=3388

然后重启xrdp就可以了
$ sudo service xrdp restart

查ip
$ ifconfig

使用win10的远程桌面，登录
10.20.12.207:3388
一路确定，输入用户名和密码，即可登录ubuntu的桌面了。





ref:
https://zhuanlan.zhihu.com/p/54239071







========================================
|-- CentOS7 怎么安装 gnome，并远程登录桌面
----------------------------------------

$ uname -a
Linux bio_svr1 3.10.0-1127.el7.x86_64 #1 SMP Tue Mar 31 23:36:51 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux


1. 今天在 CentOS终端执行 $ w 命令看到
 20:26:12 up  4:45, 22 users,  load average: 10.03, 12.98, 16.48
USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
caow     :0       :0               15:43   ?xdm?  36:49   0.70s /usr/libexec/gnome-session-binary --session gnome-classic

貌似有人再使用 gnome ，是图形界面的名字。

(1) 继续查，发现只有这一个用户再用，而且竟然还有日历
$ ps -aux | grep -i gnome
caow       6989  0.0  0.0 317436  3756 ?        Sl   15:43   0:00 /usr/bin/gnome-keyring-daemon --daemonize --login
caow       7032  0.0  0.0 605496 12504 ?        Ssl  15:43   0:00 /usr/libexec/gnome-session-binary --session gnome-classic
caow       7185  0.0  0.0  72472   776 ?        Ss   15:43   0:00 /usr/bin/ssh-agent /bin/sh -c exec -l /bin/bash -c "env GNOME_SHELL_SESSION_MODE=classic gnome-session --sessiongnome-classic"
caow       7283  0.0  0.0 233124  3944 ?        Sl   15:43   0:00 /usr/libexec/at-spi2-registryd --use-gnome-session
caow       7312  0.2  0.0 18997136 220060 ?     Sl   15:43   0:36 /usr/bin/gnome-shell
caow       7576  0.0  0.0 1102512 39048 ?       Sl   15:43   0:00 /usr/libexec/gnome-shell-calendar-server
caow       7758  0.0  0.0 1240676 47072 ?       Sl   15:43   0:03 /usr/bin/gnome-software --gapplication-service
caow       7930  0.0  0.0 1652664 43440 ?       Sl   15:43   0:00 /usr/libexec/evolution-calendar-factory-subprocess --factory all --bus-name org.gnome.evolution.dataserver.Subprocess.Backend.Calendarx7878x2 --own-path /org/gnome/evolution/dataserver/Subprocess/Backend/Calendar/7878/2
caow       7978  0.0  0.0 1503280 44904 ?       Sl   15:43   0:00 /usr/libexec/evolution-addressbook-factory-subprocess --factory all --bus-name org.gnome.evolution.dataserver.Subprocess.Backend.AddressBookx7941x2 --own-path /org/gnome/evolution/dataserver/Subprocess/Backend/AddressBook/7941/2
wangjl    43616  0.0  0.0 112816   992 pts/16   S+   20:16   0:00 grep --color=auto -i gnome


没有使用 rdp 和 vnc。
$ ps -aux | grep -i rdp
$ ps -aux | grep -i vnc

$ ps -aux | grep -i x11
caow       7557  0.0  0.0 432012 18448 ?        Sl   15:43   0:00 /usr/libexec/ibus-x11 --kill-daemon


(2) 查看系统帮助 
$ man gnome-session
NAME gnome-session - Start the GNOME desktop environment




$ /usr/libexec/gnome-session-binary --help
Usage:
  gnome-session-binary [OPTION…]  — the GNOME session manager

Help Options:
  -h, --help                        Show help options

Application Options:
  -a, --autostart=AUTOSTART_DIR     Override standard autostart directories
  --session=SESSION_NAME            Session to use
  --debug                           Enable debugging code
  -f, --failsafe                    Do not load user-specified applications
  --version                         Version of this application
  --whale                           Show the fail whale dialog for testing
  --disable-acceleration-check      Disable hardware acceleration check







2. 网上搜了一下（跳过）

(1) 端口号
$ netstat -nltp | grep 6010
(Not all processes could be identified, non-owned process info
 will not be shown, you would have to be root to see it all.)
tcp        0      0 127.0.0.1:6010          0.0.0.0:*               LISTEN      -                   
tcp6       0      0 ::1:6010                :::*                    LISTEN      -


(2) 怎么启动终止呢？

https://serverfault.com/questions/827259/how-to-run-gnome-terminal-on-remote-centos-7-machine

$ /usr/libexec/gnome-session-binary --session gnome-classic 
Terminated

$ ssh -Y x.biomooc.com 'gnome-terminal; echo Press enter to exit; read'
wangjl@x.biomooc.com's password: 
# Failed to parse arguments: Cannot open display: 
Press enter to exit


$ echo "exec gnome-session" >> ~/.xinitrc
$ sudo xinit -- :1  # 也是自动结束

$ startx
报错: xauth:  file /home/wangjl/.serverauth.55953 does not exist
有人说是权限不够。

$ sudo startx

X.Org X Server 1.20.4
X Protocol Version 11, Revision 0
Build Operating System:  3.10.0-957.1.3.el7.x86_64
...
(==) Log file: "/var/log/Xorg.1.log", Time: Wed Nov 17 20:49:35 2021
(==) Using config directory: "/etc/X11/xorg.conf.d"
(==) Using system config directory "/usr/share/X11/xorg.conf.d"

当事人说，是到机房调试时候用的，那就算了。

$ ssh -X user@machine #会终止 Terminated






3. 再次尝试
(1)安装
$ sudo yum -y install xrdp

开启服务
$ sudo systemctl start xrdp

再安装一个组件
$ sudo yum install xorgxrdp

检查服务进程
$ ps aux | grep -i xrdp
root       9676  0.1  0.0 163220  2428 ?        Ss   16:32   0:00 /usr/sbin/xrdp-sesman --nodaemon
root       9678  0.0  0.0 152560  2852 ?        Ss   16:32   0:00 /usr/sbin/xrdp --nodaemon

检查服务端口
$ sudo netstat -lnpt | grep xrdp
tcp        0      0 0.0.0.0:3389            0.0.0.0:*               LISTEN      9678/xrdp           
tcp        0      0 127.0.0.1:3350          0.0.0.0:*               LISTEN      9676/xrdp-sesman

(2)可能上级屏蔽了 3389 端口。修改为 3388
$ sudo vim /etc/xrdp/xrdp.ini 
修改 port=3389为
port=3388

然后重启xrdp就可以了
$ sudo service xrdp restart

(3) 配置SELinux，否则可能无法启动 xrdp 服务，或者启动出错
$ which xrdp
/usr/sbin/xrdp
$ which xrdp-sesman
/usr/sbin/xrdp-sesman

$ chcon -t bin_t /usr/sbin/xrdp
$ chcon -t bin_t /usr/sbin/xrdp-sesman

$ sudo service xrdp restart


(4) 防火墙允许端口通过

$ sudo service firewalld status #关了
$ sudo service iptables stop # 关掉
$ sudo service iptables status #

$ sudo systemctl status iptables

iptables 放行 3388 端口命令：
$ sudo iptables -I INPUT -p tcp --dport 3388 -m state --state NEW -j ACCEPT
$ sudo iptables -L


(5) 没办法，安装 vnc 吧 (没用)
$ sudo yum install tigervnc tigervnc-server
$ ps -aux | grep -i vnc


(6) 远程登录报错日志 
$ less ~/.xsession-errors

https://www.jianshu.com/p/9bdf2db1107a
解决方案: 把 ~/.bashrc中的 conda 注释掉就可以登录了！！！

$ vim ~/.bashrc  #大不了远程桌面连上后再打开。


使用win10的远程桌面，登录
172.18.5.193:3388
一路确定，输入用户名和密码，即可登录ubuntu的桌面了。






========================================
|-- Ubuntu上安装VNC server //todo 未测试通过
----------------------------------------
软件：
https://wiki.debian.org/VNCviewer
http://packages.ubuntu.com/precise/gvncviewer

配置：
http://blog.itpub.net/519536/viewspace-607549/

1.安装 
$apt-get install vnc4server

2.启动
2.启动VNC服务
使用vncserver命令启动VNC服务，命令格式为“vncserver :桌面号”，其中“桌面号”用“数字”的方式表示，每个用户连个需要占用1个桌面
启动编号为1的桌面示例如下
$ vncserver

You will require a password to access your desktops.
Password:
Verify:
xauth:  file /home/wangjl/.Xauthority does not exist

New 'Bioinf1:2 (wangjl)' desktop is Bioinf1:2

Creating default startup script /home/wangjl/.vnc/xstartup
Starting applications specified in /home/wangjl/.vnc/xstartup
Log file is /home/wangjl/.vnc/Bioinf1:2.log 

以上命令执行的过程中，因为是第一次执行，需要输入密码，这个密码被加密保存在用户主目录下的.vnc子目录（/root/.vnc/passwd）中；同时在用户主目录下的.vnc子目录中为用户自动建立xstartup配置文件（/root/.vnc/xstartup），在每次启动VND服务时，都会读取该文件中的配置信息。
BTW：/root/.vnc/目录下还有一个“testdb:1.pid”文件，这个文件记录着启动VNC后对应后天操作系统的进程号，用于停止VNC服务时准确定位进程号。



3.VNC服务使用的端口号与桌面号的关系
VNC服务使用的端口号与桌面号相关，VNC使用TCP端口从5900开始，对应关系如下
桌面号为“1”  ---- 端口号为5901
桌面号为“2”  ---- 端口号为5902
桌面号为“3”  ---- 端口号为5903
……
基于Java的VNC客户程序Web服务TCP端口从5800开始，也是与桌面号相关，对应关系如下
桌面号为“1”  ---- 端口号为5801
桌面号为“2”  ---- 端口号为5802
桌面号为“3”  ---- 端口号为5803
……
基于上面的介绍，如果Linux开启了防火墙功能，就需要手工开启相应的端口，以开启桌面号为“1”相应的端口为例，命令如下
[root@testdb ~]# iptables -I INPUT -p tcp --dport 5901 -j ACCEPT
[root@testdb ~]# iptables -I INPUT -p tcp --dport 5801 -j ACCEPT



重新启动vncserver服务的方法：
[root@testdb ~]# vncserver -kill :1
[root@testdb ~]# vncserver :1


7.修改VNC访问的密码
使用命令vncpasswd对不同用户的VNC的密码进行修改，一定要注意，如果配置了不同用户的VNC需要分别到各自用户中进行修改，例如在我的这个实验中，root用户和oracle用户需要分别修改，修改过程如下：
[root@testdb ~]# vncpasswd
Password:
Verify:
[root@testdb ~]#





8.最后，需要配置一下防火墙，允许VNC客户端连接VNC server。VNC server监听的端口从5900开始，display :1的监听5901，display :2监听5902，以此类推。CentOs的防火墙缺省是不允许连接这些端口的，所以需要使用下面的步骤打开防火墙（需要root权限)：
　　vi /etc/sysconfig/iptables
　　找到下面的语句：
　　-A RH-Firewall-1-INPUT -j REJECT --reject-with icmp-host-prohibited
　　在此行之前，加上下面的内容：
　　-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 5900:5903 -j ACCEPT
　　这句话的含义是，允许其它机器访问本机的5900到5903端口，这样，display:1, display:2, display:3的用户就可以连接到本机。
　　然后使用root身份重新启动防火墙：
　　/sbin/service iptables restart





202.196.120.157:1




========================================
|-- tightVNC: win连接Ubuntu18桌面 //toto
----------------------------------------
https://www.tightvnc.com/







========================================
共享文件夹 samba 服务: win 和 linux 共享文件 (可以当 nas 使用)
----------------------------------------
1. 介绍
(1) 使用场景：
- samba 用于 win 和 linux 之间文件共享。
- 以及两台 linux 之间文件共享。 当然，linux之间文件共享更好的解决方案是 nfs。

(2) 工作模式: C/S 模式。
当然你要在linux(服务端)与windows(客户端)之间互相能ping 通。

(3) 官网
https://www.samba.org/
Samba is the standard Windows interoperability suite of programs for Linux and Unix.
Samba是用于Linux和Unix的标准Windows互操作性程序套件。






2. linux 服务端的操作
服务端是虚拟机 vm: Ubuntu 20.04.3 LTS (GNU/Linux 5.11.0-34-generic x86_64)

(1) 创建目录，作为共享目录
$ mkdir ~/usb3

或者挂载外部硬件
$ mkdir /mnt/usb 
$ mount /dev/sda1 /mnt/usb


(2)安装 samba 服务
$ sudo apt install samba smbclient #Ubuntu
$ samba --version
Version 4.11.6-Ubuntu
$ apt list | grep samba #查看相关包


## for CentOS
$ sudo yum install samba samba-common samba-client cifs-utils #CentOS
$ samba-regedit --version
Version 4.10.16
## 查询安装过的包
$ rpm -qa | grep samba
samba-client-4.10.16-15.el7_9.x86_64
samba-common-libs-4.10.16-15.el7_9.x86_64
samba-libs-4.10.16-15.el7_9.x86_64
samba-common-tools-4.10.16-15.el7_9.x86_64
samba-4.10.16-15.el7_9.x86_64
samba-client-libs-4.10.16-15.el7_9.x86_64
samba-common-4.10.16-15.el7_9.noarch




(3) 添加本地用户为samba用户名

tips: 必须是本地用户名，同时必须添加为 samba用户名。

$ sudo smbpasswd -a wang
输入2次密码。
重启。
$ sudo smbd restart

查看用户
$ sudo pdbedit -L
wang:1000:Wang Junliang

删除用户
smbpasswd -x   用户名



(4) 修改配置文件，指定要共享的文件夹
$ sudo vim /etc/samba/smb.conf 

默认有一个全局变量
[global]
	map to guest = bad user #增加这一行，则允许匿名访问，适合内部访问

最后新增一块，要去掉每行的注释
[Public]
	comment=Public Storage
	path=/home/wang/usb3
	read only=no
	create mask=0755
	directory mask=0755
	force create mode = 0644
	force directory mode = 0755
	guest ok=yes
	browseable=yes
	writable=yes
	available = yes
	public = yes
	#有人说必须加如下几行，否则不可写
	force user = wang
	valid users = wang
	write list = wang

注释: 
comment=Public Storage   # 浏览时显示的名字


保存后检查参数
$ testparm

重启samba服务
$ sudo systemctl restart smbd.service # for Ubuntu

$ sudo systemctl restart smb # for centOS
或
$ sudo service smbd status
$ sudo service nmbd status

$ sudo systemctl enable smbd



(5) 授权目录权限
$ sudo chmod -R 777 /home/wang/usb3/
drwxrwxrwx 2 wang wang 4.0K Sep 27 15:05 usb3


(6) 查询IP
$ ifconfig  #192.168.2.156







3. 客户端机器上 查看文件 

(1) 在客户端测试 sudo apt-get install smbclient 

$ smbclient -L //192.168.2.156     ##没有密码直接回车 匿名登陆

$ smbclient -L //192.168.2.156 -U wang
Enter WORKGROUP\wang's password: 

	Sharename       Type      Comment
	---------       ----      -------
	print$          Disk      Printer Drivers
	Public          Disk      Public Storage
	IPC$            IPC       IPC Service (wangVM server (Samba, Ubuntu))
SMB1 disabled -- no workgroup available


==>报错：session setup failed: NT_STATUS_LOGON_FAILURE
## 本地测试没问题
$ smbclient -L //127.0.0.1/Public -U jimmy
换另一台主机
$ smbclient -L //192.168.2.156/Public -U jimmy
发现：小键盘莫名其妙的不识别！使用顶部数字键即可。



(2) 临时查看文件
$ smbclient //192.168.2.156/Public -U wang
Enter WORKGROUP\wang's password: 
Try "help" to get a list of possible commands.
smb: \> ls
  .                                   D        0  Mon Sep 27 15:08:51 2021
  ..                                  D        0  Mon Sep 27 15:08:51 2021
  a.txt                               N       10  Mon Sep 27 15:08:37 2021
  b                                   N       10  Mon Sep 27 15:08:51 2021

		9736500 blocks of size 1024. 1728328 blocks available
smb: \> exit




## for centOS: SELinux 作怪
$ sudo setsebool -P samba_export_all_ro on
$ sudo systemctl restart smb.service




(3) 在windows访问客户端挂载访问

win+R打开运行窗口，输入两个反斜线加上samba服务器的地址 \\192.168.2.156\Public
没让输入用户名和密码，部分可写：可以新建并修改，但原来的文件是只读的。 //todo

打开 我的电脑，顶部 添加一个网络位置
输入  \\192.168.2.156\Public
名字 随便写，比如 sambaOnVM

然后这个网络位置就固定到我的电脑了。

在windows下创建文件，到Linux下看看吧！
在Linux的共享目录下创建文件，在windows下看看吧！




(4) Linux 客户端挂载，像nas一样好用。
1) 安装 cifs 
$ sudo apt install cifs-utils
$ ls -lth /sbin/mount.*

2) 挂载
$ sudo mount -v -t cifs -o username=wang,password=123456,uid=1001,gid=1001,rw //192.168.2.156/Public ~/LocalDIR
mount.cifs kernel mount options: ip=192.168.2.156,unc=\\192.168.2.156\Public,uid=1001,gid=1001,user=wang,pass=********

警告：1001替换成你在Ubuntu上的数字UID和GID，否则挂载后的共享文件夹所有者是root，就是只读！
　　可用下面命令找出你的数字uid: $ id <用户名>

## for centOS7 //没测试过
$ sudo mount.cifs //172.18.5.193/Public ~/LocalDIR -o user=wangjl,sec=ntlmssp 


3) 读写测试
$ ls -lth LocalDIR
total 16K
-rwxr-xr-x 1 wangjl wangjl   5 Oct  8 16:04 a

$ touch LocalDIR/a2
$ ls -lth LocalDIR
total 16K
-rwxr-xr-x 1 wangjl wangjl   0 Oct  8 21:31 a2


4) 客户端永久挂载:
$ sudo vim /etc/fstab
//192.168.2.156/Public /home/wangjl/LocalDIR cifs username=wang,password=123456,uid=1001,gid=1001 0 0 
挂载生效
$ sudo mount -a

5) 卸载
$ sudo umount local-mount-point






(5) 排错：一个客户端不能登陆多个账号，同时最多一个登录。
$ mount | grep Public
//172.18.5.193/Public on /home/wangjl/LocalDIR type cifs (rw,relatime,vers=default,cache=strict,username=wangjl,domain=,uid=0,noforceuid,gid=0,noforcegid,addr=172.18.5.193,file_mode=0755,dir_mode=0755,soft,nounix,serverino,mapposix,rsize=1048576,wsize=1048576,echo_interval=60,actimeo=1)

卸载
$ sudo umount /home/wangjl/LocalDIR







(6) 测试 在 centOS7 做服务器，Ubuntu做客户端

$ smbclient -L //x.biomooc.com -U wangjl
Enter WORKGROUP\wangjl's password: 

	Sharename       Type      Comment
	---------       ----      -------
	print$          Disk      Printer Drivers
	Public          Disk      Public Storage
	IPC$            IPC       IPC Service (Samba 4.10.16)
	wangjl          Disk      Home Directories
SMB1 disabled -- no workgroup available


查看配置文件，这个Yes和No是首字母大写。
[Public]
	comment=Public Storage
	path=/home/wangjl/usb3
	read only=No
	create mask=0777
	directory mask=0777
	guest ok=Yes
	browseable=Yes
	writable=Yes
	# 
	force user = wangjl
	valid users = wangjl
	write list = wangjl

$ sudo service smb restart


客户端
$ smbclient //x.biomooc.com/Public -U wangjl
Enter WORKGROUP\wangjl's password: 
Try "help" to get a list of possible commands.
smb: \> mkdir wjl
NT_STATUS_ACCESS_DENIED making remote directory \wjl
还是只读，不能写。


服务端执行 https://blog.csdn.net/m0_37582216/article/details/106960726
$ chcon -R -t samba_share_t ~/usb3/
## chcon - change file SELinux security context
还是不理解 SELinux 啥作用？ //todo


客户端挂载
$ sudo mount -v -t cifs -o username=wangjl,password=123456,uid=1001,gid=1001,rw //172.18.5.193/Public ~/v193

$ cd ~/v193
$ touch b
可写。









2. 端口
(1) samba 端口号是多少？ 原来是137,138, 现在是139,445
$ vim /etc/services

netbios-ns      137/tcp     # NETBIOS Name Service
netbios-ns      137/udp
netbios-dgm     138/tcp     # NETBIOS Datagram Service
netbios-dgm     138/udp
netbios-ssn     139/tcp     # NETBIOS session service
netbios-ssn     139/udp

microsoft-ds    445/tcp
microsoft-ds    445/udp

$ sudo netstat -anop | grep smb
tcp        0      0 0.0.0.0:139             0.0.0.0:*               LISTEN      95797/smbd           off (0.00/0/0)
tcp        0      0 0.0.0.0:445             0.0.0.0:*               LISTEN      95797/smbd           off (0.00/0/0)
tcp6       0      0 :::139                  :::*                    LISTEN      95797/smbd           off (0.00/0/0)
tcp6       0      0 :::445                  :::*                    LISTEN      95797/smbd           off (0.00/0/0)


(2) 打开防火墙一个出口
我们看到使用了tcp的139和445端口，udp的137和138端口。在防火墙中允许通行：
在后来的测试中，仅允许tcp协议的139端口通过也能访问到共享。

$ sudo iptables -A INPUT -p tcp --dport 139 -j ACCEPT









3. 设置实例

(1) 服务端 Ubuntu 1.5

$ vim /etc/samba/smb.conf
# 末尾添加
[share1]
comment = share folder
browseable = yes
path = /results
create mask = 0700
directory mask = 0700
valid users = zxsys
force user = zxsys
force group = zxsys
public = yes
available = yes
writable = yes

[share]
comment = share folder
browseable = yes
path = /rawdata/illumina
create mask = 0700
directory mask = 0700
valid users = zxsys
force user = zxsys
force group = ionadmin
public = yes
available = yes
writable = yes


(2) 客户端 Ubuntu 1.3

$ cat /etc/fstab 
# 末尾添加一行
//192.168.1.5/share	/home/zxsys/mnt	cifs	defaults,uid=1000,gid=1000,username=zxsys,password=123456	0	0

生效
$ sudo mount -a

查询服务:
$ service smbd status
● smbd.service - Samba SMB Daemon
   Loaded: loaded (/lib/systemd/system/smbd.service; enabled; vendor preset: enabled)
   Active: active (running) since Fri 2023-07-07 11:59:02 CST; 1 months 18 days ago


查询挂载情况
$ df -lTh
Filesystem           Type      Size  Used Avail Use% Mounted on
/dev/sdb1            ext4       46G   37G  6.8G  85% /home
/dev/sdc4            ext4       16T  2.2T   13T  14% /results
竟然没有，偶尔有。

这样查是有的：
$ mount | grep "1.5"
tmpfs on /run/user/121 type tmpfs (rw,nosuid,nodev,relatime,size=13191492k,mode=700,uid=121,gid=125)
//192.168.1.5/share on /home/zxsys/mnt type cifs (rw,relatime,vers=3.1.1,cache=strict,username=zxsys,uid=1000,forceuid,gid=1000,forcegid,addr=192.168.1.5,file_mode=0755,dir_mode=0755,soft,nounix,serverino,mapposix,rsize=4194304,wsize=4194304,bsize=1048576,echo_interval=60,actimeo=1)


检查文件:
$ ls -lth /home/zxsys/mnt | head
total 831M
drwxr-xr-x 2 zxsys zxsys    0 8月  25 10:17 230823_NS500421_0066_AHMTF2AFX5
drwxr-xr-x 2 zxsys zxsys    0 8月  22 11:52 230818_NS500421_0065_AHMMV2AFX5










ref: 
https://www.howtoforge.com/how-to-install-samba-server-on-centos-8/
https://www.cnblogs.com/bandiao/p/10862226.html
https://adrianmejia.com/how-to-set-up-samba-in-ubuntu-linux-and-access-it-in-mac-os-and-windows/


win作为服务器: https://www.cnblogs.com/mountain2011/p/7352708.html








========================================
|-- 网络文件系统 (NFS, Network File System): 多台 linux 之间文件共享 / 存储服务器
----------------------------------------
网络文件系统，英文Network File System(NFS)，是由SUN公司研制的UNIX表示层协议(presentation layer protocol)，能使使用者访问网络上别处的文件就像在使用自己的计算机一样。

1. NFS v1-v4
https://en.wikipedia.org/wiki/Network_File_System



2. 存储主机的安装与设置
(1) 安装: nsf服务依赖应用：nfs-tools      rpcbind

rpm -q rpcbind nfs-utils
yum -y install nfs-utils rpcbind

$ rpm -q rpcbind nfs-utils
rpcbind-0.2.0-49.el7.x86_64
nfs-utils-1.3.0-0.68.el7.2.x86_64


(2) 设置共享目录：vim /etc/exports

mkdir /text888 #创建共享目录
chmod 777 /text888 #修改共享目录权限

$ vim /etc/exports
/text888 192.168.184.0/24(rw,sync,no_root_squash)

我们使用的是 /nfs/fs/data

客户机地址可以是主机名、IP 地址、网段地址，允许使用“*”、 “?”通配符。
	“rw” 表示允许读写，“ro” 表示为只读。
	sync ：表示同步写入到内存与硬盘中。
	no_root_squash ： 表示当客户机以root身份访问时赋予本地root权限（默认是root_squash）。
	root_squash ：表示客户机用root用户访问该共享目录时，将root用户映射成匿名用户。

其它常用选项
	all_squash ：所有访问用户都映射为匿名用户或用户组。
	async ：将数据先保存在内存缓冲区中，必要时才写入磁盘。
	subtree_check（默认）：若输出目录是一个子目录，则nfs服务器将检查其父目录的权限。
	no_subtree_check ：即使输出目录是一个子目录，nfs服务器也不检查其父目录的权限，这样可以提高效率。


3. 启动 NFS 服务程序
手动加载NFS共享服务时，应该先启动rpcbind，再启动nfs

systemctl start rpcbind
systemctl start nfs
systemctl enable rpcbind
systemctl enable nfs

或 
$ sudo service nfs start
$ service nfs status

查看本机发布的 NFS 共享目录
exportfs -rv #发布共享
showmount -e




3. 客户机中访问NFS共享资源
(1) 安装 nfs-utils、rpcbind 软件包
rpm -q rpcbind nfs-utils
yum -y install nfs-utils rpcbind
systemctl start rpcbind
systemctl enable rpcbind

(2) 查看 NFS 服务器端共享了哪些目录
$ showmount -e 10.10.117.159
Export list for 10.10.117.159:
/datapool/fs/data 10.10.116.131,10.10.118.143,10.10.118.139,10.10.118.135,10.10.117.158,10.10.117.157,10.10.117.156

	10.10.116.131 是谁？

mkdir /data4 #客户端创建挂载目录
mount 10.10.117.159:/nfs/fs/data /data4 挂载目录
$ df -Th  #确认挂载结果
Filesystem                                             Type      Size  Used Avail Use% Mounted on
/dev/nvme0n1p1                                         ext4      7.0T  1.8T  4.9T  27% /data
10.10.117.159:/nfs/fs/data                             nfs       472T  856G  471T   1% /data4

$ df -h /data4
Filesystem                  Size  Used Avail Use% Mounted on
10.10.117.159:/nfs/fs/data  472T  856G  471T   1% /data4


测试是否连同：
	客户端创建一个文件
	服务器检查创建的文件


设置自动挂载
$ vim /etc/fstab
10.10.117.159:/nfs/fs/data /data4 nfs defaults,_netdev 0 0
注：_netdev ：表示挂载设备需要网络


注意：强制卸载 NFS
如果服务器端NFS服务突然间停掉了，而客户端正在挂载使用时，在客户端就会出现执行 df -h 命令卡死的现象。
这个时候直接使用umount 命令是无法直接卸载的，需要加上 -lf 选项才能卸载。
$ umount -lf /data4







========================================
Linux Web-UI 服务管理工具：CockPit //todo
----------------------------------------
1. 简介

CockPit是一款强大的Linux图形化工具
CockPit 是红帽开发的网页版图像化服务管理工具，优点是无需中间层，且可以管理多种服务
CockPit是一个免费且开源的基于web的管理工具，系统管理员可以执行诸如存储管理、网络配置、检查日志、管理容器等任务。通过Cockpit提供的友好的 Web 前端界面可以轻松地管理我们的 GNU/Linux 服务器，非常轻量级，Web 界面也非常简单易用。更重要的是通过Cockpit可以实现集中式管理



2.安装
@Y station
$ sudo apt install cockpit

启动服务
$ sudo systemctl enable --now cockpit.socket
$ sudo systemctl enable cockpit.service #报错

$ sudo service cockpit restart
$ service cockpit status
● cockpit.service - Cockpit Web Service
     Loaded: loaded (/lib/systemd/system/cockpit.service; static; vendor preset: enabled)
     Active: failed (Result: exit-code) since Thu 2024-03-21 11:00:41 CST; 5s ago
TriggeredBy: ● cockpit.socket

启动失败！

查看报错信息：
$ sudo journalctl -xe


打开浏览器，在地址栏中输入该服务器的域名或 IP，然后输入服务端口（默认 9090）
https://ip-address:9090



ref:
https://baijiahao.baidu.com/s?id=1759908453704980380&wfr=spider&for=pc
https://zhuanlan.zhihu.com/p/149091588




========================================
集群 与 分布式
----------------------------------------
1. 概念
(1) 功能上
集群每一台服务器实现的功能没有什么差别。分布式每一台实现的功能是有差异的

分布式：一个业务分拆多个子业务，部署在不同的服务器上
集群：同一个业务，部署在多个服务器上

(2) 跑的代码上
集群：不同的服务器运行同样的代码，干同一件事
分布式：不同的服务器，运行不同的代码，为了同一个目的



2. 集群实现方式
	grid engine; slurm;
	platform computing; kubernetes;





========================================
|-- 集群调度系统 PBS/TORQUE (strong> Portable Batch System) 安装与使用 //todo
----------------------------------------
pbs(torque)技巧



ref:
国内:
https://www.likecs.com/show-205271267.html
https://www.douban.com/note/770600360/?ivk_sa=1024320u&_i=2088244NfU26JX,5151770BHMdDjx
https://www.cnblogs.com/liwanliangblog/p/15401756.html

En:
https://www.csb.pitt.edu/pbs-torque-example/
https://carc.unm.edu/user-support-2/running-jobs/pbstorque.html







========================================
|-- 集群管理工具(SGE, Sun Grid Engine): qsub //todo
----------------------------------------
1. 简介 
SGE或者其他集群管理工作做的事情就是将用户投递的任务进行排队，然后将任务交给能够运行的结算节点执行，工作流程可以分为四步:
- 接受用户投放的任务
- 在任务运行以前，将任务放到一个存储区域
- 发送任务到一个执行设备，并监控任务的运行
- 运行结束写回结果并记录运行日志


2. ubuntu 测试
(1) 安装
$ qsub
Command 'qsub' not found, but can be installed with:

sudo apt install gridengine-client  # version 8.1.9+dfsg-9build2, or
sudo apt install slurm-wlm-torque   # version 19.05.5-1


网友提问：
- 老师的 SGE 用的是商业，还是免费开源版本？
- 两台服务器可以最小化模拟么？
- 我有两台服务器，是不是可以通过SGE搭建一个集群，运行qsub来执行相关的运行程序呢🤔很多教程用虚拟机来模拟这个，不晓得是不是一个道理?



(2) 
在主控节点上安装 











(2) SGE的常用命令

1) 任务投递

SGE中投递任务所用到的命令是qsub. 最简单的用法是下面这种，即,将要执行的命令通过标准输入的方式传递给qsub
$ echo "ls -l " | qsub


2) 投递之后可以用qstat查看自己投递的任务的运行情况

第一列是任务编号, 第二列是优先级，第三列是任务名字，在参数里没有特别说明的情况下，SGE会用任务的来源进行命令，STDIN表示来自于标准输入，
第四列是用户名，
第五列是运行状态("r"表示运行中), 
第六列表示任务投递和开始时间，
第七列是任务投递的节点，
第8列则是要申请的线程数。

在执行完成后会在家目录下生成"STDIN.e7883"和"STDIN.o7883", 其中7883就是任务编号, 前者存放标准错误输出, 后者存放标准输出， 因此"cat STDIN.o7883"的内容就是ls -l的内容。


3) 另一种方法是先写一个脚本然后投递，比如先编辑一个文件"ls.sh", 内容如下，然后用"qsub ls.sh"投递任务。
ls -l
跟之前一样，最后在家目录下产生了"ls.sh.exxxx"和"ls.sh.exxxx"两个文件




(3) 帮助文件

当然实际时肯定没有那么简单，我们需要增加各种参数来调整qsub的行为，
用qsub -help可以看完整的参数，但是常用的为如下几个

-q xxx : 指定要投递到的队列，如果不指定的话，SGE会在用户可使用的队列中选择一个满足要求的队列。
-V： 将当前的环境变量传递到执行命令的节点中
cwd: 在当前目录下执行任务, sge的日志会输出到当前路径。 不增加该指令，所有投递的任务都会在家目录下执行
-l resource=value: 请求资源数, 例如 -l vf=25G -l h=node1 就是任务的预估内存要25G(内存估计的值应稍微大于真实的内存，内存预估偏小可能会导致节点跑挂), 申请在node1上运行
-S /bin/bash: 表示在bash环境下执行命令。默认tcsh.
-pe openmpi 4: 表示使用openmpi进行并行运算，且申请的线程是4，
-N 任务名: 手动执行任务的名字
-j y|n ：是否将标准输入和标准输入合并成一个文件
-sync y|n: 是否等待任务结束，返回退出码
-o path: 指定标准输出的文件夹


例如在命令行里投递一个比对任务
$ echo "bowtie2 -p 8 -x index/ref -1 data/A_1.fq -2 data/A_2.fq | samtools sort > A.bam" | qsub -V -cwd -l vf=25G -S /bin/bash -pe openmpi 8 -N A.bt2

这些参数除了在外部设置外，还可以在shell脚本里设置，如下

#!/bin/bash
#$ -S /bin/bash
#$ -V
#$ -cwd
#$ -l vf=25G
#$ -pe openmpi 8
#$ -N a.bt2
bowtie2 -p 8 -x index/ref -1 data/A_1.fq -2 data/A_2.fq | samtools sort > A.bam



(4) 查询任务
除了任务投递外，查询任务也是一个非常常用的命令，除了刚才直接用qstat查看，还有如下参数比较好用

qstat -f        # 查看用户任务
qstat -j jobId  # 按任务id查看
qstat -explain a|c|A|E -j jobID # 查看任务任务并给出解释
qstat -u user   # 按用户查看


(5) 任务状态：

qw: 表示等待状态
hqw: 任务挂起等待中，待依赖的任务完成后执行
Eqw: 投递任务出错
r: 表示任务正在运行
s: 暂时挂起
dr: 节点挂了之后，删除任务就会出现这个状态，只有节点重启之后，任务才会消失

(6) 删除任务
任务删除也比较重要，毕竟偶尔会出现任务投递出错的情况
$ qdel -j 1111   删除任务号为1111的任务



(7) 其他命令
qrsh：与qsub相比，是交互式的投递任务，注意参数:-now yes|no默认设置为yes
- 若设置为yes，立即调度作业，如果没有可用资源，则拒绝作业，任务投递失败，任务状态为Eqw。
- 若设置为no，调度时如果没有可用资源，则将作业排入队列，等待调度。
- 例子： qrsh -l vf=*G -q all.q -now no -w n *sh


qacct 从集群日志中抽取任意账户信息
qalter 更改已提交但正处于暂挂状态的作业的属性
qconf 为集群和队列配置提供用户界面
- qconf -spl查看可用并行环境

qhold 阻止已提交作业的执行
qhost 显示SGE执行主机（即各个计算节点）的状态信息
- qhost -j按照节点显示任务
- qhost -F展示每个节点的资源

qlogin 启动telnet或类似的登录会话。



(8) 案例：一个投递比对任务的简单脚本
#!/bin/bash

set -e
set -u
set -o pipefail

threads=8
index=index/hg19

FQ_DIR="analysis/0-raw-data"
ALIGN_DIR="analysis/2-read-align"
LOG_DIR="analysis/log"
TMP_DIR="analysis/tmp"

mkdir -p ${ALIGN_DIR}
mkdir -p ${LOG_DIR}
mkdir -p ${TMP_DIR}

tail -n+2 download_table.txt | cut -f 6 | while read id;
do
    echo "
    bowtie2 --very-sensitive-local --mm -p $threads -x $index -U ${FQ_DIR}/$id.fastq.gz 2> ${LOG_DIR}/$id.bt2.log | \
    samtools sort -@ 2 -m 1G -T ${TMP_DIR}/${id} -o ${ALIGN_DIR}/${id}.sort.bam" | qsub -V -cwd -pe openmpi $threads -N ${id}_bt2 -q all.q -S /bin/bash
done







ref:
https://www.jianshu.com/p/b7b540a3c015
https://blog.csdn.net/wuxianfeng1987/article/details/72874905





========================================
邮件服务: mail
----------------------------------------
发邮件:
$ echo "text from wjl" | mail -s "this is title" wangxf



========================================
----------------------------------------




========================================
----------------------------------------



========================================
----------------------------------------




========================================
----------------------------------------



========================================
----------------------------------------




========================================
----------------------------------------



========================================
----------------------------------------


