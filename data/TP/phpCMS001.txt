phpCMS 开发手册


========================================
资源网址
----------------------------------------
帮助文件
http://v9.help.phpcms.cn/html/2010/structure_0928/69.html


前台：http://phpcms.dawneve.cc/
后台：http://phpcms.dawneve.cc/index.php?m=admin&c=index&pc_hash=3AB8Is

文档：http://v9.help.phpcms.cn/html/2010/structure_0928/69.html
2008版本文档：http://www.phpcms.cn/doc/PHPCMSDocumentor/mysql_data_structure.html

前台退出：http://edu.dawneve.cc/index.php?m=member&c=index&a=logout
phpsso: htdocs\phpCMS_Edu\phpsso_server

服务器要求

PHP 版本 5.2 或更新的版本。
MySQL版本推荐5.0或者更新版本。


用户加密方式: md5(md5(password) . encrypt) 


========================================
模型-视图-控制器 (MVC)
----------------------------------------

MVC是一个设计模式，它强制性的使应用程序的输入、处理和输出分开。使用MVC应用程序被分成三个核心部件：模型（M）、视图（V）、控制器（C），它们各自处理自己的任务。

视图 ：
　　视图是用户看到并与之交互的界面。对老式的Web应用程序来说，视图就是由HTML元素组成的界面，在新式的Web应用程序中，HTML依旧在视图中扮演着重要的角色，但一些新的技术已层出不穷，它们包括Adobe Flash和象XHTML，XML/XSL，WML等一些标识语言和Web services。如何处理应用程序的界面变得越来越有挑战性。MVC一个大的好处是它能为你的应用程序处理很多不同的视图。在视图中其实没有真正的处理发生，不管这些数据是联机存储的还是一个雇员列表，作为视图来讲，它只是作为一种输出数据并允许用户操纵的方式。

模型 ：
　　模型表示企业数据和业务规则。在MVC的三个部件中，模型拥有最多的处理任务。例如它可能用象EJBs和ColdFusion Components这样的构件对象来处理数据库。被模型返回的数据是中立的，就是说模型与数据格式无关，这样一个模型能为多个视图提供数据。由于应用于模型的代码只需写一次就可以被多个视图重用，所以减少了代码的重复性。

控制器 ：
　　控制器接受用户的输入并调用模型和视图去完成用户的需求。所以当单击Web页面中的超链接和发送HTML表单时，控制器本身不输出任何东西和做任何处理。它只是接收请求并决定调用哪个模型构件去处理请求，然后确定用哪个视图来显示模型处理返回的数据。

　　现在我们总结MVC的处理过程，首先控制器接收用户的请求，并决定应该调用哪个模型来进行处理，然后模型用业务逻辑来处理用户的请求并返回数据，最后控制器用相应的视图格式化模型返回的数据，并通过表示层呈现给用户。





========================================
文件目录结构
----------------------------------------
http://v9.help.phpcms.cn/html/2010/structure_0928/69.html

根目录
|  –  api  接口文件目录
|  –  caches 缓存文件目录
       |  – configs 系统配置文件目录
       |  – caches_* 系统缓存目录
|  –  phpcms  phpcms框架主目录
       |  – languages 框架语言包目录
       |  – libs 框架主类库、主函数库目录
       |  – model 框架数据库模型目录
       |  – modules 框架模块目录
       |  – templates 框架系统模板目录
|  –  phpsso_server  phpsso主目录
|  –  statics  系统附件包
       |  – css 系统css包
       |  – images 系统图片包
       |  – js 系统js包
|  –  uploadfile  网站附件目录
|  –  admin.php  后台管理入口
|  –  index.php  程序主入口
|  –  crossdomain.xml  FLASH跨域传输文件
|  –  robots.txt 搜索引擎蜘蛛限制配置文件
|  –  favicon.ico  系统icon图标


========================================
URL访问
----------------------------------------
PHPCMS是采用MVC设计模式开发,基于模块和操作的方式进行访问，采用单一入口模式进行项目部署和访问，无论访问任何一个模块或者功能，只有一个统一的入口。
 
参数名称	描述	位置	备注
m	模型/模块名称	phpcms/modules中模块目录名称	必须
c	控制器名称	phpcms/modules/模块/*.php 文件名称	必须
a	事件名称	phpcms/modules/模块/*.php 中方法名称	 

其中 
m = content 为模型/模块名称 位于phpcms/modules/content
c = index 为控制器名称 位于phpcms/modules/content/index.php
a = show 为时间名称 位于phpcms/modules/content/index.php 中show()方法
id = 1 为其他参数 与正常get传递参数形式相同
如果我们访问您的域名 如：
 
http://www.yourdomain.com/index.php
phpcms默认路由会定位到content模块的index控制器中的init操作，因为系统在没有指定模块和控制器的时候，会执行默认的模块和操作。因此下面的URL的结果是相同的：
系统还支持URL路由的功能，这些都能够带来其他的url访问效果。
 
http://www.yourdomain.com/index.php?m=content&c=index&a=init



========================================
系统类库与函数库调用
----------------------------------------
1.系统类库位于系统的phpcms/libs/classes目录下面.
2.系统函数库位于系统的phpcms/libs/functions目录下面，函数库文件名为*.func.php，其中global.func.php为框架中默认加载，global.func.php中函数可直接使用

系统类库调用
 
/**
 * 加载系统类方法
 * @param string $classname 类名
 * @param string $path 扩展地址
 * @param intger $initialize 是否初始化
 */
 public static function load_sys_class($classname, $path = '', $initialize = 1) {
 　　return self::_load_class($classname, $path, $initialize);
 }

示例：
$http = pc_base::load_sys_class('http'); //实例化http类
pc_base::load_sys_class('format', '', 0); //调用form类，不进行实例化操作




系统函数库调用

/**
 * 加载系统的函数库
 * @param string $func 函数库名
 */
 public static function load_sys_func($func) {
 　　return self::_load_func($func);
 }
 
 
示例：
pc_base::load_sys_func('mail'); 调用mail函数包

========================================
入口程序
----------------------------------------
PHPCMS是采用MVC设计模式开发,基于模块和操作的方式进行访问，采用单一入口模式进行项目部署和访问，无论访问任何一个模块或者功能，只有一个统一的入口。
入口程序是在前期处理用户请求的引导程序。它是唯一一个可以被最终用户可以直接请求运行的。
 
phpcms v9的入口程序包含如下几行：

index.php 
<?php
 define('PHPCMS_PATH', dirname(__FILE__).DIRECTORY_SEPARATOR);
 include PHPCMS_PATH.'/phpcms/base.php';
 pc_base::creat_app();
?>
 
这段代码首先加载了 phpcms 框架的引导文件 base.php，然后它根据指定的配置文件建立了一个 Web 应用实例并运行。



========================================
模块
----------------------------------------
phpcms v9框架中的模块，位于phpcms/modules目录中 每一个目录称之为一个模块。即url访问中的m
示例:
 
http://www.yourname.com/index.php?m=content
那么您访问的就是phpcms/modules/content 这个模块。
如果创建一个，只要在 phpcms/modules 目录下创建文件夹并放入你的控制器类就可以了。






========================================
控制器
----------------------------------------
phpcms v9的控制器就是模块的类文件，位于phpcms/modules/模块/目录下面。类名成就是文件名+.php，例如一个名为mytest的控制器,那么他的命名为mytest.php即可。控制器类默认继承系统的函数库，可以直接使用。控制器类的类名称与控制器文件名必须相同。
　　如果您创建了一个mytest.php在test模块下，那么我们在浏览器里面输入URL：
 
http://www.yourname.com/index.php?m=test&c=mytest
 
下面是一个控制器类的基本格式，在构建模块部分会具体讲解

<?php
defined('IN_PHPCMS') or exit('No permission resources.');
class mytest {
　　 function __construct() {
 　　}
　　public function init() {
  　　　echo 'hellp phpcms v9,my name is defalut action';
 　　}
}
?>

如果你添加的控制器类继承了其他的类，你要小心你的方法名不要和那个类中的方法名一样了，否则你的方法会覆盖原有的。



========================================
命名规范
----------------------------------------
 PHPCMS其自身的一定规范。下面是使用PHPCMS做二次开发中应该遵循的命名规范：

　　类文件需要以.class.php为后缀（这里是指的phpcms的系统类库文件和模块中的类库文件，第三方引入的不做要求），例如http.class.php。
 　　函数文件需要以.func.php为后缀（第三方引入的不做要求），例如mail.func.php。
 　　类名和文件名一致，例如 phpcmsapp类的文件命名是phpcmsapp.class.php。
 　　数据模型需要以“数据表名称_model.class.php”为形式，类名称与文件名必须相同。


========================================
配置文件调用
----------------------------------------
配置文件配置在caches/configs/目录下。
配置文件调用：使用 load_config方法
 
 /**
	* 加载配置文件
	* @param string $file 配置文件
	* @param string $key  要获取的配置荐
	* @param string $default  默认配置。当获取配置项目失败时该值发生作用。
	* @param boolean $reload 强制重新加载。
	*/
	public static function load_config($file, $key = '', $default = '', $reload = false) {
	　　static $configs = array();
	　　  if (!$reload && isset($configs[$file])) {
	　　　　 if (empty($key)) {
	　　　 　　return $configs[$file];
	　　　　} elseif (isset($configs[$file][$key])) {
	　　　 　　return $configs[$file][$key];
	　　　　} else {
	　　　　　return $default;
	　　　　}
	　　}
	　$path = CACHE_PATH.'configs'.DIRECTORY_SEPARATOR.$file.'.php';
	　if (file_exists($path)) {
	　　 $configs[$file] = include $path;
	　 }
	　 if (empty($key)) {
	　　return $configs[$file];
	　 } elseif (isset($configs[$file][$key])) {
	　　return $configs[$file][$key];
	　} else {
	　　return $default;
	　  }
	}

示例：
调用系统配置中的附件路径
$upload_url = pc_base::load_config('system','upload_url');



========================================
二次开发技巧
----------------------------------------
1.如果要对已存在的控制器进行二次开发，为了方便升级不建议直接对内核文件直接修改该，您可以通过"MY_*.php"的形式进行二次开发。
例如您要对改phpcms/mood/index.php进行二次开发。您可以在与index.php同级的目录下建立"MY_index.php" 
MY_index.php代码如下

<?php
　　class MY_index extends index{
 　　　　function __construct() {
 　　　　　　parent::__construct();
 　 }
 
　　　　……your code
}
这样当您通过url访问index控制器的时候，系统会默认指向MY_index.php 并且原文件的方法将被继承，可以直接使用。







========================================
数据库配置
----------------------------------------

一共2个数据库配置文件。 
位置1：caches/configs/database.php
和用户中心的：phpsso_server\caches\configs\database.php

我们打开这个配置文件，加入我们的数据库配置信息。数据库配置信息为二维数组结构，默认为default,可以根据default结构配置多个数据库链接（如：extended_1）

 
 ﻿<?php
 return array (
 　　'default' => array (
 　　　　'hostname' => 'localhost',
 　　　　'database' => 'phpcms',
 　　　　'username' => 'admin',
 　　　　'password' => 'admin',
 　　　　'tablepre' => 'v9_',
 　　　　'charset' => 'gbk',
 　　　　'type' => 'mysql',
 　　　　'debug' => true,
 　　　　'pconnect' => 0,
 　　　　'autoconnect' => 0
 　　),
    /* 以下默认不存在 */
 　　'extended_1' => array (
 　　　　'hostname' => '10.10.125.2',
 　　　　'database' => 'phpcms',
 　　　　'username' => 'admin',
 　　　　'password' => 'admin',
 　　　　'tablepre' => 'v9_',
 　　　　'charset' => 'gbk',
 　　　　'type' => 'mysql',
 　　　　'debug' => true,
 　　　　'pconnect' => 0,
 　　　　'autoconnect' => 0
 　　),
 );
 ?>
根据您的数据库连接信息修改上面的配置内容，修改完成后，保存该数据库配置文件。






========================================
路由配置
----------------------------------------
路由配置文件位置：caches/configs/route.php
我们打开这个配置文件，加入我们的路由配置信息。路由配置信息为二维数组结构，默认为default。
路由配置文件内容是这样的：
 
<?php
　　return array(
　　　　 'default'=>array('m'=>'admin', 'c'=>'index', 'a'=>'init'),
　　　　 'test.youname.com'=>array('m'=>'test', 'c'=>'index', 'a'=>'init'),
　　);
?>

基中“m”为模型,“c”为控制器，“a”为事件，“data”为其他附加参数。
data为一个二维数组，可设置POST和GET的默认参数。POST和GET分别对应PHP中的$_POST和$_GET两个超全局变量。如下面的例子，在程序中您可以使用$_POST['catid']来得到data下面POST中的数组的值。
data中的所设置的参数等级比较低。如果外部程序有提交相同的名字的变量，将会覆盖配置文件中所设置的值。
 
如：
<?php
　　return array(
　　　　'default'=>array(
　　　　 'm'=>'phpcms',
　　　　 'c'=>'index',
　　　　 'a'=>'init',
　　　　 'data'=>array(
 　　　　 　　'POST'=>array(
  　　　　　　 　　'catid'=>1
 　　　　　　　 ),
　　　　 　　 'GET'=>array(
  　　　　　　 　　'contentid'=>1
 　　　　　　　 )
　　　 　)
　　　)
　)
?>
外部程序POST了一个变量catid=2那么你在程序中使用$_POST取到的值是2，而不是配置文件中所设置的1。






========================================
系统配置
----------------------------------------
系统配置文件位置：caches/configs/system.php
具体详见该文件注释







========================================
开发流程
----------------------------------------
 
为你的phpcms创建一个模块的一般开发流程是：
 
1.创建数据库和数据表；（没有数据库操作可略过）
2.创建模块目录
3.创建模块控制器类；
4.创建模块类与模块函数；（如果只是简单的模块可以不必创建）
5.创建模板文件；
6.运行和调试。


========================================
创建模块
----------------------------------------
phpcms v9框架中的模块，位于phpcms/modules目录中 每一个目录称之为一个模块
如果要创建一个模块，只要在 phpcms/modules 目录下创建文件夹并放入你的控制器类就可以了。
例如我要开发一个叫做test的模块，那么首先在 phpcms/modules 目录下创建文件夹，并将其命名为test。
test模块的标准结构通常是这样的。

phpcms/modules/test 
	/classes	模块类库包
	/functions	模块函数库包
	/templates 	模块模板包，通常放置含权限控制的控制器模板
	
如果您的模板有单独的前台模板，你需要在phpcms\templates\default下创建一个您的模块目录来放置前台模板，"default"为你的风格包名称，我们默认适用default

	
phpcms/modules/test/default/test  







========================================
创建模块控制器类
----------------------------------------
在创建模块中我们已经创建好了一个名为“test”的模块，接下来我们继续为这个模块添加两个控制器类。
phpcms v9的控制器就是模块的类文件，位于phpcms/modules/模块/目录下面。类名成就是文件名+.php，例如一个名为mytest的控制器,那么他的命名为mytest.php即可。控制器类默认继承系统的函数库，可以直接使用。控制器类的类名称与控制器文件名必须相同。
控制器类文件包含两种形式：


1.mytest.php 控制器，前台浏览（不含权限控制）
 
<?php
　　defined('IN_PHPCMS') or exit('No permission resources.');
　　class mytest {
　　 　　function __construct() {
　　　　}
　　　　public function init() {
　　　　　$myvar = 'hello world!';
　　　　　echo $myvar;
 　　　　}
　　　　public function mylist() {
　　　　　$myvar = 'hello world!this is a example!';
　　　　　echo $myvar;
 　　　　}
　　}
?>


这个控制器的url访问方法前面已经介绍过了，

http://www.yourname.com/index.php?m=test&c=mytest
http://www.yourname.com/index.php?m=test&c=mytest&a=mylist
没有填写 “a” 的情况下，默认调用init方法

2.mytest_admin.php 控制器，后台管理(含权限控制)
 
后台控制控制器需要加载admin模块下的admin类，并继承该类。需要注意的是因为你添加的控制器类继承了其他的类，你要小心你控制器的方法名不要和该类中的方法名一样了，否则会造成影响，具体请查看admin类中有哪些方法。

<?php
defined('IN_PHPCMS') or exit('No permission resources.');
pc_base::load_app_class('admin','admin',0);
class mytest_admin extends admin {
　　public function __construct() {
　　}
　　public function init() {
　　　　$myvar = 'oh,i am phpcmser';
　　　　echo $myvar;
　　}
}
?>

在控制器中增加模板调用

phpcms 可以实现完全的模板与程序分离，所以在我们的控制器程序中要加载模板，才可以更友好的显示出来。


1.加载前台模板
前台模板文件在phpcms\templates\default\模块名称 目录中，本示例也就在phpcms\templates\default\test中
加载模板方法如下:
 
　include template('test', 'mytest', 'default');
其中 test为模块名称 mytest 为模板目录下模板名称,default为风格名称，默认不填为defalut
在上面例子中如果要给mytest.php中init方法加载一个mytest的模板，如下

　　public function init() {
　　　　　$var = 'hello world!';
　　　　　include template('test', 'mytest', 'default');
　　}

这样我们通过url访问该方法的时候也就加载了对应的模板。


2.加载后台模板
后台模板文件在phpcms\modules\模块名称\templates 目录中，本示例也就在phpcms\modules\test\templates 中
加载模板方法如下：

	include $this->admin_tpl('mytest_admin_list');

其中mytest_admin_list为phpcms\modules\test\templates中mytest_admin_list.tpl.php，注意：此处模板必须以.tpl.php 作为后缀
在上面例子中如果要给mytest_admin.php中init方法加载一个mytest_admin_list的模板，如下
 
　public function init() {
　　　$myvar = 'oh,i am phpcmser';
　　　include $this->admin_tpl('mytest_admin_list');
　}






========================================
创建数据库模型类
----------------------------------------
数据库模型位于：phpcms/model/ 目录下。
数据模型文件的命名规则建议为数据表名称+'_model.class.php'
如果在我们的创建的模块中我要使用一个数据库“test”，首先需要建立一个数据库模型文件，文件名称为'test_model.class.php'
内容如下：
 
 
<?php
 　　defined('IN_PHPCMS') or exit('No permission resources.');
 　　pc_base::load_sys_class('model', '', 0);
 　　class test_model extends model {
 　　　　public function __construct() {
 　　　　$this->db_config = pc_base::load_config('database');
 　　　　$this->db_setting = 'default';
 　　　　$this->table_name = 'test';
 　　　　parent::__construct();
 　　}
 　}
?>

注意：

1.数据库模型类名称必须与文件名称相同；
2.$this->db_setting = 'default'为数据库配置文件中配置数据库链接池名称，默认为default，一般情况下不需要修改。
3.$this->table_name = 'test'为数据表名称

这样我们就建立好了一个数据库模型类。
在模块的控制器中使用
	$this->db = pc_base::load_model('test_model');
来加载。

具体如下

<?php
 　　defined('IN_PHPCMS') or exit('No permission resources.');
 　　class mytest {
 　　　　private $db;
 　　 　 function __construct() {
 　　　　　　$this->db = pc_base::load_model('test_model');
 　　　　}
 　　　　public function init() {
 　　　　　　$result = $this->db->select();
 　　　　　　var_dump($result);
  　　　　}
 　　}
?>

其中$this->db中所支持的方法请参照phpcms/libs/classes/model.class.php中方法




========================================
phpcms_v9 模板标签使用说明
----------------------------------------
http://www.kedouidea.com/index.php?m=content&c=index&a=show&catid=20&id=93


[摘要]本文介绍phpcms v9中模板标签使用说明。
{template "content","header"}
调用根目录下phpcms\template\content\header文件
{CHARSET}
字符集 （gbk或者utf-8）
{if isset($SEO['title']) && !empty($SEO['title'])}
{$SEO['title']}{/if}
{$SEO['site_title']}
{$SEO['keyword']}
{$SEO['description']}	标题和标题seo优化 

{CSS_PATH}	地址替换为根目录下\statics\css
{JS_PATH}	地址替换为根目录下\statics\js
{pc:content  action="position" posid="9" order="id" num="10" cache="3600"}
pc标签{pc:content 参数名="参数值"参数名="参数值"参数名="参数值"}
{loop $data $k $v}
      <li><a href="{$v[url]}">{$v[title]}</a></li>
{/loop}

pc标签值
action="position"------ --------对话框的类型=“内容推荐位列表”
posid="9"-------------- --------推荐位ID="9"
order="id"------------- --------排序类型="id"
num="10" -------------- --------数据调用数量="10"
cache="3600"----------- --------缓存="3600"毫秒
 
{get_siteid()}
{IMG_PATH}
action="hits" 排行，热点等
action="lists" 主要用于列表等。
catid="$catid" 当前栏目ID   指定数字，即为指定的栏目
num=""  调用文章的数量
order="id DESC" 按ID降序排列
order="id ASC"  按ID升序排列
"views DESC" 
sort=""
"1" 缩略图
return=""
page="$page" 需要分页

每当列表几行的时候出现一次这个
{if $num%2==0}   {/if}

循环标签
{loop $data $r}  {/loop}
{loop $info $r}  {/loop}

日期-------------{date('Y-m-d H:i:s',$r[inputtime])}
文章链接------{$r[url]}
文章标题------{$r[title]}
标题截取------{str_cut($r[title],40,'...')}
缩略图---------loop是info的时候用  {thumb($r[thumb],110,0)}     loop是data的时候用{thumb($v[thumb],90,0)}
分页标签------{$pages}
文章页标签
标题-------{$title}
内容-------{$content}
日期-------{$inputtime}
来源-------{$copyfrom}
点击数------<span id="hits"></span>  
<script language="JavaScript" src="{APP_PATH}api.php?op=count&id={$id}&modelid={$modelid}"></script>
网站首页------- ---------{siteurl($siteid)}
当前位置------- ---------{catpos($catid)}
栏目名称------- ---------{$CAT[catname]} 
栏目拼音------- ---------{$CAT[letter]}
栏目链接------- ---------{$CAT[url]}
父栏目名称----- ---------{$CATEGORYS[$CAT[parentid]][catname]} 
父栏目链接----- ---------{$CATEGORYS[$CAT[parentid]][url]}
上上级栏目名称- -------{$CATEGORYS[$CATEGORYS[$CAT[parentid]][parentid]][catname]}
上上级栏目链接- -------{$CATEGORYS[$CATEGORYS[$CAT[parentid]][parentid]][url]}
 一级父栏目列表
{pc:content action="category" catid="0" num="34" siteid="$siteid" order="listorder ASC"}
      {loop $data $r}
            <li><a href="{$r[url]}">{$r[catname]}</a></li>
      {/loop}
{/pc}
同级栏目列表
{pc:content action="category" catid="$parentid" num="12" siteid="$siteid" order="listorder ASC"}
      {loop $data $r}
            <li><a href="{$r[url]}">{$r[catname]}</a></li>
       {/loop}
{/pc}
组图列表
{loop $photos $r}
<li><a href="{$r[url]}"><img src="{thumb($r[url], 75, 45, 0)}" alt="{$r[alt]}" /></a></li>
{/loop}
注释：其中$photos为自定义组图字段，{$r[url]}为图片地址，{thumb($r[url], 75, 45, 0)}为图片缩略图，{$r[alt]}为图片描述




一、首页调用
1、V9同时调用多个栏目最新文章标签

{pc:get sql="SELECT `n`.`inputtime`,`n`.`url`,`n`.`title`,`c`.`catname`,`c`.`url` as `c_url` FROM `v9_news` as `n` left join `v9_category` as `c` on `n`.`catid` = `c`.`catid` where `c`.`catid` in (6,7,8,9,10) order by `n`.`id` desc" num="10" cache="3600" page="" dbsource="" return="data"}
{loop $data $key $val}
<li><span class="date">{date('Y-m-d H:i:s',$val[inputtime])}</span>[<a href="{$val[c_url]}" target="_blank">{$val[catname]}</a>] <a href="{$val[url]}" title="{$val[title]}" target="_blank">{$val[title]}</a></li>
{/loop}
{/pc}

2、首页头条

{pc:content action="position" posid="2" order="listorder DESC" num="1"}
{loop $data $r}
<div class="headlinetop"> <a href="{$r[url]}" target="_blank">
<h3>{str_cut($r[title],20,'')}</h3>
<p>{str_cut($r[description],102)}</p>
</a> </div>
{/loop}
{/pc}

调用4个
{pc:content action="position" posid="2" order="listorder DESC" num="4"}
{loop $data $r}
<h4 class="blue"><a href="{$r[url]}" title="{$r[title]}">{str_cut($r[title],36,'')}</a></h4>
<p>{if $n==1}<img src="{thumb($r[thumb],90,60)}" width="90" height="60"/>{/if}{str_cut($r[description],112)}</p>
<div class="bk20 hr"><hr /></div>
{/loop}
{/pc}

3、调用某栏目最新文章
{pc:content action="lists" catid="6" order="id DESC" num="10"cache="3600"}
{loop $data $r}
<li><a href="{$r[url]}" target="_blank">{$r[title]}</a></li>
{/loop}
{/pc}

4、调用图文
<h5>图片新闻</h5>

{pc:content action="position" posid="12" thumb="1" order="listorder DESC" num="10"}
	<ul class="content news-photo picbig">
		{loop $data $r}
			<li>
				<div class="img-wrap">
					<a href="{$r[url]}" title="{$r[title]}"><img src="{thumb($r[thumb],110,0)}" title="{$r[title]}"/></a>
				</div>
				<a href="{$r[url]}" title="{$r[title]}">{str_cut($r[title],20)}</a>
			</li>
		{/loop}
	</ul>
{/pc}

5、外部数据源调用

{pc:get sql="SELECT * FROM pre_forum_thread" cache="3600" dbsource="discuz" return="data" num="10"}

6、指定变量循环增长（幻灯片调用）

            {pc:content  action="position" posid="1"  order="listorder DESC" thumb="1" num="5"}
             <div class="content" id="main-slide">
                    <div class="changeDiv"> 
                    {loop $data $r}
                        <a href="{$r['url']}" title="{str_cut($r['title'],30)}"><img src="{thumb($r['thumb'],310,260)}" alt="{$r['title']}" width="310" height="260" /></a>
                    {/loop}
                    </div>
                </div>
            {/pc}

{pc:content action="lists" catid="66" order="listorder DESC" thumb="1" num="5" }
{php $num = 0}
{loop $data $r}
linkarr[{$num}] = "{$r[url]}";
picarr[{$num}] = "{$r[thumb]}";
textarr[{$num}] = "{str_cut($r[title],36,'')}";
{php $num++}
{/loop}
{/pc}

7、调用文字友情链接
{pc:link action="type_list" siteid="$siteid" order="listorder DESC" num="10" return="dat"}
{loop $dat $v}
<a href="{$v[url]}" target="_blank">{$v[name]}</a> |
{/loop}
{/pc}

8、调用图片友情链接
        {pc:link  action="type_list" siteid="$siteid" linktype="1" order="listorder DESC" num="8" return="pic_link"}
        {loop $pic_link $v}
        <li><a href="{$v['url']}" title="{$v['name']}" target="_blank"><img src="{$v[logo]}" width="88" height="31" /></a></li>
        {/loop}
        {/pc}


		
		
二、内容页调用
模块名：content

模块提供的可用操作

操作名 说明
lists 内容数据列表
relation 内容相关文章
hits 内容数据点击排行榜
category 内容栏目列表
position 内容推荐位列表
position操作说明如下：



1、内容推荐位列表（position）：

可用参数：

参数名 是否必须 默认值 说明
posid 是 null 推荐位ID
catid 否 null 调用栏目ID
thumb 否 0 是否仅必须缩略图
order 否 null 排序类型
num 是 null 数据调用数量

代码例子：

{pc:content action="position" posid="2" order="listorder DESC" num="4"}
	<ul>
		{loop $data $key $val}
			<li> <a href="{$val['url']}">{$val['title']}</a></li>
		{/loop}
	</ul>
{/pc}

返回参数如下表：

字段 类型 空 默认 注释
title char(80) 否 NULL 推荐位标题
url char 否 NULL 推荐位链接地址
inputtime int(10) 否 NULL 推荐位发布时间
thumb char 是 NULL 推荐位缩略图
其他 不定 是 根据模型所设置的加入到推荐位中字段名称





2、内容列表（lists）：

可用参数：

参数名 是否必须 默认值 说明
catid 否 null 调用栏目ID
thumb 否 0 是否仅必须缩略图
order 否 null 排序类型
num 是 null 数据调用数量

代码例子：

{pc:content action="lists" catid="2" order="id DESC" num="4"}
	<ul>
		{loop $data $key $val}
			<li> <a href="{$val['url']}">{$val['title']}</a></li>
		{/loop}
	</ul>
{/pc}

返回参数如下表：

字段 类型 空 默认 注释
title char(80) 否 NULL 推荐位标题
url char 否 NULL 推荐位链接地址
inputtime int(10) 否 NULL 推荐位发布时间
thumb char 是 NULL 推荐位缩略图
其他 不定 是 其他模型字段







3、点击排行榜（hits）：

可用参数：

参数名 是否必须 默认值 说明
catid 否 null 调用栏目ID
day 否 0 调用多少天内的排行
order 否 null 排序类型（本月排行- monthviews DESC 、本周排行 - weekviews DESC、今日排行 - dayviews DESC）
num 是 null 数据调用数量

代码例子：

{pc:content action="hits" catid="2" order="weekviews DESC" num="10"}
	<ul>
		{loop $data $key $val}
			<li> <a href="{$val['url']}">{$val['title']}</a></li>
		{/loop}
	</ul>
{/pc}

返回参数如下表：

字段 类型 空 默认 注释
title char(80) 否 NULL 推荐位标题
url char 否 NULL 推荐位链接地址
inputtime int(10) 否 NULL 推荐位发布时间
thumb char 是 NULL 推荐位缩略图
其他 不定 是 其他模型字段





4、相关文章（relation）：

可用参数：

参数名 是否必须 默认值 说明
catid 否 null 调用栏目ID
relation 否 $relation 无需更改
keywords 否 null 内容页面取值：$rs[keywords]
num 是 null 数据调用数量

代码例子：

{pc:content action="relation" relation="$relation" catid="$catid" num="5" keywords="$rs[keywords]"}
{loop $data $r}
<li>·<a href="{$r[url]}" target="_blank">{$r[title]}</a><span>({date('Y-m-d',$r[inputtime])})</span></li>
{/loop}
{/pc}

返回参数如下表：

字段 类型 空 默认 注释
title char(80) 否 NULL 推荐位标题
url char 否 NULL 推荐位链接地址
inputtime int(10) 否 NULL 推荐位发布时间
thumb char 是 NULL 推荐位缩略图
其他 不定 是 其他模型字段





5、栏目列表（category）：

可用参数：

参数名 是否必须 默认值 说明
catid 否 0 调用该栏目下的所有栏目 ，默认0，调用一级栏目
$siteid 否 1 默认调用系统站点
order 否 null 排序方式、一般按照listorder ASC排序，即栏目的添加顺序
num 是 null 数据调用数量

代码例子：

{pc:content action="category" catid="0" num="25" siteid="$siteid" order="listorder ASC"}

{loop $data $r}
<li><a href="{$r[url]}"><span>{$r[catname]}</span></a></li> {/loop}

{/pc}

返回参数如下表：

字段 类型 默认值 说明
catid smallint 无 栏目ID
siteid tinyint(3) 0 站点ID
module varchar(15) 无 模块ID
type tinyint(1) 1 栏目类型ID
modelid tinyint(5) 5 模型ID
parentid smallint(5) 5 上级父栏目
arrparentid varchar(255) 无 所有父栏目
child tinyint(1) 0 子栏目
arrchildid mediumtext 无 所有子栏目
catname varchar(30) 无 栏目名称
image varchar(100) 无 栏目图片
description mediumtext 无 栏目描述
parentdir varchar(100) 无 父栏目目录
catdir varchar(30) 无 栏目目录
url varchar(100) 无 栏目链接
items mediumint(8) 0 栏目内容数
hits int(10) 0 点击数
setting mediumtext 无 栏目设置
listorder smallint(5) 0 排序
ismenu tinyint(1) 0 是否显示
sethtml tinyint(1) 0 是否生成到根目录
letter varchar(30) 无 栏目拼音











========================================
phpcms_v9部分代码分析
----------------------------------------

以下内容是个人整理，不足之处请提出。内容将持续更新。

前台：http://phpcms.dawneve.cc/
后台：http://phpcms.dawneve.cc/index.php?m=admin&c=index&pc_hash=3AB8Is

文档：http://v9.help.phpcms.cn/html/2010/structure_0928/69.html
2008版本文档：http://www.phpcms.cn/doc/PHPCMSDocumentor/mysql_data_structure.html


前台退出：http://edu.dawneve.cc/index.php?m=member&c=index&a=logout

phpsso  F:\xampp\htdocs\phpCMS_Edu\phpsso_server




一、数据库加载：
数据库配置文件：安装时填写的数据库配置数据存储在caches/configs/database.php

(1)index.php入库文件，并加载phpcms/base.php。
(2)index.php文件：pc_base::creat_app();
(3)phpcms/libs/classes/application.class.php：$controller =$this->load_controller();
默认加载：phpcms\modules\content\index.php
(4)phpcms\modules\content\index.php：$this->db =pc_base::load_model('content_model');
加载文件：phpcms/model/content_model.class.php
(5)phpcms/model/content_model.class.php：$this->db_config= pc_base::load_config('database');
(6)加载配置文件：caches/configs/database.php




二、模板解析：
文件：phpcms/libs/functions/global.func.php
调用：include template($module,$template);

模板缓存文件：phpcms/libs/classes/template_cache.class.php
template_compile：模板编译函数


------------- ----------------- edit in 2011-05-07------------- -----------------

三、用户登录模块（phpsso关联）
1、phpcms/modules/member/index.php
登陆操作：login()
...
$status =$this->client->ps_member_login($username,$password);//phpsso中判断用户登陆，正确返回用户数据array
...//如果本地用户信息不存在，则插入数据，保持数据一致。
...所以，写插入用户接口，只需要在sso_members表中添加用户信息即可。该新添加用户可以前台登录了。

$synloginstr =$this->client->ps_member_synlogin($r['phpssouid']);//phpsso用户同步登陆函数
//==========其余分析至[phpsso通信]==========




四、用户注册模块（phpsso关联）
1、phpcms/modules/member/index.php
注册操作：register()
$this->_session_start();//加载phpcms/libs/classes/session_mysql.class.php
...
$member_setting = getcache('member_setting');//加载用户配置
...
$siteid = isset($_REQUEST['siteid'])&& trim($_REQUEST['siteid']) ?intval($_REQUEST['siteid']) : 1;//默认siteid为1
...
$this->_init_phpsso();//加载phpcms/modules/member/classes/client.class.php
//phpcms/base.php中load_app_class()函数的defined("ROUTE_M")来至于phpcms/libs/classes/application.class.php
...
$status =$this->client->ps_member_register($userinfo['username'],$userinfo['password'], $userinfo['email'], $userinfo['regip'],$userinfo['encrypt']);//phpsso中添加注册用户，返回phpssouid
...
$userid =$this->db->insert($userinfo,1);//本地用户数据添加。密码加密存储




五、后台部分整理
1、口令卡（移除）
配置文件：caches/configs/system.php

后台登陆/退出：phpcms/modules/admin/index.php
后台管理：phpcms/modules/admin/admin_manage.php

口令卡类：phpcms/modules/admin/classes/card.class.php
管理员类：phpcms/modules/admin/classes/admin.class.php

语言文件：phpcms/languages/zh-cn/admin.lang.php
phpcms/languages/zh-cn/system_menu.lang.php

模板文件：phpcms/modules/admin/templates/admin_list.tpl.php
phpcms/modules/admin/templates/login_card.tpl.php
phpcms/modules/admin/templates/admin_card.tpl.php

2、后台登陆
phpcms/modules/admin/classes/admin.class.php
常规下加载phpcms/libs/classes/session_mysql.class.php
...session_start();//开启session

phpcms/modules/admin/classes/admin.class.php
状态判断：check_admin()

phpcms/modules/admin/index.php
登陆操作：login()
...
$_SESSION['userid'] = $r['userid'];
...
$cookie_time = SYS_TIME+86400*30;
...
param::set_cookie('userid', $r['userid'],$cookie_time);
...
//设置session和cookie

六、phpsso通信机制
1、用户登陆/注册模块中调用phpcms/modules/member/classes/client.class.php
private function _ps_send(){//调用phpsso接口地址
 
   //socket方式提交post数据
   return $this->_ps_post($this->ps_api_url."/index.php?m=phpsso&c=index&a=".$action,500000,$this->auth_data($data));
}
------------- ----------------- edit in 2011-05-11------------ ------------------

private function _get_url() {
   $sys_protocal = isset($_SERVER['SERVER_PORT'])&& $_SERVER['SERVER_PORT'] == '443'? 'https://' : 'http://';
    $php_self =$_SERVER['PHP_SELF'] ?$this->_safe_replace($_SERVER['PHP_SELF']) :$this->_safe_replace($_SERVER['SCRIPT_NAME']);
    $path_info =isset($_SERVER['PATH_INFO']) ?$this->_safe_replace($_SERVER['PATH_INFO']) :'';
    $relate_url= isset($_SERVER['REQUEST_URI']) ?$this->_safe_replace($_SERVER['REQUEST_URI']) :$php_self.(isset($_SERVER['QUERY_STRING']) ?'?'.$this->_safe_replace($_SERVER['QUERY_STRING']) :$path_info);
    return $sys_protocal.(isset($_SERVER['HTTP_HOST']) ? $_SERVER['HTTP_HOST']: '').$relate_url;
}



private function _ps_post($url, $limit = 0, $post = '', $cookie ='', $ip = '', $timeout = 15, $block = true) {
    $return ='';
    $matches =parse_url($url);//解析URL
    $host =$matches['host'];//主机名
    $path =$matches['path'] ? $matches['path'].($matches['query'] ?'?'.$matches['query'] : '') : '/';//路径及查询字符串
    $port =!empty($matches['port']) ? $matches['port'] : 80;//端口
    $siteurl =$this->_get_url();//获取当前页面完整URL地址
    if($post){//post方式提交
       $out = "POST $path HTTP/1.1\r\n";
       $out .= "Accept: **\r\n";
       $out .= "Referer: ".$siteurl."\r\n";
       $out .= "Accept-Language: zh-cn\r\n";
       $out .= "User-Agent: $_SERVER[HTTP_USER_AGENT]\r\n";
       $out .= "Host: $host\r\n";
       $out .= "Connection: Close\r\n";
       $out .= "Cookie: $cookie\r\n\r\n";
    }
    $fp =@fsockopen(($ip ? $ip : $host), $port, $errno, $errstr,$timeout);//用socket方式打开一个文件指针
    if(!$fp)return '';

   stream_set_blocking($fp, $block);//设置阻塞模式
   stream_set_timeout($fp, $timeout);//设置连接时间
    @fwrite($fp,$out);//把数据写入文件指针中，即发送请求头信息
    $status =stream_get_meta_data($fp);//从封装协议文件指针中取得报头/元数据，即返回写入的相关状态

   if($status['timed_out']) return'';   //等待数据流超时
    while(!feof($fp)) {//循环读取响应头信息，直到文件指针到达文件结束的位置
       if(($header = @fgets($fp)) &&($header == "\r\n" ||  $header =="\n"))  break;//从文件指针中读取一行
    }
   
    $stop =false;
   while(!feof($fp) && !$stop){//控制是否读取完成
       $data = fread($fp, ($limit == 0 || $limit > 8192 ?8192 : $limit));
       $return .= $data;
       if($limit) {
           $limit -= strlen($data);
           $stop = $limit <= 0;
       }
    }
   @fclose($fp);//关闭一个已打开的文件指针
   
   //部分虚拟主机返回数值有误，暂不确定原因，过滤返回数据格式
    $return_arr= explode("\n", $return);
   if(isset($return_arr[1])) {
       $return = trim($return_arr[1]);
    }
   unset($return_arr);
   
    return $return;
}





七、php-socket相关

1、创建流：fopen()、fsockopen()、pfsockopen()

2、stream_set_blocking($resource,$flag)
  $flag：0非阻塞，1阻塞
  某个函数读取一个网络流，当没有未读取字节时：
  阻塞：一直等待，直到下一个未读取的字节出现。
  非阻塞：立即告诉调用者当前没有新内容。
  阻塞的好处是，排除其它非正常因素，阻塞的是按顺序执行的同步的读取。

3、stream_set_timeout($resource,$responseTimeout)//设置返回的超时时间

4、stream_get_meta_data($resource)
 //从封装协议文件指针中取得报头/元数据
（1）timed_out (bool) - 如果在上次调用 fread() 或者 fgets() 中等待数据时流超时了则为TRUE。
（2）blocked (bool) - 如果流处于阻塞 IO 模式时为 TRUE。参见stream_set_blocking()。
（3）eof (bool) - 如果流到达文件末尾时为 TRUE。注意对于 socket 流甚至当 unread_bytes为非零值时也可以为 TRUE。要测定是否有更多数据可读，用 feof()替代读取本项目的值。
（4）unread_bytes (int) - 当前在 PHP 自己的内部缓冲区中的字节数。

5、stream_get_contents($resource)//取得返回的数据流内容

6、相关函数：fwrite()、fgets()、feof()、fread()、fclose()
读字符串函数fgets函数的功能是从指定的文件中读一个字符串到字符数组中，函数调用的形式为： fgets(字符数组名，n，文件指针)；其中的n是一个正整数。表示从文件中读出的字符串不超过n-1个字符。在读入的最后一个字符后加上串结束标志'\0'。例如：fgets(str,n,fp);的意义是从fp所指的文件中读出n-1个字符送入字符数组str中。
fread是用于整块数据的读写函数,可用来读写一组数据，如一个数组元素，一个结构变量的值等。读数据块函数调用的一般形式为：fread(buffer,size,count,fp),其中buffer是一个指针，在fread函数中，它表示存放输入数据的首地址。size 表示数据块的字节数。count 表示要读写的数据块块数。fp 表示文件指针。
eg：fread(fa,4,5,fp);其意义是从fp所指的文件中，每次读4个字节(一个实数)送入实数组fa中，连续读5次，即读5个实数到fa中。

7、$_POST、HTTP_RAW_POST_DATA、php://input
（1）HTTP_RAW_POST_DATA仅在碰到未识别MIME类型的数据时产生。对于enctype="multipart/form-data"表单数据不可用。
（2）访问原始POST数据的更好方法是php://input
（3）php://input 允许读取 POST 的原始数据。和 $HTTP_RAW_POST_DATA比起来，它给内存带来的压力较小，并且不需要任何特殊的 php.ini 设置。php://input 不能用于enctype="multipart/form-data"。

基本上$GLOBALS['HTTP_RAW_POST_DATA'] 和$_POST是一样的。但是如果post过来的数据不是PHP能够识别的，你可以用$GLOBALS['HTTP_RAW_POST_DATA']来接收，比如text/xml或者soap等等。

PHP默认识别的数据类型是application/x-www.form-urlencoded标准的数据类型
因此，对型如text/xml的内容无法解析为$_POST数组，故保留原型，交给$GLOBALS['HTTP_RAW_POST_DATA']来接收。
eg.
（1）phpcmsv9中phpsso_server/phpcms/modules/phpsso/classes/phpsso.class.php
if(isset($GLOBALS['HTTP_RAW_POST_DATA'])){
   $this->data['avatardata'] =$GLOBALS['HTTP_RAW_POST_DATA'];
    ...
}
（2）phpsso_server/phpcms/modules/phpsso/index.php
file_put_contents($filename,$this->data['avatardata']);//把数据写入文件
eg.
<form action="test.php"method="post">
   <input type="text" name="user">
   <input type="password"name="password">
   <input type="submit">
</form>
test.php
<? echo file_get_contents("php://input");?>

八、http协议
1、特点
简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。
灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。
无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。
无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。

2、php-socket中http的请求和响应
========== 请求头信息 ==========
Host:localhost
User-Agent:Mozilla/5.0 (Windows NT 5.1; rv:2.0) Gecko/20100101Firefox/4.0
Accept:application/json, text/javascript, */*
Accept-Language:zh-cn,zh;q=0.5
Accept-Encoding:gzip, deflate
Accept-Charset:GB2312,utf-8;q=0.7,*;q=0.7
Keep-Alive:115
Proxy-Connection:keep-alive
Content-Type:application/x-www-form-urlencoded
X-Requested-With:XMLHttpRequest
Referer:http://localhost/
Cookie:---cookie相关---
---请求发送数据---
========== 响应头信息 ==========
Proxy-Connection:Keep-Alive
Connection:Keep-Alive
Content-Length:112
Via    1.1WALKISA
Date:Tue, 17 May 2011 03:26:18 GMT
Content-Type:text/html; charset=gbk
Server:nginx/0.7.67
X-Powered-By:PHP/5.2.13
-------------- ---------------- edit in 2011-05-18--------------- ---------------





九、信息模型和用户模型
涉及数据表：v9_model、v9_model_field
信息模型：phpcms/modules/content/fields/content_form.class.php
用户模型：phpcms/modules/member/fields/member_form.class.php
缓存类文件：caches/caches_model/caches_data/content_form.class.php(member_form.class.php)
信息模型调用：require CACHE_MODEL_PATH.'content_form.class.php';
     $content_form = new content_form($modelid,$catid, $CATEGORYS);
     $forminfos_data =$content_form->get();
模型缓存更新：
(1)后台更新文件：phpcms/modules/admin/cache_all.php
array('name' => L('sitemodel'), 'function'=>'sitemodel'),调用phpcms/modules/admin/classes/cache_api.class.php中的模型缓存更新函数sitemodel()
(2)sitemodel()中根据fields.inc.php配置信息拼凑fiels中的form.inc.php代码，生成form缓存类文件。
注：会员模型缓存类文件的生成跟站点模型类似。




========================================
----------------------------------------

========================================
----------------------------------------


========================================
----------------------------------------

========================================
----------------------------------------


========================================
----------------------------------------

========================================
----------------------------------------


========================================
----------------------------------------

========================================
----------------------------------------


========================================
----------------------------------------

========================================
----------------------------------------


========================================
----------------------------------------

========================================
----------------------------------------


========================================
----------------------------------------
