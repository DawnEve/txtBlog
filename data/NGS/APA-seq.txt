APA 分析




========================================
polyA / scPolyA 原理、算法、实现
----------------------------------------

APA方法的综述(DaPars作者)：https://pubmed.ncbi.nlm.nih.gov/34183123/

- 基于数据库的
  Methods depending on annotated poly (A) sites
- 基于转录本组装的？三代测序？
  Methods depending on transcript assembly
- 基于被模板的mRNA末端的连续A定位
  Methods using reads that contain a string of untemplated adenosines
- 基于RNA-seq的3‘端密度变化
  Methods based on fluctuations in RNA-seq density near 3'UTR






1. 预处理
(1) 怎么过滤 APA位置？

(2) 研究范围
- 只研究 3UTR区域的：推荐。需要先获取3UTR区域。
- 只研究 intron区域的
- 全部都包括




2. 核心指标
(1). 怎么量化 APA？

- 使用 3UTR 长度，每个polyA位置到上游stop coden的长度(去掉中间的intron)，按reads数加权
- 使用远端使用率的百分比，按位置加权
- 使用远端/近端 转录本ratio


(2). 怎么计算p值？



(3). 怎么合并相近的 peak? 相差多少bp？





3. 文献的具体操作
(1)  https://pubmed.ncbi.nlm.nih.gov/34429411/
Nat Commun. 2021 | The landscape of alternative polyadenylation in single cells of the developing mouse embryo
	* 3′-UTR length corresponding to a given read (i.e., which remained after read filtering) was computed as the distance from the stop codon to the read’s assigned PAS, minus the length of any intervening intron(s).
	* These 3′-UTR lengths were used to compute a “gene by cell” sparse matrix of the mean length among all 3′-UTR isoforms, weighted by their respective counts.
	* For each gene, we then computed each cell’s deviation from the mean of 3′-UTR lengths across cells, considering only nonmissing values.

标题: Calculation of 3′-UTR lengths, relative length differences, and corresponding visualizations

下载的数据
Reads were mapped to the mm10 genome and collected from previous work31 (GEO ID: GSE119945). 

根据距离已知PAS位置过滤reads。?? 这样又变成db依赖的方法了。
Reads were then filtered according to their proximity to a known PAS. 

motif查找使用 DREME v5.0.576，使用 lasso 回归检测，这样过滤会提高3UTR变体的数量。
Associated motif analyses using DREME v5.0.576 and lasso regression models77 demonstrated that these read filtering criterion improved the quantitation of 3′-UTR isoforms. 

3UTR长度的计算：pas到上游stop coden 的距离，去掉intron。
3′-UTR length corresponding to a given read (i.e., which remained after read filtering) was computed as the distance from the stop codon to the read’s assigned PAS, minus the length of any intervening intron(s). 

这些3UTR长度用来计算 gene X cell 矩阵，计算mean 3UTR时使用reads作为权重。
These 3′-UTR lengths were used to compute a “gene by cell” sparse matrix of the mean length among all 3′-UTR isoforms, weighted by their respective counts. 

对于每个基因，计算每个细胞距离所有细胞的3UTR的偏移，只考虑非缺失值。
For each gene, we then computed each cell’s deviation from the mean of 3′-UTR lengths across cells, considering only nonmissing values. 

对于热图，这些偏移值按细胞标签(t-SNE 聚类，UMAP 分化树，或者发育阶段)进行平均。
For heatmaps, these deviation values were then averaged according to the labels assigned to each cell (i.e., with respect to t-SNE cluster, UMAP trajectory, and/or developmental stage). 

细胞标签使用之前的。
Cell labels were based upon those previously assigned31. 

当说明的时候，有些情况热图是进一步按照行或列中心化：减去行或者列的均值。
When indicated in the legend, in some instances the heatmaps were further centered by subtracting the mean of the row or column. 

t-SNE 图使用 pyplot 中的 hexbin 可视化，对bin内细胞求均值。
t-SNE plots were visualized using the hexbin (gridsize = 500, vmin = −50, vmax = 50) function from pyplot, which averages values from cells captured in local bins. 

UMAP图是把x,y,z分别分成150等份。
UMAP plots were binned by splitting each of the x, y, and z coordinates into 150 equally sized bins. 

对于图2和3，我们尝试逐渐增加严谨度来保留稀疏矩阵中的 gene and/or 细胞，然后获得了高度可靠的、不依赖所选threshold的结果。
For all of our analyses presented in Figs. 2 and 3, we experimented with testing increasingly stringent minimal read count thresholds to retain genes and/or cells in our sparse matrix, and achieved highly robust results independent of the thresholds selected.











========================================
polyA 注释信息数据库：整理成标准bed文件，方便在 IGV 中查看
----------------------------------------




========================================
|-- 权威注释源: gencode(hg38 5.0万位点)/ 
----------------------------------------
1. 通用权威注释源
/home/wangjl/data/ref/hg38/polyA

(1) gencode
## https://www.gencodegenes.org/human/
$ wget http://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_38/gencode.v38.polyAs.gtf.gz
$ wget http://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_38/gencode.v38.metadata.PolyA_feature.gz

$ gunzip *
#  90830   726640  5955987 gencode.v38.metadata.PolyA_feature
#  96561  2124255 19483618 gencode.v38.polyAs.gtf #9万行


1)
$ head gencode.v38.metadata.PolyA_feature
自己添加的行    1        2       3        4       5       6     7       8
ENST00000484859.1       4859    4860    chr1    141474  141475  -       polya_site
ENST00000484859.1       4852    4857    chr1    141477  141482  -       polya_signal
ENST00000412666.1       425     426     chr1    365509  365510  +       polya_site
ENST00000412666.1       405     410     chr1    365489  365494  +       polya_signal
ENST00000452176.2       817     818     chr1    627377  627378  -       polya_site
ENST00000452176.2       799     804     chr1    627391  627396  -       polya_signal
ENST00000450696.1       401     402     chr1    594573  594574  +       polya_site

共8列，按第八列分为2类
$ cat gencode.v38.metadata.PolyA_feature | awk '{print $8}' | sort | uniq -c
  45282 polya_signal
  45457 polya_site #共4.5万位点
     91 pseudo_polya 什么是假 polyA?太少忽略掉

第1列是 基因id
第2列是 
第3列是 
第4列是 染色体: chr1, chr2, ...
第5列是 
第6列是 
第7列是 strand: + -
第8列是 位点或信号

问题：2和3,5和6列都是啥？他们的相对差是一样的，$3-$2==$6-$5

按第2列排序，感觉不像是坐标，最大值太小了！ //todo 不知道是啥
$ cat gencode.v38.metadata.PolyA_feature |awk '$4=="chr7"' | sort -k2nr | head -n2
ENST00000423517.6	17146	17147	chr7	82820477	82820478	-	polya_site
ENST00000423517.6	17116	17121	chr7	82820503	82820508	-	polya_signal
$ cat gencode.v38.metadata.PolyA_feature |awk '$4=="chr7"' | sort -k2nr | tail -n2
ENST00000583751.1	153	158	chr7	87155535	87155540	+	polya_signal
ENST00000583751.1	134	139	chr7	87155516	87155521	+	polya_signal

按第5列排序，最小 27214，最大 159116941，IGV查看像是坐标极值了
$ cat gencode.v38.metadata.PolyA_feature |awk '$4=="chr7"' | sort -k5nr | head -n2
ENST00000421760.2	693	698	chr7	159116941	159116946	-	polya_signal
ENST00000421760.2	716	717	chr7	159116922	159116923	-	polya_site
$ cat gencode.v38.metadata.PolyA_feature |awk '$4=="chr7"' | sort -k5nr | tail -n2
ENST00000635506.1	321	322	chr7	27233	27234	+	polya_site
ENST00000635506.1	302	307	chr7	27214	27219	+	polya_signal


核对 grb10 基因上的polyA位点: chr7:50,588,869-50,595,988，
再次印证第5和6行是坐标。
那么低3和4行可能是基因范围？不清楚
$ cat gencode.v38.metadata.PolyA_feature |awk '$4=="chr7"' | grep "\s5059"
ENST00000335866.7	5031	5032	chr7	50590063	50590064	-	polya_site
ENST00000335866.7	5002	5007	chr7	50590088	50590093	-	polya_signal
ENST00000398812.6	4704	4705	chr7	50590063	50590064	-	polya_site
ENST00000398812.6	4675	4680	chr7	50590088	50590093	-	polya_signal
ENST00000398810.6	4784	4785	chr7	50590063	50590064	-	polya_site
ENST00000398810.6	4755	4760	chr7	50590088	50590093	-	polya_signal

ENST00000402578.5	4759	4760	chr7	50590068	50590069	-	polya_site
ENST00000402578.5	4735	4740	chr7	50590088	50590093	-	polya_signal
ENST00000401949.6	5467	5468	chr7	50590068	50590069	-	polya_site
ENST00000401949.6	5443	5448	chr7	50590088	50590093	-	polya_signal
ENST00000644769.1	5431	5432	chr7	50590068	50590069	-	polya_site
ENST00000644769.1	5407	5412	chr7	50590088	50590093	-	polya_signal

ENST00000357271.9	2049	2050	chr7	50592580	50592581	-	polya_site
ENST00000357271.9	2032	2037	chr7	50592593	50592598	-	polya_signal
ENST00000402497.6	2318	2319	chr7	50592580	50592581	-	polya_site
ENST00000402497.6	2301	2306	chr7	50592593	50592598	-	polya_signal

##=> 
50590063 远端：有好几行是这一个位点，怎么处理重复？
50590068 和上一行太近
50592580 近端

结合gtf查看这几个位点
$ cat gencode.v38.polyAs.gtf |awk '$1=="chr7"' | grep "\s5059" | awk '{print $1"\t"$4"\t"$5"\t"$3}'
chr7	50590063	50590064	polyA_site
chr7	50590068	50590069	polyA_site
chr7	50590088	50590093	polyA_signal
chr7	50592580	50592581	polyA_site
chr7	50592593	50592598	polyA_signal

产生 bed 文件
$ cat gencode.v38.metadata.PolyA_feature | awk '$8=="polya_site"{print $4"\t"$5"\t"$6"\t"$1"\t0\t"$7}' >gencode.v38.metadata.polyA_site.bed.raw
$ head gencode.v38.metadata.polyA_site.bed.raw
chr1	141474	141475	ENST00000484859.1	0	-
chr1	365509	365510	ENST00000412666.1	0	+
chr1	627377	627378	ENST00000452176.2	0	-
chr1	594573	594574	ENST00000450696.1	0	+

$ cat gencode.v38.metadata.polyA_site.bed.raw | awk '{print $1":"$2":"$6}' | sort |uniq -c |sort -k1nr|head
     52 chr3:107841662:-
     44 chr11:95832882:-
     39 chr20:26187019:-
     35 chr20:58911191:+
     32 chr3:100748963:+
     27 chr8:129216467:-
     26 chr2:149026758:+
     25 chr20:38420588:-
为什么重复这么多?
$ cat gencode.v38.metadata.polyA_site.bed.raw | awk '$1=="chr3" && $2=="107841662"'|wc
     52     312    2444
$ cat gencode.v38.metadata.polyA_site.bed.raw | awk '$1=="chr3" && $2=="107841662"'
chr3	107841662	107841663	ENST00000488852.5	0	-
chr3	107841662	107841663	ENST00000655585.1	0	-
chr3	107841662	107841663	ENST00000671051.1	0	-
chr3	107841662	107841663	ENST00000657924.1	0	-
chr3	107841662	107841663	ENST00000473528.7	0	-
chr3	107841662	107841663	ENST00000664360.1	0	-
chr3	107841662	107841663	ENST00000662126.1	0	-
chr3	107841662	107841663	ENST00000658864.1	0	-
chr3	107841662	107841663	ENST00000657888.1	0	-
chr3	107841662	107841663	ENST00000669982.1	0	-
chr3	107841662	107841663	ENST00000669004.1	0	-
chr3	107841662	107841663	ENST00000667930.1	0	-
chr3	107841662	107841663	ENST00000654163.1	0	-
chr3	107841662	107841663	ENST00000667116.1	0	-
chr3	107841662	107841663	ENST00000665981.1	0	-
chr3	107841662	107841663	ENST00000667812.1	0	-
chr3	107841662	107841663	ENST00000662882.1	0	-
chr3	107841662	107841663	ENST00000655401.1	0	-

重新产生bed文件：忽略 geneid 信息，唯一化位置信息后再拆分成bed格式:
$ cat gencode.v38.metadata.PolyA_feature | awk '$8=="polya_site"{print $4":"$5":"$7}' | sort | uniq | awk -F':' '{print $1"\t"$2"\t"$2+1"\t"$0"\t0\t"$3}' >gencode.v38.metadata.polyA_site.bed
29132  174792 1304264 gencode.v38.metadata.polyA_site.bed #有2.9万个位点

$ head gencode.v38.metadata.polyA_site.bed
chr10	100150094	100150095	chr10:100150094:-	0	-
chr10	100188367	100188368	chr10:100188367:-	0	-
chr10	100280041	100280042	chr10:100280041:-	0	-
chr10	100288149	100288150	chr10:100288149:-	0	-
chr10	100483743	100483744	chr10:100483743:+	0	+
chr10	100486645	100486646	chr10:100486645:-	0	-

载入IGV，查看 GRB10 的3UTR位点。
/home/wangjl/data/ref/hg38/polyA
$ scp gencode.v38.metadata.polyA_site.bed wangjl@y.biomooc.com:/home/wangjl/data/igv/






2)
$ head gencode.v38.polyAs.gtf
##description: evidence-based annotation of the human genome (GRCh38), version 38 (Ensembl 104) - polyA features
##provider: GENCODE
##contact: gencode-help@ebi.ac.uk
##format: gtf
##date: 2021-03-10
chr1    HAVANA  pseudo_polyA    134957  134962  .       -       .       gene_id "383460"; transcript_id "383460"; gene_type "pseudo_polya"; gene_name "383460"; transcript_type "pseudo_polya"; transcript_name "383460"; level 2;
chr1    HAVANA  polyA_site      141474  141475  .       -       .       gene_id "383461"; transcript_id "383461"; gene_type "polya_site"; gene_name "383461"; transcript_type "polya_site"; transcript_name "383461"; level 2;


$ grep -v "^#" gencode.v38.polyAs.gtf | wc
  96556 2124232 19483418
$ grep -v "^#" gencode.v38.polyAs.gtf | grep "polyA" |wc
  96556 2124232 19483418
$ grep -v "^#" gencode.v38.polyAs.gtf | grep "polya_signal" |wc 
  40198  884356 8236535

$ grep -v "^#" gencode.v38.polyAs.gtf | grep "polya_site" |wc 
  50182 1104004 9981589

$ grep -v "^#" gencode.v38.polyAs.gtf | grep "polya_site" | awk '{print $1":"$4":"$7}'| sort | uniq -c | sort -k1nr | head
      2 chr12:112944892:+
      2 chr12:85233030:+
      2 chr16:68138783:+
      2 chr19:55087918:+
      1 chr10:100150094:-
      1 chr10:100164016:-
      1 chr10:100188298:-
竟然很少重复的！

整理成 标准 bed 格式
$ grep -v "^#" gencode.v38.polyAs.gtf | grep "polya_site" | awk '{print $1":"$4":"$7}'| sort | uniq | awk -F':' '{print $1"\t"$2"\t"$2+1"\t"$0"\t0\t"$3}' >gencode.v38.gtf.polyA_site.bed
50178  301068 2238247 gencode.v38.gtf.polyA_site.bed  #有5.0万个位点

$ head gencode.v38.gtf.polyA_site.bed
chr10	100150094	100150095	chr10:100150094:-	0	-
chr10	100164016	100164017	chr10:100164016:-	0	-
chr10	100188298	100188299	chr10:100188298:-	0	-
chr10	100188367	100188368	chr10:100188367:-	0	-
chr10	100274695	100274696	chr10:100274695:-	0	-
chr10	100280041	100280042	chr10:100280041:-	0	-
chr10	100288149	100288150	chr10:100288149:-	0	-
chr10	100364833	100364834	chr10:100364833:+	0	+
chr10	100413420	100413421	chr10:100413420:+	0	+

载入IGV，查看 GRB10 的3UTR位点。
/home/wangjl/data/ref/hg38/polyA
$ scp gencode.v38.gtf.polyA_site.bed wangjl@y.biomooc.com:/home/wangjl/data/igv/


怎么比较一下这2个文件？目测 gtf 确实包含更多的位点，优先使用。
- 50178  301068 2238247 gencode.v38.gtf.polyA_site.bed
- 29132  174792 1304264 gencode.v38.metadata.polyA_site.bed






========================================
|-- polyA_DB2 位点( hg19 54,406 = 5.4 万位点)
----------------------------------------
2. 专业注释，重点实验室给出的资源

https://exon.apps.wistar.org/polya_db/
PolyA_DB2:
	https://exon.apps.wistar.org/PolyA_DB/v2/
PolyA_DB3: hg19, mm9, rn5 
	https://exon.apps.wistar.org/PolyA_DB/v3/misc/download.php

PolyASite 2.0 
	https://polyasite.unibas.ch/atlas#2
		https://polyasite.unibas.ch/download/atlas/2.0/GRCh38.96/atlas.clusters.2.0.GRCh38.96.bed.gz



#db2 fdb2="/home/wangjl/data/apa/190610APA/02_validate/polyAsite.hs.db2.hg19.txt" 54,665rows
#db3 fdb3="/home/wangjl/data/apa/190610APA/02_validate/human.PAS.txt" 311,595rows




/home/wangjl/data/ref/hg19/polyA/
(1) polyA_DB2 位点
PolyA_DB version 2 contains polyA sites in human, mouse, rat, chicken and zebrafish that are mapped by cDNA/EST and Trace sequences. Sequence alignments between orthologous sites are also available.

1) 下载原始数据
$ wget https://exon.apps.wistar.org/PolyA_DB/v2/download/polyAsite.db2.bz2 报错 
$ wget https://exon.apps.wistar.org/PolyA_DB/v2/download/polyAsite.db2.bz2 --no-check-certificate
$ bzip2 -d polyAsite.db2.bz2
## 123641  865488 4609533 polyAsite.db2

前几行看不到物种信息，貌似第一列前缀是物种？
$ cat polyAsite.db2 | head | column -t
siteid         llid    chr  sitenum  position   supporting  EST  cleavage
Dr.1.1.2       30686   24   2        6919195    1           1
Dr.10005.1.1   0       Un   1        11820591   6           2
Dr.1002.1.1    0       Un   1        143246768  3           2
Dr.10024.1.1   0       NA   1        384763971  3           1
Dr.1003.1.1    0       Un   1        113763249  1           1


2) 获取感兴趣物种的位点(人，鼠)
第一行前缀确实是物种信息。人Hs的5.4万行
$ sed '1d' polyAsite.db2 | awk -F"." '{print $1}' | sort | uniq -c
   5830 Dr
   6287 Gga
  54686 Hs
  30235 Mm
  26602 Rn

$ cat polyAsite.db2 | awk -F"." '{if(NR==1 || $1=="Hs")print $0}' |head |column -t
siteid          llid    chr  sitenum  position   supporting  EST  cleavage
Hs.100009.1.10  1018    17   10       71508259   27          4
Hs.100009.1.21  1018    17   21       71513673   6           3
Hs.100043.1.10  115098  19   10       17915785   42          9
Hs.100057.1.13  140901  20   13       2077020    2           1

$ cat polyAsite.db2 | awk -F"." '{if(NR==1 || $1=="Hs")print $0}' >polyAsite.hs.db2
$ cat polyAsite.db2 | awk -F"." '{if(NR==1 || $1=="Mm")print $0}' >polyAsite.mm.db2
   54687   382810  2055243 polyAsite.hs.db2
   30236   211653  1158051 polyAsite.mm.db2

$ head polyAsite.hs.db2 | column -t
siteid          llid    chr  sitenum  position   supporting  EST  cleavage
siteid	llid	chr	sitenum	position	supporting EST	cleavage ##第一行单独打印，看一下哪些单词连贯
Hs.100009.1.10  1018    17   10       71508259   27          4
Hs.100009.1.21  1018    17   21       71513673   6           3
Hs.100043.1.10  115098  19   10       17915785   42          9
Hs.100057.1.13  140901  20   13       2077020    2           1

$ head polyAsite.hs.db2 | awk -F"\t" '{print $6}'
第1列 siteid: Hs.100009.1.10
第2列 llid: 1018 
第3列 chr: 染色体编号 17
第4列 sitenum：10 第几个? //todo
第5列 position: 坐标 71508259
第6列 supporting EST: 27 支持数据
第7列 cleavage: 4 不知道啥 //todo


3) 每个染色多少个位点？
## 人23对 = 22+XY
$ sed '1d' polyAsite.hs.db2 | awk '{print $3}'| sort | uniq -c | sort -k1nr
   5029 1
   4155 2
   3301 3
   3038 6
   2963 5
   2919 11
   2727 17
   2714 7
   2618 4
   2551 12
   2514 10
   2452 19
   2297 9
   2212 8
   1987 16
   1892 14
   1818 15
   1748 X
   1462 20
   1219 13
   1085 22
    993 18
    770 21
     88 Y
     35 17_random
...
      2 6_hla_hap1
      2 9_random

## 小鼠 20对=19+XY
$ sed '1d' polyAsite.mm.db2 | awk '{print $3}'| sort | uniq -c | sort -k1nr
   2427 2
   2390 11
   1945 7
   1873 1
   1863 4
   1838 5
   1682 9
   1605 6
   1569 3
   1540 8
   1394 10
   1303 17
   1174 15
   1161 12
   1149 13
   1070 14
   1043 X
   1042 16
   1037 19
    828 18
    134 7_random
...
     22 Y
...

4) liftover转成新坐标(hg17->hg19, mm5->mm10 失败)

看网页上的注释，推测参考基因组版本：https://exon.apps.wistar.org/PolyA_DB/v2/
Human genome (UCSC hg17, 5/2004) #这也太古老了吧！
Mouse genome (UCSC mm5, 5/2004) #这个 liftover 官网已经不支持了，那就跳过吧。
Rat genome (UCSC rn3, 5/2003)

没有strand信息
需要做liftover，从hg17变为hg19
仅适用前两列，构造chrN:start-end格式

$ sed '1d' polyAsite.hs.db2 | awk  '{print "chr"$3":"$5"-"$5}'  >polyAsite.hs.db2.beforeLiftOver
$ sed '1d' polyAsite.mm.db2 | awk  '{print "chr"$3":"$5"-"$5}'  >polyAsite.mm.db2.beforeLiftOver

比较少，直接用网页版：
## https://genome.ucsc.edu/cgi-bin/hgLiftOver
Successfully converted 54665 records: View Conversions
Conversion failed on 21 records.  

54665   54665 1306841 polyAsite.hs.db2.hg19.bed
$ head polyAsite.hs.db2.hg19.bed
chr17:73996664-73996664
chr17:74002078-74002078
chr19:18054785-18054785
chr20:2129020-2129020


$ awk -F"-" '{print $1}' polyAsite.hs.db2.hg19.bed |head
chr17:73996664
chr17:74002078
chr19:18054785
$ awk -F"-" '{print $1}' polyAsite.hs.db2.hg19.bed >polyAsite.hs.db2.hg19.txt

54665  54665 802587 polyAsite.hs.db2.hg19.txt
和之前整理的一模一样: /home/wangjl/data/apa/190610APA/02_validate/polyAsite.hs.db2.hg19.txt

检查发现还是有重复的位点！
$ cat polyAsite.hs.db2.hg19.txt | sort | uniq -c | sort -k1nr| head
      6 chr14:23021094
      5 chr14:23021097
      3 chr1:148596158
      3 chr1:223010726
      3 chr14:106090687


去重后，转为 标准bed 格式，方便IGV使用
$ cat polyAsite.hs.db2.hg19.txt | sort | uniq | awk -F":" '{print $1"\t"$2"\t"$2+1"\t"$0"\t0\t."}' > polyAsite.hs.db2.hg19.bed
	54406  326436 2317019 polyAsite.hs.db2.hg19.bed #去掉了几百行重复位点
$ head polyAsite.hs.db2.hg19.bed
chr10	100004650	100004651	chr10:100004650	0	.
chr10	100007451	100007452	chr10:100007451	0	.
chr10	100007551	100007552	chr10:100007551	0	.
chr10	100016332	100016333	chr10:100016332	0	.
chr10	100050456	100050457	chr10:100050456	0	


/home/wangjl/data/ref/hg19/polyA/
$ scp polyAsite.hs.db2.hg19.bed wangjl@y.biomooc.com:/home/wangjl/data/igv/









(2) polyA_DB2 的信号motif

$ wget https://exon.apps.wistar.org/PolyA_DB/v2/download/PAS.db2.bz2 --no-check-certificate
$ bzip2 -d PAS.db2.bz2
## 158605  475816 3916522 PAS.db2

$ head PAS.db2 
siteid	pas type	position
Hs.100009.1.10	AATAAA	-26
Hs.100009.1.21	AATAAA	-25
Hs.100043.1.10	AATAAA	-23
Hs.100057.1.14	AATAAA	-25

第1列 siteid: Hs.100009.1.10
第2列 pas type 信号类型: AATAAA
第3列 position: -26


$ sed '1d' PAS.db2 | awk -F '.' '{print $1}' | sort | uniq -c 
   8137 Dr
   8160 Gga
  70459 Hs
  37783 Mm
  34065 Rn

2) 获取人和小鼠的
$ sed '1d' PAS.db2 | awk -F '.' '$1=="Hs"' > PAS.Hs.db2
$ sed '1d' PAS.db2 | awk -F '.' '$1=="Mm"' > PAS.Mm.db2

  70459  211377 1765811 PAS.Hs.db2
  37783  113349  936985 PAS.Mm.db2

3) 查看 人 的pas使用偏好性
$ cat PAS.Hs.db2 | awk -F"\t" '{print $2}' | sort | uniq -c | sort -k1nr
  29136 AATAAA
  10065 ATTAAA
   5678 TTTAAA
   4299 AAGAAA
   3835 TATAAA
   3266 AATATA
   3071 AATGAA
   2823 AGTAAA
   2264 AATACA
   1945 CATAAA
   1584 GATAAA
   1374 ACTAAA
   1119 AATAGA

$ cat PAS.Mm.db2 | awk -F"\t" '{print $2}' | sort | uniq -c | sort -k1nr
  16509 AATAAA
   5310 ATTAAA
   3159 TTTAAA
   2559 AAGAAA
   1980 TATAAA
   1513 AATATA
   1380 AATGAA
   1363 AGTAAA
   1035 AATACA
   1022 CATAAA
    767 GATAAA
    676 ACTAAA
    510 AATAGA
#共13个

4) 位置信息
$ cat PAS.Hs.db2 | awk -F"\t" '{print $3}' | sort | uniq -c | sort -k1nr
   6039 -21
   5673 -20
   5364 -22
   4994 -23
   4430 -19
   4234 -24
   3505 -25
   3030 -26
   2609 -18
   2468 -27
   2075 -6
   2074 -28
   1912 -2
   1725 -29
   1676 -7
   1473 -30
   1233 -31
   1224 -8
...








========================================
|-- PolyA_DB3: hg19(290,168=29万位点), mm9(384,337=38万位点), rn5
----------------------------------------
(3). PolyA_DB3: hg19, mm9, rn5 

1) 下载 
https://exon.apps.wistar.org/PolyA_DB/v3/misc/download.php

/home/wangjl/data/ref/hg19/polyA/polyA_DB3/
$ wget https://exon.apps.wistar.org/polya_db/v3/download/3.2/mouse_pas.zip --no-check-certificate
$ wget https://exon.apps.wistar.org/polya_db/v3/download/3.2/human_pas.zip --no-check-certificate

$ unzip human_pas.zip
$ unzip mouse_pas.zip

  311595  6335741 44824138 human.PAS.txt ##有31万行
  398885  7507668 54110436 mouse.PAS.txt

2) 看每列的含义
$ head human.PAS.txt -n 3
PAS_ID	Chromosome	Position	Strand	Mean RPM	Intron/exon location	Ensemble ID	RefSeq Gene ID	Gene Symbol	Gene Name	FAMTOM ID	FANTOM Category	Extension	PAS type	PSE	PAS Signal	Conservation	intergenic_TE
chr1:564599:+	chr1	564599	+	3.33339746426	Single exon	ENSG00000225972	na	MTND1P23	mitochondrially encoded NADH:ubiquinone oxidoreductase core subunit 1 pseudogene 23	na	na	NO	Pseudogene	49.53%	NoPAS	No	NO
chr1:564629:+	chr1	564629	+	1.2015737728799998	Single exon	ENSG00000225972	na	MTND1P23	mitochondrially encoded NADH:ubiquinone oxidoreductase core subunit 1 pseudogene 23	na	na	NO	Pseudogene	3.74%	NoPAS	No	NO

$ head human.PAS.txt | awk -F"\t" '{print $1}'
PAS_ID
chr1:564599:+
chr1:564629:+

第1列 PAS_ID: chr1:564599:+
第2列 Chromosome: chr1
第3列 Position: 564599
第4列 Strand: +
第5列 Mean RPM
3.33339746426
1.2015737728799998

第6列 Intron/exon location: Single exon  或 intergenic
第7列 Ensemble ID: ENSG00000225972
第8列 RefSeq Gene ID: na
第9列 Gene Symbol: MTND1P23
第10列 Gene Name: mitochondrially encoded NADH:ubiquinone oxidoreductase core subunit 1 pseudogene 23
第11列 FAMTOM ID: na
第12列 FANTOM Category: na
第13列 Extension: NO
第14列 PAS type: Pseudogene
第15列 PSE
49.53%
3.74%

第16列 PAS Signal
NoPAS
OtherPAS
AAUAAA

第17列 Conservation: No
第18列 intergenic_TE: NO


3) 每条染色体上位点个数
$ cat human.PAS.txt | sed '1d'| awk '{print $2}' | sort |uniq -c | sort -k1nr
  29257 chr1
  23344 chr2
  18588 chr3
  18066 chr5
  17576 chr6
  16115 chr12
  15865 chr17
  15678 chr11
  15664 chr7
  15444 chr19
  14231 chr4
  13301 chr10
  12677 chr8
  12383 chr9
  11158 chr16
  10688 chr14
  10325 chr15
   9446 chrX
   7706 chr20
   6957 chr13
   6134 chr22
   5947 chr18
   4527 chr21
    517 chrY
#



4) 位点一般在什么位置？外显子 or 内含子?(第6列)
$ cat human.PAS.txt | sed '1d'| awk -F"\t" '{print $6}' | sort |uniq -c | sort -k1nr
 117837 3' most exon
 114376 Intron
  61668 intergenic
   8070 Single exon
   6508 Internal exon
   3135 5' most exon
# 主要在最3‘端、内含子区域、基因间区。



5) 每个基因几个位点？
$ cat human.PAS.txt | sed '1d'| awk '{print $9}' | sort |uniq -c | sort -k1nr|wc
  32474   64948  631103
共3.2万基因。

$ cat human.PAS.txt | sed '1d'| awk -F"\t" '{print $9}' | sort |uniq -c | sort -k1nr| head
  61668 
  51646 na
    258 NBPF19
    172 NBPF20
     92 NBPF10
     81 FBXL17
     79 AL138752.2
     78 ASPH
     78 NCAM2
     77 LMBR1

$ cat human.PAS.txt | sed '1d'| awk -F"\t" '{print $9}' | sort |uniq -c | sort -k1nr > sitePerGene.db3
19729  39457 292580 sitePerGene.db3

$ tail sitePerGene.db3
      1 ZNF98
      1 ZNF99
      1 ZNRF4
      1 ZP1
      1 ZP4
      1 ZPBP
      1 ZPBP2
      1 ZRSR1
      1 ZSCAN5B
      1 ZSWIM8


i)有很多没有基因名字，也就是落在了 基因间区？
$ cat human.PAS.txt | sed '1d'| awk -F"\t" '$9==""{print $0}' |wc
  61668  863352 6392646

$ cat human.PAS.txt | sed '1d'| awk -F"\t" '$9==""{print $0}' | head 
chr1:570311:+	chr1	570311	+	1.46587242106	intergenic					na	na	NO	intergenic	1.87%	NoPAS	No	NO
chr1:745440:+	chr1	745440	+	0.896616562362	intergenic					na	na	NO	intergenic	5.61%	AAUAAA	No	NO
chr1:755217:+	chr1	755217	+	6.121653215369999	intergenic					na	na	NO	intergenic	7.48%	AAUAAA	No	YES


ii)na 是啥？
$ cat human.PAS.txt | sed '1d'| awk -F"\t" '$9=="na"{print $0}' |wc
  51646  983349 7253429
$ cat human.PAS.txt | sed '1d'| awk -F"\t" '$9=="na"{print $0}' | head
chr1:719344:+	chr1	719344	+	0.668048283545	Intron	na	na	na	na	ENSG00000237491.4	p-lncRNA, intergenic	NO	LncRNA(FANTOM5)	1.87%	NoPAS	No	NO
chr1:722566:+	chr1	722566	+	1.11286002406	Intron	na	na	na	na	ENSG00000237491.4	p-lncRNA, intergenic	NO	LncRNA(FANTOM5)	9.35%	NoPAS	No	NO
chr1:723059:+	chr1	723059	+	1.24651412429	Intron	na	na	na	na	ENSG00000237491.4	p-lncRNA, intergenic	NO	LncRNA(FANTOM5)	16.82%	AAUAAA	No	NO

在内含子区域时na不合适吧？总有一个基因名字的。
//todo 我可以考虑给它注释上基因名字。


iii) 仅1个位点的基因多少个？
19729  39457 292580 sitePerGene.db3
$ cat sitePerGene.db3 | awk '$1==1' | wc
   3132    6264   48988
则有2个及以上位点的基因占比为 1 - 3132/19729 = 0.84

有2个位点的基因：
$ cat sitePerGene.db3 | awk '$1==2' | wc
   1676    3352   25382

有3个位点的基因:
$ cat sitePerGene.db3 | awk '$1==3' | wc
   1248    2496   18631




6) 转为 bed 格式 
第五列 Mean RPM
$ sed '1d' human.PAS.txt | awk '{print $2"\t"$3"\t"$3+1"\t"$1"\t"$5"\t"$4}' >human.PAS.db3.hg19.bed.raw
$ head human.PAS.db3.hg19.bed.raw
chr1	564599	564600	chr1:564599:+	3.33339746426	+
chr1	564629	564630	chr1:564629:+	1.2015737728799998	+
chr1	564664	564665	chr1:564664:+	14.8564019857	+
chr1	564708	564709	chr1:564708:+	1.87229320775	+
chr1	564952	564953	chr1:564952:+	1.9917604133700002	+

是否有重复呢？
$ awk '{print $4}' human.PAS.db3.hg19.bed.raw | sort | uniq -c | sort -k1nr | head
     22 chr5:140875283:+
     22 chr5:140875564:+
     22 chr5:140891930:+
     22 chr5:140892366:+
     22 chr5:140892440:+
     22 chr5:140892469:+
     22 chr5:140892542:+
     22 chr5:140900203:+
也有很多重复！！uniq只有 2.9万个。
$ awk '{print $4}' human.PAS.db3.hg19.bed.raw | sort | uniq -c | sort -k1nr |wc
 290168  580336 7156810
$ cat human.PAS.db3.hg19.bed.raw |  sort -k4 | uniq >human.PAS.db3.hg19.bed

$ wc human.PAS.db3.hg19.bed
  290168  1741008 16899102 human.PAS.db3.hg19.bed
$ head human.PAS.db3.hg19.bed
chr10	100004047	100004048	chr10:100004047:+	1.4720911092500002	+
chr10	100004652	100004653	chr10:100004652:+	47.223500246099995	+
chr10	100007447	100007448	chr10:100007447:-	3.57704083815	-
chr10	100007551	100007552	chr10:100007551:-	3.3557913087	-
chr10	100014965	100014966	chr10:100014965:-	0.7031391756829999	-

/home/wangjl/data/ref/hg19/polyA/polyA_DB3/
$ scp human.PAS.db3.hg19.bed wangjl@y.biomooc.com:/home/wangjl/data/igv/




## for mouse: 38万位点
$ sed '1d' mouse.PAS.txt | awk '{print $2"\t"$3"\t"$3+1"\t"$1"\t"$5"\t"$4}' | sort -k4 | uniq >mouse.PAS.db3.mm9.bed
384337  2306022 22399124 mouse.PAS.db3.mm9.bed
$ head mouse.PAS.db3.mm9.bed
chr10	100005160	100005161	chr10:100005160:-	1.6737975028299998	-
chr10	100020823	100020824	chr10:100020823:+	0.6934169316850001	+
chr10	100029825	100029826	chr10:100029825:+	0.515148199505	+
chr10	100029882	100029883	chr10:100029882:+	3.9390024642300006	+
chr10	100031579	100031580	chr10:100031579:+	1.18978178349	+
chr10	100032948	100032949	chr10:100032948:+	1.33686426673	+

# 使用 sort -k 4,4 -u #表示按照第4列排序，-u表示按照这一列去重
$ sed '1d' mouse.PAS.txt | awk '{print $2"\t"$3"\t"$3+1"\t"$1"\t"$5"\t"$4}' | sort -k4,4 -u |wc
 384337 2306022 22399124

/home/wangjl/data/ref/mm9/polyA/
  398885  7507668 54110436 mouse.PAS.txt
  384337  2306022 22399124 mouse.PAS.db3.mm9.bed #uniq 之后





========================================
|-- PolyASite 2.0 (hg38 569,005=56万位点)
----------------------------------------

(4) PolyASite 2.0 
https://polyasite.unibas.ch/atlas#2

/home/wangjl/data/ref/hg38/polyA
$ wget https://polyasite.unibas.ch/download/atlas/2.0/GRCh38.96/atlas.clusters.2.0.GRCh38.96.bed.gz
$ gunzip atlas.clusters.2.0.GRCh38.96.bed.gz

569005  6259055 52294093 atlas.clusters.2.0.GRCh38.96.bed
$ head atlas.clusters.2.0.GRCh38.96.bed 
1	16442	16452	1:16450:-	0.2690	-	0.15	4	0.2690	IN	CATAAA@-18@16467
1	29535	29539	1:29536:-	0.0042	-	0.00	1	0.0042	AI	NA
1	77630	77635	1:77631:-	0.0064	-	0.00	1	0.0064	IG	ATTAAA@-24@77654
1	87522	87523	1:87523:-	0.0030	-	0.01	1	0.0030	IG	AATAAA@-21@87543;AATAAA@-13@87535;AACAAA@-9@87531
1	89297	89300	1:89299:-	0.0091	-	0.00	1	0.0091	TE	ACTAAA@-30@89328;AGTAAA@-22@89320

1) 第10列是什么
$ cat atlas.clusters.2.0.GRCh38.96.bed | awk '{print $10}' | sort | uniq -c | sort -k1nr
 165859 IN
 143658 TE
 118890 IG
  78441 AI
  21804 EX
  19865 DS
  16135 AE
   4353 AU
# 像是位置信息，


2) 第11列: motif信息，上游位置，坐标。
3) 没注释上基因信息，//todo 后续自己注释

4) 转为 标注bed 格式
第2和3列是什么？和第4列不完全一致。
第5列和9列相同，是什么？

$ cat atlas.clusters.2.0.GRCh38.96.bed  | awk '{ split($4, arr, ":");  print "chr"$1"\t"arr[2]"\t"arr[2]+1"\t"$4"\t"$5"\t"$6}' | sort -k4,4 -u >atlas.PolyASite2.0.GRCh38.bed

569005  3414030 26508213 atlas.PolyASite2.0.GRCh38.bed
$ head atlas.PolyASite2.0.GRCh38.bed
chr10	100004243	100004244	10:100004243:-	0.0048	-
chr10	100008989	100008990	10:100008989:-	0.0004	-
chr10	100010715	100010716	10:100010715:+	0.0079	+
chr10	10002791	10002792	10:10002791:-	0.0031	-
chr10	100032302	100032303	10:100032302:-	0.0074	-
chr10	100037573	100037574	10:100037573:-	0.0087	-

/home/wangjl/data/ref/hg38/polyA
$ scp atlas.PolyASite2.0.GRCh38.bed wangjl@y.biomooc.com:/home/wangjl/data/igv/

使用 IGV 查看








========================================
APA分析 using bulk RNA-seq data with DaPars
----------------------------------------



========================================
|-- raw data: mouse KO vs control
----------------------------------------
1.
Fw:KC2021-F0270 完整报告和部分原始数据发送
z*min@163.com 2021年05月31日 11:04 (星期一)


请于7日内至华为云下载您的项目KC2021-F0270《小鼠6个UID转录组研究项目协议》的完整报告
样品信息: 您送来6个样品，分为2组（C、D），每组3个生物学重复。

A B 是 IL_4 KO前后。
C D 是 ADK KO前后。


数据质控
1) 测序数据量超过6G，满足合同要求；
2) Clean Q30>98%，Clean reads占比超过91%，测序质量较好；
3) UID去除了14.83%~21.97% 的PCR重复。

参考基因组比对
1) 97%以上的序列能比对到参考基因组上，比对率较高；
2) Reads在参考基因组上主要分布在CDS区，符合转录组测序的典型特征。

基因表达情况检测
从样品命名推测敲除了ADK基因，查找ADK基因的表达情况发现，敲除效果不理想。


样本生物学重复性检测
本项目中C、D组样品分别聚在一起，组内生物学重复性较好；但是组间相关系数较高，组间差异不明显；
F0197项目中KO_IL_4_6与该组的其它样品未聚在一起，发生离群；WT组未聚在一起，组内生物学重复性不好；
差异基因聚类热图显示，A、B、C、D组差异基因分别聚为一类，组内基因的表达模式较为类似。


基因差异表达分析
D vs C获得差异基因共188个，上调差异基因128个，下调差异基因60个。其它分组结果请至报告中查看。

差异基因功能通路分析
1) GO分析
D vs C组差异下调基因主要富集在细胞质通路中，差异上调基因主要富集在游离胞浆核糖体通路中。其它分组结果请至报告中查看。

2) KEGG分析
D vs C组差异上、下调基因主要富集在核糖体信号通路中。其它分组结果请至报告中查看。

说明：报告中的GO和KEGG分析，都是根据pval排序，优先展示pval最显著的通路。您可以打开报告中的链接excel文件，以其他方式排序进行筛选，如Rich Factor等。

其他结果需要您去理解和发现。



报告下载到win10文件夹
F:\help\ZhangMin-mouse\KC2021-F0270_report_full.zip



腺苷 激酶
adenosine kinase (ADK)





2. station: Y
path: 

(1) raw fq
$ cd /home/wangjl/data/ZhangMin/raw/
$ ls -lh
total 22G
-rw-rw-r-- 1 wangjl wangjl  612 Jun  2 15:07 raw.md5
-rw-rw-r-- 1 wangjl wangjl  648 Jun  2 14:54 raw.md5.txt

-rw-rw-r-- 1 wangjl wangjl 2.0G Jun  2 14:52 ADK_WT_1.R1.fq.gz
-rw-rw-r-- 1 wangjl wangjl 2.1G Jun  2 14:54 ADK_WT_1.R2.fq.gz
-rw-rw-r-- 1 wangjl wangjl 1.9G Jun  2 15:01 ADK_WT_2.R1.fq.gz
-rw-rw-r-- 1 wangjl wangjl 2.0G Jun  2 15:01 ADK_WT_2.R2.fq.gz
-rw-rw-r-- 1 wangjl wangjl 1.9G Jun  2 14:55 ADK_WT_3.R1.fq.gz
-rw-rw-r-- 1 wangjl wangjl 2.1G Jun  2 14:56 ADK_WT_3.R2.fq.gz

-rw-rw-r-- 1 wangjl wangjl 1.6G Jun  2 15:02 ADK_KO_1.R1.fq.gz
-rw-rw-r-- 1 wangjl wangjl 1.8G Jun  2 15:00 ADK_KO_1.R2.fq.gz
-rw-rw-r-- 1 wangjl wangjl 1.7G Jun  2 15:02 ADK_KO_2.R1.fq.gz
-rw-rw-r-- 1 wangjl wangjl 1.9G Jun  2 15:01 ADK_KO_2.R2.fq.gz
-rw-rw-r-- 1 wangjl wangjl 1.7G Jun  2 15:01 ADK_KO_3.R1.fq.gz
-rw-rw-r-- 1 wangjl wangjl 1.9G Jun  2 14:37 ADK_KO_3.R2.fq.gz

原始数据20G。



(2) UID 不知道是啥？看邮件像是去重复的，RNA-seq用去重复吗？
$ cd /data/wangjl/ZhangMin/UID
$ ls -lh
total 8.4G
-rw-rw-r-- 1 wangjl wangjl  720 Jun  2 15:06 UID.md5
-rw-rw-r-- 1 wangjl wangjl  756 Jun  2 14:35 UID.md5.txt

-rw-rw-r-- 1 wangjl wangjl 587M Jun  2 14:23 ADK_KO_1.dedup.R1.fastq.gz
-rw-rw-r-- 1 wangjl wangjl 775M Jun  2 14:18 ADK_KO_1.dedup.R2.fastq.gz
-rw-rw-r-- 1 wangjl wangjl 603M Jun  2 14:24 ADK_KO_2.dedup.R1.fastq.gz
-rw-rw-r-- 1 wangjl wangjl 795M Jun  2 15:00 ADK_KO_2.dedup.R2.fastq.gz
-rw-rw-r-- 1 wangjl wangjl 591M Jun  2 15:00 ADK_KO_3.dedup.R1.fastq.gz
-rw-rw-r-- 1 wangjl wangjl 780M Jun  2 14:28 ADK_KO_3.dedup.R2.fastq.gz

-rw-rw-r-- 1 wangjl wangjl 665M Jun  2 14:32 ADK_WT_1.dedup.R1.fastq.gz
-rw-rw-r-- 1 wangjl wangjl 861M Jun  2 14:36 ADK_WT_1.dedup.R2.fastq.gz
-rw-rw-r-- 1 wangjl wangjl 626M Jun  2 14:59 ADK_WT_2.dedup.R1.fastq.gz
-rw-rw-r-- 1 wangjl wangjl 810M Jun  2 14:34 ADK_WT_2.dedup.R2.fastq.gz
-rw-rw-r-- 1 wangjl wangjl 632M Jun  2 14:36 ADK_WT_3.dedup.R1.fastq.gz
-rw-rw-r-- 1 wangjl wangjl 819M Jun  2 14:59 ADK_WT_3.dedup.R2.fastq.gz


相关软件
https://download.csdn.net/download/weixin_42131342/16032549

https://www.docin.com/p-2122655043.html
绝对定量转录组 digitalRNA-seq

https://rna.cd-genomics.com/digital-rna-sequencing.html
Digital RNA Sequencing
Digital RNA-Seq (or UMI-RNA-Seq) is a next-generation sequencing (NGS)-based method that eliminates sequence-dependent PCR bias by barcoding RNA molecules prior to amplification. Digital RNA-Seq can not only realize the transcriptomic sequencing as conventional RNA-Seq, but also reduce the biases and errors in sequencing.
扩增前给mRNA分子加UMI。像常规RNA-seq一样，并且减少偏差和错误。

In a digital RNA sequencing assay, a unique molecular identifier (UMI) or as so-called unique identifier (UID) is added to each cDNA before library amplification. 



(3) 保护原始数据：原始数据只读 
$ cd ..
$ chmod a-w -R raw/
$ chmod a-w -R UID/







========================================
|-- QC: fastqc
----------------------------------------
$ fastqc --version
FastQC v0.11.7


1. 批量，单线程
$ fastqc ./UID/*fastq.gz -o fastqc_UID/


2. 批量，多线程
$ ls ./raw/*fq.gz | while read id; do 
echo $id; 
fastqc $id -o fastqc_raw/ &
done;

## 好像不会自己结束，需要回车。怎么解决？




3. 报表
$ multiqc --version
multiqc, version 1.9

报错
RequestsDependencyWarning

$ pip3 install --upgrade multiqc

$ multiqc --version
multiqc, version 1.10.1


分别进文件夹:
$ mkdir multiqc
$ multiqc *fastqc.zip -o multiqc/



4. web 查看
$ cd 
$ http-server -p 9000


15-19 T 特别低。
30-135 有Illumina universal adapter

重复率
R1 很低 11%
R2 很高 50%




========================================
|-- Mapping: mm10
----------------------------------------
1. download ref
/home/wangjl/data/ref/mouse/

ensembl: https://asia.ensembl.org/Mus_musculus/Info/Index
(GRCm38 (UCSC name: mm10))


# 39
$ wget http://ftp.ensembl.org/pub/release-104/fasta/mus_musculus/dna/Mus_musculus.GRCm39.dna.primary_assembly.fa.gz
$ wget http://ftp.ensembl.org/pub/release-104/gtf/mus_musculus/Mus_musculus.GRCm39.104.gtf.gz



# 38 还是使用老的参考基因组
$ cd /home/wangjl/data/ref/mouse/ensembl/
$ wget http://ftp.ensembl.org/pub/release-102/fasta/mus_musculus/dna/Mus_musculus.GRCm38.dna.primary_assembly.fa.gz
$ wget http://ftp.ensembl.org/pub/release-102/gtf/mus_musculus/Mus_musculus.GRCm38.102.gtf.gz



-rw-rw-r-- 1 wangjl wangjl  32M Oct 27  2020 Mus_musculus.GRCm38.102.gtf.gz
-rw-rw-r-- 1 wangjl wangjl 769M Oct 19  2020 Mus_musculus.GRCm38.dna.primary_assembly.fa.gz

fa必须解压。
$ gunzip Mus_musculus.GRCm38.dna.primary_assembly.fa.gz
$ gunzip Mus_musculus.GRCm38.102.gtf.gz



(2) 安装 star 
$ wget https://github.com/alexdobin/STAR/archive/refs/tags/2.7.9a.tar.gz
$ tar zxvf 2.7.9a.tar.gz 
$ cd STAR-2.7.9a/

添加到path中
$ vim ~/.bashrc #末尾添加一行
export PATH=/home/wangjl/soft/STAR-2.7.9a/bin/Linux_x86_64:$PATH

$ source ~/.bashrc
$ STAR --version
2.7.9a



2. build index

$ STAR --runMode genomeGenerate \
	--runThreadN 10 \
	--genomeDir /data/wangjl/ref/mouse/ensembl/index/STAR/  \
	--genomeFastaFiles /data/wangjl/ref/mouse/ensembl/Mus_musculus.GRCm38.dna.primary_assembly.fa \
	--sjdbGTFfile /data/wangjl/ref/mouse/ensembl/Mus_musculus.GRCm38.102.gtf

# 开始用 fa.gz 报错：
# Mus_musculus.GRCm38.dna.primary_assembly.fa.gz is not fasta: the first character is '' (31), not '>'.
# Make sure the GTF file is unzipped.

# 17:50 -> 18:18 Total 28min;



3. map, 双端
(1) 单个执行
$ STAR --runThreadN 10  \
	--outSAMtype BAM SortedByCoordinate  \
	--genomeDir /data/wangjl/ref/mouse/ensembl/index/STAR/  \
	--readFilesIn /data/wangjl/ZhangMin/raw/ADK_KO_1.R1.fq.gz /data/wangjl/ZhangMin/raw/ADK_KO_1.R2.fq.gz  \
	--readFilesCommand zcat  \
	--genomeLoad LoadAndKeep \
	--limitBAMsortRAM 20000000000 \
	--outFileNamePrefix  /data/wangjl/ZhangMin/map/ADK_KO_1
# 19:29 -> 19:46 Total 17min;
# 19:33 大概占用了 28G 内存。

# 修改数字为 2,3 复制执行。



(2) 批量执行
$ seq 1 3 | while read id; do echo $id; 
STAR --runThreadN 10  \
	--outSAMtype BAM SortedByCoordinate  \
	--genomeDir /data/wangjl/ref/mouse/ensembl/index/STAR/  \
	--readFilesIn /data/wangjl/ZhangMin/raw/ADK_WT_${id}.R1.fq.gz /data/wangjl/ZhangMin/raw/ADK_WT_${id}.R2.fq.gz  \
	--readFilesCommand zcat  \
	--genomeLoad LoadAndKeep \
	--limitBAMsortRAM 20000000000 \
	--outFileNamePrefix  /data/wangjl/ZhangMin/map/ADK_WT_${id}
done;




(3) 获取uniq map的百分比
$ ls map/*final.out | xargs grep  "Uniquely mapped reads number" -A 1

取消掉分隔符
$ ls map/*final.out | xargs grep  "Uniq"
map/ADK_KO_1Log.final.out:                   Uniquely mapped reads number |     22339287
map/ADK_KO_1Log.final.out:                        Uniquely mapped reads % |     88.36%

获取百分比
$ ls map/*final.out | xargs grep  "Uniq.*\%"
map/ADK_KO_1Log.final.out:                        Uniquely mapped reads % |     88.36%


$ ls map/*final.out | xargs grep  "Uniq.*\%" | awk '{print $1"\t"$7}'
map/ADK_KO_1Log.final.out:      88.36%
map/ADK_KO_2Log.final.out:      85.05%
map/ADK_KO_3Log.final.out:      82.98%
map/ADK_WT_1Log.final.out:      91.45%
map/ADK_WT_2Log.final.out:      91.34%
map/ADK_WT_3Log.final.out:      91.60%

为什么WT和KO差别这么明显？t test p=0.0616

22,339,287 reads=22M Reads.





(4) 释放STAR占用的内存，必须指定--genomeDir，且设定 --genomeLoad Remove 
# https://github.com/alexdobin/STAR/issues/27

$ STAR  --genomeDir /data/wangjl/ref/mouse/ensembl/index/STAR/  \
--genomeLoad Remove 

和正常比对生成的一样，会生成几个空文件，没啥用。




4. mapping QC //todo
(1)
覆盖度: 特别慢

(2) check in IGV

$ samtools view map/ADK_KO_1Aligned.sortedByCoord.out.bam

$ samtools view map/ADK_KO_1Aligned.sortedByCoord.out.bam | wc







========================================
|-- 定量: featureCounts
----------------------------------------
$ featureCounts -v
featureCounts v2.0.1


1. 逐个样本定量
# exclude multimapping
$ featureCounts -Q 30 -p -a genome.gtf -o outputfile input.bam
参数解释
-O   Assign reads to all their overlapping meta-features (or features if -f is specified).
-f   Perform read counting at feature level (eg. counting reads for exons rather than genes).

-Q <int>  The minimum mapping quality score a read must satisfy in
		  order to be counted. For paired-end reads, at least one
		  end should satisfy this criteria. 0 by default.

-p      If specified, fragments (or templates) will be counted instead of reads. 
		This option is only applicable for paired-end reads; 
		single-end reads are always counted as reads.

-a <string>         Name of an annotation file. GTF/GFF format by default.
-o <string>         Name of output file including read counts.

input_file1 [input_file2] ...   A list of SAM or BAM format files. They can be
                      either name or location sorted. If no files provided,
                      <stdin> input is expected. Location-sorted paired-end reads
                      are automatically sorted by read names.



$ featureCounts -Q 30 -p -a /data/wangjl/ref/mouse/ensembl/Mus_musculus.GRCm38.102.gtf -o exp/ADK_KO_1 map/ADK_KO_1Aligned.sortedByCoord.out.bam
## Running time : 1.43 minutes


# 批量化其余的
for i in ADK_KO_2 ADK_KO_3 ADK_WT_1 ADK_WT_2 ADK_WT_3;
do echo $i;
featureCounts -Q 30 -p -a /data/wangjl/ref/mouse/ensembl/Mus_musculus.GRCm38.102.gtf -o exp/$i map/${i}Aligned.sortedByCoord.out.bam;
done;



(2) check 结果
$ ls -lh
total 119M
-rw-rw-r-- 1 wangjl wangjl  20M Jun  2 22:12 ADK_KO_1
-rw-rw-r-- 1 wangjl wangjl  402 Jun  2 22:12 ADK_KO_1.summary
-rw-rw-r-- 1 wangjl wangjl  20M Jun  2 22:16 ADK_KO_2
-rw-rw-r-- 1 wangjl wangjl  402 Jun  2 22:16 ADK_KO_2.summary
-rw-rw-r-- 1 wangjl wangjl  20M Jun  2 22:17 ADK_KO_3
-rw-rw-r-- 1 wangjl wangjl  402 Jun  2 22:17 ADK_KO_3.summary
-rw-rw-r-- 1 wangjl wangjl  20M Jun  2 22:19 ADK_WT_1
-rw-rw-r-- 1 wangjl wangjl  402 Jun  2 22:19 ADK_WT_1.summary
-rw-rw-r-- 1 wangjl wangjl  20M Jun  2 22:20 ADK_WT_2
-rw-rw-r-- 1 wangjl wangjl  402 Jun  2 22:20 ADK_WT_2.summary
-rw-rw-r-- 1 wangjl wangjl  20M Jun  2 22:22 ADK_WT_3
-rw-rw-r-- 1 wangjl wangjl  402 Jun  2 22:22 ADK_WT_3.summary


$ ls -l
total 121804
-rw-rw-r-- 1 wangjl wangjl 20780233 Jun  2 22:12 ADK_KO_1
-rw-rw-r-- 1 wangjl wangjl      402 Jun  2 22:12 ADK_KO_1.summary





2. 合并成矩阵 使用R
options(stringsAsFactors = FALSE)

setwd("/home/wangjl/data/ZhangMin/exp/")

readDF=function(fname){
  d1=read.table(fname, header = T)
  dim(d1)
  head(d1)
  tail(d1)
  
  colnames(d1)[7]=sub('map.ADK_','', colnames(d1)[7] )
  colnames(d1)[7]=sub('Aligned.sortedByCoord.out.bam','', colnames(d1)[7] )
  return(d1)
}
#
df1=readDF("ADK_KO_1")
df2=readDF("ADK_KO_2")
df3=readDF("ADK_KO_3")
#
df4=readDF("ADK_WT_1")
df5=readDF("ADK_WT_2")
df6=readDF("ADK_WT_3")
#
mt=data.frame(
  Geneid=df1$Geneid,
  row.names = 1
)
mt=cbind(mt, 
         df1[,7], df2[,7],df3[,7], 
         df4[,7], df5[,7],df6[,7])
colnames(mt)=c("KO_1", "KO_2", "KO_3",   "WT_1", "WT_2", "WT_3")
head(mt)

#
# filter all 0 rows
mt2=mt[apply(mt,1,sum)>0,]
dim(mt) #55487     6
dim(mt2) #25641     6

# write to file 
write.table(mt2, "counts.matrix.df.txt")






(3) 计算 TPM
TPM：​Transcripts Per Million。TPM的不同在于它的处理顺序是不同的，即先考虑基因长度，再是测序深度。
直接解释它的计算方法。TPM的计算分3步：
step1：第一步直接除以基因长度，得到reads per kilobase。
	根据基因/转录本长度​校正count值；假设某基因count值为R1，则校正后count值为：
	R1/(L1/1000)​；  注: L1为该基因的长度；
step2：计算total 校正后count值；即所有基因的校正后count值​总和，Rtotal；
step3：计算TPM；TPM​结果为：
	R1*1000*1000000/(L1*​Rtoatl)。



(4)R语言实战：read counts如何转化为TPM和FPKM, TPM和FPKM相互转化
https://www.jianshu.com/p/7d64b8a9fa99

counts2TPM=function(counts, len){
	kb <- len / 1000; #kb
	rpk <- counts / kb; # rpk
	tpm <- t(t(rpk)/colSums(rpk) * 1000000)
	return(tpm)
}









========================================
|-- 样本间聚类: heatmap, PCA 
----------------------------------------

1. 热图
#KO和WT能分别聚类

pheatmap(tpm, scale = 'none', clustering_method="ward.D2") #本身就是对column标准化过的
pheatmap(tpm, scale = 'row', clustering_method="ward.D2")


pheatmap(log10(tpm+1), scale = 'none', clustering_method="ward.D2")
pheatmap(log10(tpm+1), scale = 'row', clustering_method="ward.D2")

# 效果最好:
pheatmap(log10(tpm+1), scale = 'none', clustering_method="ward.D2", show_rownames = F) 



========================================
|-- DaPars 检测APA事件
----------------------------------------
1. 简介
DaPars(Dynamic analysis of Alternative PolyAdenylation from RNA-seq)
Current version: 0.9.1


(1)引用方式
Please cite the following articles if you use DaPars in your research:

Masamha, C.P., Xia, Z., Yang, J., Albrecht, T.R., Li, M., Shyu, A., Li, W., Wagner, E.J. 2014. CFIm25 links Alternative Polyadenylation to Glioblastoma Tumor Suppression. Nature, 510:412-416.

Xia, Z., Donehower, L.A., Wheeler, D.A., Cooper, T.A., Neilson, J.R., Wagner E.J., Li, W. 2014. Dynamic Analyses of Alternative Polyadenylation from RNA-Seq Reveal 3'-UTR Landscape Across 7 Tumor Types. Nature Communications, 5:5274


(2) 版本
https://github.com/DawnEve/dapars

其他修改后的版本: https://github.com/DawnEve/dapars/network
https://github.com/mvdbeek/dapars/tree/WIP_sanitize

(3) 不知道和第二版啥关系？
https://github.com/crest2020/DaPars2
https://leilisysbio.github.io/DaPars2_Documentation/DaPars2.html

Given the annotated gene model, DaPars v2 can infer the de novo proximal APA sites as well as the long and short 3’UTR expression levels. 



(4) 另一个引用的
https://github.com/AndrewPattison/Dapars_pipeline/blob/master/hisat2_pipe.py







2. 安装 
$ git clone https://github.com/DawnEve/dapars.git
$ cd dapars/

主程序就2个py文件
$ ls -lth src/
total 32K
-rw-rw-r-- 1 wangjl wangjl 5.4K Jun  3 16:46 DaPars_Extract_Anno.py
-rw-rw-r-- 1 wangjl wangjl  23K Jun  3 16:46 DaPars_main.py
行数:
    152     393    5499 src/DaPars_Extract_Anno.py
    552    1393   23278 src/DaPars_main.py

这个是py2.7的脚本。安装依赖的包
$ pip2 install rpy2==2.8.1 --user #要加 --user。
	确保使用的python2：先测试 pip -V，如果不是py2，尝试pip2 -V

	如果没有pip2，安装命令：
	$ sudo yum install python-pip
	$ which pip2
	/usr/bin/pip2
	$ pip2 -V
	pip 8.1.2 from /usr/lib/python2.7/site-packages (python 2.7)



压缩包里是测试数据:
$ unzip DaPars_Test_Dataset.zip 
$ ls DaPars_Test_Dataset -lh
total 83M
-rw-r--r-- 1 wangjl wangjl  39M May 27  2013 Condition_A_chrX.wig
-rw-r--r-- 1 wangjl wangjl  36M May 27  2013 Condition_B_chrX.wig
drwxr-xr-x 2 wangjl wangjl 4.0K Jun  7  2013 DaPars_Test_data
-rw-r--r-- 1 wangjl wangjl  344 May 28  2013 DaPars_test_data_configure.txt
-rw-r--r-- 1 wangjl wangjl 776K Feb  7  2015 hg19_4_19_2012_Refseq_id_from_UCSC.txt
-rw-r--r-- 1 wangjl wangjl 1.3M Apr 17  2015 hg19_refseq_extracted_3UTR.bed
-rw-r--r-- 1 wangjl wangjl 6.2M Apr 17  2012 hg19_refseq_whole_gene.bed

$ ls DaPars_Test_Dataset/DaPars_Test_data/ -lh
total 52K
-rw-r--r-- 1 wangjl wangjl 52K May 28  2013 DaPars_Test_data_All_Prediction_Results.txt





3. 教程
(1)
原始文档打不开，估计网站调整删了。
找到一个转载的: https://www.jianshu.com/p/21b697cec428

py2.7环境下：

refbed=/media/pc/disk1/sun/refdata/ensembl_GRCm38/mm10.gencode-vm18.compre.fine.bed

genesymbol=/media/pc/disk1/sun/refdata/ensembl_GRCm38/Dapars_gene.symbol

python /home/pc/biosoft/dapars/src/DaPars_Extract_Anno.py -b $refbed -s $genesymbol -o Dapars_extracted_3UTR.bed


对于新安装dapars的情况：
1).需要在py2.7下使用pip install rpy2==1.8.4安装rpy2的低级版本
2).选择bedtools的bam转为bedgraph功能的-bga（和-split）模式
3).修改脚本507行增加float，匹配bedtools的浮点数输出



(2) https://firas.io/post/dapars/






4. 实战准备(3个文件)
You can find more details on the documentation page, but in essence, DaPars requires the following 3 files:
- BED file: a tab separated, 12 columns, which represents the gene model.
- BedGraph file: stores the reads alignment results from an aligned BAM file.
- Gene Symbol file: two columns containing NCBI RefSeq and gene symbol.


(1) The BED file of the gene model can be downloaded from UCSC Table Browser.

http://genome.ucsc.edu/cgi-bin/hgTables?command=start

genome: mouse
assembly: July 2007 (NCBI37/mm9)
group: Genes and Gene Predictions
track: REfSeq Genes
table: refGene
region: genome
output format: BED - browser extensible data
output file: mm9_refseq_whole_gene.bed


我的是mm10
genome: mouse
assembly: July 2011 (GRCm38/mm10)
group: Genes and Gene Predictions
track: NCBI REfSeq
table: UCSC RefSeq(refGene)
region: genome
output format: BED - browser extensible data
output file: mm10_refseq_whole_gene.bed


Click ‘get output’ button, and in the next page ‘Output refGene as BED’ click ‘get BED’ button.


复制到服务器:
$ head /home/wangjl/data/ref/mouse/UCSC/mm10_refseq_whole_gene.bed
chr1	134199214	134235457	NM_001039510	0	-	134202950	134234355	0	3	4376,398,230,	0,34800,36013,
chr1	134199214	134235457	NM_001282945	0	-	134202950	134234355	0	3	4376,432,230,	0,34800,36013,
chr1	134199214	134235457	NM_001008533	0	-	134202950	134234355	0	2	4376,1443,	0,34800,
chr1	134199214	134235457	NM_001291930	0	-	134202950	134203505	0	2	4376,230,	0,36013,
chr1	134199214	134234856	NM_001291928	0	-	134202950	134234733	0	2	4376,194,	0,35448,
chr1	58713285	58733227	NR_149255	0	+	58733227	58733227	0	4	374,427,136,975,	0,13020,17866,18967,

$ cat /home/wangjl/data/ref/mouse/UCSC/mm10_refseq_whole_gene.bed | awk '{print $1}' | sort | uniq -c
   2545 chr1
   2254 chr10
   3480 chr11
   1600 chr12
   1610 chr13
   1757 chr14
   1686 chr15
   1430 chr16
   2306 chr17
   1157 chr18
   1512 chr19
      2 chr1_GL456211_random
      4 chr1_GL456212_random
      4 chr1_GL456221_random
#



############ 第二次下载
我的是mm10
genome: mouse
assembly: July 2011 (GRCm38/mm10)
group: Genes and Gene Predictions
track: GENCODE VM23
table: knownGene
region: genome
output format: BED - browser extensible data
output file: mm10_GENCODE_VM23_knownGene.bed


$ head /home/wangjl/data/ref/mouse/UCSC/mm10_GENCODE_VM23_knownGene.bed
chr1	3073252	3074322	ENSMUST00000193812.1	0	+	3073252	3073252	0	1	1070,	0,
chr1	3102015	3102125	ENSMUST00000082908.1	0	+	3102015	3102015	0	1	110,	0,
chr1	3206522	3215632	ENSMUST00000159265.1	0	-	3206522	3206522	0	2	795,2194,	0,6916,

$ cat /home/wangjl/data/ref/mouse/UCSC/mm10_GENCODE_VM23_knownGene.bed | awk '{print $1}' | sort | uniq -c
   8579 chr1
   6605 chr10
   8700 chr11
   5371 chr12
   5644 chr13
   5873 chr14
   5157 chr15
   4514 chr16
   7098 chr17
   3573 chr18
   4339 chr19
      5 chr1_GL456210_random
      7 chr1_GL456211_random
      2 chr1_GL456212_random
      7 chr1_GL456221_random
#




(2) To generate the BedGraph files from BAM files, you need the chromsome size file chromInfo.txt.gz which can be downloaded from UCSC (hg19 or mm9) and then use the BedTools' genomecov as follow:

http://hgdownload.soe.ucsc.edu/goldenPath/mm10/database/
$ wget http://hgdownload.soe.ucsc.edu/goldenPath/mm10/database/chromInfo.txt.gz
$ gunzip chromInfo.txt.gz 

## /home/wangjl/data/ref/mouse/UCSC/
$ mv chromInfo.txt  mm10_chr_size.txt
$ head mm10_chr_size.txt
chr1    195471971       /gbdb/mm10/mm10.2bit
chr2    182113224       /gbdb/mm10/mm10.2bit


## http://bedtools.readthedocs.io/en/latest/content/tools/genomecov.html
$ bedtools genomecov -bg -ibam sample_sorted.bam -g mm9_chr_size.txt -split > sample.bedgraph

Usage: bedtools genomecov [OPTIONS] -i <bed/gff/vcf> -g <genome> 
参数解释:
Version: v2.29.2
-bg             Report depth in BedGraph format. For details, see: 输出bedGraph格式
        genome.ucsc.edu/goldenPath/help/bedgraph.html

-ibam           The input file is in BAM format.
             Note: BAM _must_ be sorted by position 输入 排序过的 bam。
-g  <genome>  The genome file should tab delimited and structured as follows: 
         <chromName><TAB><chromSize>                                        

        For example, Human (hg19):                    
        chr1    249250621
        chr2    243199373
        ...
        chr18_gl000207_random   4262
-split   Treat "split" BAM or BED12 entries as distinct BED intervals when computing coverage. 
		没看懂啥意思??
		   For BAM files, this uses the CIGAR "N" and "D" operations to infer the blocks for computing coverage. 
		   For BED12 files, this uses the BlockCount, BlockStarts, and BlockEnds fields (i.e., columns 10,11,12). 

实战
$ bedtools genomecov -bg -ibam /data/wangjl/ZhangMin/map/ADK_KO_1Aligned.sortedByCoord.out.bam \
-g /home/wangjl/data/ref/mouse/UCSC/mm10_chr_size.txt -split > /data/wangjl/ZhangMin/bedGraph/KO_1.bedgraph

## WARNING: Genome (-g) files are ignored when BAM input is provided. 也就是说有bam了，就不需要 -g参数提供chr大小了。
# 21:21 -> 21:22

$ bedtools genomecov -bg -ibam /data/wangjl/ZhangMin/map/ADK_KO_2Aligned.sortedByCoord.out.bam -split > /data/wangjl/ZhangMin/bedGraph/KO_2.bedgraph
$ bedtools genomecov -bg -ibam /data/wangjl/ZhangMin/map/ADK_KO_3Aligned.sortedByCoord.out.bam -split > /data/wangjl/ZhangMin/bedGraph/KO_3.bedgraph




# 批量 
for i in 1 2 3
do echo $i;
bedtools genomecov -bg -ibam /data/wangjl/ZhangMin/map/ADK_WT_${i}Aligned.sortedByCoord.out.bam -split > /data/wangjl/ZhangMin/bedGraph/WT_${i}.bedgraph &
done;


$ ls -lth
total 2.1G
-rw-rw-r-- 1 wangjl wangjl 370M Jun  3 21:34 WT_1.bedgraph
-rw-rw-r-- 1 wangjl wangjl 357M Jun  3 21:34 WT_3.bedgraph
-rw-rw-r-- 1 wangjl wangjl 351M Jun  3 21:34 WT_2.bedgraph
-rw-rw-r-- 1 wangjl wangjl 340M Jun  3 21:32 KO_3.bedgraph
-rw-rw-r-- 1 wangjl wangjl 346M Jun  3 21:32 KO_2.bedgraph
-rw-rw-r-- 1 wangjl wangjl 344M Jun  3 21:22 KO_1.bedgraph


# fix后面报错: 删除掉除1-19XY之外的行.
$ for id in `seq 1 3`
do echo $id;
cat KO_${id}.bedgraph | sed '/^[GJM]/d' > trimKO_${id}.bedgraph;
cat WT_${id}.bedgraph | sed '/^[GJM]/d' > trimWT_${id}.bedgraph;
done;

# check: 删除了多少行？22828行(0.15%)
14863801  59455204 360507299 KO_1.bedgraph
14840973   59363892  404533692 trimKO_1.bedgraph


# fix后面报错: 添加chr前缀.
$ for id in `seq 1 3`
do echo $id;
sed -i 's/^/chr/' trimKO_${id}.bedgraph;
sed -i 's/^/chr/' trimWT_${id}.bedgraph;
done;




(3)The Gene Symbol file can be downloaded from UCSC Table Browser.

http://genome.ucsc.edu/cgi-bin/hgTables?command=start

genome: mouse
assembly: July 2007 (NCBI37/mm9)
group: Genes and Gene Predictions
track: REfSeq Genes
table: refGene
region: genome
output format: selected fields from primary and related tables
output file: mm9_30_03_2016_Refseq_id_from_UCSC.txt
Click ‘get output’ button, and in the next page select


我的是mm10
genome: mouse
assembly: July 2011 (GRCm38/mm10)
group: Genes and Gene Predictions
track: NCBI RefSeq
table: UCSC RefSeq(refGene)
region: genome
output format: selected fields from primary and related tables
output file: mm10_20210603_Refseq_id_from_UCSC.txt
Click ‘get output’ button, and in the next page select


name: Name of gene (usually transcript_id from GTF)
name2: Alternate name (e.g. gene_id from GTF)
Click ‘get output’ and save the file.

复制到服务器：
/home/wangjl/data/ref/mouse/UCSC/mm10_20210603_Refseq_id_from_UCSC.txt




5. 实战运行
(1). Generate region annotation
DaPars will use the extracted distal polyadenylation sites to infer the proximal polyadenylation sites based on the alignment files.
再比对文件上，使用远端位点，来推测近端位点。

$ python DaPars_Extract_Anno.py -b mm9_refseq_whole_gene.bed -s mm9_30_03_2016_Refseq_id_from_UCSC.txt -o mm9_refseq_extracted_3UTR.bed
参数解释:
-b GENE_BED_FILE : The gene model in BED format 基因的模型(bed格式的gtf文件)
-s Gene_Symbol_FILE : The mapping of transcripts to gene symbol, which can be extracted from UCSC Tables. 
	翻译基因名字(NM_001293804 -> Cflar, NM_008798	-> Pdcd1
-o OUTPUT_FILE : The output of the extracted annotation region.



我的实战
$ mouseRefDir=/home/wangjl/data/ref/mouse/UCSC
$ python ~/soft/dapars/src/DaPars_Extract_Anno.py -b ${mouseRefDir}/mm10_refseq_whole_gene.bed -s ${mouseRefDir}/mm10_20210603_Refseq_id_from_UCSC.txt -o ${mouseRefDir}/mm10_refseq_extracted_3UTR.bed
# 10s; Total extracted 3' UTR: 29949

# 一共 2.9万个UTR区域。
28990  173940 1554200 /home/wangjl/data/ref/mouse/UCSC/mm10_refseq_extracted_3UTR.bed

$ head /home/wangjl/data/ref/mouse/UCSC/mm10_refseq_extracted_3UTR.bed 
chrX	103024096	103025727	NR_166892|Gm39529|chrX|-	0	-
chr6	95126477	95129793	NM_001008785|Kbtbd8|chr6|+	0	+
chr11	74908843	74909340	NM_177325|Tsr1|chr11|+	0	+
chr7	110308013	110309496	NM_177324|Sbf2|chr7|-	0	-
chr19	46675292	46682093	NR_166896|Gm41857|chr19|+	0	+
chr13	30380902	30382867	NM_177322|Agtr1a|chr13|+	0	+
chr9	90823295	90826115	NR_166895|Gm28703|chr9|-	0	-
chr14	86264142	86265814	NR_166898|Gm32815|chr14|-	0	-

也就是说到这一步时，只保留了1-19,XY, 去掉了其他的部分。
$ cat /home/wangjl/data/ref/mouse/UCSC/mm10_refseq_extracted_3UTR.bed | awk '{print $1}' | sort | uniq -c
   1656 chr1
   1395 chr10
   2147 chr11
   1014 chr12
   1127 chr13
   1085 chr14
   1065 chr15
    931 chr16
   1420 chr17
    682 chr18
    937 chr19
   2422 chr2
   1357 chr3
   1765 chr4
   1690 chr5
   1547 chr6
   2495 chr7
   1371 chr8
   1563 chr9
   1239 chrX
     82 chrY
#



(2). Sample processing
The files generated in step 1 above will be used in step 2. 
Also for this step, you need to generate configure_file for each sample. For example


######################## 原始参考例子
#The following file is the result of step 1.
Annotated_3UTR=mm9_refseq_extracted_3UTR.bed

#A comma-separated list of BedGraph files of samples from condition 1
Group1_Tophat_aligned_Wig=KO1.bedgraph,KO2.bedgraph,KO3.bedgraph

#A comma-separated list of BedGraph files of samples from condition 2
Group2_Tophat_aligned_Wig=WT1.bedgraph,WT2.bedgraph,WT3.bedgraph

Output_directory=DaPars_Output_Condition1/
Output_result_file=DaPars_Output_Condition1

#At least how many samples passing the coverage threshold in two conditions
Num_least_in_group1=1
Num_least_in_group2=1

Coverage_cutoff=30

#Cutoff for FDR of P-values from Fisher exact test.

FDR_cutoff=0.05
PDUI_cutoff=0.5
Fold_change_cutoff=0.59
########################



$ cd /home/wangjl/data/ZhangMin/bedGraph/
$ cat configure_file_ADK.config
########################
#(1)3UTR annotation: The following file is the result of step 1.
Annotated_3UTR=/home/wangjl/data/ref/mouse/UCSC/mm10_refseq_extracted_3UTR.bed 

#(2)sample bedGraph: A comma-separated list of BedGraph files of samples from condition 1
Group1_Tophat_aligned_Wig=trimKO_1.bedgraph,trimKO_2.bedgraph,trimKO_3.bedgraph

#A comma-separated list of BedGraph files of samples from condition 2
Group2_Tophat_aligned_Wig=trimWT_1.bedgraph,trimWT_2.bedgraph,trimWT_3.bedgraph

Output_directory=DaPars_Output_Condition1/
Output_result_file=DaPars_Output_Condition1

#At least how many samples passing the coverage threshold in two conditions
Num_least_in_group1=1
Num_least_in_group2=1

Coverage_cutoff=30

#Cutoff for FDR of P-values from Fisher exact test.
FDR_cutoff=0.05
PDUI_cutoff=0.5
Fold_change_cutoff=0.59
########################


$ python ~/soft/dapars/src/DaPars_main.py configure_file_ADK.config
[Fri 04 Jun 2021 10:32:07 AM ] Start Analysis ...
[Fri 04 Jun 2021 10:32:07 AM ] Loading coverage ...
[Fri 04 Jun 2021 10:34:04 AM ] Loading coverage finished ...
[Fri 04 Jun 2021 10:34:04 AM ] Filtering the result ...
[Fri 04 Jun 2021 10:34:04 AM ] Finished!
## 很快，2min。







##########################
### -> 排错记录1: UnboundLocalError: local variable 'chrom_name' referenced before assignment

报错的原因，因该是染色体的名字， chr1 和 1 不一致导致的。
$ head /home/wangjl/data/ref/mouse/UCSC/mm10_refseq_extracted_3UTR.bed 
chr6    95126477        95129793        NM_001008785|Kbtbd8|chr6|+      0       +

$ head KO_1.bedgraph
1       3044513 3044615 2

使用sed -i去修改3UTR.bed文件。
$ cat /home/wangjl/data/ref/mouse/UCSC/mm10_refseq_extracted_3UTR.bed | sed 's/^chr//' > /home/wangjl/data/ref/mouse/UCSC/mm10_refseq_extracted_3UTR_noChr.bed

$ head /home/wangjl/data/ref/mouse/UCSC/mm10_refseq_extracted_3UTR_noChr.bed 
X	103024096	103025727	NR_166892|Gm39529|chrX|-	0	-
6	95126477	95129793	NM_001008785|Kbtbd8|chr6|+	0	+




### -> 报错记录2: 再执行还是报这个错
File "/home/wangjl/soft/dapars/src/DaPars_main.py", line 509, in Load_Target_Wig_files
    curr_sample_All_chroms_coverage_dict[chrom_name][1].append(0)
UnboundLocalError: local variable 'chrom_name' referenced before assignment

怀疑是染色体有些不存在于bed中。
$ cat /home/wangjl/data/ref/mouse/UCSC/mm10_refseq_extracted_3UTR_noChr.bed | awk '{print $1}' | sort|uniq -c
   1656 1
   1395 10
   2147 11
   1014 12
   1127 13
   1085 14
   1065 15
    931 16
   1420 17
    682 18
    937 19
   2422 2
   1357 3
   1765 4
   1690 5
   1547 6
   2495 7
   1371 8
   1563 9
   1239 X
     82 Y

$ cat /home/wangjl/data/ZhangMin/bedGraph/KO_1.bedgraph | awk '{print $1}' | sort|uniq -c
 928655 1
 733723 10
    260 GL456221.1
   1150 GL456233.1
    106 JH584293.1
  13510 MT
 439871 X
  20277 Y
#
怎么处理？要么把ensembl的gtf转为bed，要么去掉bedGraph中的GL开头的行。
回去尝试了一下，bed中包含了很多，但是都被第一步生成3UTR.bed去掉了。
只能尝试第二个方案了：去掉bedGraph中的1-19XY之外的部分，也就是去掉开头是GJM的行。

$ cat KO_1.bedgraph | sed '/^[GJM]/d' |  awk '{print $1}'|sort |uniq -c


### -> 报错记录3: 再执行还是报这个错
还是报错，看源代码必须要有chr开头，否则跳过。
好吧，前面折腾的再折腾回去











6. 结果查看
(1) 只有一个输出文件
$ ls -lth DaPars_Output_Condition1/
total 4.0K
-rw-rw-r-- 1 wangjl wangjl 344 Jun  4 10:34 DaPars_Output_Condition1_All_Prediction_Results.txt


$ cd DaPars_Output_Condition1/
$ wc DaPars_Output_Condition1_All_Prediction_Results.txt
  1  28 344 DaPars_Output_Condition1_All_Prediction_Results.txt
除了一行表头，啥也没有。

$ cat DaPars_Output_Condition1_All_Prediction_Results.txt 
Gene    fit_value       Predicted_Proximal_APA  Loci    A_1_long_exp    A_1_short_exp   A_1_PDUI        A_2_long_exp    A_2_short_exp   A_2_PDUI        A_3_long_exp    A_3_short_exp   A_3_PDUI       B_1_long_exp    B_1_short_exp   B_1_PDUI        B_2_long_exp    B_2_short_exp   B_2_PDUI        B_3_long_exp    B_3_short_exp   B_3_PDUI        Group_A_Mean_PDUI       Group_B_Mean_PDUI      PDUI_Group_diff P_val   adjusted.P_val  Pass_Filter



(2) 降低筛选条件，再试一下
$ cd /home/wangjl/data/ZhangMin/bedGraph/
$ cat configure_file_ADK_2.config
########################
#(1)3UTR annotation: The following file is the result of step 1.
Annotated_3UTR=/home/wangjl/data/ref/mouse/UCSC/mm10_refseq_extracted_3UTR.bed 

#(2)sample bedGraph: A comma-separated list of BedGraph files of samples from condition 1
Group1_Tophat_aligned_Wig=trimKO_1.bedgraph,trimKO_2.bedgraph,trimKO_3.bedgraph

#A comma-separated list of BedGraph files of samples from condition 2
Group2_Tophat_aligned_Wig=trimWT_1.bedgraph,trimWT_2.bedgraph,trimWT_3.bedgraph

Output_directory=DaPars_Output_Condition1/
Output_result_file=DaPars_Output_Condition2

#At least how many samples passing the coverage threshold in two conditions
Num_least_in_group1=1
Num_least_in_group2=1

Coverage_cutoff=10

#Cutoff for FDR of P-values from Fisher exact test.
FDR_cutoff=0.1
PDUI_cutoff=0.5
Fold_change_cutoff=0.26
########################


$ python ~/soft/dapars/src/DaPars_main.py configure_file_ADK_2.config
[Fri 04 Jun 2021 11:07:08 AM ] Start Analysis ...
[Fri 04 Jun 2021 11:07:08 AM ] Loading coverage ...
[Fri 04 Jun 2021 11:09:13 AM ] Loading coverage finished ...
[Fri 04 Jun 2021 11:26:51 AM ] Filtering the result ...
[Fri 04 Jun 2021 11:27:07 AM ] Finished!
# 耗时 20min。

-rw-rw-r-- 1 wangjl wangjl 1.5M Jun  4 11:27 DaPars_Output_Condition2_All_Prediction_Results.txt

$ head DaPars_Output_Condition2_All_Prediction_Results.txt
Gene	fit_value	Predicted_Proximal_APA	Loci	A_1_long_exp	A_1_short_exp	A_1_PDUI	A_2_long_exp	A_2_short_exp	A_2_PDUI	A_3_long_exp	A_3_short_exp	A_3_PDUI	B_1_long_exp	B_1_short_exp	B_1_PDUI	B_2_long_exp	B_2_short_exp	B_2_PDUI	B_3_long_exp	B_3_short_exp	B_3_PDUI	Group_A_Mean_PDUI	Group_B_Mean_PDUI	PDUI_Group_diff	P_val	adjusted.P_val	Pass_Filter
NM_001362158|Zfp382|chr7|+	129.1	30133628	chr7:30133266-30140755	7.96	24.43	0.25	7.39	16.60	0.31	7.84	26.51	0.23	8.38	34.02	0.20	9.21	36.21 0.20	7.92	35.15	0.18	0.263333333333	0.193333333333	0.07	0.571105989072	1.0	N
NM_008548|Man1a|chr10|-	482.4	53907362	chr10:53904785-53907563	35.22	0.00	1.00	35.57	0.00	1.00	37.18	0.00	1.00	33.04	0.00	1.00	29.64	0.00	1.00  26.75	0.00	1.00	1.0	1.0	0.0	1.0	1.0	N
NM_018818|Chm|chrX|-	247.5	113042593	chrX:113040592-113043635	15.70	9.41	0.63	11.62	10.82	0.52	10.82	11.83	0.48	8.62	35.74	0.19	12.19	28.70 0.30	13.04	25.92	0.33	0.543333333333	0.273333333333	0.27	0.053224539631	0.578565603214	N

$ cat /data/wangjl/ZhangMin/bedGraph/DaPars_Output_Condition1/DaPars_Output_Condition2_All_Prediction_Results.txt | awk '{print $28}' | sort | uniq -c
   6618 N
      1 Pass_Filter
      3 Y

## 只有3给过标准了
$ cat /data/wangjl/ZhangMin/bedGraph/DaPars_Output_Condition1/DaPars_Output_Condition2_All_Prediction_Results.txt | awk '{if($28=="Y")print $1}'
NM_001081427|Flnb|chr14|+
NM_009478|Urod|chr4|-
NM_183201|Slfn5|chr11|+

$ cat /data/wangjl/ZhangMin/bedGraph/DaPars_Output_Condition1/DaPars_Output_Condition2_All_Prediction_Results.txt | awk '{if($28=="Y")print $0}'
NM_001081427|Flnb|chr14|+	2075.4	7950506	chr14:7950305-7951587	65.50	2.30	0.97	68.33	19.41	0.78	77.64	7.11	0.92	26.14	17.60	0.60	20.96	48.16	0.30  24.31	64.53	0.27	0.89	0.39	0.5	9.66088276465e-12	1.6830274711e-09	Y
NM_009478|Urod|chr4|-	38.3	116990247	chr4:116989965-116990448	8.42	38.71	0.18	4.75	34.24	0.12	8.71	29.53	0.23	36.79	17.28	0.68	44.31	1.77  0.96	49.24	12.06	0.80	0.176666666667	0.813333333333	-0.636666666667	4.06784428433e-10	5.98425092495e-08	Y
NM_183201|Slfn5|chr11|+	41182.8	82963447	chr11:82960900-82964850	124.25	187.23	0.40	103.90	181.48	0.36	104.20	178.65	0.37	310.33	4.00	0.99	269.28	12.45	0.96  323.72	0.00	1.00	0.376666666667	0.983333333333	-0.606666666667	1.76617701247e-67	2.33841836451e-64	Y

加上表头:
Gene    fit_value       Predicted_Proximal_APA  Loci    A_1_long_exp    A_1_short_exp   A_1_PDUI        A_2_long_exp    A_2_short_exp   A_2_PDUI        A_3_long_exp    A_3_short_exp   A_3_PDUI       B_1_long_exp    B_1_short_exp   B_1_PDUI        B_2_long_exp    B_2_short_exp   B_2_PDUI        B_3_long_exp    B_3_short_exp   B_3_PDUI        Group_A_Mean_PDUI       Group_B_Mean_PDUI      PDUI_Group_diff P_val   adjusted.P_val  Pass_Filter



(3) 使用R读取，排序过滤一下
过滤条件: adjP<0.05 & absDiff>0.2.

	Gene	Loci	PDUI_Group_diff	adjusted.P_val	Pass_Filter
1146	NM_009478|Urod|chr4|-	chr4:116989965-116990448	-0.6366667	5.98E-08	Y
3696	NM_183201|Slfn5|chr11|+	chr11:82960900-82964850	-0.6066667	2.34E-64	Y
1046	NM_001081427|Flnb|chr14|+	chr14:7950305-7951587	0.5	1.68E-09	Y
6096	NM_011050|Pdcd4|chr19|+	chr19:53929083-53929659	0.45	3.90E-02	N
941	NM_001379283|Eri3|chr4|+	chr4:117673741-117674281	-0.3966667	3.06E-03	N
1099	NM_001285902|Eri3|chr4|+	chr4:117673741-117674297	-0.3966667	3.06E-03	N
1242	NM_009643|Ahnak|chr19|+	chr19:9001699-9019196	0.3833333	8.72E-13	N
1857	NM_198025|Flvcr1|chr1|-	chr1:191024909-191026190	0.38	1.09E-09	N
3281	NM_001290741|Cnot6|chr11|-	chr11:49671497-49675405	-0.37	5.85E-05	N
2599	NM_013590|Lyz1|chr10|-	chr10:117287795-117288649	0.3633333	5.23E-05	N
4007	NM_001159517|Qk|chr17|-	chr17:10206471-10209631	-0.3633333	3.34E-04	N
4541	NM_031195|Msr1|chr8|-	chr8:39603452-39605982	0.35	1.86E-25	N
799	NM_133952|Unc45a|chr7|-	chr7:80325292-80325877	-0.3433333	4.10E-03	N
4491	NM_001359632|Tmem259|chr10|-	chr10:79977190-79977853	-0.33	4.30E-03	N
2549	NM_021501|Pias4|chr10|-	chr10:81153966-81154372	0.3233333	1.71E-03	N
6601	NM_001134646|Tomm5|chr4|-	chr4:45105210-45105644	-0.3233333	3.82E-03	N
590	NM_001038708|Cdc42se1|chr3|+	chr3:95234250-95236424	0.3133333	2.54E-02	N
925	NM_001161730|Tap1|chr17|+	chr17:34196568-34197225	-0.3066667	2.27E-16	N
1576	NM_144860|Mib1|chr18|+	chr18:10811985-10818578	0.3033333	4.28E-04	N
1993	NM_001372469|Ssbp4|chr8|-	chr8:70597490-70598120	0.29	9.44E-11	N
5719	NM_153588|Mrtfb|chr16|+	chr16:13412160-13417529	0.2833333	2.05E-02	N
5140	NM_008533|Cd180|chr13|+	chr13:102704705-102706631	0.28	1.25E-14	N
5772	NM_010124|Eif4ebp2|chr10|-	chr10:61432497-61433828	0.28	7.58E-04	N
5209	NM_001160019|Tor1aip1|chr1|-	chr1:156004599-156007709	-0.27	8.29E-21	N
3055	NM_001357299|Tgfbrap1|chr1|-	chr1:43047200-43049835	0.27	8.72E-03	N
6065	NM_023168|Grina|chr15|+	chr15:76249217-76249904	-0.2633333	8.27E-09	N
5584	NM_001377103|Fam219a|chr4|-	chr4:41518929-41520395	0.2633333	2.98E-04	N
2212	NM_001310639|Stap1|chr5|+	chr5:86103700-86104000	-0.2633333	1.20E-03	N
89	NM_001377102|Fam219a|chr4|-	chr4:41518929-41520398	0.2633333	2.54E-03	N
1179	NM_172856|Cers6|chr2|+	chr2:69108442-69114283	0.26	1.06E-04	N
4558	NM_007807|Cybb|chrX|-	chrX:9435254-9438343	0.2566667	7.73E-146	N
4547	NM_001347332|Pisd|chr5|-	chr5:32736301-32737454	-0.2566667	1.40E-09	N
1204	NM_001252638|Rhobtb1|chr10|+	chr10:69289520-69291784	0.2566667	1.44E-02	N
1214	NM_177298|Pisd|chr5|-	chr5:32736314-32737454	-0.2533333	1.40E-09	N
4763	NM_019769|Chp1|chr2|+	chr2:119585107-119587022	0.2533333	1.14E-03	N
6010	NM_009752|Glb1|chr9|+	chr9:114473838-114474379	-0.2533333	3.32E-02	N
2100	NM_009911|Cxcr4|chr1|-	chr1:128588199-128589901	-0.2433333	2.88E-14	N
5654	NM_198895|Abr|chr11|-	chr11:76416732-76419193	0.2433333	5.19E-06	N
4206	NM_001346670|Abr|chr11|-	chr11:76416792-76419193	0.2433333	5.63E-06	N
418	NM_018775|Tbc1d8|chr1|-	chr1:39371910-39372786	-0.2433333	2.09E-03	N
6348	NM_139311|Mllt6|chr11|+	chr11:97681546-97685458	0.24	1.57E-02	N
4969	NM_145974|N4bp3|chr11|-	chr11:51643089-51644148	0.24	2.79E-02	N
6094	NR_168575|Gm51871|chr11|+	chr11:94357259-94357761	-0.24	2.99E-02	N
6126	NM_001042484|Golga7|chr8|-	chr8:23241326-23242631	-0.24	4.34E-02	N
1777	NM_010183|Fbrs|chr7|+	chr7:127489689-127491500	0.2366667	5.63E-06	N
5409	NM_001347171|Mbd6|chr10|-	chr10:127281959-127282907	0.2333333	2.11E-02	N
2849	NM_001310682|Prkcd|chr14|-	chr14:30595354-30596025	-0.23	2.64E-06	N
3679	NM_001163160|Pcyt1a|chr16|+	chr16:32471297-32475065	0.2266667	5.30E-03	N
2218	NM_144525|Tmem214|chr5|+	chr5:30876664-30877469	-0.2266667	9.35E-03	N
5750	NM_008538|Marcks|chr10|-	chr10:37133243-37136935	0.22	2.55E-14	N
5846	NM_010576|Itga4|chr2|+	chr2:79326520-79332491	0.22	5.27E-03	N
5119	NM_134003|Zc3h10|chr10|-	chr10:128543560-128545538	0.22	2.05E-02	N
3128	NM_007480|Arf5|chr6|+	chr6:28426072-28426602	-0.2166667	2.29E-06	N
6503	NM_019760|Serinc1|chr10|-	chr10:57515775-57517292	-0.2133333	2.11E-06	N
4873	NM_001199284|Slc43a2|chr11|+	chr11:75572315-75577572	-0.2033333	5.33E-41	N
1010	NM_001145950|5730409E04Rik|chr4|+	chr4:126611676-126614371	0.2033333	1.41E-02	N
4337	NM_001013755|5730409E04Rik|chr4|+	chr4:126611681-126614371	0.2033333	1.42E-02	N




========================================
DaPars2 //todo
----------------------------------------
https://github.com/3UTR/DaPars2

新闻报道: https://www.szbl.ac.cn/infomation/research/2096.html



========================================
scDaPars: //todo
----------------------------------------
https://genome.cshlp.org/content/early/2021/05/25/gr.271346.120.long

Analysis of alternative polyadenylation from single-cell RNA-seq using scDaPars reveals cell subpopulations invisible to gene expression
Genome Res. gr.271346.120Published in Advance May 25, 2021,


新闻报道: https://www.seqchina.cn/14138.html



========================================
化学平衡理论
----------------------------------------
1.速率方程的确定 [3]  主要有以下三种方式：
https://baike.baidu.com/item/%E5%8C%96%E5%AD%A6%E5%8F%8D%E5%BA%94%E9%80%9F%E7%8E%87%E6%96%B9%E7%A8%8B/4811007?fr=aladdin

(1).微分法：两边求对数，得到：
- d[A]/dt = k*[A]^n
ln( d[A]/dt ) = ln k + n*ln[A]

然后取若干个不同的初始浓度[A]0，然后分别从 [A]~t 上求出相应的斜率 d[A]0/dt，求出 ln(-d[A]0/dt) - ln[A]0 直线的斜率，并进一步求出反应物 A 的反应级数。


(2). 尝试法/试差法：分别将某一化学反应的 [A] 和 t 代入各种级数反应的积分速率方程，看哪一个最准确。

(3). 半衰期法：求得两个不同初始浓度下的反应半衰期，然后根据总结一节中的半衰期通式，求出反应级数。



2.










========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------


