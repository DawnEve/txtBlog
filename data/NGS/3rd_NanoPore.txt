三代测序 NanoPore 

Test on station 03:
OS: Ubuntu 18.04


========================================
0.合并结果为一个大 fastq
----------------------------------------
省略步骤:
https://wap.sciencenet.cn/blog-2970729-1124496.html
Nanopore basecalling: Albacore, Guppy, Scrappie, Flappie, Chiron...


1. 文件结构
$ pwd
/home/wangjl/data/project/mNGS/yinqs/02

$ tree fastq_pass 
fastq_pass
├── barcode01
│   └── FAW95215_pass_barcode01_ac347ea4_0ae9040c_0.fastq.gz
├── barcode02
│   └── FAW95215_pass_barcode02_ac347ea4_0ae9040c_0.fastq.gz
├── barcode03
│   └── FAW95215_pass_barcode03_ac347ea4_0ae9040c_0.fastq.gz
├── barcode75
│   ├── FAW95215_pass_barcode75_ac347ea4_0ae9040c_0.fastq.gz
│   ├── FAW95215_pass_barcode75_ac347ea4_0ae9040c_1.fastq.gz
│   ├── FAW95215_pass_barcode75_ac347ea4_0ae9040c_2.fastq.gz
│   └── FAW95215_pass_barcode75_ac347ea4_0ae9040c_3.fastq.gz
...

共 80 个文件夹，里面有若干fastq.gz文件。






2. 合并这些 fastq 文件

input_dir="/home/wangjl/data/project/mNGS/yinqs/02/fastq_pass/"

import os

# 获取第一级目录
dirs1 = os.listdir(input_dir)
dirs2 = [x for x in dirs1 if x.startswith("barcode")]
print(len(dirs2))
# dirs2[0:10]



# 读取gz文件内容
import gzip

# 写文件
output_file="/home/wangjl/data/project/mNGS/yinqs/02/combined.fq.gz"
fw=gzip.open(output_file, "wb")


# 获取第一级目录中的文件名
line_number=0
i=0
for _dir in dirs2:
    i +=1
    print("\n############## [%d/%d] %s" %(i, len(dirs2), _dir) )
    count = 0
    path = os.path.join(input_dir, _dir)
    files = os.listdir(path)
    for _file in files:
        count += 1
        fname = os.path.join(path, _file)
        # print(path2)
        # 读文件
        # "/home/wangjl/data/project/mNGS/yinqs/02/fastq_pass/barcode63/FAW95215_pass_barcode63_ac347ea4_0ae9040c_0.fastq.gz"
        fr=gzip.open(fname,'rb')
        # 写入gz文件
        while True:
            line=fr.readline()
            if not line:
                break
            line_number += 1
            fw.write(line)
        fr.close()
    print("############## Total file number in this dir: %d" % count  )
    
fw.close()
print("done! Total line number: %d" %  line_number)
print("output file: " + output_file)



(2) 结果
$ ls -lth
total 798M
-rw-r--r--  1 wangjl zxsys 232M 8月   9 11:31 combined.fq.gz

$ zless combined.fq.gz | wc -l
3438304
3438304=3,438,304=3.4M reads






========================================
1. 质控(NanoPlot) 与 过滤 (NanoFilt)
----------------------------------------
1. 质控 
https://github.com/wdecoster/NanoPlot
http://nanoplot.bioinf.be/

(1) 安装
$ pip3 install NanoPlot #很耗时

$ which NanoPlot
/home/wangjl/soft/python3/bin/NanoPlot

$ NanoPlot --version
NanoPlot 1.41.6

(2) 使用
输出质量图谱
$ cd /home/wangjl/data/project/mNGS/yinqs/02/

质控命令
$ mkdir nanoplot
$ NanoPlot --fastq combined.fq.gz -t 16 \
	--maxlength 40000 --plots dot -o nanoplot
# 11:36 --> 11:51, 15min;
参数解释：
-t：线程数目
-o, --outdir：输出结果目录
-p, --prefix：输出结果前缀
--color：点的颜色
--N50 表示在序列读长的直方图中显示N50的标识
--title：标题
--downsample N：在输入文件中随机抽取n条序列进行处理
--minlength N：忽略 N bp 以下的reads
-- fastq：输入fastq格式文件
-f [{png,jpg,jpeg,webp,svg,pdf,eps,json}]：图片类型
--plots：绘图类型，kde,hex,dot,pauvre


和若干文件: 
$ ls -lth nanoplot/
total 1.4M
-rw-r--r-- 1 wangjl zxsys 3.0K 8月   9 11:51 NanoPlot_20230809_1137.log
-rw-r--r-- 1 wangjl zxsys 660K 8月   9 11:51 NanoPlot-report.html
-rw-r--r-- 1 wangjl zxsys 451K 8月   9 11:48 LengthvsQualityScatterPlot_dot.html
-rw-r--r-- 1 wangjl zxsys 163K 8月   9 11:46 Yield_By_Length.html
-rw-r--r-- 1 wangjl zxsys 9.2K 8月   9 11:44 Non_weightedLogTransformed_HistogramReadlength.html
-rw-r--r-- 1 wangjl zxsys 8.7K 8月   9 11:42 Non_weightedHistogramReadlength.html
-rw-r--r-- 1 wangjl zxsys 9.7K 8月   9 11:40 WeightedLogTransformed_HistogramReadlength.html
-rw-r--r-- 1 wangjl zxsys 8.7K 8月   9 11:37 WeightedHistogramReadlength.html
-rw-r--r-- 1 wangjl zxsys  824 8月   9 11:37 NanoStats.txt

在浏览器查看:
$ cd nanoplot
$ python3 -m http.server 9090
需要修改为本地的 plotly.js 文件。
$ cp NanoPlot-report.html NanoPlot-report.html-backup
$ sed -i "s/https://cdn.plot.ly/plotly-2.24.1.min.js/http://s3.biomooc.com:8000/file/soft/js/plotly-2.24.1.min.js/" NanoPlot-report.html
报错！需要对/做转义:
$ sed -i 's/https:\/\/cdn.plot.ly\/plotly-2.24.1.min.js/http:\/\/s3.biomooc.com:8000\/file\/soft\/js\/plotly-2.24.1.min.js/' NanoPlot-report.html
可以浏览了。



(3) 统计质量信息
$ mkdir summary/
$ NanoPlot --summary sequencing_summary.txt --loglength -o summary
# 15:22->16:16
参数解释：
--summary file [file ...]:  Data is in one or more summary file(s) generated by albacore or guppy.
	在原文件夹找到了该文件。

查看结果:
reads 长度有两个峰，主峰高度分别对应着: 244, 540








2. 过滤 NanoFilt 
$ pip3 install NanoFilt

$ which NanoFilt 
/home/wangjl/soft/python3/bin/NanoFilt

$ NanoFilt --version
NanoFilt 2.8.0



(2) 使用 NanoFilt 软件过滤数据
$ cd /home/wangjl/data/project/mNGS/yinqs/02/
$ gunzip -c ../2.rawdata/minion/all.sra.fastq.gz | NanoFilt -q 7 -l 500 --headcrop 50 | gzip > clean.NanoFilt.fastq.gz
选项参数：
-l ,--length: 过滤掉小于此长度的序列
--maxlength：过滤掉超过此长度的序列
-q , --quality：过滤掉低质量序列
--minGC：过滤掉GC含量小于此百分比的序列
--maxGC：过滤掉GC含量大于此百分比的序列
--headcrop：从头部切掉 n bp
--tailcrop：尾部切掉 n bp

try1: 去掉长度小于500的
$ gunzip -c combined.fq.gz | NanoFilt -q 7 -l 500 --headcrop 50 --tailcrop  50 | gzip > clean.NanoFilt.fastq.gz
感觉过滤的有点很了，主要是长度
-rw-r--r--  1 wangjl zxsys 232M 8月   9 11:31 combined.fq.gz
-rw-r--r--  1 wangjl zxsys 8.9M 8月   9 16:06 clean.NanoFilt.fastq.gz

try2: 去掉长度小于200的
$ gunzip -c combined.fq.gz | NanoFilt -q 7 -l 200 --headcrop 50 --tailcrop  50 | gzip > clean2.NanoFilt.fastq.gz
输出 -rw-r--r--  1 wangjl zxsys  54M 8月   9 16:08 clean2.NanoFilt.fastq.gz

try3: 去掉长度小于200的，末尾不截取
$ gunzip -c combined.fq.gz | NanoFilt -q 7 -l 200 --headcrop 50 | gzip > clean3.NanoFilt.fastq.gz
输出 -rw-r--r--  1 wangjl zxsys 112M 8月   9 16:10 clean3.NanoFilt.fastq.gz



(3) 再质控一次
$ mkdir nanoplotFilter
$ NanoPlot --fastq clean3.NanoFilt.fastq.gz -t 16 \
	--color blue \
	--maxlength 40000 --plots dot -o nanoplotFilter
参数 -c, --color COLOR     Specify a valid matplotlib color for the plots
# 16:12-->16:27, total 15min






========================================
2. minimap2 比对
----------------------------------------
1. 参考基因组
位置: /home/wangjl/data/ref/covid19
$ ls -lth
total 52K
-rw-r--r-- 1 wangjl zxsys  30K 8月   1 09:16 2019-nCoV_WH01.completeGenome.fa

(1) 挂载硬盘
$ sudo fdisk -l
结合 lsblk ，应该是 sdd2

挂载 
$ sudo mkdir  /mnt/m
$ sudo mount /dev/sdd2 /mnt/m
查看
$ df -lTh
Filesystem           Type      Size  Used Avail Use% Mounted on
/dev/sdd2            ext4      3.6T  652G  2.8T  19% /mnt/m


(2) 复制参考基因组:
$ df -lTh
/dev/sdc4            ext4       16T  1.6T   14T  11% /results
$ ln -s /results/wangjl/refs/ ~/refs
$ cd
$ mkdir ~/refs/hg38/


$ cd ~/data2/images
$ ls -lth 
-rw-rw-r-- 1 wangjl wangjl 1.8G 5月   5 13:37 igv.js_ref-20230505.tar.gz
-rw-r--r-- 1 wangjl wangjl 5.8G 5月   5 12:42 DNA-soft-ref-20230505.tar.gz
-rw-r--r-- 1 wangjl wangjl 2.9G 5月   5 11:03 dawneve__gatk4_v1.image.tar.gz

$ cp DNA-seq/igv.js_ref-20230505.tar.gz ~/refs/hg38/
$ cp DNA-seq/DNA-soft-ref-20230505.tar.gz ~/refs/hg38/


(3) 复制镜像:
$ mkdir ~/refs/images/
$ cp DNA-seq/dawneve__gatk4_v1.image.tar.gz ~/refs/images/

-rw-rw-r-- 1 wangjl wangjl 418M 5月   2 22:35 dawneve__gitbook_3.2.3.image.tar.gz
-rw-rw-r-- 1 wangjl wangjl 352M 5月   2 22:35 dawneve__docsify_4.4.4.image.tar.gz

$ cp dawneve__gitbook_3.2.3.image.tar.gz ~/refs/images/
$ cp dawneve__docsify_4.4.4.image.tar.gz ~/refs/images/

(4) BMMC 数据
$ mkdir ~/refs/BMMC
$ cd /home/wangjl/data2/backupAPA/BMMC
$ cp -R AML027_post/  ~/refs/BMMC/

(5) 卸载硬盘
$ sudo umount /mnt/m
$ lsblk #确定已经删除硬件



==> 整理参考基因组
$ cd ~/refs/hg38/
$ tar -zxvf DNA-soft-ref-20230505.tar.gz 
$ mv ref/hg38/gencode .

$ ls -lth gencode/GRCh38.p13.genome.fa
-rw-r--r-- 1 wangjl zxsys 3.1G 2月   8 23:09 gencode/GRCh38.p13.genome.fa
绝对路径: /home/wangjl/refs/hg38/gencode/GRCh38.p13.genome.fa






2. minimap2
(1) 下载与安装
从 github 下载 minimap2-2.26_x64-linux.tar.bz2
https://github.com/lh3/minimap2

$ tar -zxvf minimap2-2.26.tar.gz 
$ cd minimap2-2.26/

查看 README:
git clone https://github.com/lh3/minimap2
cd minimap2 && make
# long sequences against a reference genome
./minimap2 -a test/MT-human.fa test/MT-orang.fa > test.sam
# create an index first and then map
./minimap2 -x map-ont -d MT-human-ont.mmi test/MT-human.fa
./minimap2 -a MT-human-ont.mmi test/MT-orang.fa > test.sam
最简:
minimap2 -d ref.mmi ref.fa                     # indexing
minimap2 -a ref.mmi reads.fq > alignment.sam   # alignment


$ make
$ ./minimap2 --version
2.26-r1175
$ cd ..
$ mv minimap2-2.26 ~/soft/

添加到路径
$ vim ~/.bashrc #末尾添加一行
#alias minimap2='/home/wangjl/soft/minimap2-2.26/minimap2' #不好
export PATH=/home/wangjl/soft/minimap2-2.26/:$PATH
$ source ~/.bashrc

$ which minimap2 
/home/wangjl/soft/minimap2-2.26//minimap2
$ minimap2 --version
2.26-r1175


(2) 构建索引
$ cd /home/wangjl/data/ref/covid19
$ ls -lth
total 52K
-rw-r--r-- 1 wangjl zxsys  30K 8月   1 09:16 2019-nCoV_WH01.completeGenome.fa
-rw-r--r-- 1 wangjl zxsys  120 8月   1 09:14 ReadMe.txt
-rw-r--r-- 1 wangjl zxsys   68 9月  26  2022 2019-nCoV_WH01.completeGenome.fa.gz.md5
-rw-r--r-- 1 wangjl zxsys 9.2K 1月  27  2020 2019-nCoV_WH01.completeGenome.fa.gz


参考:
minimap2 -x map-ont -d MT-human-ont.mmi test/MT-human.fa
minimap2 -d ref.mmi ref.fa
参数解释：
-d FILE      dump index to FILE []
-x STR       preset (always applied before other options; see minimap2.1 for details) []
			 - map-pb/map-ont - PacBio CLR/Nanopore vs reference mapping
			 - map-hifi - PacBio HiFi reads vs reference mapping
			 - ava-pb/ava-ont - PacBio/Nanopore read overlap
			 - asm5/asm10/asm20 - asm-to-ref mapping, for ~0.1/1/5% sequence divergence
			 - splice/splice:hq - long-read/Pacbio-CCS spliced alignment
			 - sr - genomic short-read mapping

命令
$ minimap2 -x map-ont -d 2019-nCoV-ont.mmi 2019-nCoV_WH01.completeGenome.fa.gz
[M::mm_idx_gen::0.031*0.26] collected minimizers
[M::mm_idx_gen::0.034*0.48] sorted minimizers
[M::main::0.037*0.53] loaded/built the index for 1 target sequence(s)
[M::mm_idx_stat] kmer size: 15; skip: 10; is_hpc: 0; #seq: 1
[M::mm_idx_stat::0.038*0.54] distinct minimizers: 5580 (99.95% are singletons); average occurrences: 1.001; average spacing: 5.349; total length: 29866
[M::main] Version: 2.26-r1175
[M::main] CMD: minimap2 -x map-ont -d 2019-nCoV-ont.mmi 2019-nCoV_WH01.completeGenome.fa.gz
[M::main] Real time: 0.039 sec; CPU: 0.022 sec; Peak RSS: 0.004 GB

秒出二进制文件
$ ls -lth ~/data/ref/covid19/2019-nCoV-ont.mmi 
-rw-r--r-- 1 wangjl zxsys 230K 8月   4 09:21 /home/wangjl/data/ref/covid19/2019-nCoV-ont.mmi



=> 构建人的索引
$ minimap2 -x map-ont -t 30 \
	-d /home/wangjl/refs/hg38/gencode/index/minimap2/GRCh38.p13-ont.mmi \
	/home/wangjl/refs/hg38/gencode/GRCh38.p13.genome.fa
参数解释-t INT       number of threads [3]
# 17:58->17:59
[M::mm_idx_gen::69.431*1.89] collected minimizers
[M::mm_idx_gen::74.516*3.05] sorted minimizers
[M::main::87.514*2.74] loaded/built the index for 639 target sequence(s)
[M::mm_idx_stat] kmer size: 15; skip: 10; is_hpc: 0; #seq: 639
[M::mm_idx_stat::88.738*2.72] distinct minimizers: 100223003 (37.40% are singletons); average occurrences: 5.837; average spacing: 5.585; total length: 3267117988
[M::main] Version: 2.26-r1175
[M::main] CMD: minimap2 -x map-ont -t 30 -d /home/wangjl/refs/hg38/gencode/index/minimap2/GRCh38.p13-ont.mmi /home/wangjl/refs/hg38/gencode/GRCh38.p13.genome.fa
[M::main] Real time: 88.945 sec; CPU: 241.162 sec; Peak RSS: 11.651 GB




(3) 比对
$ cd /home/wangjl/data/project/mNGS/yinqs/01

参考：
minimap2 -a MT-human-ont.mmi test/MT-orang.fa > test.sam
minimap2 -a ref.mmi reads.fq > alignment.sam   # alignment
参数解释：
-a           output in the SAM format (PAF by default)

命令：
$ minimap2 -a /home/wangjl/data/ref/covid19/2019-nCoV-ont.mmi 23PM200339_1.fq > 23PM200339_1.sam
[M::main::0.007*1.29] loaded/built the index for 1 target sequence(s)
[M::mm_mapopt_update::0.007*1.26] mid_occ = 10
[M::mm_idx_stat] kmer size: 15; skip: 10; is_hpc: 0; #seq: 1
[M::mm_idx_stat::0.008*1.24] distinct minimizers: 5580 (99.95% are singletons); average occurrences: 1.001; average spacing: 5.349; total length: 29866
[M::worker_pipeline::19.694*3.06] mapped 10000000 sequences
[M::worker_pipeline::25.564*2.95] mapped 10000000 sequences
[M::worker_pipeline::38.901*3.18] mapped 10000000 sequences
[M::worker_pipeline::43.849*3.05] mapped 10000000 sequences
[M::worker_pipeline::59.777*3.13] mapped 10000000 sequences
[M::worker_pipeline::64.818*2.96] mapped 8598454 sequences
[M::main] Version: 2.26-r1175
[M::main] CMD: minimap2 -a /home/wangjl/data/ref/covid19/2019-nCoV-ont.mmi 23PM200339_1.fq
[M::main] Real time: 64.821 sec; CPU: 192.080 sec; Peak RSS: 4.907 GB

不到一分钟：
$ ls -lth
total 16G
-rw-r--r-- 1 wangjl zxsys 8.5G 8月   4 09:31 23PM200339_1.sam


=> 比对到人的基因组
$ cd /home/wangjl/data/project/mNGS/yinqs/02
$ minimap2 -t 20 -a /results/wangjl/refs/hg38/gencode/index/minimap2/GRCh38.p13-ont.mmi clean3.NanoFilt.fastq.gz > clean3.NanoFilt.sam
# 18:02->18:03
[M::main::7.881*1.00] loaded/built the index for 639 target sequence(s)
[M::mm_mapopt_update::9.353*1.00] mid_occ = 741
[M::mm_idx_stat] kmer size: 15; skip: 10; is_hpc: 0; #seq: 639
[M::mm_idx_stat::10.189*1.00] distinct minimizers: 100223003 (37.40% are singletons); average occurrences: 5.837; average spacing: 5.585; total length: 3267117988
[M::worker_pipeline::17.499*4.38] mapped 379333 sequences
[M::main] Version: 2.26-r1175
[M::main] CMD: minimap2 -t 20 -a /results/wangjl/refs/hg38/gencode/index/minimap2/GRCh38.p13-ont.mmi clean3.NanoFilt.fastq.gz
[M::main] Real time: 17.943 sec; CPU: 77.097 sec; Peak RSS: 8.320 GB


$ zcat clean3.NanoFilt.fastq.gz | wc
1517332 5689995 375396904

$ grep -v '^@' clean3.NanoFilt.sam | wc
 389541 5667056 274583635

# 1517332/4-389541 = -10208 相差的还比较多

目测sam文件中有很多不匹配的。







========================================
3. samtools 查看结果
----------------------------------------
1. samtools 查看比对效果

(1) 下载 samtools
下载 git 已经 2.41.0版本了。
S3 服务器: 2.17.1, 
PC: 2.39.0.windows.1


(2) 查看效果
$ cd /home/wangjl/data/project/mNGS/yinqs/01
是 sam，可以直接看 ...

$ head 23PM200339_1.sam 
@HD	VN:1.6	SO:unsorted	GO:query
@SQ	SN:2019-nCoV_WH01	LN:29866
@PG	ID:minimap2	PN:minimap2	VN:2.26-r1175	CL:minimap2 -a /home/wangjl/data/ref/covid19/2019-nCoV-ont.mmi 23PM200339_1.fq
S250029915L1C001R00100000355	4	*	0	0	*	*	0	0	ANNCGACCTGAGAACCTCATAGGAGAAACTTGAAAAGATAAACTGCAAAG	E!!FFCFFDFCFECFFDFCDCFFEFC?@FDDFA2@CFADCA4FDFF@E8F	rl:i:0
S250029915L1C001R00100000358	4	*	0	0	*	*	0	0	GNNCAGGCATAAAGTTTCTAAAGAAGTGTTTAGAATGGCTAAATCTTCAT	F!!FCFFF?D?C@FDCDFDAAAF*>FDFDDDAF0+:FFFCEAADFA@F+D	rl:i:0
S250029915L1C001R00100000368	4	*	0	0	*	*	0	0	GNNTGGCATTGGATCTATAAATTACCTTGGGCAGTATGGCCATTTTCACG	;!!DACFE@DDFE7FDEDECE:D@FFDC1EAFCFD+.B3FFE<DDAFEF:	rl:i:0

没有比对位置？
$ wc -l 23PM200339_1.*
  234393816 23PM200339_1.fq
   58598457 23PM200339_1.sam
234393816/4 - 58598457 = -3 可见，fq都包含到sam中了！这怎么可能？





(3) 对三代测序过滤
$ cd /home/wangjl/data/project/mNGS/yinqs/02
$ ls -lth
total 1.9G
-rw-r--r--  1 wangjl zxsys 262M 8月   9 18:04 clean3.NanoFilt.sam

$ grep -v "^@" clean3.NanoFilt.sam  | awk '{print $5}' | sort |uniq -c | sort -k1nr
 287491 0 
  84338 60
   1620 59
   1452 58
   1392 57
   1316 56
   1184 55
   1120 54
    969 53
    921 52
    843 50
    831 51
    724 49
    694 48
	...
	215 1  
	...

$ samtools view -b clean3.NanoFilt.sam > clean3.NanoFilt.bam
$ ls -lth
-rw-r--r--  1 wangjl zxsys 117M 8月   9 18:15 clean3.NanoFilt.bam
-rw-r--r--  1 wangjl zxsys 262M 8月   9 18:04 clean3.NanoFilt.sam

$ samtools sort clean3.NanoFilt.bam > clean3.NanoFilt.sort.bam
$ samtools index clean3.NanoFilt.sort.bam

过滤，获取比对上的read:
samtools view -h -q 1 -F 4 -F 256 clean3.NanoFilt.sort.bam | grep -v XA:Z | grep -v SA:Z |samtools view -b - > clean3.NanoFilt.sort.map.bam
比对上的
$ samtools view -h -q 1 -F 4 -F 256 clean3.NanoFilt.sort.bam |samtools view -b - > clean3.NanoFilt.sort.map.bam
$ samtools index clean3.NanoFilt.sort.map.bam

没比对上的：
$ samtools view -h -f 4 clean3.NanoFilt.sort.bam |samtools view -b - > clean3.NanoFilt.sort.unmap.bam
$ samtools index clean3.NanoFilt.sort.unmap.bam

其中参数：
-q 1：过滤掉比对质量小于1的reads；
-F 4：过滤掉没有比对上的reads；
-F 256：过滤掉比对上的多次的reads。

$ ls -lth
-rw-r--r--  1 wangjl zxsys 1.6M 8月   9 18:20 clean3.NanoFilt.sort.map.bam.bai
-rw-r--r--  1 wangjl zxsys  50M 8月   9 18:19 clean3.NanoFilt.sort.map.bam

-rw-r--r--  1 wangjl zxsys 5.1K 8月   9 19:02 clean3.NanoFilt.sort.unmap.bam.bai
-rw-r--r--  1 wangjl zxsys  63M 8月   9 19:02 clean3.NanoFilt.sort.unmap.bam


$ samtools view clean3.NanoFilt.sort.map.bam | wc -l
102050=102,050=102K 个序列

Flag 列，问题：2064 和 2048 是什么意思？
$ samtools view clean3.NanoFilt.sort.map.bam | awk '{print $2}' | sort | uniq -c | sort -k1nr
  51164 16
  49204 0
    854 2064
    828 2048

染色体：
$ samtools view clean3.NanoFilt.sort.map.bam | awk '{print $3}' | sort | uniq -c | sort -k1nr
  76896 chrM 
  12314 chr1
   2795 chr17     
   2694 chr7      
   2503 chr13     
    970 chr20     
    422 chr19     
    298 chr2      
    296 chr8      
    282 chr4      
    268 chr5
	...
	 75 chr22
     48 chr21
     35 chrY
	...

MAPQ值：
$ samtools view clean3.NanoFilt.sort.map.bam | awk '{print $5}' | sort | uniq -c | sort -k1nr
  84338 60
   1620 59
   1452 58
   1392 57
   1316 56
   ...




========================================
4. igv.js 查看结果
----------------------------------------
1. 复制项目
在 gitee 上新建项目中选择从 github 导入。
https://gitee.com/dawnEve/scIGV

(1) 之前s3上就有 /home/wangjl/soft/scIGV/
$ pwd
/home/wangjl/soft/scIGV

就缺少参考基因组了.


(2) 复制参考基因组
$ cd ~/refs/hg38/
$ mkdir ../igv
$ mv igv.js_ref-20230505.tar.gz ../igv/

$ cd ../igv/
$ tar zxvf igv.js_ref-20230505.tar.gz
$ ls -lth ref/
total 80K
drwxr-xr-x 3 wangjl zxsys 4.0K 4月   5 19:23 hg38
-rw-r--r-- 1 wangjl zxsys 1.7K 5月  27  2022 hg19.chrom.noChr.sizes
-rw-r--r-- 1 wangjl zxsys 2.0K 5月  27  2022 hg19.chrom.sizes
-rw-r--r-- 1 wangjl zxsys  13K 5月  27  2022 hg19_chr_size.noChr.txt
-rw-r--r-- 1 wangjl zxsys  29K 5月  25  2022 genomes.json
drwxr-xr-x 2 wangjl zxsys 4.0K 5月  22  2022 hg19
-rw-r--r-- 1 wangjl zxsys  14K 3月  22  2020 hg19_chr_size.txt

$ cd /home/wangjl/soft/scIGV/
$ mv ~/refs/igv/ref .


(3) 新建 index8.html 显示
连接上 vscode，开始编码:





2. 找覆盖度最高的区域
(1) 目测
$ samtools tview xx.bam ref/xx.fasta

(2) 给出数字
$ samtools mpileup -ABQ0 -d100000 -f ref/xx.fasta -l a.bed xx.bam >snp.around10.mpileup

-f 后面跟ref序列
-l 后面跟你的查询的序列，序列的格式就是前面文章中的bed文件格式
然后后面要跟bam文件
最后是输出文件。



 











========================================
数据
----------------------------------------
1. MinION Mk1C (MC-114010) Final report
03 Jul 23, 08:50 — 03 Jul 23, 09:51 · 20230703 · ZLYY · MC-114010

目的: 是否有病毒整合到人基因组?

(1) 
位置: /home/wangjl/data/project/mNGS/yinqs/


去掉最长的1%离群值。
The longest 1% of strands are classified as outliers, and excluded to allow focus on the main body of data.







========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------






========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------






========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------






========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------


