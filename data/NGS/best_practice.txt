best_practice 最佳实践





Good enough practices in scientific computing(2017)
https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1005510
https://carpentries-incubator.github.io/good-enough-practices/





========================================
1. 给从事生物信息学分析者的一些建议
----------------------------------------
一个良好的工作习惯在任何情况下对提高工资效率来说都是很重要的。


你应该按照能够复用的方式编写每个程序：先写API，再写实现。
	一个函数一个功能，最好分析和保存分开来。
	优先使用局部变量，防止全局变量扩散。
	数据和程序都要文档化。




========================================
|-- 推荐的工具(笔记/网盘/文献/编辑器/终端/图片)
----------------------------------------
1. 笔记应用
好记性不如个烂笔头。
生信要点繁多，需要一个电子化、不断完善的笔记系统。
PKM：Personal Knowledge Manager

有道云笔记（国内的）
印象笔记/Evernote （国外用的比较多）
OneNote（微软的）
为知笔记 （国内的）


当然，也可以自己编写一套自己顺手的知识管理系统，比如我使用PHP写的简单强大的txtBlog系统 https://github.com/dawneve/txtBlog



2. 网盘工具(很多网盘倒闭了)
文件存储，这可以弥补上述笔记应用的不足。保存一些文件、软件等。
QQ群文件
dropbox（国外用的比较多，国内现在访问受限）
box（企业级网盘）
Google Driver
OneDrive
金山快盘
360云盘
百度云盘


3.文献管理应用
管理好文献很重要，尤其是在前期关于某一研究领域的知识积累和后期的文章写作。
Endnote（很优秀的文献管理工具，里面的好多功能你可能还没发现）


4.文本编辑 和 集成开发工具（IDE-Integrated Development Environment）
轻量级的：
VIM
Notepad++
sublime3
UltraEdit
EditPlus

重量级的IDE
Eclipse（这是基于Java的一款IDE，可以安装一些常用插件：Perl、Python、PHP等）
RStudio（本地做R开发的利器，有很好的代码美化、项目管理功能，Rgui 弱爆了！）
Vim/Emacs（在Linux终端中使用的比较多的编辑工具，也有些对应的windows版，刚开始不习惯，用多了就会喜欢上的，同样也可以安装很多插件）


5.终端模拟软件
git
Xshell（强大的安全终端模拟软件，支持各种协议）
SecureCRT（同样功能强大的终端模拟软件）
Putty（小巧易用）


6.图片工具
PowerPoint（PPT，用途其实很强大，在拼图等操作中）
picPick(专业屏幕截图软件)
Adobe Photoshop/illustrator（专业的）
美图秀秀（如果要求不是那么专业，基本的操作也是可以胜任的，不仅仅是美图自拍！！！）


7.代码管理
git
github(免费的仓库都是public的)
bitbucket(免费提供private仓库)








========================================
行为习惯(分类/命名/做笔记/习惯)
----------------------------------------
1.做好分类工作
曾经有人说“用一句话概括这个世界——这个世界就是由分类来组成的”。我们想想——男的-女的、老的-少的、高的-矮的、DNA-RNA-Protein、第一个样本-第二个样本等等。试想下杂乱无章的工作习惯怎么会有高效率呢。所以在分析数据的时候对原始数据进行好的分类，对结果进行好的分类，这样能够提高我们的工作效率，具体几点：

在Linux服务器上，尽量将不能类别的数据放在不同的文件夹下，并逐级分类，这样清晰的组织目录能够很好地提高工作效率，节省无用的时间消耗。

Endnote文献组、浏览器书签、笔记目录、网盘内容等同样要做好分类。





2.好的命名习惯
一个好的文件命名是既能很好的表示文件的内容又能简洁明了。试想下你弄个1.fa 2.fa除了你当时还记得表示的是什么意思，别人看了怎么知道是什么意思呢，可能隔了几点你自己都不知道是什么意思。所以平时不要图简单图方便，而不考虑后续的分析和不站着别人的角度来思考。

数据文件的命名要简明扼要（不冗长也不要太简单）

脚本的命名要表示脚本的意图（符合一定的习惯，每个单词首字母都大写等习惯）




3. 做好笔记记录
在做生物信息学分析过程中，有时不只是自己一个人的事，可能你做的东西会返工也有可能是会给别人看的。所以及时的做好分析流程的记录是很重要的。

不要因为简单而不去记录（有时候可能就是这个简单的操作导致分析的错误，而你又恰好没记录，那就找不到错误的所在）

记录时应该有个好的逻辑条理（不要简单的放句命令在那，应该记录下命令的目的）

记录时应该按照一定的规范（使得笔记整洁明了，内容丰富）


4. 好的学习习惯
在学习一个新的东西时，不要一开始什么东西都去请教别人，一定要是自己先思考，自己对知识有一个了解（哪怕不深入），再不懂的地方去请教别人，这样对别人是一种尊重也是自己加强记忆的方法。



========================================
思维方式(如何提高效率/写出目标/)
----------------------------------------
这里提到思维方式，是因为好多人可能也是在做些东西，别人怎么做，他也怎么做，可是不知道为什么该这么做，或者也不懂大体的思路，就是那样稀里糊涂的做着。这就需要在遇到问题时怎么去分析问题，解决问题。所以在这里就建议，在碰到一个新的领域或者新的任务时，首先要做的事情是对相关的背景知识有个大体的了解，知道一些常规的处理流程，再进而慢慢的细化，到最后对这个问题心里已经有了一个比较清晰的解决思路了，这时最好用笔记记录下来。

做足前期准备（弄清楚问题是什么）

清晰的思路（怎么一步步解决问题）


refer:
http://ju.outofmemory.cn/entry/162253


========================================
生物信息分析文件夹-目录命名和组织结构
----------------------------------------
目的：看名字就知道是什么，清晰明了！

1.
一个项目的文件夹里
	依据子任务的划分、分析的步骤再分文件夹，或者使用日期命名。
		ReadMe.txt记录分析主要过程、主要分析步骤。
		script/ 放脚本
		pdf/ 放pdf图片文件
		其他子文件夹放中间数据，重要的阶段性数据在上一层加软链接。

#
在家目录放一个快捷方式，便于快速找到正在工作的目录：
$ ln -s /home/wangjl/data/apa/190610APA/ ~/cur



2. 例子






========================================
|-- 参考基因组文件夹怎么组织最好？
----------------------------------------
1.参考其他人的方式
/home/hou/data/RNA/refs/mm10/

/home/hou/data/RNA/refs/hg19/hg19.fa
/home/hou/data/RNA/refs/hg19/hg19_ucsc_genes.gtf 



2. 我现在使用的

参考基因组文件夹的命名
/home/wangjl/data/ref/hg19/index/star/  #看路径就知道是hg19的参考基因组，star的index 







========================================
☆ 画图的脚本与pdf怎么命名和管理？为防止 Fig. 3 对应的图经常变动，添加一个中间名(Graph): Gra.1A
----------------------------------------
问题: 文章写作、投稿过程中，Fig 经常变动，怎么找到正确的原始pdf和对应的code呢？



计算机解决问题的方法：
	如果一个问题很复杂，就添加分层和抽象。
	面向抽象编程，而不是具体设备。
	分层后上层不用关心下一层的细节，只需要调用其若干接口。

例子:
	比如计算机分了5大件(运算、控制、主存、输入、输出)
	所有IO设备都抽象为文件。
	网络分了7层。




1. 增加一个图片的原始编号(graph raw id)作为中间层
	Gra.1A
	Gra.1B

- 文件名不能有空格，所以原始编号不加空格。
- 图的原始编号一直不变，可以考虑一直递增中间的数字，功能相近的则修改字母A,B，功能相同的则更新版本号-v1,-v2。
	* 图用或者不用都不用修改其原始编号。
	* 图原始编号和图的对应关系保持不变，方便修改和查找。ctrl+F 查找。
- 代码修改后，代码用git记录，而文件名递增版本号，如 -v2.pdf
- 日志记录每次绘图的代码文件和输出文件，也可以考虑整理成数据库: code, pdf, desc
	* 输出时，按照 Gra .1A 中的数字排序
	* 尝试使用本地 SQLite，这样避免网络波动和Docker说不清楚的连不上异常。
	* 打算用 python + flask


2.再维护一个网页记录 Fig mapper: 随时更新
	Fig. 1A => Gra.3B

- 记录文章中使用的图来自哪里。
- 原始图的文件复制出来，改为Fig. 1A，同时更新 Fig mapper




3. 每次画图都保存一下使用的数据框，和图同名不同后缀，方便下次直接导入修改样式。
- 最后成稿时，把需要用到的正图改为 Fig即可。


















========================================
Other important untaught skills (命名、文件组织、备份)
----------------------------------------
• Naming files
• Use excel wisely
	Use excel/spreadsheet wisely
• Data/Project organization
• backup plans






========================================
|-- Naming files is not easy 命名文件
----------------------------------------
1.
不好的命名:
	myabstract.docx
	figure 1.png
	
可以的命名:
	2020-06-08_abstract_for_Macrophage.docx
	fig01_scatterplot-talk-length-vs-interest.png
#


2.Three principles for (file) names
	(1). Machine readable (do not put special characters and space in the name)
	(2). Human readable (Easy to figure out what the heck something is, based on its name, add slug)
	(3). Plays well with default ordering:
	  * Put something numeric first
	  * Use the ISO 8601 standard for dates (YYYY-MM-DD)
	  * Left pad other numbers with zeros
#





3. 后缀名刻意一点
是数据框， xx.df.txt 
是基因列表 xx.gene.txt





4. 每次画图，都要保存数据的txt格式一份，文件名和图片同名。
方便修改时，直接读取并绘图，而无需再次运行分析流程。










========================================
|-- Organization of each project down-stream analysis
----------------------------------------

最新版见: https://github.com/DawnEve/bioToolKit/tree/dev/R_scripts/src


1.
$ ls
data/ 原始数据，只读;
docs/ 文档
results/ 图片和结果表格、中间数据
scripts/ 脚本

xx_help.Rproj

怎么保存环境呢？建议每次都不保存，免得积累未知错误。
对于绘图，要分为生成数据+绘图2步，数据要及时保存为txt文件，下次修改图片风格时可以直接读读文件、绘图。


$ tree -d
|-data
	|-brandon
		|-3_xx.fq
	|-bclx-compiled-data
		|-figures
|-docs
|-results
	|-brandon
	|-olivia
	|-sophia
|-scripts
	|-brandon
	|-dj
	|-eric
#



2. Rstudio R project

2020-10-30_bclx_merfish_count.Rmd
2020-11-07_simulation_fish_count.Rmd


doc/
	paper
		msms.pdf
		makefile
data/
	2009-01-14
		yeast
			README
			yeast.sqt
			yeast.ms2
		worm
			README
			worm.ms2
src/
bin/ 可能是C之类的源码src/，编译后放到bin/，脚本语言直接 scripts/
results/
	2009-01-15
	2009-01-23
#


(1) Remember, always keep the data in the data folder untouched, I usually do
$ chmod u-w –R data/
To revoke the user’s write right so you can not edit or delete the files in the data folder.

注意：不用动原始数据！最好改为只读。


(2) Always generate the output/intermediate files/figures in the results folder using the scripts in the scripts folder




========================================
|-- One last suggestion: backup! Backup by crontab
----------------------------------------
1. crontab 的使用

crontab -e #编辑，如果不存在，就新建一个
crontab -l #display crontab file contents;
crontab -r #remove your crontab file;
crontab -v #Display the last time you edited your crontab file.


* * * * * command to be executed;
从做到右 min(0-59) hour(0-23) dayOfMonth(1-31) month(1-12) dayOfWeek(0-6,Sunday=0)




2. 实例
看不懂
$ rsync -avhP ~/projects mdaris337:/rsch1/genomic_med/mtang1/tommy_mac_backup ## once a week


#rsync every Sunday 5am.
0 5 * * 0 rsync -avhP --exclude=".aspera" --exclude=".autojump" --exclude=".bash_history"
--exclude=".mozilla" --exclude=".myconfigs"
--exclude=".oracle_jre_usage" --exclude=".parallel" --exclude=".pki" --exclude=".rbenv"
railab:.[^.]* ~/shark_dotfiles >> /var/log/rsync_shark_dotfiles.log 2>&1 



ref:
https://divingintogeneticsandgenomics.rbind.io/post/crontab-for-backup/




========================================
|-- Reproducible computing using Rstudio
----------------------------------------
1.
(1)Go to https://github.com/username
• Create a new repository
(2)Create the new repository
Check [] Initialize this repository with a README
(3)Copy the link from “Clone with HTTPS”
(4)Go back to your local computer, open terminal
• $ cd /Users/mtang/Dropbox (Partners HealthCare)
• $ mkdir github_repos; cd github_repos
• $ git clone https://github.com/crazyhottommy/STAT115_HW.git
• You should see STAT115_HW folder in the github_repos folder.

(5)Open Rstudio -- > File -- > New Project --> Existing Directory -- > 
Browse and select the STAT115_HW folder --> Create Project

(6)In the Files tab, click New Folder and create data, results, scripts, src and docs folder

The results folder will contain all the results obtained from the script in the scripts folder.
src folder contains R function that you can source from the script in the scripts folder.
Docs folder contains any documentations/manuscripts. 

学习: 在 src/ 中定义函数，在scripts/中可以source引入。这样能代码更简洁。


(7)Edit the .gitignore file by clicking it

Ignore .DS_Store file on mac

I also ask git not to track Files in the results/ and data/ folder since they usually contain big files and intermediate Files.
This how I do it, you do not have to follow.

Remember I have them backed up in dropbox if I want them.
If you want to version control Large files, check Git lfs https://git-lfs.github.com/


(8)Now, you can either go to File -- > New File -- > Rmarkdown or download the homework Rmd file to the scripts folder.
Click Terminal tab, and use curl to download the Rmd file Note, I renamed them by prefixing date so they are nicely sorted.

可以在Rstudio的 terminal 标签使用shell下载文件
curl http://xxx....Rmd

(9)Git version control
After you worked on the Rmd file and knitted to html, you want to push it to the github. 
You can either use the Rstudio built-in Git tab or use the Terminal:
• In Rstudio, click the Terminal tab:
• $ git add scripts/2020-05-29_HW1.Rmd
• $ git commit -m "homework 1 done"
• $ git push
• More reading:
• Happy Git with R https://happygitwithr.com/


(10)A different workflow
• 1. In the example, we created the github repo first à clone to local à set up Rstudio project.
• 2. if you have already created and worked on a local Rstudio project, you have to do something else:
$ cd STAT115_HW
$ git init
$ git add .
$ git commit –m “first commit”
$ git remote add origin https://github.com/crazyhottommy/STAT115_HW.git
$ git push -u origin master



(11) Always use here() to construct relative path.
Later if you move the whole project folder into a different computer, the same code still works


library(ggplot2)
library(here)

df=read.delim(here('data'), "raw_foofy_data.csv")
p=ggplot(df, aes(x,y))+geom_point()
ggsave(here('figs', 'foofy_scaterplot.png'))



More advanced
• A Reproducible Data Analysis Workflow with R Markdown, Git, Make,
and Docker
• https://psyarxiv.com/8xzqy/






========================================
科技论文的格式要求
----------------------------------------
格式要求：
SA的补充材料:
For consistency use Times, 12 pt. Left-align all paragraphs, separating each paragraph by a line-break. 






========================================
科技作图 绘图 最佳实践
----------------------------------------

不同杂志对Figure图的不同标准，六大主流期刊的要求
https://zhuanlan.zhihu.com/p/385811397






========================================
|-- 优秀的R代码绘图实例
----------------------------------------
https://github.com/DawnEve/ImmunogenomicLandscape-BloodCancers/blob/master/Fig1_plots.R



========================================
|-- 画图的字体用什么类型？字号多大？: 尺寸、字号、线宽、DPI
----------------------------------------
https://www.zhihu.com/question/268877581/answer/1827368050
平时的fontname，fontsize，colorbar之类的都用了什么？


1. 字体类型
多期刊杂志要求Font为Arial，但看很多nature science的文章的Font似乎并不是


图片宽度: 5 3/8 inches(13.65cm)(最大)
图片高度: 8 1/4 inches(21.1cm)(最大)
字号: 8-point type size(最小)
线条粗细: 0.5pt(最小)
DPI: 300(最小)


(1)字号和线条宽度的设置
PPT中字号的单位是“磅”，
磅英文是“point”，简写为pt。
这与投稿要求中的字号单位是一致的。

所以期刊要求字号最小为8 point，那么在我们最终导出图片之前，保证字号在8号以上即可。
需要注意的是，论文中的多幅插图，同一级的文字应该尽量选择一致的字号。

PPT的线条宽度单位也是磅，因此同理，我们保证最终图上的线条宽度在0.5磅以上即可。

(2)图片尺寸的设置
满足尺寸要求，有两种方式：
a. 最直接的方式：设置幻灯片的尺寸
点击“设计"选项卡右侧的“幻灯片大小”按钮，在下拉菜单中选择“自定义幻灯片大小”：

b.将内容放在满足尺寸要求的矩形之内，导出图片后再剪裁












ref:
1.PPT作图如何满足期刊投稿要求？分辨率，尺寸，字号等
https://mp.weixin.qq.com/s?__biz=MzA4MTYyOTE4Ng==&mid=2648123673&idx=1&sn=f63e52aa5da397cc195584f21eb400b4
2.






========================================
|-- 怎么添加公式？
----------------------------------------

Science advances 有具体要求，用LaTeX要转换正确。
word2017 - 顶部 设计 - 转换 选项卡，选择 LaTeX，





========================================
p值怎么画？ 图中标注p值时，不用科学计数法1.2e-7的形式，用1.2x10^-7
----------------------------------------
1. 图中标注数值的方法
library(ggplot2) #ggplot 3.2.1
g=ggplot(iris, aes(Sepal.Length, Sepal.Width, color=Species))+
  geom_point(size=0.8)+theme_bw();g
  
(1)只有一个文字的应该使用 annotate()
g+annotate(geom="text",x=5, y=4.2, label="setosa", color="black")

(2)或者显示指定空df，而指定data=NULL不行。
g+geom_text(data=data.frame(), aes(x=5, y=4.2, label="setosa"), color='black' )





2. 图中标注p值的方法
(1) R 基础作图
## 使用非科学计数法 在图中标注p值
annotate_Pvalue=function(p0, ...){
  #p0=1.2e-52; p0
  p0=formatC(p0, format="e", digits=2);#p0 #"1.2e-52"
  # split by e
  p0=strsplit(p0, "e")[[1]]; #p0 #[1] "1.2" "-52"
  # plot
  label = bquote(italic(P)~"=" ~ .(p0[1]) ~ "\u00d7" ~ 10^.(p0[2]) )
  text(labels = label, ...)
}
# test
plot(1:3)
annotate_Pvalue(1.5e-26, x=2, y=1.8)



## v2.0: if p>=0.01, then show p directly with 3 digits.
# if p<0.01, then using scientific mark, with 2 digits.
transPvalue=function(p0){
  #p0=1.2e-52; p0
  if(p0<0.01){
    p0=formatC(p0, format="e", digits=2);#p0 #"1.2e-52"
    # split by e
    p0=strsplit(p0, "e")[[1]]; #p0 #[1] "1.2" "-52"
    # plot
    label = bquote(italic(P)~"=" ~ .(p0[1]) ~ "\u00d7" ~ 10^.(p0[2]) )
  }else{
    p0=round(p0,3); #p0
    label = bquote(italic(P)~"=" ~ .(p0) )
  }
  return(label)
}
plot(1:3)
text(x=2, y=1.8, labels=transPvalue(1.56464e-26))
text(x=2, y=2.5, labels=transPvalue(0.0215466))





(2) ggplot2 作图
library(ggplot2)
g=ggplot(iris, aes(Sepal.Length, Sepal.Width, color=Species))+
  geom_point(size=0.8)+theme_bw();g

g+annotate(geom="text", x=5, y=4.2, label=transPvalue(1.5e-26), color="black")
缺点: 报警告！同时p值边缘很模糊，显然是同一个值被重复了3次。
# I explored more, perhaps these three FALSE  makes p value draw 3 times at the same place, but how can I avoid it?
> is.na(transPvalue(1.5e-26))
[1] FALSE FALSE FALSE
Warning message:
In is.na(transPvalue(1.5e-26)) :
  is.na() applied to non-(list or vector) of type 'language'



https://github.com/tidyverse/ggplot2/issues/4505
You cannot pass language to label aesthetic (you should have seen a warning for this). Instead, you can pass a text and specify parse = TRUE.
不能传递 language 类型，要传递 text，并指定参数 parse = TRUE

library(ggplot2)
g <- ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) +
  geom_point(size = 0.8) +
  theme_bw()

g + annotate(geom = "text", x = 5, y = 4.2, label = 'italic(P) ~ "=" ~ "1.50" ~ "×" ~ 10^"-26"', color = "black", parse = TRUE)



# transfer p value for ggplot2 plotting
transPvalue2=function(p0){
  #p0=1.2e-52; p0
  if(p0<0.01){
    p0=formatC(p0, format="e", digits=2);#p0 #"1.2e-52"
    # split by e
    p0=strsplit(p0, "e")[[1]]; #p0 #[1] "1.2" "-52"
    # plot
    label = paste0( 'italic(P)~"="~',p0[1],'~"\u00d7"~10^',p0[2])
  }else{
    p0=round(p0,3); #p0 #保留2位
    label = paste0( 'italic(P)~"=" ~', p0 )
  }
  return(label)
}

g <- ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) +
  geom_point(size = 0.8) +
  theme_bw();g

g + annotate(geom = "text", x = 5, y = 4.2, 
             label = transPvalue2(2.51546e-26), 
             color = "black", parse = TRUE)
g + annotate(geom = "text", x = 5, y = 4.2, 
             label = transPvalue2(0.03146495), 
             color = "black", parse = TRUE)

还有，以后提问题去 https://community.rstudio.com/
github issue 仅仅记录和解决 bug。




## 例2：标记spearman rho和pvalue，利用atop()函数，把相关系数和拼凑出的p值字符串显示成两行
# 计算spearman相关系数和p值
rs=cor.test(iris$Sepal.Length, iris$Petal.Width, method = "spearman")
rs
# 拼凑字符串
r0=round(rs$estimate,3); p0=rs$p.value 
str1=paste0("atop(rho~\"=\"~", r0, "," ,transPvalue2(p0),")"); str1
# 画图
plot( iris$Sepal.Length, iris$Petal.Width, cex=0.5, pch=19, col='red' )
text(7,0.5, label=parse(text= str1  ) )




(3) 更多关于公式的打印技巧
原文 https://stackoverflow.com/questions/53503742/ggplot2-annotate-text-with-superscript-and-function
I guess annotate() doesn't actually accept expressions like base plotting functions, so rather than passing an expression as an expression, you need to pass the string version of it and let ggplot parse it for you. You can do that with

	annotate(geom = 'text', 
	  label = paste0("R^2==", round(summary(lm(emissions ~ etsemit, data=full))$r.squared, 3)), 
	  x = Inf, y = Inf, hjust = 1.5, vjust = 2, parse=TRUE)

Most of the time if you want an expression you would use bquote to make one

	bquote(R^2==.( round(summary(lm(emissions ~ etsemit, data=full))$r.squared, 3)))

and you could deparse() that to get the string version but in this case it's easier to go with paste() I suppose.


涉及的函数
parse( text='') #字符串拼凑成公式，在ggplot2中，这个由参数 parse=T 设定后由包内部转换
deparse() #公式to字符串


测试
draw=function(label, main1=""){
  plot(mpg ~ disp, data=mtcars, main=main1)
  text(x=300,y=30, col='red', label= label)
}

#
a1=bquote(R^2 ~ "=" ~ 0.71); a1
draw(a1, main='a1')
#
a2=deparse(a1);a2
draw(a2, main='a2')
#
a3=parse(text='R^2 ~ "=" ~ 0.73'); a3
draw(a3, main='a3')









========================================
Training 有哪些培训？有关键词就可以搜索 
----------------------------------------
1. https://firas.io/training/
(1)R, Genomics, and Statistics
Experimental Design [University of Cambridge]
Introduction to Machine Learning [UoC]
Introduction to Statistical Analysis [UoC]
Introduction to Genomic Technologies [Johns Hopkins University]
Linear Modelling with R [UoC]
R for Biologists Bootcamp [UoC]
Statistical Analysis using R [UoC]
Solving Biological Problems with R [UoC]
Data Analysis and Visualisation in R [UoC]
R object-oriented programming and package development [UoC]
R Programming [JHU]
Introduction to Probability and Data [Duke University]

(2)NGS Data Analysis
Analysis of single cell RNA-seq data. [UoC]
Analysis of bulk RNA-seq data. [UoC]
Transcriptome Analysis for Non-Model Organisms. [UoC]
Extracting biological information from gene lists. [UoC]
Next Generation Sequencing Platforms and Bioinformatics Analysis. [UoC]
Analysis of gene regulatory sequencing data: ChIP-seq, ATAC-seq and Hi-C. [UoC]
Analysis of mapped NGS data with SeqMonk. [UoC]

(3)Data Science and Python
Getting and Cleaning Data [JHU]
Exploratory Data Analysis [JHU]
Data Science in Python. [UoC]
Solving Biological Problems with Python. [UoC]
Working with Python: functions and modules. [UoC]
Introduction to Python [DataCamp]
Intermediate Python for Data Science [DataCamp]

(4)Reproducible Research
Snakemake Workshop [UoC]
The Data Scientist’s Toolbox [JHU]
Command Line Tools for Genomic Data Science [JHU]
Reproducible Research [JHU]








========================================
科学计算代码编写 最佳实践
----------------------------------------
http://mazamascience.com/WorkingWithData/?p=1218

Every once in a while I read something that is so insightful, so clearly written and so well documented that it enters my own personal pantheon of “Best Ever” documents. I recently added a new, simply divine article titled Best Practices for Scientific Computing and hope that everyone reading this post also takes the time to read that article. I’m including the outline here only to encourage you to read the article in it’s entirety.  It is extremely well written.

1. Write programs for people, not computers.
- a program should not require its readers to hold more than a handful of facts in memory at once
- names should be consistent, distinctive and meaningful
- code style and formatting should be consistent
- all aspects of software development should be broken down into tasks roughly an hour long

2. Automate repetitive tasks.
- rely on the computer to repeat tasks
- save recent commands in a file for re-use
- use a build tool to automate scientific workflows

3. Use the computer to record history.
software tools should be used to track computational work automatically

4. Make incremental changes.
work in small steps with frequent feedback and course correction

5. Use version control.
- use a version control system
- everything that has been created manually should be put in version control

6. Don’t repeat yourself (or others).
- every piece of data must have a single authoritative representation in the system
- code should be modularized rather than copied and pasted
- re-use code instead of rewriting it

7. Plan for mistakes.
- add assertions to programs to check their operation
- use an off-the-shelf unit testing library
- use all available oracles when testing programs
- turn bugs into test cases
- use a symbolic debugger

8. Optimize software only after it works correctly.
- use a profiler to identify bottlenecks
- write code in the highest-level language possible

9. Document design and purpose, not mechanics.
- document interfaces and reasons, not implementations
- refactor code instead of explaining how it works
- embed the documentation for a piece of software in that software

10. Collaborate.
- use pre-merge code reviews
- use pair programming when bringing someone new up to speed and when tackling particularly tricky problems

The only extra I would have included would be:

11. Maintain and update older code.


If you are still hesitant to go to the original article, go there for the 67 references to other books and articles that discuss scientific computing.  Like I said, this article is a “Best Ever”.




========================================
写文档的好工具: /Docsify/ GitBook/ Jupyter Book/ sphinx/ //todo
----------------------------------------
主要区分：是否必须编译
	无需编译：docsify, markdown, 
	必须编译：gitbook, sphinx, 


1.Docs | 使用 Docker版的 docsify 预览 markdown (基于Vue.js 不能转为静态html)

https://blog.csdn.net/wangjunliang/article/details/126008444?spm=1001.2014.3001.5501





2. report | 使用 Docker版的 gitbook 把 markdown 转为 html 报告 (静态站点)

https://blog.csdn.net/wangjunliang/article/details/126000902?spm=1001.2014.3001.5501






3. jupyter book
https://jupyterbook.org/intro.html

https://jupyterbook.org/en/stable/start/your-first-book.html

使用案例： 
https://caporasolab.us/genome-sampler/intro.html
https://inferentialthinking.com/chapters/07/2/Visualizing_Numerical_Distributions.html




4. docs | 使用 sphinx 转化rst文件为html文档
https://blog.csdn.net/wangjunliang/article/details/140325558







ref:
基于NodeJS的轻量级静态服务器 http-server: https://blog.csdn.net/wangjunliang/article/details/126459713






========================================
基因组相关的杂志，及影响因子 IF2021
----------------------------------------
GENOME BIOLOGY 13.5
TRENDS IN GENETICS 11.639
GENES & DEVELOPMENT 11.361
Genome Medicine 11.1
AMERICAN JOURNAL OF HUMAN GENETICS 11.0
ONCOGENE #9.8
## GENOME RESEARCH #9.0
GENETICS IN MEDICINE #8.8
npj Genomic Medicine #8.6

GENOMICS PROTEOMICS & BIOINFORMATICS
Genes & Diseases #7.1

Clinical Epigenetics #6.5

JOURNAL OF MEDICAL GENETICS 

HUMAN MOLECULAR GENETICS
PLoS Genetics

GENOMICS 5.7

THEORETICAL AND APPLIED GENETICS 5.6

CURRENT OPINION IN GENETICS & DEVELOPMENT 5.5

GENES CHROMOSOMES & CANCER  5.0

Epigenetics & Chromatin 4.9
Epigenomics 4.7




========================================
----------------------------------------


========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------



