GO/KEGG 基因富集分析

方法学
软件、网站
批量化方法
可视化

基因列表



========================================
相关教程 + 最佳实践(忠告)
----------------------------------------
paper
==> scientific reports | Published: 26 February 2014
https://www.nature.com/articles/srep04191
Annotation Enrichment Analysis: An Alternative Method for Evaluating the Functional Properties of Gene Sets





1. GO enrichment analysis
Gene Ontology 官网
http://geneontology.org/docs/go-enrichment-analysis/

One of the main uses of the GO is to perform enrichment analysis on gene sets. For example, given a set of genes that are up-regulated under certain conditions, an enrichment analysis will find which GO terms are over-represented (or under-represented) using annotations for that gene set.

(2). 工具
官网: http://geneontology.org/

(3).中文教程 
人人都要会的转录组(RNA-seq)下游分析: https://zhuanlan.zhihu.com/p/77901431




2. 最佳实践

“以上工具中，DAVID和Metascape甚至clusterProfiler等R包的结果我都只作为参考，真正做分析的时候还是需要用最新的数据库。当然，Metascape和ClueGO可作为后期绘图补充。”





========================================
Gene Ontology （GO）简介 GO分析
----------------------------------------
http://www.cnblogs.com/emanlee/archive/2011/08/02/2125314.html


为了查找某个研究领域的相关信息，生物学家往往要花费大量的时间，更糟糕的是，不同的生物学数据库可能会使用不同的术语，好比是一些方言一样，这让信息查找更加麻烦，尤其是使得机器查找无章可循。Gene Ontology就是为了解决这种问题而发起的一个项目。

     Gene Ontology中最基本的概念是term。GO里面的每一个entry都有一个唯一的数字标记，形如GO:nnnnnnn，还有一个term名，比如"cell", "fibroblast growth factor receptor binding"，或者"signal transduction"。每个term都属于一个ontology，总共有三个ontology，它们分别是molecular function（分子功能）, cellular component（细胞组分）和biological process（生物过程）。

     一个基因product可能会出现在不止一个cellular component里面，也可能会在很多biological process里面起作用，并且在其中发挥不同的molecular function。比如，基因product "cytochrome c" 用molecular function term描述是"oxidoreductase activity"，而用biological process term描述就是"oxidative phosphorylation"和"induction of cell death"，最后，它的celluar component term是"mitochondrial matrix"和"mitochondrial inner membrane"。

     Ontology中的term有两种相互关系，它们分别是is_a关系和part_of关系。is_a关系是一种简单的包含关系，比如A is_a B表示A是B的一个子集/子类。比如nuclear chromosome is_a chromosome。part_of关系要稍微复杂一点，C part_of_D意味着如果C出现，那么它就肯定是D的一部分/组成成分，但C不一定总会出现。比如nucleus part_of cell，核肯定是细胞的一部分，但有的细胞没有核。

     Ontology的结构是一个有向无环图，有点类似于分类树，不同点在于 Ontology的结构中一个term可以有不止一个parent。比如 biological process term "hexose biosynthesis" 有两个parents，它们分别是"hexose metabolism"和"monosaccharide biosynthesis"，这是因为生物合成是代谢的一种，而己糖又是单糖的一种。

 

Gene Ontology （GO）简介

     Gene Ontology（GO）包含了基因参与的生物过程，所处的细胞位置，发挥的分子功能三方面功能信息，并将概念粗细不同的功能概念组织成DAG（有向无环图）的结构。Gene Ontology是一个使用有控制的词汇表和严格定义的概念关系，以有向无环图的形式统一表示各物种的基因功能分类体系，从而较全面地概括了基因的功能信息，纠正了传统功能分类体系中常见的维度混淆问题。在基因表达谱分析中，GO常用于提供基因功能分类标签和基因功能研究的背景知识。利用GO的知识体系和结构特点，旨在发掘与基因差异表达现象关联的单个特征基因功能类或多个特征功能类的组合。

    根据GO的知识体系，使用“功能类”（或者叫做“功能模块”）这一概念具有以下优点：我们认为，单个基因的表达情况的改变不足以反映特定功能/通路的整体变化情况。因为类似人类社会的组织结构，生物体的功能的实现决不仅仅是依靠一两个基因功能的改变来实现的。因此过分着重单个基因表达变化，将会在后期结果处理中严重干扰对于结果的合理分析，导致偏倚性加大，而且是无法避免的。因此利用GO的结构体系，把参与同样功能/通路的基因进行“功能类”层面的抽象和整合，提供比基因更高一层次的抽象结论，对理解疾病的发病机制或药物的作用机理等更有帮助。

    但是该方法也存在一定的不足，由于生物体内部的调控网络可能具有“scale-free network”的特点，个别功能重要的基因（主效基因）具有“Hub节点”的重要特性，它的功能改变可能对于整个网络来说是至关重要的，在这点上，这些重要的基因又具有一定的“自私独裁”特点。而“功能类”之观点模糊了这种差别特性，过于强调“共性”，而忽视了“个性”，这也是“功能类”的一个不足之处，这就需要结合相关的生物学知识才能够实现.

 

基因本体
Gene Ontology

     基因本体（Gene Ontology，GO）是一个在生物信息学领域中广泛使用的本体。它主要包括三个分支: 生物过程、分子功能和细胞组件。

     基因本体是一个有向无环图（DAG）型的本体。目前，GO中使用了is_a和part_of两种关系。

     Ontology: 哲学中称为本体论/存在论，这里本质是指一系列特定的文字可用来形容一些特定的模式、元件或角色，因此在国外的华人生物信息学家中试译为语义(学)。

     GO（gene ontology）对大家而言也许会是一个相对陌生的名词，但是它已经成为生物信息领域中一个极为重要的方法和工具，并正在逐步改变着我们对 biological data的组织和理解方式，它的存在已经大大加快了我们对所拥有的生物数据的整合和利用，我们应该逐步学会理解和掌握这种思想和工具。

     众所周知，sequence based biology中的核心内容即是对序列的Annotation（注释），其中主要包含structural annotation和functional annotation，前者涉及分析sequence在genome中的locus以及exon，intron，promoter等的location，而后者则是推断序列编码产物的功能，也正是我们在六月论题中所着重探讨的。应该说，这二者是相互关联的。

     随着多种生物genome的相继解码，同时大量ESTs以及gene expression profile date的积累，使得annotation的工作量和复杂度大大增加。然而另一方面，大多数基因在不同真核生物中拥有共同的主要生物功能，通过在某些物种中获得的基因或者蛋白质（shared protein）的生物学信息，可以用以解释其他物种中对应的基因或蛋白（especially in comparative genomics）。由于这些繁复的功能信息主要是包含在积累的文献之中，如何有效的提取和综合这些信息就是我们面临的核心困难，这也是GO所要着力解决的问题。通过建立一套具有动态形式的控制字集（controlled vocabulary），来解释真核基因及蛋白在细胞内所扮演的角色，并随着生命科学研究的进步，不断积累和更新。一个ontology会被一个控制字集来描述并给予一定的名称，通过制定“本体”ontologies并运用统计学方法及自然语言处理技术，可以实现知识管理的专家系统控制。

     到目前为止，Gene Ontology Consortium（GO的发起组织）的数据库中有3大独立的ontology被建立起来：biological process生物过程, molecular function分子功能及cellular component细胞组分。而这三个ontology下面又可以独立出不同的亚层次，层层向下构成一个ontologies的树型分支结构。可以说， GO是生物学的统一化工具。

GO的目的：类似于语义网络。是为了生物界有一个统一的数据交流语言。

     因为在生物学界，存在在种种同名异义、异议同名的现象。为此产生了GO项目。 
     概要：GO是用一套统一的词汇表来描述生物学中的分子功能、生物过程和细胞成分。

     其思想大概过程：对于一个基因产品（蛋白质或RNA），用某些词汇来描述它是干什么的或位于细胞哪里、或者参与了哪个生物过程，而这些词汇就是来自GO的Term。

     Term是GO里面的基本描述单元。它结构如下：

Accession：
GO:0005515
Ontology：
molecular function
Synonyms：
related: alpha-2 macroglobulin receptor-associated protein activity
related: protein degradation tagging activity
related: protein tagging activity
exact: protein amino acid binding
alt_id: GO:0045308
Definition：
Interacting selectively with any protein or protein complex (a complex of two or more proteins that may include other nonprotein molecules). [source: GOC:go_curators]
Comment：
None
Subset：
gene_ontology.obo 示例：

[Term]
id: GO:0000003
name: reproduction
namespace: biological_process
alt_id: GO:0019952
alt_id: GO:0050876
def: "The production by an organism of new individuals that contain some portion of their genetic material inherited from that organism." [GOC:go_curators, GOC:isa_complete, ISBN:0198506732]
subset: goslim_generic
subset: goslim_pir
subset: goslim_plant
subset: gosubset_prok
exact_synonym: "reproductive physiological process" []
xref_analog: Wikipedia:Reproduction
is_a: GO:0008150 ! biological_process

 

     说白了，GO就是为了对gene和gene product进行统一注释说明而成了的一个标准。这些注释说明来自称为“Ontology”的一套词汇。


GO(Gene Ontology) 
     介绍：GO 是用一套具有动态(dynamic)形式的控制字汇(controlled vocabulary)，来解释真核生物的基因或蛋白质在细胞内所扮演的角色及生医学方面的知识，同时这些字汇随着生命科学研究的进步，一直不断的累积与改变。一个本体（ontology）会被一个控制字汇(controlled vocabulary)来描述并给予统一的名称，到目前为止，在 Gene Ontology 下有三大独立的本体被建立∶biological process,molecular function 及 cellular component。一个基因或蛋白质可从三个层面进行注解，首先是构成在细胞内的特定组件(cellular 过程(biologicalprocess)，因此科学家试着收集各真核生物(如SGD,MGI,FlyBase,..)的基因或蛋白质，利用已知 component)，其次是此组件在分子功能上所扮演的角色(molecular function)，最后是基因或蛋白质参与的生物的文献资料及序列比较资讯为基础，将所有的真核生物的基因或蛋白质都基于在此系统(Gene ontology)下作注解(annotation)与分类(classification)。 
网址：http://www.geneontology.org/ or http://www.ebi.ac.uk/GO/index.html 
软件：interproscan


Understanding relations in GO
http://www.cnblogs.com/emanlee/archive/2012/04/13/2446147.html






========================================
|-- 功能富集分析，及超几何分布
----------------------------------------
1.Downstream functional analysis of an ‘omics experiment using freely available tools  

功能富集分析是挖掘基因或蛋白数据背后生物学意义的主要方法，很多的生物信息学软件都实现了这样的功能，比如DAVID，KOBAS，OmicsBean等。不同的软件有不同的特点和优势。


Excel分析的3k多个差异表达基因为什么只有300多个？可能的原因有很多，列举一些：
http://www.dxy.cn/bbs/thread/36296005#36296005
1).从excel拷贝过来，有可能存在空格、引号、基因名变成日期等千奇百怪的情况。因此，建议用文本编辑器来处理基因名。
2).gene sym更新很快，某些基因很可能换名字了。因此，建议将gene sym转换为ENSG号或者Entrez号，再进行分析。
3).千万别用上千个基因去做富集分析。基因数目太多，P值相应就会不太好看，结果也不好解释。建议进一步筛选基因集合后，再分析。
比如使用PPI蛋白互作网络(String-db, SNOW等)寻找hub gene。




2.Introduction 介绍

The direct analysis of data from ‘omics experiments (transcriptomics and proteomics especially), focusses on producing lists of genes or proteins of interest (i.e. those that vary in expression, or some other character, between experimental conditions). However, merely identifying those genes that are altered in the experiment does not generally advance the understanding of the processes being studied. Downstream functional analysis of ‘omics data focusses on connecting the genes in a gene list by related function, with the aim of shedding more light on the processes being affected by coordinated changes in gene expression.
直接分析“组学实验”（特别是转录组和蛋白质组）数据，焦点是想要产生一个感兴趣的基因或蛋白的列表（比如：不同实验条件下的表达差异，或者其他特点）。然而，仅仅识别那些试验中改变的基因，不能增进对正在研究的过程的理解。“组学数据”的下游功能分析聚焦于通过功能链接基因列表中的基因，目标是更深入理解基因表达协调变化影响下的生物过程。


In this tutorial, a number of tools for functional analysis will be introduced. We will focus on the downstream analysis of the gene list produced by the Analysing microarray data in R and BioConductor tutorial.
这个教程中，将会介绍很多用于功能分析的工具。我们聚焦于R和BioConductor分析芯片数据后产生的基因列表的下游分析。






3.Hypergeometric tests for over-representation of functional categories 超几何检验过表达功能分类

The Hypergeometric distribution is a statistical distribution that describes the number of success in a series of n draws without replacement, from a finite population, N.
超几何分布是一个统计学分布，描述了从一个有限物件N中，不放回的抽出一系列n个物件的次数。


A test against this distribution determines the probability that the number of successes observed could be obtained by chance. It is an appropriate test for the kind of functional analysis described here because a gene list can be seen as a series of draws from the finite population of Gene Ontology terms that annotate the whole of a genome, therefore a Hypergeometric test determines the possibility that a certain term is over-represented in the gene list with respect to the parent population.
针对该分布的检验，决定了偶然能获得的获取该数字的概率。对这里描述的功能分析很合适，因为基因列表可以看做是从注释全基因组的GO词条这个有限集合中获取的一系列抽样，所以，超几何分布检验决定着基因列表中的某个词条相对于父类群体是高代表性的概率。


Tools 工具
There are many tools that implement the hypergeometric test for over-representation of terms, often from the Gene Ontology, but also other sets of terms such as KEGG or Reactome pathways. Below is a brief tutorial for the use of a few of these tools.

有很多工具实现了对高代表性词条的超几何检验，这些词条通常来自Gene Ontology，但是也有来自KEGG或Reactome pathways的其他集合。下面是使用这些工具的一个简要教程。




4. 富集分析用到的统计学

(1).Proportions Test in R
ref：
http://www.sthda.com/english/wiki/comparing-proportions-in-r
https://www.bioinfo-scrounger.com/archives/Proportions-Test-in-R/

我发现数据集A在TGF-Beta通路中有5个基因发生突变，数据集B则有1个基因发生突变；我想知道这两个数据集（以某个指标区分开的）在TGF-Beta通路的基因突变比例是否有显著的统计学意义


binom.test(): compute exact binomial test. Recommended when sample size is small
prop.test(): can be used when sample size is large ( N > 30). It uses a normal approximation to binomial











========================================
|-- DE gene list
----------------------------------------
1.
(1)GSE14404 tumor vs normal by GEO2R: 无 gene symbol;


(2)colon normal and tumor pairs: GSE10950  无 gene symbol;

(3) GSE21933

(4) paired normal adjacent mucosa and tumor samples from 98 individuals and 50 healthy colon mucosae

(5)
GSE24747: CD133+ vs CD133-







2. 忘了来源的 DEG list
A2M ABCB1 ABCG2 ACAN ACAN ACAN ACSL5 ACSL5 ACTA2 ADAMTS2 ADGRF5 ALX1 APLNR ARHGAP25 ARHGAP25 BEX5 BMX C10orf128 CA12 CASP1 CCDC102B CCNA1 COL15A1 COL1A1 COL1A1 COL1A1 COL1A2 COL1A2 COL3A1 COL3A1 COL3A1 COL6A1 COL6A3 CRIP1 CRYAB CXCL12 CXCL12 CYP1B1 CYP1B1 CYP1B1 DCLK1 DCLK1 DHRS3 DNASE1L3 DNPH1 DPP4 DPP4 DSP EPHA4 EPHA4 EPHB2 EPHB2 EPHB2 FAM174B FAM46A FAP FBN2 FERMT3 FGF13 FILIP1 FOXC2 FSCN1 FST GABBR2 GAL GATA3 GATA6 GBGT1 GNA14 GPRC5A GPRC5B GRB14 GREM1 GREM1 GSTT1 GYPC HAS2 HHIP HHIP HHIP HHIP HLA-DPA1 HLA-DPA1 HLA-DPB1 HLA-DRB4 HOTAIRM1 HOXB7 HPSE HS6ST2 HS6ST2 HSD17B2 IGF2BP1 IGFBP3 IGFBP5 IL13RA2 IL1RL1 IL1RL1 ITM2A ITM2A KIAA1211 KLHL13 KYNU KYNU LCP1 LCP2 LCP2 LOC389906 LSM4 MGARP MRC1 NAP1L3 NEFM NLGN1 NLGN1 NNAT NPAS2 NPAS2 NRG1 OAS2 P3H2 PGM5 PHACTR3 PLA2R1 PLBD1 PLVAP POSTN POSTN PPAPDC1A PRRX1 PSG4 PTER RASGRF2 RASGRF2 RGS5 RGS5 RGS5 RGS5 SDC2 SDC2 SEPP1 SERPIND1 SHTN1 SIX3 SIX3 SNAI2 SOCS2 SOCS2 SPARCL1 SPRY1 STAC SULT1B1 SUSD2 SYNPO2 TAGLN TAGLN THY1 THY1 TIMM44 TIMM44 TIMP3 TIMP3 TMEM163 TMEM163 TNC TNFRSF11B TNFRSF11B TNFSF15 TNFSF15 TNIK TNIK TNIK TOX TRBC1 TSTD1 VARS VCAN ZNF415 ZNF595


davide 结果：
#
Category	Term	RT	Genes	Count	%	P-Value	Benjamini
GOTERM_BP_DIRECT	collagen fibril organization	RT		8	6.2	8.5E-9	8.5E-6
GOTERM_BP_DIRECT	extracellular matrix organization	RT		12	9.2	1.2E-7	6.1E-5
GOTERM_BP_DIRECT	cell adhesion	RT		15	11.5	3.8E-6	1.3E-3
GOTERM_BP_DIRECT	collagen catabolic process	RT		7	5.4	5.4E-6	1.4E-3
GOTERM_BP_DIRECT	osteoblast differentiation	RT		7	5.4	8.8E-5	1.7E-2
GOTERM_BP_DIRECT	signal transduction	RT		21	16.2	1.4E-4	2.4E-2
GOTERM_BP_DIRECT	immune response	RT		12	9.2	1.7E-4	2.4E-2
GOTERM_BP_DIRECT	skeletal system development	RT		7	5.4	3.9E-4	4.8E-2
#
GOTERM_CC_DIRECT	proteinaceous extracellular matrix	RT		13	10.0	3.0E-7	5.1E-5
GOTERM_CC_DIRECT	extracellular matrix	RT		13	10.0	8.5E-7	7.3E-5
GOTERM_CC_DIRECT	cell surface	RT		16	12.3	4.2E-6	2.4E-4
GOTERM_CC_DIRECT	filopodium	RT		7	5.4	8.8E-6	3.7E-4
GOTERM_CC_DIRECT	extracellular region	RT		28	21.5	8.8E-6	3.0E-4
GOTERM_CC_DIRECT	extracellular space	RT		25	19.2	1.1E-5	3.2E-4
GOTERM_CC_DIRECT	collagen trimer	RT		6	4.6	4.1E-4	1.0E-2
GOTERM_CC_DIRECT	extracellular exosome	RT		33	25.4	1.9E-3	3.9E-2
GOTERM_CC_DIRECT	endoplasmic reticulum lumen	RT		7	5.4	2.0E-3	3.8E-2
#
GOTERM_MF_DIRECT	extracellular matrix structural constituent	RT		7	5.4	6.9E-6	1.8E-3
GOTERM_MF_DIRECT	platelet-derived growth factor binding	RT		4	3.1	5.1E-5	6.5E-3
#
KEGG_PATHWAY	Protein digestion and absorption	RT		7	5.4	1.4E-4	1.5E-2
#







3. 一个免疫的 gene list ,

CCL5 GZMK GZMA LYAR NKG7 CST7 HOPX KLF6 DUSP1 MALAT1 CXCR3 CLIC3 CTSW DUSP2 PPP1R15A IL32 GNLY FOS S100A4 JUN NFKBIA HCST CD99 MATK ID2 MYO1F CYBA CLIC1 ZFP36 CD69 CXCR4 CD74 PPP2R5C ANXA1 TNFAIP3 KLRG1 TSC22D3 HIST1H1E HLA-DPB1 CD8A APOBEC3G FOSB PTGER2 SAMD3 ITGA4 C12orf75 HLA-DPA1 CD63 S100A10 FAM173A CCNL1 IDS PMAIP1 ARL4A JUND C9orf142 HIST1H1D HSPA5 RP11-489E7.4 EML4 PTGER4 HLA-DRB1 MT-ND5 ZFP36L2 CLDND1 GZMM IL7R ARL4C JAK1 GPR183 FYN TRADD FKBP11 YPEL5 SRSF7

Th1 and Th2 cell differentiation
IL-17 signaling pathway
Th17 cell differentiation
Antigen processing and presentation






========================================
|-- 常见的基因功能富集分析方法可以认为分两代
----------------------------------------

1.第一代:基于目标基因集预筛选的功能富集分析方法

基本步骤包括两步：

(a)从背景基因集合，按照一定固定阈值（例如，是否差异显著）筛选目标基因集。这属于一个二分类的策略，例如将基因分为差异表达与无差异表达的。

(b)通过一些统计方法（例如，超几何检验）证明目标基因集（例如差异表达基因）的基因更多集中在某些通路中。

第一代富集分析方法，简单易懂，所以我们常见的结题报告基本上都使用这类方法。但第一代富集分析方法最大的不足就是：筛选目标基因集的标准（例如差异分析中的差异倍数大于2 & FDR <0.05）会直接影响富集分析的结果，尤其当差异基因很少的时候，可能无法富集到任何通路。





2.第二代:基于所有基因评分或排序的功能富集分析方法

第二代功能富集分析方法则可以很好弥补第一代方法的不足，最有代表性的方法就是GSEA（Gene Set Enrichment Analysis）的方法。以GSEA为例，分析也可以分为两步：

（a）利用某个指标（例如差异倍数）对所有基因进行排序（而不是用固定阈值筛选）。

（b）判断某个通路的基因在所有的排序中是否更为靠前（或靠后），来证明实验处理会该通路产生更显著的影响。

GSEA法因为不需要对数据进行预筛选，所以很好地解决了一代方法的不足，对通路富集的检测能力更加敏感。





ref: http://www.sohu.com/a/300525340_278730




========================================
好用的GO网站
----------------------------------------
1. 名词解释
GO
GO是Gene ontology的缩写，GO数据库分别从功能、参与的生物途径及细胞中的定位对基因产物进行了标准化描述，即对基因产物进行了简单注释。

通过GO富集分析可以粗略了解差异基因富集在哪些生物学功能、途径或者细胞定位。

Pathway
Pathway指代谢通路，对差异基因进行pathway分析，可以了解实验条件下显著改变的代谢通路，在机制研究中显得尤为重要。 

GO分析好比是将基因分门别类放入一个个功能类群，而pathway则是将基因一个个具体放到代谢网络中的指定位置。



2. 
目前有许多GO和pathway分析软件，GO分析软件有Avadis （商业软件）、BiNGO（开源java）、DAVID（基于web的工具）等，pathway分析有IPA和MetaCore（商业软件）等。




3. 可视化 https://www.jianshu.com/p/462423702851

###
(1)FunRich: Functional Enrichment analysis tool
http://funrich.org/download

FunRich is a stand-alone software tool used mainly for functional enrichment and interaction network analysis of genes and proteins. Besides, the results of the analysis can be depicted graphically in the form of Venn, Bar, Column, Pie and Doughnut charts. Currently, FunRich tool is designed to handle variety of gene/protein data sets irrespective of the organism. Users can not only search against default background database, but can also load customized database against which functional enrichment analysis can be carried out.  



(2) WeGO: Web Gene Ontology Annotation Plot (华大)
http://wego.genomics.org.cn/



5.KOBAS 
官网：http://kobas.cbi.pku.edu.cn/
如何使用kobas进行kegg分析：只有安装 http://blog.sciencenet.cn/blog-1325061-961859.html
使用文末示例基因做富集：
Your task is still running, your task id is 170307404324633, you can get the results automatically when the task is finished.
Also you can use the task id to fetch results at the result retrive page in the future.

KOBAS(KEGG Orthology Based Annotation System)系统(http://kobas.cbi. pku.edu.cn/home.d) 是一个基于KEGG Ortholog的注释系统，主要运用常用的通路和疾病知识库(包括Gene Ontology，KEGG Pathway)对相关的基因或蛋白质进行功能注释。从系统生物学角度讲，同源基因在不同的物种里会参与类似的通路，KOBAS在系统中整合了Blast的功能，实现了跨物种的基因注释，但序列比对会比较耗时。




6.
从数据库层面上讲， 
DAVID注释范围从最初的GO注释，扩展到现在超过40个注释种类，包括GO注释，KEGG注释，蛋白相互作用，蛋白功能区域，疾病相关，生物代谢通路，序列特点，异构体，基因功能总结，基因在组织里的表达和论文等。
KOBAS 整合了 Gene Ontology，OMIM, KEGG DISEASE, FunDO, GAD，NHGRI GWAS Catalog 疾病数据库， PATHWAY, PID, BioCarta (from PID), Reactome, BioCyc等通路数据库。
OmicsBean(商业)整合了KEGG, Gene Ontology,String数据库。

从功能模块层面讲，
DAVID除了富集功能外还有功能信息的簇分析，将功能信息进行分组，并通过打分标识其在功能列表中的显著性。
KOBAS除了富集功能外，将Blast整合进系统中，可以针对序列Fasta文件进行富集分析，实现了跨物种的富集分析而且还整合了疾病的多个数据库。
OmicsBean可以对多组学的多种实验设计数据进行分析，包括PCA,Clustering,HeatMap,Venn等数据分析功能，除了富集功能外，还可以动态构建分子互作网络模型。

从结果展示层面讲，
DAVID，KOBAS主要是表格输出，
OmicsBean(商业)的结果展示是图表、模型，可以下载用于文章的发表。






######## 
3. 这个也很好用！
http://bioinformatics.sdstate.edu/go/

4.panther 怎么用?
http://www.pantherdb.org/

5.Enrichr
http://amp.pharm.mssm.edu/Enrichr/
超级慢....

100.其他 
webgestalt.org  http://www.webgestalt.org/
AmiGO2  http://amigo.geneontology.org/amigo/landing

去东方，最好用的在线GO富集分析工具
https://mp.weixin.qq.com/s?__biz=MzI5MTcwNjA4NQ==&mid=2247484456&idx=1&sn=bbcd0b5d10ba9312d92b7baae777ccde
GOEAST，访问网站是http://omicslab.genetics.ac.cn/GOEAST/index.php

ClueGO



========================================
|-- 用 DAVID 做富集分析
----------------------------------------

1. DAVID
https://david.ncifcrf.gov/
#还是不知道怎么用DAVID做GO分析？特雷西  猫头鹰教室  1月8日

## 重点看三个指标， enrichment score、p值和FDR。
Pathway分析主要看P值和FDR值，两者越小越好。
GO分析还可看enrichment score，数值越大表示某个GO term越容易受到实验因素的影响。

GO和pathway分析结果中都得到了文章中选定的 xx 这个条目。


## 如何定位到基因？
将 xx 通路中的所有差异表达基因全部挑选出来，列表如下。
作者在文中挑选了显著性最高的 yy 基因作为后续的研究对象。


DAVID – Database for Annotation, Visualization and Integrated Discovery
https://www.bilibili.com/video/BV1FE411H7XA


DAVID, the Database for Annotation, Visualization and Integrated Discovery, is a suite of online tools which provide a number of different analysis methods (Huang, Sherman, and Lempicki 2008)*. For the purposes of this tutorial, we are going to focus on the ‘functional annotation clustering’ tool.

DAVID，基因注释、可视化和整合发现数据库，是一套在线工具集，提供了很多不同的分析方法 (Huang, Sherman, and Lempicki 2008)*. 考虑到本教程的目的，我们将会只关注“functional annotation clustering”工具。


Go to the DAVID web site and click on ‘Start Analysis’, the link can be found in the menu bar beneath the web page header. The first step in any analysis with DAVID is to upload your gene list. Download the list of probeset identifiers from this link, and either upload it into DAVID using the ‘Upload a File’ option, or paste the contents into the text box in the left-hand side of the page. Select ‘OFFICIAL_GENE_SYMBOL’ as the Identifier Type, select the ‘Gene List’ radio button, and press ‘Submit List’. DAVID warns us that it can map the identifiers to multiple species, dismiss the warning, but make sure you select the Homo sapiens from the list of species in the left hand side panel. DAVID presents an ‘Analysis Wizard’ which lets us quickly submit our list of genes to one of DAVID’s analysis tools. Analysing functional over-representation is as simple as clicking on the ‘Functional Annotation Tool’ link.

https://david.ncifcrf.gov/

登录DAVID web site 点击“开始分析”，该链接在页面标题底下的菜单栏中。
（1）使用DAVID分析的第一步是上传你的基因列表。
从this link下载探针列表，从DAVID的Upload a File”上传，或者粘贴到左边的文本框中。
（2）识别类型选择“OFFICIAL_GENE_SYMBOL”，选择“Gene List”单选按钮，点击 提交列表。
（3）DAVID警告可以识别到多个物种，但是确定在左边面板中选择 Homo sapiens。
（4）DAVID给出一个“分析向导”，方便快速提交我们的基因到某个DAVID分析工具。分析功能高代表仅仅就是简单点击“Functional Annotation Tool”链接。


The 194 differentially expressed probesets from the microarray analysis tutorial map to 133 human genes in the DAVID database. The Annotation summary gives lists of the functional terms that DAVID has analysed for over-representation. As an example, click on the ‘+’ icon next to ‘Gene Ontology’ to expand that list, and then click the ‘Chart’ button next to ‘GOTERM_BP_FAT’ to look at Biological Process enrichment in more detail. There are 126 biological process terms in this list, all with a P-value < 0.05. We are, however, performing multiple tests here, so we must correct these P-values to allow for that. Fortunately DAVID has already done this, and we can see these corrected P-values in the final column of the chart (headed ‘Benjamini’). 10 of the 126 terms are still statistically over-represented if we use this corrected P-value
来自于芯片分析教程的这178个差异表达基因在DAVID数据库中映射到130个人基因。注释概要给出了DAVID已经分析过的超代表功能词条列表。作为一个例子，点击“Gene Ontology”展开列表，点击GOTERM_BP_FAT旁边的“Chart”按钮，查看更详细的生物过程富集。列表中有126个生物过程词条，P值都小于0.05。然而，我们这里要进行多重检测，所以我们必须矫正P值。幸运的是DAVID已经做了这个，我们可以再表的最后一列看到矫正的P值（标题是Benjamini）。如果使用矫正后的P值，126个词条中的10个仍然统计学上高代表性。


Table 1 – Statistically over-represented GO Biological Process terms, according to DAVID.

Term	Number of genes with annotation	P-value	Benjamini-Hochberg corrected P-Value
collagen fibril organization	6	2.9E-6	3.4E-3
extracellular structure organization	10	5.6E-6	3.3E-3
extracellular matrix organization	8	1.8E-5	7.1E-3
skeletal system development	12	4.4E-5	1.3E-2
negative regulation of signal transduction	10	6.3E-5	1.5E-2
response to nutrient	8	1.2E-4	2.4E-2
response to steroid hormone stimulus	9	1.4E-4	2.4E-2
negative regulation of cell communication	10	1.5E-4	2.2E-2
response to estrogen stimulus	7	1.8E-4	2.4E-2
tube development	9	3.5E-4	4.1E-2

This list of over-represented terms gives us a lot of information about the genes that have changed expression in our experiment. But we have no information about how the individual terms are related. DAVID provides a functional annotation clustering tool that can help with this, but the results are still represented as HTML tables. A more visual representation of the relationships between terms may help us with our interpretation.


## 点开 “Gene_Oncology”，
点击 (molecular functions)MF、(biological processes)BP、(cellular components)CC 等中的一个后面的 Chart 按钮，
新页面，点击 Download file 就可以下载，可用excel/R打开，选择p value<0.05的画图。


## 点开“KEGG”通路
点击 Download file 可以下载。
点击 term 名字，就能打开新页面，可视化中，加星号的是输入基因中参与的该通路的基因。










========================================
|-- Metascape 做富集分析 //todo
----------------------------------------
2.Metascape
http://www.metascape.org/







========================================
|-- String 蛋白互作网络 //todo
----------------------------------------
String：https://string-db.org/











========================================
|-- GeneMANIA //todo
----------------------------------------
1. web
http://genemania.org/
探索基因间相互作用和功能，除了string还有更友好的它！

该数据库用于生成有关基因功能的假设、分析基因列表和为功能分析确定基因的优先级。给定一个查询基因列表，GeneMANIA使用大量的基因组学和蛋白质组学数据发现功能相似的基因。在这种模式下，它根据查询的预测值对每个功能基因组数据集进行加权。

GeneMANIA的另一个用途是基因功能预测。给定一个查询基因，GeneMANIA会根据基因与它的相互作用，找到可能与它共享功能的基因。





2. Cytoscape plugin 
https://apps.cytoscape.org/apps/genemania#cy-app-releases-tab
Imports interaction networks from public databases from a list of genes with their annotations and putative functions.














========================================
|-- KEGG上色 //todo
----------------------------------------
#KEGG Pathway 中基因的颜色怎么简单的标记上去
biocc  生信人  2017-07-22

1.有一个genelist

2.把symbol转为
https://www.uniprot.org/uploadlists/ 做idmapping

from: Gene name, To: UniProtKB, Organism:human; 提交。
新页面点击左侧的Reviewed, 右侧表格上方点Download excel格式。

解压打开，第二列Entry，加上颜色(如 red)提交到KEGG:https://www.genome.jp/kegg/tool/map_pathway2.html
P36956	red
O95785	red
O43405	red
P50454	red
顶部 Search against填写hsa，Primary ID选择Uniprot，点击底部的Exec。


至于高级复杂版可以从两个角度去实现批量化，一个是KEGG API，一个是构建url，当然也可以使用程序绘图直接绘制上去，这里就不做介绍了，还有就是对于未知的物种该如何做，首先是进行比对，具体工具有KOBAS、KAAS等。









========================================
GOplot包做GO 分析
----------------------------------------
1. R包GOplot——GO富集分析

R包GOplot基于ggplot2增强图形化展示。它利用任何通用富集分析的输出，并在不同细节层次上产生图像：从总览最富集的类别（条形图、气泡图），到在一套给定类别中展示不同类型分子信息的更详细视图（环形图、弦图、聚类图）。该包提供了对组学数据的一个更深入的理解，允许科学家仅用几行代码就能产生有深刻见解的图像，以容易地交流他们的发现。

说明：
GO三大类别：BP（biological process），CC（cell component），MF（molecular function）
z-score：表示BP（/MF/CC）是更可能下降（负值）或者升高（正值）
logFC：基因倍数变化
count：GO term包含的基因数
adj p：校正的P值
GO term，例如GO:0007507是heart development




2. 需要以下三个包：
GO.db是GO分析的数据基础它包含了GO的基本分层信息；
topGO是基因的功能富集分析包；
GOProfiles利用GO谱进行富集分析。
接下来我们逐个介绍如何使用以上三个R包。所有包的安装我们就不赘述了，都是通过bioconductor进行安装的。

GO.db的使用：
首先，我们看下GO.db数据包的构成：

以上都是GO.db中的数据包，首先我们看下GO.db中包含的列

其他的数据是以工程文件的形式存在，在此需要进行转化转化函数as.list(GOTERM)可将其转化为list 的可检索文件。


其主要的检索函数select（），首先看下它的函数构成：
Select(data,keys,columns,keytypes)
- Keys检索的关键词，keytypes指的关键词的类型，columns指的那些列被列出来。
- 当然还有其他一些有用的函数：
- Keys()列出数据的主键列，或者加keytypes参数获取对应的列
- MapIds进行数据库的批量匹配。
以上在GO.db中适用的所有函数在其他.db的数据包中都可以适用。如下：


GO的基础数据已经准备好，接下来是如何做功能富集分析并输出我们想要的结果，那么就用到了下面的包topGO,为了方便我们举例我们还载入了ALL数据包。还是那句话安装啥的直接略过。

首先我们的数据包括ALL,还有topGO自带的geneList。


这样我们就可以构建我们的检索数据。其中用到一个函数topDiffGenes（）其主要功能是获取P小于0.01的基因列表。数据构建如下


至此我们的GO和gene匹配的过程结束了，接下来就是我们的核心部分富集分析了。富集分析有很多方法，在此包中的方法我们列出如下：



http://www.360doc.com/content/17/0918/18/46931810_688174475.shtml



========================================
利用clusterProfiler进行富集分析
----------------------------------------
https://github.com/YuLab-SMU/clusterProfiler
https://guangchuangyu.github.io/software/clusterProfiler/
https://bioconductor.org/packages/3.7/bioc/vignettes/clusterProfiler/inst/doc/clusterProfiler.html#kegg-module-over-representation-test


教程: https://yulab-smu.github.io/clusterProfiler-book/chapter12.html
http://yulab-smu.top/clusterProfiler-book/chapter2.html#gene-set-enrichment-analysis


clusterProfiler 是业界大神Y叔写的一个R包，可以用来做各种富集分析，如GO、KEGG、DO（Disease Ontology analysis）、Reactome pathway analysis以及GSEA富集分析等。而除了富集分析，他还可以非常方便的对富集分析结果进行可视化。

这里使用clusterProfiler进行GO、KEGG以及GSEA富集分析。

进行GO分析时，需要考虑的一个基础因素就是基因的GO注释信息从何处获取。Bioconductor上提供了以下19个物种的Org类型的包，包含了这些物种的GO注释信息


Other gene sets
包括但不限于：Disease Ontology (DO), Disease Gene Network (DisGeNET), wikiPathways, Molecular Signatures Database (MSigDb)



对于过表征分析 (over representation analysis, ORA), 我们需要的是一个包含基因ID的向量，基因ID可以从差异表达分析获得（例如 DESeq2 包）。

对于基因富集分析 (gene set enrichment analysis, GSEA), 我们需要一个经排序的基因列表，在这里我们调用 DOSE 包中的示例数据 geneList .




Visualization 可视化函数
barplot
cnetplot
dotplot
emapplot
gseaplot
goplot
upsetplot




1. Over-Representation Analysis

过表达分析其实就是费舍尔精确检验，对于以上19个物种，分析的代码如下

ego <- enrichGO(
  gene          = gene,
  keyType = "ENTREZID",
  OrgDb         = org.Hs.eg.db,
  ont           = "CC",
  pAdjustMethod = "BH",
  pvalueCutoff  = 0.01,
  qvalueCutoff  = 0.05,
  readable      = TRUE)

gene就是差异基因对应的向量，keyType指定基因ID的类型，默认为ENTREZID, 该参数的取值可以参考keytypes(org.Hs.eg.db)的结果， 建议采用ENTREZID, OrgDb指定该物种对应的org包的名字，ont代表GO的3大类别，BP, CC, MF; pAdjustMethod指定多重假设检验矫正的方法，cufoff指定对应的阈值，readable=TRUE代表将基因ID转换为gene symbol。




2. Gene Set Enrichment Analysis
(1)
ego <- gseGO(
  geneList     = geneList,
  OrgDb        = org.Hs.eg.db,
  ont          = "CC",
  nPerm        = 1000,
  minGSSize    = 100,
  maxGSSize    = 500,
  pvalueCutoff = 0.05,
  verbose      = FALSE)

GSEA分析通过置换检验来计算p值，nPerm指定置换次数。


(2)支持的物种
GO分析（groupGO(), enrichGO(), gseGO()）支持Bioconductor提供的 OrgDb 中已有的20个物种。也可以通过AnnotationHub在线检索并抓取 OrgDb.

对于这19个物种之外的其他物种，也支持读取基因的GO注释文件，然后进行分析，注释文件的格式如下
GeneId	GO	Description
1	GO:0005819	spindle
2	GO:0072686	mitotic spindle
3	GO:0000776	kinetochore
只需要3列信息即可，第一列为geneID, 第二列为基因对应的GO编号，第三列为GO的描述信息。这3列的顺序是无所谓的， 只要包含这3种信息就可以了。

读取该文件，进行分析的代码如下

data <- read.table(
  "go_annotation.txt",
  header = T,
  sep = "\t")

go2gene <- data[, c(2, 1)]
go2name <- data[, c(2, 3)]

# 费舍尔精确检验
x <- enricher(
gene,
TERM2GENE = go2gene,
TERM2NAME = go2name)

# GSEA富集分析
x <- GSEA(
gene,
TERM2GENE = go2gene,
TERM2NAME = go2name)











========================================
|-- clusterProfiler 实例
----------------------------------------
1. 基本方法
#载入包
#BiocManager::install("AnnotationHub")	#下载安装数据包，缺少的数据包都可以这样安装
#BiocManager::install("org.Hs.eg.db")
#BiocManager::install("clusterProfiler")

library(AnnotationHub)	#library导入需要使用的数据包
library(org.Hs.eg.db)   #人类注释数据库
library(clusterProfiler)

#载入数据
f <- read.table("C:\\File\\GeneEnsembl.txt")	#导入数据，ENSEMBL编号。
#若是excel文件，可library(readxl) ，read_excel("old_excel.xls")
f <- f[c(1)] 	#取需要的列


## 该包输入的是 Entrez ID

#将ENSEMBL编号转换为ENTREZID
EG2Ensembl=toTable(org.Hs.egENSEMBL)	 #将ENTREZID和ENSEMBL对应的数据存入该变量
f=f$V1	#list转化为字符向量
geneLists=data.frame(ensembl_id=f)
results=merge(geneLists,EG2Ensembl,by='ensembl_id',all.x=T)
id=na.omit(results$gene_id)  #提取出非NA的ENTREZID


#GO富集分析
ego <- enrichGO(OrgDb="org.Hs.eg.db", gene = id, ont = "MF", pvalueCutoff = 0.01, readable= TRUE) #GO富集分析
dotplot(ego,showCategory=10,title="Enrichment GO Top10") #泡泡图
barplot(ego, showCategory=20,title="EnrichmentGO")  #柱状图


#KEGG分析#
ekk <- enrichKEGG(gene= id,organism  = 'hsa', qvalueCutoff = 0.05)	 #KEGG富集分析
dotplot(ekk,font.size=8)	# 画气泡图
browseKEGG(ekk,'mmu01100')	# 显示通路图






ref:
https://blog.csdn.net/nineqblot/article/details/89944233
[推荐]（三）利用clusterProfiler进行富集分 https://www.jianshu.com/p/feaefcbdf986
[推荐] clusterProfiler: 分析+可视化GO和KEGG富集的转录组R包  https://www.jianshu.com/p/e133ab3169fa
GO富集分析及结果柱状图绘制R代码 https://blog.csdn.net/sinat_30623997/article/details/79250940




========================================
|-- groupGO()
----------------------------------------
函数 groupGO() 的设计是基于在特定水平的GO分布，从而对基因进行分类。

library(org.Hs.eg.db)
## 转换ID，参数'gene'可以是OrgDb支持的任何ID形式
gene.df <- bitr(gene, fromType = "ENTREZID", 
                toType = c("ENSEMBL", "SYMBOL"),
                OrgDb = org.Hs.eg.db) 
head(gene.df)
#   ENTREZID         ENSEMBL SYMBOL
# 1     4312 ENSG00000196611   MMP1
# 2     8318 ENSG00000093009  CDC45
# 3    10874 ENSG00000109255    NMU
# 4    55143 ENSG00000134690  CDCA8
# 5    55388 ENSG00000065328  MCM10
# 6      991 ENSG00000117399  CDC20

ggo <- groupGO(gene     = gene,
               OrgDb    = org.Hs.eg.db,
               ont      = "CC", 
               level    = 3,     ## Specific GO Level.
               readable = TRUE)  ## the gene IDs will mapping to gene symbols.
head(ggo)
#                    ID                    Description Count GeneRatio
# GO:0005886 GO:0005886                plasma membrane    52    52/207
# GO:0005628 GO:0005628              prospore membrane     0     0/207
# GO:0005789 GO:0005789 endoplasmic reticulum membrane     8     8/207


Level 1 provides the highest list coverage with the least amount of term specificity. With each increasing level coverage decreases while specificity increases so that level 5 provides the least amount of coverage with the highest term specificity. (Dennis, Glynn, et al)





========================================
|-- enrichGO(): GO分析，并用ggplot2画图
----------------------------------------
进行GO分析，显示全部信息

可以传入 ensembl_id
ego2 <- enrichGO(gene         = gene.df$ENSEMBL,
                OrgDb         = org.Hs.eg.db,
                keyType       = 'ENSEMBL',
                ont           = "CC",
                pAdjustMethod = "BH",
                pvalueCutoff  = 0.01,
                qvalueCutoff  = 0.05)
#

#如果直接调用 OrgDb 中的 ID，则需要在参数中确定 'KeyType'.
genelist=eg$ENTREZID;
> go <- enrichGO(genelist, 
			OrgDb = org.Hs.eg.db, 
			ont='ALL',
			pAdjustMethod = 'BH',
			pvalueCutoff = 0.05, 
			qvalueCutoff = 0.2,
			keyType = 'ENTREZID')
> head(go)

> dim(go)
[1] 524  10
> dim(go[go$ONTOLOGY=='BP',])
[1] 482  10
> dim(go[go$ONTOLOGY=='CC',])
[1] 26 10
> dim(go[go$ONTOLOGY=='MF',])
[1] 16 10
# 看来这些差异基因主要还是富集到BP中了

dotplot(go,showCategory=10,title="Enrichment GO Top10") #泡泡图
barplot(go, showCategory=20,title="EnrichmentGO")  #柱状图



# 还可以绘制GO的网络关系图，但是值得注意的是这里的数据只能是富集一个GO通路（BP、CC或MF）的数据
> go.BP <- enrichGO(genelist, OrgDb = org.Hs.eg.db, ont='BP',pAdjustMethod = 'BH',pvalueCutoff = 0.05, qvalueCutoff = 0.2,keyType = 'ENTREZID')
> plotGOgraph(go.BP)	#GO图，看不清楚可以尝试左上角另存为pdf




更多细节：
通过设置参数 readable=Ture 或 函数 setReadable() 可以将 Gene ID 转换为 symbol.
ego2 <- setReadable(ego2, OrgDb = org.Hs.eg.db)
head(ego2$gene2Symbol) #有symbol出现了


函数 dropGO 可以在由 enrichGO 得到的结果中移除特定的 GO term 或 GO level.

enrichGO() 不含设置 GO level 的参数，而函数 gofilter() 可以将结果限定在特定的 GO level.


GO term 去冗余
rmredunego <- simplify(ego, cutoff=0.7, by="p.adjust", select_fun=min)









========================================
|-- ggplot2画 KEGG Pathway富集分析气泡图  
----------------------------------------
kk <- enrichKEGG(gene         = gene,
                 organism     = 'hsa',
                 pvalueCutoff = 0.05)
#

我们继续使用上面的数据进行KEGG富集分析：
> kegg <- enrichKEGG(genelist, organism = 'hsa', keyType = 'kegg', pvalueCutoff = 0.05,pAdjustMethod = 'BH', 
                     minGSSize = 10,maxGSSize = 500,qvalueCutoff = 0.2,use_internal_data = FALSE)
> head(kegg)

# 简单可视化
> dotplot(kegg, showCategory=30)




# 自定义可视化代码：不好用，不过看注释可以学习ggplot2用法
library(ggplot2)  
pathway = read.table("C://Users//Desktop//path.richFactor.head20.tsv",header=T,sep="\t")  
# 画图  
p = ggplot(pathway,aes(richFactor,Pathway))  
p=p + geom_point()  
# 改变点的大小  
p=p + geom_point(aes(size=R0vsR3))  
# 四维数据的展示  
pbubble = p + geom_point(aes(size=R0vsR3,color=-1*log10(Qvalue)))  
# 自定义渐变颜色  
pbubble =pbubble+ scale_colour_gradient(low="green",high="red")  
# 绘制pathway富集散点图  
pr = pbubble + scale_colour_gradient(low="green",high="red") +   
  labs(color=expression(-log[10](Qvalue)),size="Gene number",  
       x="Rich factor",y="Pathway name",title="Top20 of pathway enrichment")  
# 改变图片的样式（主题）  
pr=pr + theme_bw()  
pr 



备注，绘图数据的说明：
1)Pathway : 通路的名称        
2)R0vsR3 ：差异表达基因中，属于这个通路的基因的数量
3)All_Unigene：所有基因中属于这个通路的基因的数量  
4)Pvalue ：富集分析p值
5)Qvalue ：富集分析的Q值
6)richFactor ：在我们分析报告中，没有提供这一列，但很容易计算。是 第二列 除以 第三列得到；
7)Pathway ID  ：通路ID  
8)Genes ：通路中基因的ID
9)KOs：通路中基因的KO号


http://blog.csdn.net/sinat_38163598/article/details/72827851
https://blog.csdn.net/tuanzide5233/article/details/82141817






========================================
|-- GSEA 富集分析
----------------------------------------
https://www.jianshu.com/p/feaefcbdf986

clusterProfiler provides enricher function for hypergeometric test and GSEA function for gene set enrichment analysis that are designed to accept user defined annotation.

这里使用clusterProfiler里面的GSEA函数进行GSEA富集分析，并与使用超几何分布富集（enricher函数）的结果进行简单比较，enricher函数与GSEA函数用法基本相同，因此这里只给出GSEA的用法及参数。


GSEA      a universal gene set enrichment analysis tools
Usage：
  GSEA(geneList, exponent = 1, nPerm = 1000, minGSSize = 10,
       maxGSSize = 500, pvalueCutoff = 0.05, pAdjustMethod = "BH", TERM2GENE,
       TERM2NAME = NA, verbose = TRUE, seed = FALSE, by = "fgsea")

Arguments：
geneList           order ranked geneList
exponent           weight of each step
nPerm              number of permutations
minGSSize          minimal size of each geneSet for analyzing
maxGSSize          maximal size of genes annotated for testing
pvalueCutoff       pvalue cutoff
pAdjustMethod      p value adjustment method
TERM2GENE          user input annotation of TERM TO GENE mapping, a data.frame of 2 column with term and gene
TERM2NAME          user input of TERM TO NAME mapping, a data.frame of 2 column with term and name
verbose            logical
seed               logical
by                 one of ’fgsea’ or ’DOSE’


在进行富集分析之前需要对数据做一个预处理——排序。

> library(dplyr)
> geneList <- select(degenes, Entrez.ID, Fold.Change); head(geneList)
  Entrez.ID Fold.Change
1       202    2.555354
2     26289    1.350051
3       306   -2.328736
4     55843    5.064183
5       433    2.061535
6       472    2.313447
> geneList.sort <- arrange(geneList, desc(Fold.Change)); head(geneList.sort)
  Entrez.ID Fold.Change
1      3512    36.47332
2      3117    35.58685
3      3113    24.10151
4       916    14.89763
5      5996    14.67417
6      3119    11.12233
> gene <- geneList.sort$Entrez.ID







这里使用的是broad GSEA提供的gene sets 来提供 TERM2GENE ：
> gmtfile <- system.file("extdata", "c5.cc.v5.0.entrez.gmt", package="clusterProfiler") #这就是一个文件路径
> c5 <- read.gmt(gmtfile)
> head(c5)
          ont  gene
1 NUCLEOPLASM  3190
2 NUCLEOPLASM  2547
3 NUCLEOPLASM 26173
4 NUCLEOPLASM  9439
5 NUCLEOPLASM 57508
6 NUCLEOPLASM  6837

万事俱备，只欠东风。现在可以开始分析了，先进行超几何分布的富集分析：

### 先使用基于超几何分布的富集分析
> enrich <- enricher(gene, TERM2GENE=c5); head(enrich)


其他基因集从官网下载
http://software.broadinstitute.org/gsea/msigdb/collections.jsp


library(msigdbr)
msigdbr_show_species()











再做GSEA富集分析，在此之前需要对输入gene list做一下处理，包括三步：

## assume 1st column is ID
## 2nd column is FC
> head(geneList)
  Entrez.ID Fold.Change
1       202    2.555354
2     26289    1.350051

## feature 1: numeric vector
> glist <- geneList[,2];head(glist)
[1]  2.555354  1.350051 -2.328736  5.064183  2.061535  2.313447

## feature 2: named vector
> names(glist) <- as.character(geneList[,1]);head(glist)
      202     26289       306     55843       433       472 
 2.555354  1.350051 -2.328736  5.064183  2.061535  2.313447 

## feature 3: decreasing order
> glist <- sort(glist,decreasing = T); head(glist)
    3512     3117     3113      916     5996     3119 
36.47332 35.58685 24.10151 14.89763 14.67417 11.12233


输入文件准备好了尽可以进行GSEA富集分析了：

> gsea <- GSEA(glist, TERM2GENE=c5, verbose=FALSE, pvalueCutoff = 0.8); head(gsea)
不要问我为什么要pvalueCutoff设置0.8，因为一直调大到0.8才富集到结果。。。可见数据应该是有问题的，但这里作为一个实践就不管那么多了。


而且，clusterProfiler还支持GSEA的GO、KEGG富集。

A common approach in analyzing gene expression profiles was identifying differential expressed genes that are deemed interesting. The enrichment analysis we demonstrated previous were based on these differential expressed genes. This approach will find genes where the difference is large, but it will not detect a situation where the difference is small, but evidenced in coordinated way in a set of related genes. Gene Set Enrichment Analysis (GSEA)(Subramanian et al. 2005) directly addresses this limitation. All genes can be used in GSEA; GSEA aggregates the per gene statistics across genes within a gene set, therefore making it possible to detect situations where all genes in a predefined set change in a small but coordinated way. Since it is likely that many relevant phenotypic differences are manifested by small but consistent changes in a set of genes.


> gsea.go <- gseGO(glist,OrgDb = org.Hs.eg.db, pvalueCutoff = 0.5); head(gsea.go)


> gsea.KEGG <- gseKEGG(geneList     = glist,
               organism     = 'hsa',
               nPerm        = 1000,
               minGSSize    = 120,
               pvalueCutoff = 0.05,
               verbose      = FALSE)
#
### 画 GSEA 图，和官方的差不多。
geneSetID='hsa04510' #Focal adhesion
gseaplot(gsea.KEGG, geneSetID = geneSetID,title=geneSetID)





# 查看KEGG路径图
browseKEGG(gsea.KEGG, gsea.KEGG[1,'ID'])
## https://www.kegg.jp/kegg-bin/show_pathway?hsa05168 打开新网页，要删掉最后的斜杠。



顺便再利用上面处理好的glist进行一下KEGG富集到的某一条通路的可视化：
> library(pathview)
> pathview(gene.data = glist, pathway.id = 'hsa04658',species="hsa", limit=list(gene=max(abs(glist)), cpd=1))

上面的命令会在当前目录生成3个文件：一个原始KEGG通路图片，一个标注了上下调基因的，最后一个文本文件则是一些KEGG通路信息。


#

========================================
|-- pathview包:整合表达谱数据可视化KEGG通路，上帝视角查看KEGG信号通路图
----------------------------------------
1.输入是 named list:
head(glist) #value是fold change，name是 gene entres_id;
#     7803    387509 100506498 100144602     50632 100288152 
# 24.35061  23.78739  23.67869  23.54676  23.35748  22.23226


str(glist)
# Named num [1:15937] 24.4 23.8 23.7 23.5 23.4 ...
# - attr(*, "names")= chr [1:15937] "7803" "387509" "100506498" "100144602" ...





2.
# pathway id https://www.kegg.jp/kegg-bin/get_htext#B36

https://mp.weixin.qq.com/s?__biz=MzI5MTcwNjA4NQ==&mid=2247490244&idx=1&sn=e4fecfad6e7f17be8ca4d4fba8c201c9





3. 开始画图
#BiocManager::install("pathview")
library(pathview)
pathview(gene.data = glist, pathway.id = 'hsa04658',
         species="hsa", limit=list(gene=max(abs(glist)), cpd=1))
#tumor
pathview(gene.data = glist, pathway.id = 'hsa05200',
         species="hsa", limit=list(gene=max(abs(glist)), cpd=1))
#
#Cell adhesion molecules (CAMs)
pathview(gene.data = glist, pathway.id = 'hsa04514',
         species="hsa", limit=list(gene=max(abs(glist)), cpd=1))
#Focal adhesion
pathview(gene.data = glist, pathway.id = 'hsa04510',
         species="hsa", limit=list(gene=max(abs(glist)), cpd=1))
#Transcriptional misregulation in cancer
pathview(gene.data = glist, pathway.id = 'hsa05202',
         species="hsa", limit=list(gene=max(abs(glist)), cpd=1))
#Apoptosis
pathview(gene.data = glist, pathway.id = 'hsa04210',
         species="hsa", limit=list(gene=max(abs(glist)), cpd=1))
#











========================================
|-- clusterProfiler提供了以下几种可视化策略
----------------------------------------
https://blog.csdn.net/weixin_43569478/article/details/83744242


3.对于GO富集分析的结果，clusterProfiler提供了以下几种可视化策略

(1). barplot
用散点图展示富集到的GO terms,用法如下
barplot(ego, showCategory = 10)

横轴为该GO term下的差异基因个数，纵轴为富集到的GO Terms的描述信息， showCategory指定展示的GO Terms的个数，默认展示显著富集的top10个，即p.adjust最小的10个。注意的颜色对应p.adjust值，从小到大，对应蓝色到红色。

(2)dotplot
用散点图展示富集到的GO terms,用法如下
dotplot(ego, showCategory = 10)

横轴为GeneRatio, 代表该GO term下的差异基因个数占差异基因总数的比例，纵轴为富集到的GO Terms的描述信息， showCategory指定展示的GO Terms的个数，默认展示显著富集的top10个，即p.adjust最小的10个。图中点的颜色对应p.adjust的值，从小到大，对应蓝色到红色，大小对应该GO terms下的差异基因个数，个数越多，点越大。


(3)GO有向无环图
调用topGO来实现GO有向无环图的绘制，代码如下

plotGOgraph(ego)

矩形代表富集到的top10个GO terms, 颜色从黄色过滤到红色，对应p值从大到小。


(4)goplot
和plotGOgraph展示的信息一样，都是GO有向无环图，只不过采用了igraph中的布局方式，用法如下

goplot(ego)


(5)emapplot
对于富集到的GO terms之间的基因重叠关系进行展示，如果两个GO terms系的差异基因存在重叠，说明这两个节点存在overlap关系，在图中用线条连接起来，用法如下

emapplot(ego, showCategory = 30)

每个节点是一个富集到的GO term, 默认画top30个富集到的GO terms, 节点大小对应该GO terms下富集到的差异基因个数，节点的颜色对应p.adjust的值，从小到大，对应蓝色到红色。

(6) cnetplot
对于基因和富集的GO terms之间的对应关系进行展示，如果一个基因位于一个GO Terms下，则将该基因与GO连线，用法如下
cnetplot(ego, showCategory = 5)








========================================
|-- compareCluster: calculate enriched functional categories of each gene clusters 
----------------------------------------

1.
data(gcSample)
lapply(gcSample, head)
## The input for geneCluster parameter should be a named list of gene IDs. To speed up the compilation of this document, we set use_internal_data = TRUE.

ck <- compareCluster(geneCluster = gcSample, fun = "enrichKEGG")
head(as.data.frame(ck))





2.支持输入表达式
mydf <- data.frame(Entrez=names(geneList), FC=geneList)
mydf <- mydf[abs(mydf$FC) > 1,]
mydf$group <- "upregulated"
mydf$group[mydf$FC < 0] <- "downregulated"
mydf$othergroup <- "A"
mydf$othergroup[abs( log2(mydf$FC) ) > 2] <- "B"

formula_res <- compareCluster(Entrez~group+othergroup, data=mydf, fun="enrichKEGG") #表达式

head(as.data.frame(formula_res))
##           Cluster         group othergroup       ID
## 1 downregulated.A downregulated          A hsa04974
## 2 downregulated.A downregulated          A hsa04510

##                        Description GeneRatio  BgRatio       pvalue
## 1 Protein digestion and absorption    15/280  90/7404 1.131476e-06
## 2                   Focal adhesion    20/280 199/7404 5.834970e-05

##       p.adjust       qvalue
## 1 0.0002919207 0.0002703631
## 2 0.0075271112 0.0069712535

##                                                                         geneID
## 1  1281/50509/1290/477/1294/1360/1289/1292/23428/1359/1300/1287/6505/2006/7373




3.Visualization of profile comparison

(1)
dotplot(ck)

(2)
dotplot(formula_res)

(3) 分面
dotplot(formula_res, x=~group) + ggplot2::facet_grid(~othergroup)

By default, only top 5 (most significant) categories of each cluster was plotted. User can changes the parameter showCategory to specify how many categories of each cluster to be plotted, and if showCategory was set to NULL, the whole result will be plotted.






========================================
|-- gene ID 转换: symbol/ ensembl_id/ Entrez ID
----------------------------------------

You can search by the following IDs: (only exactly matched IDs will be returned)

> Ensembl: Ensembl gene identifier. Example: "ENSG00000126243"
Ensembl_PRO: Ensembl protein identifier. Example: "ENSP00000337383"
Ensembl_TRS: Ensembl transcript identifier. "Example: ENST00000391828"
> Gene ID: EntrezGene IDs. examples include, "GeneID:10203", "10203" (for Entrez gene GeneID:10203)
> Gene symbol: for example, "CALCA"
GI: NCBI GI numbers. Example: "16033597"
HGNC: HUGO Gene Nomenclature ids. Example: "HGNC:16673"
IPI: International Protein Index ids. Example: "IPI00740702"
UniGene: NCBI UniGene ids. Examples: "Hs.654587", "At.36040"
UniProtKB:UniProt accession. Example: "O80536"
UniProtKB-ID: UniProt ID. Example: "AGAP3_HUMAN"





1. #ensembl_id to gene_id
EG2Ensembl=toTable(org.Hs.egENSEMBL)	 #将ENTREZID和ENSEMBL对应的数据存入该变量
head(EG2Ensembl)
##    gene_id      ensembl_id
## 1       1 ENSG00000121410
## 2       2 ENSG00000175899






2.由于clusterProfiler富集分析推荐的输入文件是Entrez ID，因此这里提取的是Entrez ID，接下来就可以进行富集分析了
## 对于没有转换的gene ID，clusterProfiler也提供了bitr方法进行转换ID：
Usage:
  bitr(geneID, fromType, toType, OrgDb, drop = TRUE)

Arguments
  geneID       input gene id
  fromType     input id type
  toType       output id type
  OrgDb        annotation db
  drop         drop NA or not

# example:
> x <- c("GPX3",  "GLRX",   "LBP",   "CRYAB", "DEFB1", "HCLS1",   "SOD2",   "HSPA2", 
       "ORM1",  "IGFBP1", "PTHLH", "GPC3",  "IGFBP3","TOB1",    "MITF",   "NDRG1", 
       "NR1H4", "FGFR3",  "PVR",   "IL6",   "PTPRM", "ERBB2",   "NID2",   "LAMB1", 
       "COMP",  "PLS3",   "MCAM",  "SPP1",  "LAMC1", "COL4A2",  "COL4A1", "MYOC",  
       "ANXA4", "TFPI2",  "CST6",  "SLPI",  "TIMP2", "CPM",     "GGT1",   "NNMT",
       "MAL",   "EEF1A2", "HGD",   "TCN2",  "CDA",   "PCCA",    "CRYM",   "PDXK",  
       "STC1",  "WARS",  "HMOX1", "FXYD2", "RBP4",   "SLC6A12", "KDELR3", "ITM2B")
> eg <- bitr(x, fromType="SYMBOL", toType=c("ENTREZID","ENSEMBL"), OrgDb="org.Hs.eg.db"); head(eg)
'select()' returned 1:many mapping between keys and columns
  SYMBOL ENTREZID         ENSEMBL
1   GPX3     2878 ENSG00000211445
2   GLRX     2745 ENSG00000173221
3    LBP     3929 ENSG00000129988
4  CRYAB     1410 ENSG00000109846
5  DEFB1     1672 ENSG00000164825
6  HCLS1     3059 ENSG00000180353
可以看到，这里转换ID的对应文件来源于"org.Hs.eg.db"这个包。



(2) 转换ID，参数'gene'可以是OrgDb支持的任何ID形式
head(gene) # [1] "4312"  "8318"  "10874" "55143" "55388" "991"
library(org.Hs.eg.db)
gene.df <- bitr(gene, fromType = "ENTREZID", 
                toType = c("ENSEMBL", "SYMBOL"),
                OrgDb = org.Hs.eg.db) 
head(gene.df)
#   ENTREZID         ENSEMBL SYMBOL
# 1     4312 ENSG00000196611   MMP1
# 2     8318 ENSG00000093009  CDC45
# 3    10874 ENSG00000109255    NMU




3. #gene symbol to id 
# https://www.biostars.org/p/255657/
library(org.Hs.eg.db)
library(biomaRt)
hs <- org.Hs.eg.db
#my.symbols <- c("MESP1")
my.symbols=DEgenes
head(my.symbols) #"MESP1"    "TMPRSS2"  "SIPA1"    "SLC39A11" "ACTA2"    "AGO4"
rs=select(hs, 
       keys = my.symbols,
       columns = c("ENTREZID", "SYMBOL"),
       keytype = "SYMBOL")
head(rs)
#        SYMBOL  ENTREZID
#1         MESP1     55897
#
head(rs$ENTREZID)






4. 任意转换: (ensembl id -- entrez id -- symbol)

library(AnnotationDbi)
library(org.Hs.eg.db)
# options(stringsAsFactors = F)
res=data.frame(
  gene_id=c("ENSG00000152495","ENSG00000171735"),
  stringsAsFactors = F
)
res$gene_id

# 输入keys。输入类型 keytype，返回类型column

# gene id --> symbol
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=res$gene_id,
                     column="SYMBOL",
                     keytype="ENSEMBL",
                     multiVals="first")
res

# gene id --> ENTREZID
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=res$gene_id,
                     column="ENTREZID",
                     keytype="ENSEMBL",
                     multiVals="first")
res
#          gene_id symbol entrez
#1 ENSG00000152495  CAMK4    814
#2 ENSG00000171735 CAMTA1  23261

# entrez id --> symbol
res$symbol2=mapIds(org.Hs.eg.db,
                     keys=res$entrez,
                     column="SYMBOL",
                     keytype="ENTREZID",
                     multiVals="first")
res

# 
res$ensembl2=mapIds(org.Hs.eg.db,
                   keys=res$symbol,
                   column="ENSEMBL",
                   keytype="SYMBOL",
                   multiVals="first")
res
#           gene_id symbol entrez symbol2        ensembl2
#1 ENSG00000152495  CAMK4    814   CAMK4 ENSG00000152495
#2 ENSG00000171735 CAMTA1  23261  CAMTA1 ENSG00000171735





ref:
web版 mouse ENSEMBL Gene ID to symbol: https://biotools.fr/mouse/ensembl_symbol_converter



========================================
GSEA分析是个什么鬼？
----------------------------------------
1. 基因集富集分析 (Gene Set Enrichment Analysis, GSEA) 的基本思想是使用预定义的基因集（通常来自功能注释或先前实验的结果），将基因按照在两类样本中的差异表达程度排序，然后检验预先设定的基因集合是否在这个排序表的顶端或者底端富集。基因集合富集分析检测基因集合而不是单个基因的表达变化，因此可以包含这些细微的表达变化，预期得到更为理想的结果。

从题目中我们看到GSEA分析有三个特点：
分析的基因集合而不是单个基因；
将基因与预定义的基因集进行比较；
富集分析；

看到这里大家可能想起来了RNA-seq或者芯片分析中最为常见的两种方法：GO（Gene Ontology）和KEGG pathway分析，它们有些相似但又不同。

GSEA的优势
一般的差异分析（GO和Pathway）往往侧重于比较两组间的基因表达差异，集中关注少数几个显著上调或下调的基因，这容易遗漏部分差异表达不显著却有重要生物学意义的基因，忽略一些基因的生物特性、基因调控网络之间的关系及基因功能和意义等有价值的信息。而GSEA不需要指定明确的差异基因阈值，算法会根据实际数据的整体趋势， 为研究者们提供了一种合理地解决目前芯片分析瓶颈问题的方法,即使在没有先验经验存在的情况下也能在表达谱整体层次上对数条基因进行分析,从而从数理统计上把表达谱芯片数据与生物学意义很好地衔接起来,使得研究者们能够更轻松、更合理地解读芯片结果。

目前，市面上绝大多数公司在求得差异基因列表后，都会在此之上提供给客户Pathway 以及GO 富集分析，毕竟给予成百上千的差异表达基因以简洁、明晰的生物学功能的概括，才是进行高通量生物学表达谱实验的主要目的。然而，在实际应用于生物学高通量数据时，它们都有一个重大的缺陷：对于差异基因检出的阈值，异常的敏感，客户需要给出差异基因的一个明确的定义(阈值)，例如abs(FC) ≧2.0 & p ≦ 0.05。这种一刀切的阈值，对于发现真正的生物学效应，许多时候是一种障碍，因为实际通过芯片观测到的RNA 表达变化，往往是层层的负反馈调控后的结果，并且不同组织对于表达差异的敏感度是不同的：在神经递质系统内，一个1.2 倍的表达差异即可能产生及其显著的效应。



GSEA富集过程包括三步骤：
1. 计算富集分数（Enrichment Score）；
2. 估计富集分数的显著性水平；
3. 矫正多重假设检验；


GSEA的具体原理就不展开了，原理在PNAS文章Gene set enrichment analysis: a knowledge-based approach for interpreting genome-wide expression profiles.Proc Natl Acad Sci U S A. 2005 Oct 25;102(43):15545-50. Epub 2005 Sep 30. 



2.
(1)
假设芯片或者其它测量方法测到了2万个基因，那么这两万个基因在case和control组的差异度量(六种差异度量，默认是signal 2 noise，GSEA官网有提供公式，也可以选择大家熟悉的foldchange)肯定不一样,那么根据它们的差异度量，就可以对它们进行排序，并且Z-score标准化，在下图的最底端展示的就是。

(2)
图中间，就是我们每个gene set里面的基因在所有的2万个排序好基因的位置，如果gene set里面的基因集中在2万个基因的前面部分，就是在case里面富集，如果集中在后面部分，就是在control里面富集着。


(3)而最上面的那个ES score的算法

每个基因在每个gene set里面的ES score取决于这个基因是否属于该gene set，还有就是它的差异度量，上图的差异度量就是FC（foldchange）,对每个gene set来说，所有的基因的ES score都要一个个加起来，叫做running ES score，在加的过程中，什么时候ES score达到了最大值，就是这个gene set最终的ES score！

所谓的GSEA分析，就是一个个遍历探索已知的基因集合，在我们的表达矩阵里面是否出现了某种统计学显著的扰动，




ref:
https://mp.weixin.qq.com/s?__biz=MzAxMDkxODM1Ng==&mid=2247486090&idx=1&sn=62374fbdd4f20c3185beb6568bbeb3e9
http://www.360doc.com/content/18/0317/09/19913717_737704832.shtml
https://bioconductor.org/packages/3.7/bioc/vignettes/clusterProfiler/inst/doc/clusterProfiler.html#kegg-module-over-representation-test
如何读懂GSEA结果？
	https://blog.csdn.net/weixin_43569478/article/details/83745105
	https://blog.csdn.net/qazplm12_3/article/details/83474140
#



========================================
|-- Molecular Signatures Database(MSigDB): 分子指纹数据库
----------------------------------------

Gene Set Enrichment Analysis，中文名称为基因集富集分析，是由Broad Institute研究所的科学家提出的一种富集方法，在提出该方法的同时还对应提供了分析的软件GSEA和一个基因集数据库MSigdb。本章主要介绍这个数据库，官网如下

http://software.broadinstitute.org/gsea/msigdb/index.jsp


对于human的基因，从位置，功能，代谢途径，靶标结合等多种角度出发，构建出了许多的基因集合，一个基因集合中就是具有相近位置或类似功能的许多基因的，Broad Institute研究所将它们构建的基因集合保存在MSigDB数据库中。

该数据库是不断更新和完善的，目前最新版本为v6.2, 更新于2018年7月，共收录了17810个基因集。不同版本如下收录的基因集数目变化如下




2.
在分析前我们先看MSigDB数据库，MSigDB（Molecular Signatures Database）数据库中定义了已知的基因集合：http://software.broadinstitute.org/gsea/msigdb

Collections
The MSigDB gene sets are divided into 8 major collections:
包括H和C1-C7八个系列（Collection），每个系列内容为：

H	hallmark gene sets  are coherently expressed signatures derived by aggregating many MSigDB gene sets to represent well-defined biological states or processes.

C1	positional gene sets  for each human chromosome and cytogenetic band.
C2	curated gene sets  from online pathway databases, publications in PubMed, and knowledge of domain experts.
C3	motif gene sets  based on conserved cis-regulatory motifs from a comparative analysis of the human, mouse, rat, and dog genomes.
C4	computational gene sets  defined by mining large collections of cancer-oriented microarray data.
C5	GO gene sets  consist of genes annotated by the same GO terms.
C6	oncogenic gene sets  defined directly from microarray gene expression data from cancer gene perturbations.
C7	immunologic gene sets  defined directly from microarray gene expression data from immunologic studies.



H: hallmark gene sets （效应）特征基因集合，共50组；
比如细胞凋亡特征基因集：

C1: positional gene sets 位置基因集合，根据染色体位置，共326个；
该类别包含人类每条染色体上的不同cytoband区域对应的基因集合。根据不同染色体编号进行二级分类。

C2: curated gene sets：（专家）共识基因集合，基于通路、文献等，这部分包括我们熟悉的KEGG信号通路等:

C3: motif gene sets：模式基因集合，主要包括microRNA和转录因子靶基因两部分
包含了miRNA靶基因和转录因子结合区域等基因集合。
无论是转录因子还是miRNA, 都是通过特定的motif序列来识别可以结合的区域，这些基因集合，本质上为具有相同motif序列的基因集，比如AAACCAC_MIR140这个基因集， 具有相同的AAACCACmotif, 而hsa-miR-140可以识别该motif然后进行结合，所以AAACCAC_MIR140是hsa-miR-140靶标基因的集合。


C4: computational gene sets：计算基因集合，通过挖掘癌症相关芯片数据定义的基因集合；

C5: GO gene sets：Gene Ontology 基因本体论，包括BP（生物学过程biological process，细胞原件cellular component和分子功能molecular function三部分）

C6: oncogenic signatures：癌症特征基因集合，大部分来源于NCBI GEO 及内部未发表芯片数据

C7: immunologic signatures: 免疫相关基因集合。


我们可以看到MSigDB数据收录的信息还是非常全面的，这个数据库可以单独使用和查询，我们可以根据各种条件导出一系列感兴趣的gene set。



(2)C2: curated gene sets 分为2大类，共6个子类
(browse 5501 gene sets)	
Gene sets in this collection are curated from various sources, including online pathway databases and the biomedical literature. Many sets are also contributed by individual domain experts. The gene set page for each gene set lists its source. The C2 collection is divided into the following two sub-collections: Chemical and genetic perturbations (CGP) and Canonical pathways (CP). 


CGP: chemical and genetic perturbations
(browse 3302 gene sets)	Gene sets represent expression signatures of genetic and chemical perturbations. A number of these gene sets come in pairs: xxx_UP (and xxx_DN) gene set representing genes induced (and repressed) by the perturbation.


CP: Canonical pathways
(browse 2199 gene sets)	Gene sets from pathway databases. Usually, these gene sets are canonical representations of a biological process compiled by domain experts.


CP:BIOCARTA: BioCarta gene sets
(browse 289 gene sets)	Gene sets derived from the BioCarta pathway database.


CP:KEGG: KEGG gene sets
(browse 186 gene sets)	Gene sets derived from the KEGG pathway database.


CP:PID: PID gene sets
(browse 196 gene sets)	Gene sets derived from the PID pathway database.


CP:REACTOME: Reactome gene sets
(browse 1499 gene sets)	Gene sets derived from the Reactome pathway database.

以KEGG为例，包含了186个基因集，每个基因集本质上都对应pathway 数据库里的一条通路。比如基因集KEGG_ABC_TRANSPORTERS对应pathway数据库中的hsa02010。






3.View Gene Families
http://software.broadinstitute.org/gsea/msigdb/gene_families.jsp

cytokines and growth factors	
transcription factors	
homeodomain proteins	
cell differentiation markers	
protein kinases	translocated cancer genes	
oncogenes	
tumor suppressors


检索基因集的页面 http://software.broadinstitute.org/gsea/msigdb/genesets.jsp






4. 自定义 gmt 基因集文件

每个基因集是一行。第一列是基因集的ID（不能重复），第二列是简单描述（名字，url 或者 na），后面的列就是基因集所含有的基因，长度不等，tab 隔开。

- 使用excel 编辑注意：基因名 SEP8 可能变成日期 8-Sep






ref:
https://blog.csdn.net/weixin_43569478/article/details/83744521

http://www.360doc.com/content/16/1026/18/19913717_601568937.shtml




========================================
|-- GSEA富集分析 - 界面操作-命令行操作
----------------------------------------
GSEA富集分析 - 界面操作  生信宝典  2017-10-14
https://mp.weixin.qq.com/s?__biz=MzI5MTcwNjA4NQ==&mid=2247484582&idx=1&sn=1e01276e1216c91bd6e1e08db15bd905

一文掌握GSEA，超详细教程  生信宝典  2019.4月26日
https://mp.weixin.qq.com/s?__biz=MzI5MTcwNjA4NQ==&mid=2247488358&idx=1&sn=4c1c15b6467ff7f8bd7fe95400bbc1df

GO、GSEA富集分析一网打进
https://mp.weixin.qq.com/s?__biz=MzI5MTcwNjA4NQ==&mid=2247484594&idx=1&sn=77c8a84ceaae6b672f198ebd531c21e4




Gene Set Enrichment Analysis (基因集富集分析)用来评估一个预先定义的基因集的基因在与表型相关度排序的基因表中的分布趋势，从而判断其对表型的贡献。其输入数据包含两部分，一是已知功能的基因集 (可以是GO注释、MsigDB的注释或其它符合格式的基因集定义)，一是表达矩阵，软件会对基因根据其于表型的关联度(可以理解为表达值的变化)从大到小排序，然后判断基因集内每条注释下的基因是否富集于表型相关度排序后基因表的上部或下部，从而判断此基因集内基因的协同变化对表型变化的影响。

(The gene sets are defined based on prior biological knowledge, e.g., published information about biochemical pathways or coexpression in previous experiments. The goal of GSEA is to determine whether members of a gene set S tend to occur toward the top (or bottom) of the list L, in which case the gene set is correlated with the phenotypic class distinction.)
判断基因集S在列表L中处于头部或尾部的显著程度。


这与之前讲述的GO富集分析不同。GO富集分析是先筛选差异基因，再判断差异基因在哪些注释的通路存在富集；这涉及到阈值的设定，存在一定主观性并且只能用于表达变化较大的基因，即我们定义的显著差异基因。而GSEA则不局限于差异基因，从基因集的富集角度出发，理论上更容易囊括细微但协调性的变化对生物通路的影响。

软件和基因集下载
(http://software.broadinstitute.org/gsea/downloads.jsp)

运行GSEA (若每组样品都有多于7个样品，则Permutation type选择phenotype，结果理论上更好；否则选择gene_set)
如果样品数目少，而且选择了gene_set作为Permumation type则需要使用更为严格的标准，比如FDR<0.05。



1.学习官网
http://software.broadinstitute.org/gsea/index.jsp
Gene Set Enrichment Analysis (GSEA) is a computational method that determines whether an a priori defined set of genes shows statistically significant, concordant differences between two biological states (e.g. phenotypes). 
基因集富集分析(GSEA)是一种计算方法，它确定一个预先定义的基因集在两种生物状态之间是否具有统计上显著的、一致的差异(如表型)。

对于绝大多数研究者，推荐下载桌面版的软件。只要有java 8+，下载后就能1min内安装好并打开界面。

教程：http://software.broadinstitute.org/gsea/doc/desktop_tutorial.jsp

输入数据格式： http://software.broadinstitute.org/cancer/software/gsea/wiki/index.php/Data_formats
常规需要两个文件：
(1)txt文件，行为基因名，列为细胞名字。
如果是R保存的带行列标题的表达数据，添加第一列的标题Name，添加第二列description（内容为na即可），保存为tab分割的文件。

(2)表型数据文件CLS: Categorical (e.g tumor vs normal) class file format (*.cls)。
一共三行的文本文件，第一行是样本数字\t条件个数\t最后一个数字总是1; 第二行是第一行提到的三个变量；第三行则是和表达数据列标题对应的分类。
9	3	1
#KARAS_MUT	WT	MYC_MUT
KMUT	KMUT	KMUT	WT	WT	WT	myc	myc	myc

要注意:
1) cls文件第二行#后面必须是字母开头，不能是数字开头，否则导入时报错！
2) cls第三行一定要和表达矩阵的列一一对应。



怎么看结果：http://www.gsea-msigdb.org/gsea/doc/GSEAUserGuideFrame.html?_Interpreting_GSEA_Results



需要标记到GSEA图上的几个关键概念：NES, Pval, FDR


java -Xmx512m xtools.gsea.Gsea -res F:\Temp\DESeq2\hela.count.nons_sync.txt -cls F:\Temp\DESeq2\type.cls#nonS_versus_sync -gmx gseaftp.broadinstitute.org://pub/gsea/gene_sets_final/c7.all.v6.2.symbols.gmt -collapse false -mode Max_probe -norm meandiv -nperm 1000 -permute phenotype -rnd_type no_balance -scoring_scheme weighted -rpt_label my_analysisC7 -metric Signal2Noise -sort real -order descending -create_gcts false -create_svgs false -help false -include_only_symbols true -make_sets true -median false -num 100 -plot_top_x 20 -rnd_seed timestamp -save_rnd_lists false -set_max 500 -set_min 15 -zip_report false -out C:\Users\admin\gsea_home\output\mar18 -gui false





========================================
|-- 研究KEGG数据结构，制作自己的基因集
----------------------------------------
http://www.bio-info-trainee.com/2144.html

1.
(1)
MSigDB 现在提供两种gmt文件 Download GMT Files:
http://software.broadinstitute.org/gsea/msigdb/collections.jsp#C2
gene symbols
entrez genes ids
第一列是通路名字，第二列是描述(没有可以设为NA)，接着是这个通路的基因。


$ head -n 1 c2.all.v7.0.symbols.gmt
KEGG_GLYCOLYSIS_GLUCONEOGENESIS	http://www.gsea-msigdb.org/gsea/msigdb/cards/KEGG_GLYCOLYSIS_GLUCONEOGENESIS	ACSS2	GCK	PGK2	PGK1	PDHB	PDHA1	PDHA2	PGM2	TPI1	ACSS1	FBP1	ADH1B	HK2	ADH1C	HK1	HK3	ADH4	PGAM2	ADH5	PGAM1	ADH1A	ALDOC	ALDH7A1	LDHAL6B	PKLR	LDHAL6A	ENO1	PKM	PFKP	BPGM	PCK2	PCK1	ALDH1B1	ALDH2	ALDH3A1	AKR1A1	FBP2	PFKM	PFKL	LDHC	GAPDH	ENO3	ENO2	PGAM4	ADH7	ADH6	LDHB	ALDH1A3	ALDH3B1	ALDH3B2	ALDH9A1	ALDH3A2	GALM	ALDOA	DLD	DLAT	ALDOB	G6PC2	LDHA	G6PC	PGM1	GPI


$ head -n 1 c2.all.v7.0.entrez.gmt
KEGG_GLYCOLYSIS_GLUCONEOGENESIS	http://www.gsea-msigdb.org/gsea/msigdb/cards/KEGG_GLYCOLYSIS_GLUCONEOGENESIS	55902	2645	5232	5230	5162	5160	5161	55276	7167	84532	2203	125	3099	126	3098	3101	127	5224	128	5223	124	230	501	92483	5313	160287	2023	5315	5214	669	5106	5105	219	217	218	10327	8789	5213	5211	3948	2597	2027	2026	441531	131	130	3945	220	221	222	223	224	130589	226	1738	1737	229	57818	3939	2538	5236	2821



(2)
记录broad的Molecular Signatures Database (MSigDB) 已经收到了18026个geneset，但是我奇怪的是里面竟然没有包括cancer testis的gene set，MSigDB的确是多，但未必全，其实里面还有很多重复。而且有不少几乎没有意义的gene set。那我想做自己的gene set来用gsea软件做分析，就需要自己制造gmt格式的数据。

http://www.gsea-msigdb.org/gsea/msigdb/cards/HALLMARK_TNFA_SIGNALING_VIA_NFKB


我们首先要拿到自己感兴趣的gene set里面的gene list，最好是以hugo规定的标准symbol。
比如我感兴趣的是 ：http://www.cta.lncc.br/modelo.php
癌睾抗原 The Cancer-Testis (CT) Antigens are proteins normally expressed only in the human germ line but that are also present in a significant subset of malignant tumors. 





2.
这里提供一个2列的文件，直接转换成gmt的R代码！
首先在R里面赋值一个变量path2gene_file就是图中的kegg2gene.txt文件(请参考下文 下载最新版的KEGG信息，并且解析好)，读到R里面去

$ wc kegg2gene.txt
29940  59880 335675 kegg2gene.txt
$ head kegg2gene.txt
00010   3101
00010   3098
00010   3099
00010   80201


# R
path2gene_file="c://Users/admin/Downloads/kegg2gene.txt"
tmp=read.table(path2gene_file,sep="\t",colClasses=c('character'))
#tmp=toTable(org.Hs.egPATH)
# first column is kegg ID, second column is entrez ID
GeneID2kegg_list<<- tapply(tmp[,1],as.factor(tmp[,2]),function(x) x)
kegg2GeneID_list<<- tapply(tmp[,2],as.factor(tmp[,1]),function(x) x)

这个变量kegg2GeneID_list是一个list，因为是entrez gene ID，需要转换成symbol，我就不多说了，转换后的数据，就是kegg2symbol_list 。
最后对 kegg2symbol_list 输出成gmt文件：

write.gmt <- function(geneSet=kegg2symbol_list, gmt_file='kegg2symbol.gmt'){
	sink( gmt_file )
	for (i in 1:length(geneSet)){
		cat(names(geneSet)[i]) #通路名字
		cat('\tNA\t') #url
		cat(paste(geneSet[[i]],collapse = '\t')) #gene id 或 symbol
		cat('\n')
	}
	sink()
}






========================================
|-- 重绘高清的 GSEA图 //todo
----------------------------------------
http://www.bio-info-trainee.com/2105.html
1.
GSEA分析可以直接使用单机JAVA版的GSEA软件完成，但该软件的一大不足就是绘制出的GSEA图上不了台面。

JAVA版的GSEA软件图形输出格式是png格式，主要有问题包括：
（1）像素偏低，发文章略显清晰度不够（应该没有到达300dpi）；
（2）图有些丑，例如周边是灰色，背景加网格线（当然，也看每个人喜好）；
（3）输出格式是位图，不利于后期编辑。

那么如何解决呢？比较简单的解决方案是：GSEA + R的策略：
（1）用GSEA软件完成分析
（2）基于分析结果，用R语言绘图的


2.公司给了个框架，没有源码
>source("gseaplot_modified.r")
>replotGSEA("my_analysis.GseaPreranked_result","HALLMARK_TNFA_SIGNALING_VIA_NFKB","AML")




3. 使用 clusterProfiler包（enrichplot包是其的可视化ggplot2实现）
http://www.360doc.com/content/18/0309/18/33459258_735717104.shtml
## gseaplot(kk2, geneSetID = "hsa04145")

library(DOSE)
data(geneList)
x <- gseDO(geneList)

gseaplot(x, 1, title=x$Description[1]) #默认颜色

gseaplot(x, 1, color="#DAB546",
	color.line='firebrick',
	color.vline="steelblue", #自定义颜色
	title=x$Description[1])



ref:
1. Tool: Plotting GSEA output in R: replotGSEA 
https://www.biostars.org/p/206808/
2.官方挂的R脚本： http://software.broadinstitute.org/gsea/downloads.jsp
https://github.com/GSEA-MSigDB/GSEA_R




========================================
下载最新版的KEGG信息，并且解析好
----------------------------------------
(1) 打开网页，垫底顶部的  Download htext
https://www.genome.jp/kegg-bin/get_htext?hsa00001+3101

(2)下载得到文本文件，可以看到里面的结构层次非常清楚，
A09100 Metabolism
B
B  09101 Carbohydrate metabolism
C    00010 Glycolysis / Gluconeogenesis [PATH:hsa00010]
D      3101 HK3; hexokinase 3	K00844 HK; hexokinase [EC:2.7.1.1]
D      3098 HK1; hexokinase 1	K00844 HK; hexokinase [EC:2.7.1.1]
D      3099 HK2; hexokinase 2	K00844 HK; hexokinase [EC:2.7.1.1]


C开头的就是kegg的pathway的ID所在行，D开头的就是属于它的kegg的所有的基因
A,B是kegg的分类，总共是8个大类，54个小类


$ grep ^A hsa00001.keg
A09100 Metabolism
A09120 Genetic Information Processing
A09130 Environmental Information Processing
A09140 Cellular Processes
A09150 Organismal Systems
A09160 Human Diseases
A09180 Brite Hierarchies
A09190 Not Included in Pathway or Brite

$ grep ^B hsa00001.keg | grep -P "\d+" |head
B  09101 Carbohydrate metabolism
B  09102 Energy metabolism
B  09103 Lipid metabolism
B  09104 Nucleotide metabolism
B  09105 Amino acid metabolism
B  09106 Metabolism of other amino acids
B  09107 Glycan biosynthesis and metabolism
B  09108 Metabolism of cofactors and vitamins
B  09109 Metabolism of terpenoids and polyketides
B  09110 Biosynthesis of other secondary metabolites


也可以看到，到目前为止（2019年11月23日14:15），共有376个kegg的human pathway信息
$ grep ^C hsa00001.keg|grep hsa|wc
    376    2258   20149
#

$ grep ^C hsa00001.keg|grep hsa|tail
C    04040 Ion channels [BR:hsa04040]
C    04031 GTP-binding proteins [BR:hsa04031]
C    04052 Cytokines and growth factors [BR:hsa04052]
C    04515 Cell adhesion molecules [BR:hsa04515]
C    04090 CD molecules [BR:hsa04090]
C    00535 Proteoglycans [BR:hsa00535]
C    00536 Glycosaminoglycan binding proteins [BR:hsa00536]
C    00537 Glycosylphosphatidylinositol (GPI)-anchored proteins [BR:hsa00537]
C    04091 Lectins [BR:hsa04091]
C    03100 Non-coding RNAs [BR:hsa03100]


接下来我们就把这个信息解析一下：
$ perl -alne '{if(/^C/){/PATH:hsa(\d+)/;$kegg=$1}else{print "$kegg\t$F[1]" if /^D/ and $kegg;}}' hsa00001.keg >kegg2gene.txt
不会perl，大概猜一下什么意思：有C开头的，则匹配出hsa后面的数字保存到变量kegg中，否则遇到D开头的，打印kegg制表符，以及第一列F[1]基因id;

$ head kegg2gene.txt
00010   3101
00010   3098
00010   3099
00010   80201
00010   2645
00010   2821

$ wc kegg2gene.txt
## 29940  59880 335675 kegg2gene.txt

$ cut -f 1 kegg2gene.txt | sort -u|wc
##   331     331    1986

$ cut -f 2 kegg2gene.txt |sort -u |wc
##   7939    7939   44253

是不是每个KEGG条目都有gene id呢？不是，因为C开头的376个，而kegg2gene.txt第一列KEGG uniq只有331个，差了45个。
没有gene id对应的KEGG有哪些呢?
$ grep ^C hsa00001.keg|grep hsa|awk '{print $2}'|sort -u|wc
##    376     376    2256


$ grep '^C' hsa00001.keg | grep hsa >hsa00001.keg.C
$ awk 'NR==FNR{a[$1];next} !($2 in a)' kegg2gene.txt  hsa00001.keg.C
C    01000 Enzymes [BR:hsa01000]
C    01001 Protein kinases [BR:hsa01001]
C    01009 Protein phosphatases and associated proteins [BR:hsa01009]
C    01002 Peptidases and inhibitors [BR:hsa01002]
C    01003 Glycosyltransferases [BR:hsa01003]
C    01004 Lipid biosynthesis proteins [BR:hsa01004]
... 共45行

验证一个，是真的没有对应的基因，还是和下面一个名词的基因完全重叠呢？不清楚。
$ grep -A 3 01000 hsa00001.keg --color=auto
C    01000 Enzymes [BR:hsa01000]
C    01001 Protein kinases [BR:hsa01001]
D      5566 PRKACA; protein kinase cAMP-activated catalytic subunit alpha       K04345 PKA; protein kinase A [EC:2.7.11.11]




========================================
|-- 探索基因注释R包 org.Hs.eg.db
----------------------------------------
看看kegg数据库更新的情况。
首先我们看org.Hs.eg.db这个R包里面自带的数据
http://www.biotrainee.com/thread-2771-1-1.html

> library('org.Hs.eg.db')
> org.Hs.eg.db
OrgDb object:
| DBSCHEMAVERSION: 2.1
| Db type: OrgDb
| Supporting package: AnnotationDbi
| DBSCHEMA: HUMAN_DB
| ORGANISM: Homo sapiens
| SPECIES: Human
| EGSOURCEDATE: 2019-Apr26

| KEGGSOURCENAME: KEGG GENOME
| KEGGSOURCEURL: ftp://ftp.genome.jp/pub/kegg/genomes
| KEGGSOURCEDATE: 2011-Mar15  ## 这更新日期很古老了！


> str(org.Hs.eg.db)
Reference class 'OrgDb' [package "AnnotationDbi"] with 2 fields
 $ conn       :Formal class 'SQLiteConnection' [package "RSQLite"] with 7 slots
  .. ..@ ptr                :<externalptr> 
  .. ..@ dbname             : chr "/home/wangjl/R/x86_64-redhat-linux-gnu-library/3.5/org.Hs.eg.db/extdata/org.Hs.eg.sqlite"
## 数据在这个数据库中，查一下怎么用

library(RSQLite)

#连接
db = dbConnect(SQLite(), dbname="/home/wangjl/R/x86_64-redhat-linux-gnu-library/3.5/org.Hs.eg.db/extdata/org.Hs.eg.sqlite")
dbListTables(db) #查看表
##  [1] "accessions"            "alias"                 "chrlengths"            "chromosome_locations" 
##  [5] "chromosomes"           "cytogenetic_locations" "ec"                    "ensembl"              
##  [9] "ensembl2ncbi"          "ensembl_prot"          "ensembl_trans"         "gene_info"            
## [13] "genes"                 "go"                    "go_all"                "go_bp"                
## [17] "go_bp_all"             "go_cc"                 "go_cc_all"             "go_mf"                
## [21] "go_mf_all"             "kegg"                  "map_counts"            "map_metadata"         
## [25] "metadata"              "ncbi2ensembl"          "omim"                  "pfam"                 
## [29] "prosite"               "pubmed"                "refseq"                "sqlite_stat1"         
## [33] "sqlite_stat4"          "ucsc"                  "unigene"               "uniprot" 
# 下文有每个表的字段。

dbListFields(db, "kegg") #查看字段
## 1] "_id"     "path_id"

kegg=dbGetQuery(db, "SELECT * FROM kegg;")
dim(kegg) #[1] 16313     2  #这个毕竟是古老的2011-Mar15 数据集，和上文刚下载的(29940 kegg2gene.txt)配对少了一半条目
head(kegg)
#  _id path_id
#1   2   04610
#2   4   00232
#3   4   00983

#和上文做验证
kegg[which(kegg$path_id=="00010"),]
kegg[which(kegg$`_id` =="3098"),]


# 查看uniq个数
## org.Hs.egPATH has 5869 entrez genes and 229 pathways 
length(unique(kegg$`_id`)) #[1] 5869  上文最新的是7939个基因
length(unique(kegg$path_id)) #[1] 229 上文最新的是331个KEGG通路

这个更新其实很缓慢的，所以大家还在用DAVID这种网络工具做kegg的富集分析结果也差不大！

## org.Hs.egPATH：Mappings between Entrez Gene identiﬁers and KEGG pathway identiﬁers


ref:
详细信息见http://www.genome.jp/kegg/pathway.html
更新信息见：http://www.genome.jp/kegg/docs/upd_map.html






2. 查看该包的所有表结构
library('org.Hs.eg.db')
str(org.Hs.eg.db)

db = dbConnect(SQLite(), dbname=org.Hs.eg.db$conn@dbname)
tblist=dbListTables(db)

showTable=function(n=1){
  tbname=tblist[n]
  print( paste(n, ' | table name: ',tbname) )
  print(dbListFields(db, tbname)) #查看字段
  kegg=dbGetQuery(db, paste0("SELECT * FROM ",tbname) ) #查看内容
  print(dim(kegg) )
  print( rbind( head(kegg), tail(kegg) ) )
}
showTable()
n=23;
n=n+1;showTable(n)
n=n+1;showTable(n)
n=n+1;showTable(n)
n=n+1;showTable(n)
n=n+1;showTable(n)
#


## 都有_id列
"chrlengths"(染色体长度),   
"chromosome_locations"(//todo: 负值？) 
"chromosomes"(基因id,染色体),   
"cytogenetic_locations"(基因id,遗传位置19q13.43),

"genes"(gene_id), 
"gene_info"("gene_name" "symbol" \n alpha-1-B glycoprotein	A1BG)
"alias" (基因别名),   
"accessions" (基因的NCBI的acc号),  
"pubmed"("pubmed_id", 12477932),  
"refseq"("accession", NM_130786), 

"ensembl"(ensembl_id ENSG00000121410)
"ensembl2ncbi"(ensembl_id ENSG00000121410),  
"ncbi2ensembl"("ensembl_id", ENSG00000121410),
"ensembl_prot"(prot_id ENSP00000286479), 
"ensembl_trans"(trans_id ENST00000543404), 

"ucsc"(ucsc_id, ENST00000596924.1),
"unigene"("unigene_id", Hs.529161),
"omim"("omim_id", 138670), 

"uniprot"("uniprot_id", P04217)
"ec"(蛋白EC编号 2.3.1.5),  
"pfam"("ipi_id"  "pfam_id" \n IPI00022895 PF13895)
"prosite"("ipi_id"     "prosite_id" \n IPI00022895    PS50835), 

"go"("go_id"    "evidence" "ontology" \n GO:0002576      TAS       BP), "go_all", 
"go_bp" ("go_id"    "evidence" \n GO:0002576      TAS), "go_bp_all",
"go_cc"("go_id"    "evidence" \n GO:0005576      HDA), "go_cc_all",
"go_mf"("go_id"    "evidence" \n GO:0003674       ND), "go_mf_all",
"kegg"("path_id" \n 04610),

"map_counts"("map_name" "count" \n SYMBOL2EG  61164), 
"map_metadata"("map_name" "source_name" "source_url" "source_date"\n ENTREZID 	Entrez Gene  ftp://ftp.ncbi.nlm.nih.gov/gene/DATA 2019-Jul10)         
"metadata"("name"  "value" \n Db type		OrgDb),

"sqlite_stat1"("tbl"  "idx"  "stat" \n ensembl    Fensembl   29663 2)         
"sqlite_stat4"("tbl"    "idx"    "neq"    "nlt"    "ndlt"   "sample"),









========================================
做GO分析后，画图前的数据整理：p值变数字保留2位有效数字，词条截短到40等
----------------------------------------
1. 来自wgcna 例子1 step4的 Code chunk 7
keepCols = c(1, 2, 5, 6, 7, 12, 13);
screenTab = tab[, keepCols];

# Round the numeric columns to 2 decimal places:
numCols = c(3, 4);
screenTab[, numCols] = signif(apply(screenTab[, numCols], 2, as.numeric), 2)

# Truncate the the term name to at most 40 characters
screenTab[, 7] = substring(screenTab[, 7], 1, 40)
# Shorten the column names:
colnames(screenTab) = c("module", "size", "p_val", "Bonf", "nInTerm", "ont", "term_name");
rownames(screenTab) = NULL;

# Set the width of R's output. The reader should play with this number to obtain satisfactory output.
options(width=95)
# Finally, display the enrichment table:
screenTab




(1) p值变数字，并保留2位小数?
# Round the numeric columns to 2 decimal places:
numCols = c(3, 4);
screenTab[, numCols] = signif(apply(screenTab[, numCols], 2, as.numeric), 2)

signif函数: signif rounds the values in its first argument to the specified number of significant digits.



(2)




========================================
聚类分析 //todo
----------------------------------------
聚类又称非监督分类，是一种探索性数据分析（Exploratory Data Analysis, EDA）方法，其目的是把有限数量的事物划分到若干“自然”的类别中。芯片结果的聚类分析很复杂，因为聚类本身就是个复杂的问题，聚类后的结果解析则更复杂。


https://blog.csdn.net/u014801157/article/details/24372399



========================================
查找GO、KEGG、Reactome Gene Sets 具体的基因列表
----------------------------------------
1. 先尝试 Reactome 中某条目包含的基因
我富集到的term:
GroupID	Category	Term	Description	LogP	Log(q-value)	InTerm_InList	Genes	Symbols
1_Member	Reactome Gene Sets	R-HSA-69278	Cell Cycle, Mitotic	-6.67053555	-2.351	28/560	890,1030,1062,1457,1719,4000,4149,5520,5529,6502,8364,22822,23122,23279,23383,23594,51143,51512,53371,55142,55388,55755,55869,57082,64785,80254,221496,378708	CCNA2,CDKN2B,CENPE,CSNK2A1,DHFR,LMNA,MAX,PPP2R2A,PPP2R5E,SKP2,H4C3,PHLDA1,CLASP2,NUP160,MAU2,ORC6,DYNC1LI1,GTSE1,NUP54,HAUS2,MCM10,CDK5RAP2,HDAC8,KNL1,GINS3,CEP63,LEMD2,CENPS



(1)经过搜索找到网址:
https://reactome.org/PathwayBrowser/#/R-HSA-69278


(2) 下载
点击右边主栏最下面的 Molecules 选项卡，点击 Download，可以看到很多分子，
左边勾选 Proteins 和 DNA/RNA，底下勾选 Name,
就可以单击下载或者直接复制粘贴到记事本了。

删掉第一行，还有561行，大概是这样:
UniProt:P53350 PLK1	
UniProt:Q9UKT4 FBXO5
...


(3) 文本处理获得gene symbol
删除掉第一个空格前的部分，使用npp的正则替换: ^.*\S+? 
然后删除多余空格，其实是tab: \t+

然后手动去重(严格来说，去重要用shell或者python)后还有 560个。


怎么构建统计量:
                 in Set(560);  Not in Set(T-560);
select408        : 28,  380
not Select(T-480): 532, T-560-380

T 是基因总数，大概取2e4；
# logP=-6.67053555
# P=10**(-6.67053555) = 2.135327e-07

fisher.test( matrix(c(28,380,532,1.8e4-560-380),nrow=2) ) #0.000115
fisher.test( matrix(c(28,380,532,2e4-560-380),nrow=2) ) #2.162e-05
fisher.test( matrix(c(28,380,532,3e4-560-380),nrow=2) ) #4.394e-09









2. 尝试 GO 中某条目包含的基因：amigo网站
我富集到的term:
GroupID	Category	Term	Description	LogP	Log(q-value)	InTerm_InList	Genes	Symbols
2_Member	GO Biological Processes	GO:0051603	proteolysis involved in cellular protein catabolic process	-5.354191511	-1.512	30/729	267,1457,2768,4189,4734,4779,4850,5601,6201,6502,6907,7844,9690,9928,23304,23358,26046,51619,54764,55270,55298,55819,57646,79718,83752,84196,84236,154214,196394,339745	AMFR,CSNK2A1,GNA12,DNAJB9,NEDD4,NFE2L1,CNOT4,MAPK9,RPS7,SKP2,TBL1X,RNF103,UBE3C,KIF14,UBR2,USP24,LTN1,UBE2D4,ZRANB1,NUDT15,RNF121,RNF130,USP28,TBL1XR1,LONP2,USP48,RHBDD1,RNF217,AMN1,SPOPL

3_Member	GO Biological Processes	GO:0044839	cell cycle G2/M phase transition	-4.926249432	-1.306	16/271	351,472,571,890,1030,4204,5520,6502,9928,22809,22822,51347,51512,55142,55755,80254	APP,ATM,BACH1,CCNA2,CDKN2B,MECP2,PPP2R2A,SKP2,KIF14,ATF5,PHLDA1,TAOK3,GTSE1,HAUS2,CDK5RAP2,CEP63

(1) 找到网页
打不开: ... //需要科学上网

https://amigo.geneontology.org/ 搜索 cell cycle
跳到选项页 https://amigo.geneontology.org/amigo/medial_search?q=cell+cycle
	Ontology 713    Gene Ontology Term, Synonym, or Definition.
	Genes and gene products 61086    Genes and gene products associated with GO terms.
	Annotations 112243    Associations between GO terms and genes or gene products.

点击 Ontology，跳到页面 https://amigo.geneontology.org/amigo/search/ontology?q=cell%20cycle
点击 cell cycle，跳转到 https://amigo.geneontology.org/amigo/term/GO:0007049
	包括: Total annotations: 60248


https://www.jianshu.com/p/b1fc09e997c8
1) 左侧点Organism限定物种
	选择 homo
	Total annotations: 2270

	如果是 cell cycle G2/M phase transition， Total annotations: 68; showing: 1-10

2) 点击 Download，取消其他选项，从左侧列表中保留2个: Gene/product(bioentity_label)， Synonym(synonym)，Type(type)[这列没用]，点底部的下载
ctrl+s 保存一个表格到txt文档:
	H2AX	H2AFX	protein
	NES	Nbla00170	protein
	RNF212B	C14orf164	protein
	RNF212B	C14orf164	protein
	BRCA1	RNF53	protein
	BRCA1	RNF53	protein
	...
	看来有重复的，可能是数据来源不同导致的。


(2) 去重复
1)使用R取第一列，去重
针对 cell cycle G2/M phase transition
	rs=read.table("gene_list.txt", sep="\t"); head(rs)
	rs=rs$V1
	rs=unique(rs)
	length(rs) #53个

	> jsonlite::toJSON(rs)
	["CALM3","CCNA2","MASTL","CCNY","MELK","PPME1","AKAP8","USH1C","LATS1","ENSA","LCMT1","FBXL7","ARPP19","BACH1","CIT","KHDRBS1","CDC25C","CDC25B","PLCB1","APP","WEE1","CCNB2","PBX1","NDC80","CHEK1","WNT10B","DNM2","KDM8","ABCB1","ESRRB","CDK1","BRSK1","PKMYT1","CCNB1","NES","PLK1","CCDC57","CDK14","CHEK2","CDK2","BRSK2","FOXM1","TAF2","FBXL15","AKAP8L","CALM2","CALM1","CDC25A","TPD52L1","PLK3","PPM1D","MTA3","AURKA"] 

2) 使用shell去重 https://amigo.geneontology.org/amigo/term/GO:0007049
$ cat GO-cell_cycle.txt | wc
   2270   34745  425517

$ cat GO-cell_cycle.txt  | awk '{print $1}' | sort | uniq | grep -v "_human" | wc
    976     976    5952

$ cat GO-cell_cycle.txt  | awk '{print $1}' | sort | uniq | grep -v "_human" | head -n 3
AAAS
ABCB1
ABL1

$ cat GO-cell_cycle.txt  | awk '{print $1}' | sort | uniq | grep -v "_human" | tail -n 3
ZW10
ZWILCH
ZWINT

$ cat GO-cell_cycle.txt  | awk '{print $1}' | sort | uniq | grep -v "_human" > GO-cell_cycle.amigo.gene.txt #976




(2) 下载数据

GO文件格式
GO的所有数据都是免费获得的。GO数据有三种格式：flat（每日更新）、XML(每月更新)和MySQL（每月更新）。 这些数据格式都可以在GO ftp的站点上下载。XML 和 MySQL 文件是被储存于独立的GO数据库中。


如何能够找到所有和一个特定的GO术语相关的人类基因呢？
GO术语是和SWISS-PROT/TrEMBL/InterPro and Ensembl中的蛋白序列无赘余地对应的。这些注释在EBI上的GOA-Human 文件中，GO的FTP站点上，Ensembl，EMBL－Bank上都可找到。

// todo







3. 尝试 GO 中某条目包含的基因：ebi网站 QuickGO (仅记载变更历史，没有详细基因列表？)
(1) 网页获取
https://www.ebi.ac.uk/QuickGO/term/GO:0007049
https://gowiki.tamu.edu/wiki/index.php/Category:GO:0007049_!_cell_cycle
https://geneontology.org/ 最终调转到这里，搜索 GO:0007049，选择 Ontology，点击搜索，

竟然又跳转到 https://amigo.geneontology.org/amigo/search/ontology?q=GO%3A0007049&searchtype=ontology
选 cell cycle，跳到 https://amigo.geneontology.org/amigo/term/GO:0007049
又回到了2








4. 尝试 GO 中某条目包含的基因：使用biomaRt
(1A) R包获取
# BiocManager::install("biomaRt")
# Using biomaRt
library(biomaRt)
mart <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
genes <- getBM(attributes = c("external_gene_name", "ensembl_gene_id"),
               filters = "go", values = "GO:0007049", mart = mart)
head(genes)
dim(genes)  #[1] 697   2

biomart=unique(genes[,1])
> length(biomart)
[1] 666



(1B) web版获取 Ensembl BioMart http://mart.ensembl.org/info/data/biomart/index.html
API: http://mart.ensembl.org/info/data/biomart/biomart_restful.html
教程: http://mart.ensembl.org/info/data/biomart/how_to_use_biomart.html

点击 BioMart data mining tool.
选择：
	Ensembl Genes 112
	Human genes(GRCh38.p14)
左侧点击 Filters，点击 +GENE ONTOLOGY，
	输入 GO term Accession: GO:0007049
左侧选择 Attributes, Features，gene name;
左上角单击 Results，勾选 Unique results only，单击Go。
输出文件 mart_export.txt -> GO-cell_cycle.mart_export.txt
$ cat GO-cell_cycle.mart_export.txt | awk -F "\t" '{print $5}' |sort | uniq | grep -vi gene > GO-cell_cycle.mart_export.gene.txt
$ cat GO-cell_cycle.mart_export.gene.txt | wc
   1813    1812   11126

$ cat GO-cell_cycle.mart_export.gene.txt | head -n 3

AAAS
AATF

$ cat GO-cell_cycle.mart_export.gene.txt | tail -n 3
ZWILCH
ZWINT
ZZZ3




(2) 比较这两个的差别
> amigo=readLines("E:\\research\\scPolyA-seq2\\GO-cell_cycle.gene.txt")
> length(unique(amigo))
[1] 976
> length(amigo)
[1] 976


竟然差异这么大！
> setdiff(biomart, amigo) |> length()
[1] 295
> setdiff(amigo, biomart) |> length()
[1] 605
> intersect(biomart, amigo) |> length()
[1] 371




(3) 比较 biomart R包和web版的结果差异
> biomartW=readLines("E:\\research\\scPolyA-seq2\\GO-cell_cycle.mart_export.gene.txt")
> length(biomartW)
[1] 1813
> length(biomartW |> unique()) #目前为止最大的集合
[1] 1813

> intersect(biomart, biomartW) |> length()
[1] 666

> intersect(amigo, biomartW) |> length() #基本重叠！
[1] 962
> setdiff(amigo, biomartW) |> length()
[1] 14
> setdiff(biomartW, amigo) |> length()
[1] 851







5. Gene Set Enrichment Analysis (GSEA)
https://www.gsea-msigdb.org/gsea/msigdb/cards/CELL_CYCLE_PHASE
没有完全一致的。













========================================
使用 pathcards 获取某个通路多的基因列表
----------------------------------------

https://pathcards.genecards.org/Card/cell_cycle?queryString=Cell%20Cycle

137 Genes in the Cell cycle SuperPath

CDK2	WEE1	TP53	CDK6	CCNB1	CDK4	CDKN1A	ATM	CDK1	CDK7	MDM2	MYC
CDKN1B	E2F3	ORC4	ORC5	CDC45	CCNE2	RB1	PCNA	GADD45A	CCND1	MCM3	CCNE1
CCND2	CCND3	CDC25A	MCM4	MCM5	MCM7	CDKN2A	CDKN2B	CDKN2C	CDKN1C	MCM2	CCNH
CDKN2D	CCNA1	E2F1	E2F2	MCM6	ORC1	ORC2	TFDP1	TFDP2	ORC3	ORC6	SMAD2
SMAD3	CDC25B	CCNA2	CHEK2	TGFB1	CHEK1	GSK3B	ATR	CDC7	EP300	HDAC2	CUL1
CDC25C	ABL1	HDAC1	PLK1	BUB1	TTK	YWHAB	MAD1L1	PKMYT1	PRKDC	YWHAG	RBX1
BUB3	RAD21	CDC14B	GADD45B	GADD45G	CCNB2	PTTG1	WEE2	TGFB3	YWHAQ	RBL1	CDC27
SFN	TGFB2	YWHAE	SKP1	YWHAZ	YWHAH	RBL2	ZBTB17	CDC16	CDC20	SMAD4	SKP2
SMC1A	ESPL1	E2F4	E2F5	STAG2	SMC1B	STAG1	CCNB3	CDC6	ANAPC1	ANAPC11	ANAPC10
MAD2L2	DBF4	ANAPC2	ANAPC4	FZR1	ANAPC5	ANAPC7	CDC14A	CDC23	SMC3	PTTG2	ANAPC13
CREB1	CREB3	RPA2	RPA1	RPA3	PRIM1	PRIM2	MNAT1	POLE2	MYT1	POLE	POLA2
CCNG2	CREB3L3	CREB3L4	CREB3L1	ATF6B


1. https://pathcards.genecards.org/
2. 输入通路名字 Wnt
3. https://pathcards.genecards.org/Card/wnt_pathway?queryString=wnt
64 Genes in the Wnt Pathway SuperPath
WNT3A	WNT7A	WNT1	WNT2	WNT5A	WNT7B	WNT3	FZD1	WNT16	WNT4	WNT6	WNT10B
WNT11	WNT2B	WNT9B	WNT10A	WNT5B	FZD4	FZD9	FZD7	LRP5	LRP6	FZD5	FZD2
FZD8	PORCN	WNT8A	WNT8B	WNT9A	CTNNB1	ATP6AP2	DKK1	IGFBP4	RYK	ROR2	RSPO1
CTHRC1	SOST	FZD10	WIF1	TMED5	VPS29	VPS35	WLS	SNX3	VPS26A	JUN	CSNK1A1
CSNK1E	GSK3B	PPP2CA	PPP2CB	MAPK8	MAPK9	FZD6	MAPK10	DVL1	DVL2	RHOA	DVL3
FZD3	NPHP3-ACAD11	LOC101929777	INVS

没有找到 APC 基因。

4. 查基因 APC 别名
Name/Gene ID	Description	Location	Aliases	MIM
Select item 324APC
ID: 324
APC regulator of WNT signaling pathway [Homo sapiens (human)]	Chromosome 5, NC_000005.10 (112707498..112846239)	BTPS2, DESMD, DP2, DP2.5, DP3, GS, PPP1R46	611731

还是没有。
那么，APC敲除的基因是什么意思呢？


5. 重新搜索 APC，然后在页面中 ctrl+F 找 wnt，发现这两个里面有 APC 基因
https://pathcards.genecards.org/Card/wnt_signaling?queryString=APC
250 Genes in the WNT Signaling SuperPath
APC	RHOA	ATF4	AXIN1	BCL9	BIRC5	BTRC	CBY1	GCFC2	CAMK2A	CAMK2B	CAMK2D
CAMK2G	CCND1	CDH1	CDH10	CDH11	CDH12	CDH13	CDH15	CDH16	CDH17	CDH18	CDH19
CDH2	CDH20	CDH22	CDH23	CDH24	CDH26	CDH3	CDH4	CDH5	CDH6	CDH7	CDH8
CDH9	CEBPB	CER1	CHUK	CLDN1	CREB1	CREB3	CREB3L4	CREBBP	CSNK1A1	CSNK1D	CSNK1E
CSNK1G1	CSNK1G2	CSNK1G3	CTNNA1	CTNNB1	DAAM1	DAAM2	DKK1	DKK2	DKK4	DVL1	ENC1
FOSL1	FRZB	FZD1	FZD10	FZD2	FZD3	FZD4	FZD5	FZD6	FZD7	FZD8	FZD9
GAST	GNA11	GNA12	GNA13	GNA14	GNA15	GNAI1	GNAI2	GNAI3	GNAL	GNAO1	GNAS
GNAT1	GNAT2	GNAZ	GNB1	GNB2	GNB3	GNB4	GNB5	GNG10	GNG11	GNG12	GNG13
GNG2	GNG3	GNG4	GNG5	GNG7	GNG8	GNGT1	GNGT2	GSK3B	HNF4A	JUN	KREMEN1
KREMEN2	LEF1	LRP5	LRP6	MAP2K4	MAP2K7	MAP3K1	MAP3K10	MAP3K11	MAP3K12	MAP3K13	MAP3K14
MAP3K2	MAP3K3	MAP3K4	MAP3K5	MAP3K6	MAP3K7	MAP3K8	MAP3K9	MAPK10	MAPK8	MAPK9	MMP7
MYC	NFAT5	NFATC1	NFATC2	NFATC3	NFATC4	NFE2L1	NRCAM	PSMD6	DCHS1	PLAUR	PLCB1
PLCB2	PLCB3	PLCB4	PLCD1	PLCD3	PLCD4	PLCE1	PLCG1	PLCG2	PLCZ1	PPARD	PPP3CA
PPP3CB	PPP3CC	PPP3R1	PPP3R2	PRKCA	PRKCB	PRKCD	PRKCE	PRKCG	PRKCH	PRKCI	PRKD1
PRKD3	PRKCQ	PRKCZ	PSMA1	PSMA2	PSMA3	PSMA4	PSMA5	PSMA6	PSMA7	PSMB1	PSMB10
PSMB2	PSMB3	PSMB4	PSMB5	PSMB6	PSMB7	PSMB8	PSMB9	PSMC1	PSMC2	PSMC3	PSMC4
PSMC5	PSMC6	PSMD1	PSMD2	PSMD3	PSMD4	PSMD5	PSMD7	PTGS2	PYGO1	PYGO2	RAC1
REST	ROCK2	SMARCA4	HNF1A	TCF12	TCF15	TCF19	HNF1B	TCF20	TCF21	TCF23	TCF3
TCF4	TCF7	TCF7L2	ZEB1	TEAD1	TEAD4	TFAM	TP53	UBB	UBC	UBD	UBE2D2
VIM	WIF1	WNT1	WNT10A	WNT10B	WNT11	WNT9A	WNT9B	WNT16	WNT2	WNT2B	WNT3
WNT3A	WNT4	WNT5A	WNT5B	WNT6	WNT7A	WNT7B	WNT8A	WNT8B	ZNF354A


https://pathcards.genecards.org/Card/signaling_by_wnt?queryString=APC
332 Genes in the Signaling by WNT SuperPath
FRAT1	PSME3	PSMD14	LOC102724334	TPTEP2-CSNK1E	KAT5	WIF1	H4C16	PSMB11	LEO1	H3C14	H2BC26
CREBBP	AMER1	PSMA8	CSNK1A1	CSNK1E	CSNK1G2	CSNK2A1	CSNK2A2	CSNK2B	CTBP1	CTNNB1	DVL1
DVL2	DVL3	EP300	AKT1	AKT2	DKK1	HECW1	PSME4	FRAT2	FZD2	H2BC1	CBY1
PYGO1	DKK4	DKK2	BCL9L	RSPO1	GSK3B	H2AC8	H2AC7	H2AX	H2AZ1	H2BC5	H2BC3
H3-3A	H3-3B	HDAC1	APC	XIAP	H3C15	RSPO2	RSPO4	LRP6	LRP5	MEN1	CCDC88C
MYC	H2AB1	SOST	LEF1	DACT1	WNT4	RNF43	PPP2CA	PPP2CB	PPP2R1A	PPP2R1B	PPP2R5A
PPP2R5B	PPP2R5C	PPP2R5D	PPP2R5E	LGR4	H4C15	SOX6	H2AJ	PSMA1	PSMA2	PSMA3	PSMA4
PSMA5	PSMA6	PSMA7	PSMB1	PSMB2	PSMB3	PSMB4	PSMB5	PSMB6	PSMB7	PSMB8	PSMB9
PSMB10	CTNNBIP1	PSMC1	PSMC2	PSMC3	PSMC4	PSMC5	PSMC6	PSMD1	PSMD2	PSMD3	PSMD4
PSMD5	PSMD7	PSMD8	PSMD9	PSMD10	PSMD11	PSMD12	PSMD13	PSME1	PSME2	CHD8	RBBP5
KLHL12	LGR6	BCL9	RPS27A	RYK	SFRP1	SFRP2	SOX17	SMURF2	H3C13	SMARCA4	SOX2
SOX3	SOX4	SOX9	SRY	TCF7	TCF7L2	TERT	TLE1	TLE2	TLE3	TLE4	H2AC19
UBA52	UBB	UBC	WNT1	WNT3	WNT5A	WNT8A	WNT8B	WNT9A	XPO1	YWHAZ	FZD5
KREMEN2	CDC73	SEM1	TNKS2	KMT2D	RNF146	H3-4	H4C9	TRRAP	AXIN1	AXIN2	FZD1
FZD4	FZD6	FZD8	H2AC14	H2AC6	H2AC4	H2AC18	H2AC20	H2BC8	H2BC13	H2BC15	H2BC14
H2BC7	TCF7L1	H2BC6	H2BC9	H2BC10	H2BC4	H2BC17	H2BC21	H3C1	H3C4	H3C3	H3C6
H3C11	H3C8	H3C12	H3C10	H3C2	H4C1	SOX7	H4C4	H4C6	H4C12	H4C11	H4C3
H4C8	H4C2	H4C5	H4C13	H4C14	PIP5K1B	KREMEN1	ZNRF3	CUL3	RSPO3	H2BC12	LGR5
CAV1	RUVBL1	RUNX3	TNKS	BTRC	H3C7	H2BC11	WNT3A	ASH2L	PYGO2	USP8	H2AZ2
PSMF1	SOX13	USP34	PSMD6	RBX1	GNB5	AP2M1	AP2S1	CLTA	CLTB	CLTC	PRICKLE1
CTBP2	AP2A1	AP2A2	AP2B1	TLE5	AGO3	AGO4	DAAM1	TNRC6B	PLCB1	SCRIB	AGO1
AGO2	TNRC6A	GNAO1	GNAT2	GNB1	GNB2	GNB3	GNG3	GNG4	GNG5	GNG7	GNG10
GNG11	GNGT1	GNGT2	ITPR1	ITPR2	ITPR3	KRAS	RHOA	ARRB2	MOV10	NFATC1	ROR1
ROR2	PARD6A	TMED5	WNT16	PDE6A	PDE6G	PDE6B	VPS29	NLK	GNG13	PFN1	PLCB2
PLCB3	GNG2	ZRANB1	PPP3CA	PPP3CB	PPP3R1	VPS35	PRKCA	PRKCB	PRKCG	PRKG1	PRKG2
GNG12	SMURF1	VANGL2	TNRC6C	RAC1	RAC2	RAC3	GNB4	PORCN	SKP1	MAP3K7	WNT2
WNT6	WNT7A	WNT7B	WNT10B	WNT11	WNT2B	WNT9B	FZD3	WLS	CALM1	WNT10A	CALM2
CALM3	WNT5B	CAMK2A	FZD7	CUL1	SNX3	GNG8	VPS26A
*Darkness represents the genes rank within the SuperPath, via the multiplicity of each gene in the constituent pathways.






附录: 如何查询一个基因与某个信号通路的相关系数
https://www.cn-healthcare.com/articlewm/20210110/content-1179315.html








========================================
GSVA - Gene Set Variation Analysis:  做差异通路分析 (R 包) Differential expression at pathway level
----------------------------------------
1. 简介
https://zhuanlan.zhihu.com/p/506912398

(1) GSVA: gene set variation analysis for microarray and RNA-seq data (BMC Bioinformatics. 2013)
https://pubmed.ncbi.nlm.nih.gov/23323831/

we introduce Gene Set Variation Analysis (GSVA), a GSE method that estimates variation of pathway activity over a sample population in an unsupervised manner. 

基因集变异分析（Gene Set Variation Analysis，GSVA）: 是一种非参数的无监督分析方法，主要用来评估芯片和转录组的基因集富集结果。
主要是通过将 基因 在不同样品间的表达量矩阵转化成 基因集 在样品间的表达量矩阵，从而来评估不同的代谢通路在不同样品间是否富集。

简单的说，输入以 基因 为行的表达矩阵和基因集数据库给GSVA，它就输出以 基因集名称 为行的变异分数矩阵。


GSVA starts by evaluating whether a gene i is highly or lowly expressed in sample j in the context of the sample population distribution.

可以是芯片杂交的信号代表的表达量，也可以是转录组测序定量。

For each gene expression profile xi={xi1,…,xin}, a non-parametric kernel estimation of its cumulative density function is performed.

We offer two approaches for turning the KS like random walk statistic into an enrichment statistic (ES) (also called GSVA score), the classical maximum deviation method and a normalized ES.

而且作者也在测试数据和真实数据把自己的GSVA算法跟GSEA，PLAGE, single sample GSEA (ssGSEA)或者其它算法进行了比较， 还在TCGA的ovarian serous cystadenocarcinoma (OV)癌症表达矩阵(n=588) ，用MSigDB数据库的 canonical gene sets (C2) 基因集做了比较和测试。

还比较了转录组测序数据和芯片数据，这些数据都提供了下载链接，最后作者把算法打包成了 Bioconductor package for R under the name GSVA at http://www.bioconductor.org.




(2) 原理

GSVA分析的主要思想是，在给定一个参考基因集合的情况下，将相应的基因表达矩阵进行标准化，然后根据基因表达矩阵中每个样本的表达水平，计算其相对于基因集合的得分。通常会采用一些特定的统计方法和辅助工具，例如SVD分解、GSEA和Z-score等，来计算基因集得分并进行可视化展示。

GSVA分析有许多应用场景，如生物标志物探索、疾病分类、信号通路调节的网络分析、药物筛选等。在实践中，可以结合实验设计、数据质量评估和生物学背景知识等因素，选取适当的基因集合，并根据不同的目的和需求，选择合适的算法和参数。

在R语言中，可以使用GSVA这个R包来进行基因集变异分析。下面是一个使用GSVA包的简单示例代码：




(3) 引用

非常多的文章都在引用该算法，比如：https://www.nature.com/articles/srep16238#f1 使用了 17个基因集
To study relative pathway activity on the level of individual samples, we used the GSVA package 25. Using a nonparametric approach, GSVA transforms a gene-by-sample gene expression matrix into a gene set–by-sample gene set enrichment matrix, facilitating the identification of differentially activated genesets for each sample. GSVA was performed on 17 gene sets related to hypoxia, vasculo- and angiogenesis (a detailed listing is provided in Supplementary Table 2) identified through the Molecular Signatures Database (MSigDB - www.broadinstitute.org/gsea/msigdb)39 and literature research. Next, empirical Bayes moderated t statistics40 were calculated and gene sets with FDR-q < 0.05 were considered to have significantly differential activity between samples with mutant and wild-type IDH-1/2 tumors. Of these gene sets, individual GSVA enrichment scores were plotted as a heatmap with the gplots package.






2. 运行 gsva
(1) 安装
https://www.bioconductor.org/packages/release/bioc/html/GSVA.html
if (!require("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install("GSVA")
# 1.46.0

BiocManager::install("fgsea") #不必须
# 读取 gmt 文件 1.24.0


(2) 参数简介
https://www.bioconductor.org/packages/release/bioc/vignettes/GSVA/inst/doc/GSVA.html

核心函数就是 gsva()，需要两个输入：the gene expression data and a collection of gene sets.

- 输入: 行对应基因，列对应样本; 
    要能反应基因表达情况，可以是 logTPM, 
- gset.idx.list:用于GSVA分析的基因集，如MSigDb的gmt格式注释文件;
    MSigDB数据库目前有H和C1-C8九个定义的基因集，下面示范下载包含KEGG信息的C2、与包含GO信息的C5基因集的两种方式——手动下载读取或msigdbr包下载提取。
    c2.all.v2023.2.Hs.symbols.gmt
    c5.all.v2023.2.Hs.symbols.gmt
- ssgsea: 当method为ssgesa时，默认值TRUE,在进行ssgsea分析的最后一步进行标准化;

- method 默认"gsva", 也可以选择其它3个模型：c("gsva", "ssgsea", "zscore", "plage")
    method="plage" (Tomfohr et al., 2005). Pathway level analysis of gene expression (PLAGE)
    method="zscore" (Lee et al., 2008). The combined z-score method a
    method="ssgsea" (Barbie et al., 2009). Single sample GSEA (ssGSEA) calculates a gene set enrichment score per sample

- 另外一个比较重要的参数是 mx.diff: Offers two approaches to calculate the enrichment statistic (ES) from the KS random walk statistic. 
    mx.diff=FALSE: ES is calculated as the maximum distance of the random walk from 0. 
    mx.diff=TRUE (默认): ES is calculated as the magnitude difference between the largest positive and negative random walk deviations.


# what does mx.diff mean?
es.max <- gsva(expr, geneSets, mx.diff=FALSE, verbose=T, parallel.sz=1)
es.dif <- gsva(expr, geneSets, mx.diff=TRUE, verbose=T, parallel.sz=1) #默认
# plot
par(mfrow=c(1,2), mar=c(4, 4, 4, 1))
plot(density(as.vector(es.max)), main="Maximum deviation from zero",
     xlab="GSVA score", lwd=2, las=1, xaxt="n", xlim=c(-0.75, 0.75), cex.axis=0.8)
axis(1, at=seq(-0.75, 0.75, by=0.25), labels=seq(-0.75, 0.75, by=0.25), cex.axis=0.8)
plot(density(as.vector(es.dif)), main="Difference between largest\npositive and negative deviations",
     xlab="GSVA score", lwd=2, las=1, xaxt="n", xlim=c(-0.75, 0.75), cex.axis=0.8)
axis(1, at=seq(-0.75, 0.75, by=0.25), labels=seq(-0.75, 0.75, by=0.25), cex.axis=0.8)
# 前者是二项式分布(双峰)，后者是高斯分布(单峰)





(3) 实例1
library(GSVA)

# 读入表达矩阵
#expr=read.csv("expr.csv",row.names = 1)
expr=log(gene.tpm + 1)

# 将格式从数据框转换成数值矩阵
expr=as.matrix(expr)
#读入需要计算得分的基因集（这里以hallmark为例）
geneSets <- GSEABase::getGmt("h.all.v7.5.1.symbols.gmt")


# 计算样本在每个基因集上的得分，采用默认参数
sampleScores <- gsva(expr, geneSets)

# 显示前五个样本中前十条通路的得分
sampleScores[1:10,1:5]


得到这样一个矩阵之后，其实我们可以把它当作一个基因表达矩阵来处理。我们可以做一些类似的下游分析，例如差异表达分析，绘制热图，火山图。如果有生存数据，我们甚至可以做生存分析，构建预后模型。因为从分析的角度来说，这里的每一行的基因集，跟我们传统意义上基因表达谱里面每一个基因，没有什么区别。







(4) 基因集的操作

i) 可以只关注3个主流通路数据库

library(GSEABase)
library(GSVAdata) 
data(c2BroadSets)
c2BroadSets
names(c2BroadSets)
canonicalC2BroadSets <- c2BroadSets[c(grep("^KEGG", names(c2BroadSets)),
                                      grep("^REACTOME", names(c2BroadSets)),
                                      grep("^BIOCARTA", names(c2BroadSets)))]
canonicalC2BroadSets # GeneSetCollection 类
> names(canonicalC2BroadSets) |> head()
[1] "KEGG_GLYCOLYSIS_GLUCONEOGENESIS"               "KEGG_CITRATE_CYCLE_TCA_CYCLE"                  "KEGG_PENTOSE_PHOSPHATE_PATHWAY"               
[4] "KEGG_PENTOSE_AND_GLUCURONATE_INTERCONVERSIONS" "KEGG_FRUCTOSE_AND_MANNOSE_METABOLISM"          "KEGG_GALACTOSE_METABOLISM"                    

> names(canonicalC2BroadSets) |> length()
[1] 833

# 报错 Error in .mapGeneSetsToFeatures(mapped.gset.idx.list, rownames(expr)) : 
#  No identifiers in the gene sets could be matched to the identifiers in the expression data.
# 经检查，区别是：
# unique identifiers: 55902, 2645, ..., 8544 (6744 total)
# unique identifiers: AHNAK, ALCAM, ..., IFITM5 (22091 total)
解决：矩阵的行名 和 基因集要统一使用 gene symbol 或 gene id;



ii) 还可以增加自己感兴趣的基因集
data(genderGenesEntrez)

MSY <- GeneSet(msYgenesEntrez, geneIdType=EntrezIdentifier(),
               collectionType=BroadCollection(category="c2"), setName="MSY")
MSY 
XiE <- GeneSet(XiEgenesEntrez, geneIdType=EntrezIdentifier(),
               collectionType=BroadCollection(category="c2"), setName="XiE")
XiE

canonicalC2BroadSets <- GeneSetCollection(c(canonicalC2BroadSets, MSY, XiE))
canonicalC2BroadSets



iii) 也可以去broad官网里面下载最新版gmt文件，然后读入到R语言

myC7 <- getGmt("c7.all.v5.1.entrez.gmt", geneIdType=EntrezIdentifier(), collectionType=BroadCollection(category="c7"), sep="\t")


这个时候需要详细了解 GSEABase 包的设计。

library(GSEABase)
library(GSVAdata) 
data(c2BroadSets)
c2BroadSets 
head(names(c2BroadSets))
c2BroadSets[[names(c2BroadSets)[1]]]
geneIds(c2BroadSets[[names(c2BroadSets)[1]]])
### 假设之前是其它ID
library(hgu95av2.db) 
getEG(geneIds(c2BroadSets[[names(c2BroadSets)[1]]]),"hgu95av2")












3. 实例2：limma 做差异通路分析

library(GSVA)

## (1)load expr----
expr=log(gene.tpm +1)
dim(expr)
head(expr)
# rm all 0 rows
expr=expr[rowSums(expr)>0, ]
dim(expr)

#将格式从数据框转换成数值矩阵
expr=as.matrix(expr)

## (2) load geneset----
#读入需要计算得分的基因集（这里以hallmark为例）
#geneSets <- GSEABase::getGmt("/home/wangjl/data/ref/MSigDB/h.all.v2023.2.Hs.symbols.gmt")
geneSets <- GSEABase::getGmt("/home/wangjl/data/ref/MSigDB/c2.all.v2023.2.Hs.symbols.gmt") #KEGG
#geneSets <- GSEABase::getGmt("/home/wangjl/data/ref/MSigDB/c5.all.v2023.2.Hs.symbols.gmt") #GO

# 也可以只关注3个主流通路数据库：
geneSets <- geneSets[c(grep("^KEGG", names(geneSets)),
                                      grep("^REACTOME", names(geneSets)),
                                      grep("^BIOCARTA", names(geneSets)))]
geneSets
names(geneSets)

## (3) gsva() ----
# 计算样本在每个基因集上的得分，采用默认参数
sampleScores <- gsva(expr=expr, 
                     gset.idx.list=geneSets,
                     method= "ssgsea", #"gsva", #c("gsva", "ssgsea", "zscore", "plage")
                     kcdf="Gaussian", #c("Gaussian", "Poisson", "none"),
                     min.sz=10,
                     max.sz=500,
                     parallel.sz=1L,
                     mx.diff=T, #default T
                     verbose=TRUE)
# 当method设置为gsva时，method 默认选项Gaussian (针对芯片表达矩阵，log CPMs, log RPKMs, log-TPM标准化后RNA-seq的表达矩阵)， 
# 可选 Poisson (针对未标准化的RNA-seq的count表达矩阵) 
dim(sampleScores)

# 显示前五个样本中前十条通路的得分
sampleScores[1:5, 1:3] #50 13


## (4). limma差异分析
得到GSVA评分的矩阵后，我们需要利用limma包进行pathway通路的差异分析，与之前介绍的基因差异分析流程类似，但不需要进行 limma-trend 或 voom的步骤
#### 进行limma差异处理 ####
##设定 实验组exp / 对照组ctr
group_list=c(rep("healthy",5), rep('AML',8))
group_list=factor(group_list, levels=c("healthy", "AML"));group_list

#BiocManager::install("limma")
library(limma)
gsva_mat = sampleScores
design <- model.matrix(~0+factor(group_list))
colnames(design) <- levels(factor(group_list))
rownames(design) <- colnames(gsva_mat)
contrast.matrix <- makeContrasts(contrasts=paste0('AML-healthy'),  #"exp/ctrl"
                                 levels = design)

fit1 <- lmFit(gsva_mat, design)               #拟合模型
fit2 <- contrasts.fit(fit1, contrast.matrix)  #统计检验
efit <- eBayes(fit2)                          #修正

summary(decideTests(efit, lfc=1, p.value=0.05)) #统计查看差异结果

tempOutput <- topTable(efit, coef=paste0('AML-healthy'), n=Inf)
degs <- na.omit(tempOutput) 
# write.csv(degs,"gsva_go_degs.results.csv")
head(degs)
#                                                                   logFC   AveExpr         t      P.Value   adj.P.Val        B
#REACTOME_GABA_SYNTHESIS_RELEASE_REUPTAKE_AND_DEGRADATION     -0.14255517 0.1226732 -7.567100 3.616811e-06 0.003006354 4.565810
#REACTOME_LISTERIA_MONOCYTOGENES_ENTRY_INTO_HOST_CELLS        -0.04909601 0.4443841 -7.400594 4.608176e-06 0.003006354 4.316662
#REACTOME_IRON_UPTAKE_AND_TRANSPORT                           -0.03553168 0.4216239 -7.295918 5.375826e-06 0.003006354 4.158139
...






4. 差异通路可视化：热图、火山图、发散条形图/柱形偏差图。一般还是左右柱形图
#### 对GSVA的差异分析结果进行热图可视化
##设置筛选阈值
padj_cutoff=0.05
log2FC_cutoff= log2(1) #log2(2)

(1) heatmap
library(pheatmap) #https://www.jianshu.com/p/1c55ea64ff3f
# anno columns
annotation_col <- data.frame(
  type = c(rep("healthy", 5), rep("AML", 4), rep("CBF", 4)),
  row.names = colnames(sampleScores)
)
# set colors
ann_colors = list(
  type = c('healthy'="#00b050", 'AML'="#edc201", 'CBF'="#ff8101")
)

# for heatmap, use log scale
degs$symbol=rownames(degs)
keep <- rownames(degs[degs$adj.P.Val < padj_cutoff & abs(degs$logFC)>log2FC_cutoff, ])
length(keep)
keep = degs[keep,] |> arrange( -abs(logFC) )  |> top_n(50) |> pull("symbol") #选取前50进行展示
dat <- gsva_mat[keep,] 
pheatmap::pheatmap(dat,
                   border_color = "white", 
                   #fontsize_row = 8, height = 10, width=18,
                   scale="row",
                   #cluster_cols = F,
                   annotation_col = annotation_col, #set anno for column
                   annotation_colors = ann_colors, #set colors
                   show_colnames = F,
                   show_rownames = T,
                   #filename = paste0('GSVA_go_heatmap.pdf'),
                   main="CD34+ primary cells in human",
                   clustering_method = "ward.D2") #聚类方法
#dev.off()






(2) Volcano
degs$significance  <- as.factor(ifelse(degs$adj.P.Val < padj_cutoff & abs(degs$logFC) > log2FC_cutoff,
                                       ifelse(degs$logFC > log2FC_cutoff ,'UP','DOWN'),'NOT'))
table(degs$significance)
# DOWN  NOT   UP 
# 250 1824   54 

this_title <- paste0(' Up :  ',nrow(degs[degs$significance =='UP',]) ,
                     '\n Down : ',nrow(degs[degs$significance =='DOWN',]),
                     '\n adj.P.Val <= ',padj_cutoff,
                     '\n FoldChange >= ',round(2^log2FC_cutoff,3))
this_title

g <- ggplot(data=degs, 
            aes(x=logFC, y=-log10(adj.P.Val),
                color=significance)) +
  #点和背景
  geom_point(alpha=0.4, size=1) +
  theme_classic()+ #无网格线
  #坐标轴
  xlab("log2 ( FoldChange )") + 
  ylab("-log10 ( adj.P.Val )") +
  #标题文本
  ggtitle( this_title ) +
  #分区颜色                   
  scale_colour_manual(values = c('blue','grey','red'))+ 
  #辅助线
  #geom_vline(xintercept = c(-log2FC_cutoff,log2FC_cutoff),lty=4,col="grey",lwd=0.8) +
  geom_hline(yintercept = -log10(padj_cutoff),lty=4,col="grey",lwd=0.8) +
  #图例标题间距等设置
  theme(plot.title = element_text(hjust = 0.5), 
        plot.margin=unit(c(2,2,2,2),'lines'), #上右下左
        legend.title = element_blank(),
        legend.position="right")
g
#ggsave(g,filename = 'GSVA_go_volcano_padj.pdf',width =8,height =7.5)





(3) 发散条形图/柱形偏差图
为了更好展示绘制发散条形图/柱形偏差图，此处用的是KEGG的gsva差异分析结果，展示通路的上下调及pvalue信息（也可以是t值或padj值等）
详细绘图过程见发散条形图/柱形偏差图 https://www.jianshu.com/p/cf23a9c6bb9c

#library(tidyverse)  # ggplot2 stringer dplyr tidyr readr purrr  tibble forcats
library(ggthemes)
library(ggprism)
library(stringr)

p_cutoff=0.001

# order
degs |> head()
degs = degs[order( -abs(degs$logFC) ),]

# get subset of KEGG
gsva_kegg_degs = degs[ grep("^KEGG_", rownames(degs), value=T), ]
# rm suffix
rownames(gsva_kegg_degs)= sub("KEGG_", "", rownames(gsva_kegg_degs))

degs2 <- gsva_kegg_degs  #载入gsva的差异分析结果
Diff <- rbind(subset(degs2,logFC>0)[1:20,], subset(degs2,logFC<0)[1:20,]) #选择上下调前20通路     
dat_plot <- data.frame(id  = row.names(Diff),
                       p   = Diff$P.Value,
                       lgfc= Diff$logFC)
dat_plot$group <- ifelse(dat_plot$lgfc>0 ,1,-1)    # 将上调设为组1，下调设为组-1
dat_plot$lg_p <- -log10(dat_plot$p)*dat_plot$group # 将上调-log10p设置为正，下调-log10p设置为负

dat_plot$id <- str_replace(dat_plot$id, "KEGG_","");dat_plot$id[1:10]
dat_plot$threshold <- factor(ifelse(abs(dat_plot$p) <= p_cutoff,
                                    ifelse(dat_plot$lgfc >0 ,'Up','Down'),'Not'),
                             levels=c('Up','Down','Not'))
table(dat_plot$threshold)
#Up Down  Not 
#4    8   28 

dat_plot <- dat_plot %>% arrange(lg_p)
dat_plot$id <- factor(dat_plot$id,levels = dat_plot$id)

## 设置不同标签数量
low1 <- dat_plot %>% filter(lg_p < log10(p_cutoff)) %>% nrow()
low0 <- dat_plot %>% filter(lg_p < 0) %>% nrow()
high0 <- dat_plot %>% filter(lg_p < -log10(p_cutoff)) %>% nrow()
high1 <- nrow(dat_plot)

p <- ggplot(data = dat_plot,aes(x = id, y = lg_p, 
                                fill = threshold)) +
  geom_col()+
  coord_flip() + 
  scale_fill_manual(values = c('Up'= '#36638a','Not'='#cccccc','Down'='#7bcd7b')) +
  geom_hline(yintercept = c(-log10(p_cutoff),log10(p_cutoff)),color = 'white',size = 0.5,lty='dashed') +
  xlab('') + 
  ylab('-log10(P.Value) of GSVA score') + 
  guides(fill="none")+
  theme_prism(border = F) + #不要边框
  theme(
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank(),
    axis.line.y = element_blank() #不要y轴
  ) +
  geom_text(data = dat_plot[1:low1,],aes(x = id,y = 0.1,label = id),
            hjust = 0,color = 'black') + #黑色标签
  geom_text(data = dat_plot[(low1 +1):low0,],aes(x = id,y = 0.1,label = id),
            hjust = 0,color = 'grey') + # 灰色标签
  geom_text(data = dat_plot[(low0 + 1):high0,],aes(x = id,y = -0.1,label = id),
            hjust = 1,color = 'grey') + # 灰色标签
  geom_text(data = dat_plot[(high0 +1):high1,],aes(x = id,y = -0.1,label = id),
            hjust = 1,color = 'black') # 黑色标签
p
#ggsave("GSVA_barplot_pvalue.pdf",p,width = 15,height  = 15)












ref:
简短版: https://zhuanlan.zhihu.com/p/641011329
https://mp.weixin.qq.com/s/3ovfx-KEvE_yc8buq0SaKQ
https://zhuanlan.zhihu.com/p/518145829?utm_id=0

https://www.bioconductor.org/packages/release/bioc/vignettes/GSVA/inst/doc/GSVA.html


========================================
|-- GSVA 计算样本的 regulon score(2024 Nature)
----------------------------------------
FOXO1 is a master regulator of memory programming in CAR T cells (Nature, 2024)
> https://pubmed.ncbi.nlm.nih.gov/38600391/
> Center for Cancer Cell Therapy, Stanford Cancer Institute, Stanford University School of Medicine, Stanford, CA, USA.
文献中Fig5.c,d中的FOXO1 regulon score是怎么算的

输入：
	表达矩阵
	基因集


1. 表达矩阵来自ref2
Fraietta, J. A. et al. Determinants of response and resistance to CD19 chimeric antigen receptor (CAR) T cell therapy of chronic lymphocytic leukemia. Nat. Med. 24, 563–571 (2018).
> https://pubmed.ncbi.nlm.nih.gov/29713085/
> Department of Pathology and Laboratory Medicine, University of Pennsylvania, Philadelphia, PA, USA.
> https://pubmed.ncbi.nlm.nih.gov/29713085/

https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6117613/
With regard to RNA- sequencing data, counts of sequencing reads are presented in the supplementary information. All associated raw data files have been submitted to the database of Genotypes and Phenotypes (dbGaP; accession numbers pending).


(2)
The gene signatures used were as follows: T cell differentiation15,44, T cell exhaustion45,46, T cell activation47–49, hypoxia50 and IL-6/STAT3 (ref. 51). For metabolic gene profiles, ‘CP:REACTOME: Reactome gene sets’ and ‘GO biological process sets’ were also selected: http://www.broadinstitute.org/gsea/msigdb/.

table.S5 是RNA-seq counts矩阵。


2. 基因集
根据文献Fig5.d 中FOXO1 regulon有40多个。
"PTPRO", "GIMAP7", "TNFSF13B", "KLF3", "GIMAP5", "SELL", "GPA33", "GP5", "JAK2", "CA6", "TNS1", "TLR6", "NT5E", "ACVR1", "KLF7", "SESN3", "CYP1B1", "FAM69A", "CYB561", "TRAT1", "TMEM181", "MAP1A", "ANK3", "CEP170", "CRYBG3", "MAP3K1", "SLC37A3", "AKT3", "FAM126A", "OXSM", "CCR4", "CHD7", "CBLL1", "MINA", "RUNX2", "CPOX", "RALB", "DIP2B", "REXO2", "SOCS2", "CDR2"



3. 代码实现
(1) 老版本 GSVA v.1.46.0
sampleScores <- gsva(expr=as.matrix(expr),
                     gset.idx.list=list("regulon"=geneSet),
                     method= "ssgsea", #"gsva", #c("gsva", "ssgsea", "zscore", "plage")
                     kcdf="Gaussian", #c("Gaussian", "Poisson", "none"),
                     min.sz=10,
                     max.sz=500,
                     parallel.sz=1L,
                     mx.diff=T,  #default T
                     verbose=TRUE)

(2) 新版本 v1.52.3
BiocManager::install("GSVA")

library(Seurat)
scObj=readRDS("D:\\code_R\\filtered_gene_bc_matrices\\pbmc3k.final.Rds")
DimPlot(scObj, label=T)

expr=scObj@assays$RNA@data
geneSet=c("PTPRO", "GIMAP7", "TNFSF13B", "KLF3", "GIMAP5", "SELL", "GPA33", "GP5", 
          "JAK2", "CA6", "TNS1", "TLR6", "NT5E", "ACVR1", "KLF7", "SESN3", "CYP1B1", 
          "FAM69A", "CYB561", "TRAT1", "TMEM181", "MAP1A", "ANK3", "CEP170", "CRYBG3", 
          "MAP3K1", "SLC37A3", "AKT3", "FAM126A", "OXSM", "CCR4", "CHD7", "CBLL1", 
          "MINA", "RUNX2", "CPOX", "RALB", "DIP2B", "REXO2", "SOCS2", "CDR2")
length(geneSet) #41
geneSet=intersect(geneSet, rownames(scObj))
length(geneSet) #41

# for v1.52.3
library(GSVA)
param=ssgseaParam(
  exprData=as.matrix(expr),
  geneSets=list("regulon"=geneSet),
  assay = NA_character_,
  annotation = NA_character_,
  minSize = 1,
  maxSize = Inf,
  alpha = 0.25,
  normalize = TRUE
)

## S4 method for signature 'ssgseaParam'
library(BiocParallel)
verbose=T
sampleScores=gsva(param, verbose = TRUE, BPPARAM = SerialParam(progressbar = verbose))
dim(sampleScores) #1 2700
# score end



使用 PBMC3k 画图demo:
# plot
dat=FetchData(scObj, vars = c("seurat_clusters", "CD3D", "CD3E", "CD3G", "CD274"))
head(dat)
dat=dat[colnames(sampleScores),]
dat$score=sampleScores[1,]
head(dat)
# plot
library(ggplot2)
ggplot(dat, aes(x=seurat_clusters, y=score, fill=seurat_clusters))+
  geom_violin(show.legend = F) +
  geom_jitter(size=0.5, show.legend = F)+
  theme_classic(base_size = 14)+
  labs(x="Sample type", y="Regulon score")
#





========================================
----------------------------------------




========================================
----------------------------------------

========================================
----------------------------------------

========================================
----------------------------------------





========================================
----------------------------------------

========================================
----------------------------------------

========================================
----------------------------------------


