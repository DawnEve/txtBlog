nextflow




========================================
Nextflow 生物信息流程
----------------------------------------

Nextflow是西班牙巴塞罗那的生物医学和基因组学研究中心CRG开发的开源workflow引擎。是基于Groovy语言的一种工作流框架，能够大大简化复杂计算流程的编排工作，支持部署在本地计算机、集群、云端，同时也支持与Conda、Docker、Singularity等结合使用将流程在不同的平台之间进行迁移。

Nextflow 支持几乎所有的批处理调度程序（集群管理系统），包括：
	Sun Grid Engine (SGE)
	Open grid engine
	Univa grid engine
	Platform LSF
	Linux SLURM
	PBS Works
	Torque
	HTCondor



1. 简介
(1) 安装
https://www.nextflow.io/
https://github.com/nextflow-io/nextflow
https://github.com/nextflow-io/nextflow/releases

https://blog.csdn.net/u011262253/category_10285121.html
纽约大学 https://learn.gencore.bio.nyu.edu/intro-to-nextflow/



Nextflow: Data-driven computational pipelines
Nextflow enables scalable and reproducible scientific workflows using software containers. 
	支持容器。
It allows the adaptation of pipelines written in the most common scripting languages.
	支持几乎任意脚本语言。
Its fluent DSL simplifies the implementation and the deployment of complex parallel and reactive workflows on clouds and clusters.
	在云和集群上，很容易并行。


(2) nextflow 管线主要内容
支持的脚本: R, Python, bash 等
依赖与环境：conda, docker, singlarity
版本控制: git, github, gitlab, bitbucket
运行时: aws, 
	grid engine; slurm;
	platform computing; kubernetes;



(3) 简单例子
$ bwa mem reference.fa sample.fq \
	| samtools sort -o sample.bam

改写后:

process align_samples{
	input:
		file 'reference.fa' from genome_ch
		file 'sample.fq' from reads_ch
	
	output:
		file 'sample.bam' into bam_ch
	
	script:
		"""
		bwa mem reference.fa sample.fq \
			| samtools sort -o sample.bam
		"""	
}

process index_sample{
	input:
		file 'sample.bam' from bam_ch 
	
	output:
		file 'sample.bam.bai' into bai_ch 
	
	script:
		"""
		samtools index sample.bam
		"""
}

(4) dataflow 
等待多个输入文件
通信通过FIFO队列：channels 频道
并行和任务依赖：隐式定义在 process 的输入和输出中。


(5) nextflow tower
管理很多任务。



(6) nextflow有专门的组学流程工具包，nfcore









2. 有一个（付费）在线会议：学习一下广告用语。

http://seqanswers.com/forums/showthread.php?t=101984
Online Workshop - Bioinformatics Pipeline Development with Nextflow (Nov 22-25, 2021)

How to manage your own data analysis pipelines using workflow management systems

When? November 22-25, 2021 9 am - 5 pm (CET)
Where? Online
Link? https://www.ecseq.com/workshops/work...ne-Course.html

Streamline your research through the development of reproducible analysis pipelines

In a nutshell
- Learn the fundamental best-practices of bioinformatic pipeline development
- Understand how workflow management systems can accelerate your research
- Use state-of-the-art, open source software to make complex analyses routine
- Perform your own custom analysis pipelines using Nextflow!


第一天：简介工作流
- Introduction to pipeline development and workflow management systems
- Introduction and overview:. Why build bioinformatic analysis pipelines at all?
- Workflow Management Systems:. What’s out there and how should I decide what to use? How do I think like an end-user?
- Where to find example pipelines, how to run them, and get a feel for what output to expect. Get familiar with the Linux command line.
- Considerations for different types of underlying computational infrastructure.
- Should my pipeline run locally, on a HPC or in the cloud? How do I make my work scalable?
- Setting up environmental dependencies and software containers. How do I make my work reproducible?
- Industry best-practices and optimising your work environment for software development.


第2-3天：使用Nextflow写工作流
- Nextflow for biological data analysis
- Understanding the concepts of dataflow: processes and channels, input and output
- Running a pipeline with Nextflow: work directory layout and process execution
- Language basics: Nextflow scripting and syntax
- Configuration options: parameters, scopes and profiles
- Execution abstraction: integrating with resource management software
- Workflow introspection: runtime metadata and handling errors
- Sharing your pipeline with online code repositories


第4天：建立自己的工作流
- Build your own analysis pipeline
- How to outline and approach a new project in pipeline development
- Getting started: building your pipeline from the ground up
- Write processes, define the workflow, add dependencies, run and test your pipeline!






ref: https://www.cnblogs.com/leezx/p/14768059.html




========================================
相关视频
----------------------------------------
1. aws 的 nextflow 使用教程(没有讲语法)：
https://www.bilibili.com/video/BV1Bv411K7dB/?spm_id_from=333.337.search-card.all.click&vd_source=826befc4ac0d0fa3b98deaa3efc7f800


生信自动化分析流程 nf-core 的离线运行（图文详解）
https://blog.csdn.net/u011262253/article/details/107370353


生信自动化流程搭建 06 | 指令
https://blog.csdn.net/u011262253/article/details/107919614



========================================
nextflow (依赖 Java11)
----------------------------------------
https://github.com/nf-core/


1. Ubuntu 安装 nextflow
https://www.nextflow.io/docs/latest/getstarted.html#requirements

(1) step1: jdk11
$ sudo apt install openjdk-17-jdk-headless  # version 17.0.7+7~us1-0ubuntu1~20.04

或下载安装

$ wget https://download.oracle.com/java/17/latest/jdk-17_linux-x64_bin.tar.gz
$ tar -vxf jdk-17_linux-x64_bin.tar.gz
$ mv jdk-17.0.7 ~/software/
$ cd ~/software/

添加到路径:
$ vim /etc/profile #所有用户
$ vim ~/.bashrc #仅对当前用户
# 添加三行
JAVA_HOME=/home/wangjl/software/jdk-17.0.7
PATH=$JAVA_HOME/bin:$PATH
export JAVA_HOME PATH


重新加载环境变量
$ source ~/.bashrc

验证安装效果
$ javac -version
javac 17.0.7
$ java -version
java version "17.0.7" 2023-04-18 LTS
Java(TM) SE Runtime Environment (build 17.0.7+8-LTS-224)
Java HotSpot(TM) 64-Bit Server VM (build 17.0.7+8-LTS-224, mixed mode, sharing)


官方推荐用 jdkman 安装
https://www.nextflow.io/docs/latest/getstarted.html#requirements


(2) 安装 nextflow 
$ curl -s https://get.nextflow.io | bash
...
CAPSULE: Downloading dependency org.pf4j:pf4j-update:jar:2.3.0
CAPSULE EXCEPTION: Error resolving dependencies. while processing attribute Allow-Snapshots: false (for stack trace, run with -Dcapsule.log=verbose)
Unable to initialize nextflow environment

再试几次，终于可以了：
      N E X T F L O W
      version 23.04.1 build 5866
      created 15-04-2023 06:51 UTC (14:51 CDT)
      cite doi:10.1038/nbt.3820
      http://nextflow.io


Nextflow installation completed. Please note:
- the executable file `nextflow` has been created in the folder: /home/wangjl/Downloads
- you may complete the installation by moving it to a directory in your $PATH


转移到路径:
$ mv nextflow ~/bin/

测试 
$ nextflow -v
nextflow version 23.04.1.5866

$ nextflow help
Usage: nextflow [options] COMMAND [arg...]
...





========================================
https://nf-co.re/ : nf-core
----------------------------------------
1. 项目简介
A community effort to collect a curated set of analysis pipelines built using Nextflow.

Nextflow is an incredibly powerful and flexible workflow language.

nf-core pipelines adhere to strict guidelines - if one works, they all will.

(2) 文章
https://doi.org/10.1038/s41587-020-0439-x

Correspondence | Published: 13 February 2020
Nature Biotechnology volume 38, pages276–278 (2020)
The nf-core framework for community-curated bioinformatics pipelines






2. 使用

(1)# Install nextflow
curl -s https://get.nextflow.io | bash
mv nextflow ~/bin/

(2)# Launch the RNAseq pipeline
nextflow run nf-core/rnaseq \
    --input samplesheet.csv \
    --genome GRCh37 \
    -profile docker

(3)# Install nf-core tools
pip install nf-core

# List all nf-core pipelines and show available updates
nf-core list









========================================
入门案例 hello world
----------------------------------------
$ nextflow -version
version 23.04.1 build 5866


1. 入门案例

(0) 只有 process 的不支持了
$ cat hello1.nf
process sayHello {
    echo true

    """
    echo 'Hello world!' > file
    """
}

$ nextflow run hello1.nf -dsl1
N E X T F L O W  ~  version 23.04.1
Nextflow DSL1 is no longer supported — Update your script to DSL2, or use Nextflow 22.10.x or earlier
提示：dsl1不再支持，使用 dsl2 吧。后者必须定义 workflow。



(1) 写nf文件
$ cat hello2.nf
process sayHello{
	input:
		val cheers
	output:
		stdout
	"""
	echo $cheers
	"""
}
workflow{
	channel.of('Ciao', 'Hello', 'Holo') | sayHello | view
}

运行:
$ nextflow run hello2.nf 
N E X T F L O W  ~  version 23.04.1
Launching `hello2.nf` [serene_moriondo] DSL2 - revision: c0adb9b00c
executor >  local (3)
[b3/1c0900] process > sayHello (2) [100%] 3 of 3 ✔
Holo

Ciao

Hello



(2) 官方教程
https://www.nextflow.io/docs/latest/getstarted.html

$ cat hello.nf 
params.str = 'Hello world!'

process splitLetters {
  output:
    path 'chunk_*'

  """
  printf '${params.str}' | split -b 6 - chunk_
  """
}

process convertToUpper {
  input:
    path x
  output:
    stdout

  """
  cat $x | tr '[a-z]' '[A-Z]'
  """
}

workflow {
  splitLetters | flatten | convertToUpper | view { it.trim() }
}

$ nextflow run hello.nf
N E X T F L O W  ~  version 23.04.1
Launching `hello.nf` [lonely_liskov] DSL2 - revision: e61bd183fe
executor >  local (3)
[69/9eb7a5] process > splitLetters       [100%] 1 of 1 ✔
[fa/a75b39] process > convertToUpper (1) [100%] 2 of 2 ✔
WORLD!
HELLO

解释:
This script defines two processes. 
该脚本定义了2个过程。

The first splits a string into 6-character chunks, writing each one to a file with the prefix chunk_,
第一个把字符串分成长度为6的块，分别写入前缀是 chunk_ 的文件中。

and the second receives these files and transforms their contents to uppercase letters. 
第二个接收这些文件，把其内容转为大写字母。

The resulting strings are emitted on the result channel and the final output is printed by the view operator.

第二步中的两个处理没有先后顺序。


控制台输出的前缀“69/9eb7a5”表示文件夹，具体位置是 $PWD/work

$ ls -lth $PWD/work/69/9eb7a5212a8bd42f1e0bbd3a57fea0/
total 8.0K
-rw-rw-r-- 1 wangjl wangjl 6 May 23 19:19 chunk_aa
-rw-rw-r-- 1 wangjl wangjl 6 May 23 19:19 chunk_ab

$ cat $PWD/work/69/9eb7a5212a8bd42f1e0bbd3a57fea0/chunk_aa
Hello




(3) 修改脚本，把大写字母改为颠倒字符串

只有修改的部分执行，其他不变的部分使用缓存。

$ echo "abcd" | rev
dcba

只修改命令：
process convertToUpper {
  input:
    path x
  output:
    stdout

  """
  rev $x
  """
}

运行时添加-resume参数：
$ nextflow run hello.nf -resume
N E X T F L O W  ~  version 23.04.1
Launching `hello.nf` [cheeky_panini] DSL2 - revision: 42dca16a3e
executor >  local (2)
[9a/6b56f1] process > splitLetters       [100%] 1 of 1, cached: 1 ✔
[ed/be428a] process > convertToUpper (2) [100%] 2 of 2 ✔
olleH
!dlrow

可以看到，第一步 splitLetters 跳过了，hash值一样，且后面注明是 cached.
建议定期清空该文件夹，以便节省磁盘空间。




(4) 命令行参数

$ nextflow run hello.nf --str 'this is a book'
N E X T F L O W  ~  version 23.04.1
Launching `hello.nf` [nostalgic_wescoff] DSL2 - revision: 42dca16a3e
executor >  local (4)
[13/af96c4] process > splitLetters       [100%] 1 of 1 ✔
[fe/52b4e6] process > convertToUpper (3) [100%] 3 of 3 ✔
i siht
ob a s
ko

可见，命令行参数--str 覆盖了nf脚本中 params.str 参数的默认值。
先截取为长度为6的字符串，然后前后反转。

注意：命令中的 --foo.bar 对应脚本中的 params.foo.bar 参数。






========================================
nextflow 基本概念 //todo
----------------------------------------

https://www.nextflow.io/docs/latest/basic.html

教程:
	汇总 https://nextflow.io/blog/2023/learn-nextflow-in-2023.html
	RNA 分析流程 https://github.com/seqeralabs/nextflow-tutorial

2. 解释
nextflow 代码分为2部分，process 和 workflow。

process 构成流程的基本单元，可以将process理解为流程图中的节点，而channel理解为流程图中的箭头。

process可以包括 
	directives, 
	input, 
	output, 
	when clause, 
	script|shell|exec 等五部分


process < name > {

   [ directives ]

   input:
    <input qualifier> <input name> [from <source channel>] [attributes]

   output:
    < process outputs >

   when:
    < condition >

   [script|shell|exec]:
   < user script to be executed >
}


1) input
定义了process从哪个channel接收数据。
①只能包含1个输入块，输入块中可以包含1或多个输入声明。
②输入限定符（qualifier）声明了待接收数据的类型，包括val, file, path, env, stdin, tuple, each等。
③直接影响产生的任务数量，process会逐项消耗channel中的数据，并依次产生新任务，直到数据被完全消耗。
Nextflow会为每个任务创建一个运行目录，存放相关的文件、日志、输出等。


2) output 
定义了哪些process结果数据传输到哪个channel。
①只能包含1个输出块，输出块中可以包含1或多个输出声明。
②输出限定符包括val, file, path, env, stdout, tuple等。


3)script 
以字符串的形式定义了需要执行的命令。
①只能包含1个脚本块，脚本块中可以包含1或多行字符串。
②字符串可以通过使用单或双引号定义，而多行字符串是由三个单或双引号定义。
除了直接定义，还可以通过关键字script,shell,exec实现更加灵活的定义。
③脚本块作为bash脚本运行。


4)directives（指令）
影响process执行的可选设置，如输出相关publishDir；
调度和资源相关 executor,queue, cpus, memory, time；
异常重试相关errorStrategy, maxErrors, maxRetries等。
例如：
	tag "${prefix}"
	cpus 8
	publishDir params.outdir, mode: 'copy'

说明：
tag：给每一个过程执行命名，方便在执行日志中查看
cpus：此过程运行时的CPU数量
publishDir：结果发布路径，运行完成后将最终的结果（由output定义）拷贝（'copy'）到该路径















========================================
配置文件
----------------------------------------
教程:
https://blog.csdn.net/u011262253/article/details/107919629
https://www.cnblogs.com/xiezh/p/16859336.html

包含变量引用的字符串必须用 双引号字符 而不是单引号字符包装。

配置注释
配置文件使用与Groovy或Java编程语言相同的注释约定。因此，用于//注释单行或/*… */注释多行中的块。






========================================
----------------------------------------





========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------





========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------





========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



