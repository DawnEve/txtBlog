NGS 可视化软降和流程 




生物信息学应该掌握的N张图
https://www.bilibili.com/video/av43587619




B站生信视频合集
https://github.com/EuniceMadya/KnowYourMajor_frontend_mobile/blob/59b6ce542909566bb797772c2960f657bbd979c2/data-processing/bilibili/profess/%E7%94%9F%E7%89%A9%E4%BF%A1%E6%81%AF%E5%AD%A6.txt






========================================
基因组浏览器 genome browser
----------------------------------------

1. 本地:
IGV 最常见
IGB 可以整个染色体进行连续缩放
UCSC 本地版 GBiB: http://genome.ucsc.edu/goldenpath/help/gbib.html
JBrowse 纯js开发: https://jbrowse.bio.nyu.edu/


2. web 版:
UCSC: http://genome.ucsc.edu/cgi-bin/hgGateway
washU: http://epigenomegateway.wustl.edu/browser/ 貌似只有在线版，配色优美


3. R语言版
Gviz包: http://www.bioconductor.org/packages/release/bioc/html/Gviz.html



========================================
|-- bam to bedGraph format using bedtools, 并UCSC genome browser 可视化峰图
----------------------------------------
1. bam to bedgraph
$ genomeCoverageBed -bg -ibam T-2.tr.bam -split > T-2.tr.bedgraph

用法 genomeCoverageBed [OPTIONS] [-i|-ibam] -g (iff. -i)

参数:
-bg	Report depth in BedGraph format. For details, see: http://genome.ucsc.edu/goldenPath/help/bedgraph.html
输出格式为 BedGraph

-bga	Report depth in BedGraph format, as above (i.e., -bg). However with this option, regions with zero coverage are also reported. This allows one to quickly extract all regions of a genome with 0 coverage by applying: “grep -w 0$” to the output.
同上，但是输出0覆盖度区域。这样可以在输出结果中快速找到0覆盖度的区域: grep -w 0$

-ibam	BAM file as input for coverage. Each BAM alignment in A added to the total coverage for the genome.
Use “stdin” or simply “-” if passing it with a UNIX pipe: For example: 
$ samtools view -b <BAM> | genomeCoverageBed -ibam stdin -g hg18.genome


-split	Treat “split” BAM or BED12 entries as distinct BED intervals when computing coverage. For BAM files, this uses the CIGAR “N” and “D” operations to infer the blocks for computing coverage. For BED12 files, this uses the BlockCount, BlockStarts, and BlockEnds fields (i.e., columns 10,11,12).

-strand	Calculate coverage of intervals from a specific strand. With BED files, requires at least 6 columns (strand is column 6).




(2) 测试 
$ genomeCoverageBed -bg -ibam /home/wangjl/data/apa/190517R/hg19/c16_ROW23_Aligned.sortedByCoord.out.bam -split > c16_Row23.bedgraph

$ head c16_Row23.bedgraph 
chr10	77571	77587	1
chr10	340538	340563	1
chr10	470287	470323	1

$ tail c16_Row23.bedgraph 
chrY	28491311	28491348	10
chrY	28491348	28491349	9
chrY	28491349	28491350	6
chrY	28596690	28596722	1

$ wc c16_Row23.bedgraph 
 303612 1214448 8088055 c16_Row23.bedgraph
#


怎么可视化呢？能放到 IGV 吗？IGV显示不正常。好像只能 UCSC genome browser.

表头加上20行输出
$ cat c16_Row23.bedgraph | awk '{ if($4>200) print $0}' |head -n 20

browser position chr10:98510617-98510659
browser hide all
browser pack refGene encodeRegions
browser full altGraph
track type=bedGraph name="BedGraph Format" description="BedGraph format" visibility=full color=200,100,0 altColor=0,100,200 priority=20
chr10	98510617	98510618	203
chr10	98510618	98510623	209
chr10	98510623	98510625	211
chr10	98510625	98510626	212
chr10	98510626	98510628	213
chr10	98510628	98510634	217
chr10	98510634	98510636	218
chr10	98510636	98510639	219
chr10	98510639	98510640	221
chr10	98510640	98510641	222
chr10	98510641	98510642	227
chr10	98510642	98510644	229
chr10	98510644	98510645	245
chr10	98510645	98510646	244
chr10	98510646	98510649	248
chr10	98510649	98510651	250
chr10	98510651	98510656	251
chr10	98510656	98510657	273
chr10	98510657	98510658	276
chr10	98510658	98510659	280


复制到第一个方框: https://genome.ucsc.edu/cgi-bin/hgCustom
点击右上角 submit。
新窗口选择 view in Genome Browser, 点击后面的 Go
即可看到峰图的样子。







2. 不知道出处 

$ bamCoverage --bam Your.bam -o Your.bw --normalizeUsing None







ref:
https://www.jianshu.com/p/0947e0f42515
https://bedtools.readthedocs.io/en/latest/content/tools/genomecov.html





========================================
Integrative Genomics Viewer (IGV)使用方法，及导入本地fa和gtf文件
----------------------------------------
IGV User Guide ： http://software.broadinstitute.org/software/igv/UserGuide


https://wikis.utexas.edu/display/bioiteam/Integrative+Genomics+Viewer+%28IGV%29+tutorial
https://genviz.org/module-01-intro/0001/05/01/GenomeBrowsingIGV/
	https://genviz.org/course/



1. IGV能干啥
目的：从gencode数据库下载基因注释文件，并且用IGV去查看你感兴趣的基因的结构，比如TP53,KRAS,EGFR等等。

基于Java的、可以桌面使用、命令行使用，交互式的可视化工具。
可视化reads覆盖情况: 
	基因敲除后基因组测序reads覆盖;
	不同exon区域RNAseq的覆盖情况
	AS/SNP/Indel可视化
	

它是一款本地的探索基因组数据的可视化浏览器，有多个系统版本，支持多种不同类型的输入格式，包括芯片测序、二代测序、基因组注释文件等。推荐使用BAM与SAM格式，主要格式见下表

数据来源	文件格式
序列比对	SAM/BAM
显示覆盖率	TDF
拷贝数	    SNP、CN
基因表达	GCT、RES
基因注释	GFF3/GTF、BED
突变数据	MUT
追踪参考基因组覆盖度、测序深度（UCSC）	WIG、BW


(2) 使用流程
启动IGV，导入参考基因组，导入注释文件/bam/tdf等，选择目标区域，设置参数，展示结果。


把测序数据fq用bwa mem、star等比对到参考基因组得到sam格式，最后用samtools转换格式sam to bam。
sort, index, 后放到IGV查看。

也可以使用bedtools等获取bam的区域子集文件，再放到IGV查看。





2. 安装和使用
(1)安装: 

IGV 官网http://software.broadinstitute.org/software/igv/download～ Broadinstitute出品
Java version8 下载： https://www.java.com/en/download/mac_download.jsp
IGV内置的物种基因组及基因组来源：http://software.broadinstitute.org/software/igv/Genomes
完整的官方帮助文档：http://software.broadinstitute.org/software/igv/book/export/html/6

Windows用户下载，解压后，点击igv.bat文件即可启动；

界面简介:
顶部栏: 左侧的基因组,接着染色体，基因或位置信息，最右侧放大倍数;
左侧: Fa文件栏,reads覆盖栏，Reads分布栏
底部: fasta 核酸序列, gtf注释



Or 使用 conda 安装 igvtools [十分不建议用 conda！]
$ conda install -c bioconda igvtools -y
Or 使用 pip 
$ pip3 install igvtools



(2)导入参考基因组
1)Genomes - load genoe fom file---选择上述生成的hg19.fa文件。

# 最好先用samtools 的faidx构建一个.fai索引文件
# for hg19 genome
cd ~/reference/genome/hg19
wget -c http://hgdownload.cse.ucsc.edu/goldenPath/hg19/bigZips/hg19.fa.gz
gunzip hg19.fa.gz && rm hg19.fa.gz
samtools faidx hg19.fa

# for hg38 genome
cd ~/reference/genome/hg38
wget -c http://hgdownload.cse.ucsc.edu/goldenPath/hg38/bigZips/hg38.fa.gz
gunzip hg38.fa.gz && rm hg38.fa.gz
samtools faidx hg38.fa

把fa和它的索引.fai放在本地，然后只需要通过Genomes=>Load Genome from File，导入FASTA文件





(3)导入gtf/gff注释文件
能导入系统自带的，也能从外部文件导入

wget ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_32/gencode.v32.annotation.gtf.gz
gunzip gencode.v32.annotation.gtf.gz

菜单IGV tools - sort gtf文件，
File => Load from file => 选择解压后、sort后的GTF文件，这是为了能看到基因的信息（IGV底部转录本信息）。
基因组和GTF都有了，就可以载入bam文件查看了


不过好像不能按照基因名查找，但是查看bam文件是绰绰有余了
//todo 如何能按照基因名查找呢？因为它只是个加入的track，如果能通过Genome菜单导入就好了，但是总是报错。


2) 自定义 gtf文件要满足的条件
向IGV导入gencode hg19 的 gtf文件
https://software.broadinstitute.org/software/igv/GFF
A General Feature Format (GFF) file is a simple tab-delimited text file for describing genomic features. There are several slightly but significantly different GFF file formats. IGV supports the GFF2, GFF3 and GTF file formats.

GTF files must have a .gtf file extension for IGV. 要有.gtf后缀.
See the Computational Genomics Laboratory web site (http://mblab.wustl.edu/GTF2.html) for a description of the GTF file format.




### 载入方式
1)打开IGV菜单Tools->igvtools, 
command中先选择Sort，input中输入gtf绝对路径(gencode.v30lift37.annotation.gtf)，鼠标单击外面，自动生成output file，点击run按钮，大约1min后生成.sorted.gtf文件；
然后使用command中的Index命令，input填写刚生成的gtf文件，点击run，1min后生成.idx文件。
2)然后点击菜单 File - load from file. 选择刚成成的sorted.gtf即可载入轨道。上下拖动到合适的位置。
3)右击左侧文件名，选择expanded，即可看到更多转录本的信息。

注意: 不能选这个 genome->Load genome from file， gencode.v30lift37.annotation.sorted.gtf，报错： Could not create index file: xx.gtf.fai 这个是针对hg19.fa文件的。



### IGV官方介绍怎么制作自己的参考文件：
http://software.broadinstitute.org/software/igv/NewGenomeMgmt
Creating a .genome File
1)Click Genomes>Create .genome File. IGV displays the a window where you enter the information.
2)填写一个名字geneCodeV30HG19，这个名字将会显示到IGV左上角。
填写hg19.fa文件路径，gene栏填写对应的gtf文件路径，点击创建，选择地址保存。
大概5min结束，能在硬盘上看到文件 geneCodeV30HG19.genome,54M.
3)IGV左上角下拉框，选择刚生成的genome即可。
但是，还是不行，loading Genome... 等了半天，没有报错，但是还是没载入。//todo2


Feature display name: To override the default setting for which field is used to label the features in the IGV track, add the following line to the file:
##displayName=<field name>

Coloring features: To specify a color for a given feature, you can add this to the file as shown in the following example. Color values can be in either hexadecimal or RGB (r, g, b) format.



(4) 导入你的bam文件
点击File - load from file - select bam file;
要求： 同文件夹下必须存在同前缀的.bam.bai文件;(可由 samtools index xx.sorted.bam 生成)


其他文件:如 TDF, vcf等
TDF: bam文件的简化版，可用来展示覆盖率情况，只包含密度信息;
TDF 可由 tools - igvtools 的count 处理bam得到.
	Count 支持的格式: sam,bam,bed等;
	toTDF: 转化 sorted文件，如 wig, gct, igv 等;
#


如果BAM文件太大，可以使用 igvtools 将BAM转为TDF文件再可视化：
$ igvtools count -z 5 -w 25 *.bam *.bam.tdf hg38

但是TDF文件只能反映基因组每个区域的测序深度，无法看到具体的比对情况，适合用来检查已经找到的Peak或者CNV。








3. 界面可视化部分细节调整
(1) 最底部的 fasta 和gtf轨道

track 默认是单行显示;
	蓝色粗线：外显子区域;
	细线：内含子区域;
	没有线: 基因间区.
右击，选择 Expanded 或 squished 可展开track，查看不同转录本的情况。

放大，可以看到fasta显示3个读码框，及对应的氨基酸，可以单击箭头改变方向，查看另外3个读码框。


(2) read 展示区
右击选择 color alignment by - Read strand, 
如果需要成对查看，可一并在右键菜单选择View as pairs.


## 正负链 reads
i)右击reads区，group alignment by - first in paired strand,
ii) Color alignment by - read strand;


## 还可以看 junction 区域。



(3) 如何保存当前视图？
菜单Fiel - save session，保存为 xx.xml即可。
下次打开这个session(File - open session)，即可查看到该视图。


(4) 如何在同一个页面展示多个基因？
菜单Region - region list, 可以搜索: cycle ，获得cell cycle gene list，
也可以左侧点击my lists，输入自己的基因列表，一个基因一行。
点底下的View即可看到。









4. IGV导出svg文件后期美化
(1) 右击reads，选择 change track color，可以修改coverage的颜色。

需要找到参考的文献图，一个取色工具(比如picPick)。

(2) 导出svg矢量图文件
File - save image, 记住：第二行选择svg格式。

(3) 找到该文件，用AI打开。
先调整画板大小，适合整个图形。

图形好像不完整，有很多黑色灰色的区域，好像是蒙版，单击del键删除或者双击del键删除。

ctrl+A全选，菜单对象，取消编组，再次执行取消编组。

然后开始选择del删除掉不需要的部分。只保留峰图、底下的基因结构图、顶上的一个基因标尺。

选中某一连起来的区域，右键选择 释放剪切蒙版，接着右键选择 编组。就可以整体移动了。
注意上下有对应关系，不能随便左右移动某一部分的位置，要保证只上下移动，需要按着shift键。
ctrl+R调出来标尺，辅助对齐。

使用钢笔工具连接剩余的2个标尺刻度，添加文字(比如1kb)，字体改为arial，移动到合适的位置。

把底部的基因结构图移动到最顶部。

量变的峰图左右两边的基线不想要怎么办？删掉，找到剪刀工具(快捷键C)，点击路径，然后选择工具V选择删除。

左边的track名字，自己添加文字即可。

最后调整画板到合适的大小。
保存为svg，方便后期修改。可以直接拖到chrome中查看svg图片。
或者导出为png、tiff等。





5. trouble shooting:
(1) Could not reserve enough space for xxxKB object heap;

如果显示空间不足，则可以使用Notepad++修改 igv.bat 文件 jar -Xmx 300m


(2)






###
# 替代品绘图：trackViewer软件包不但可以输出高品质的track图
# https://www.jianshu.com/p/fef9f8c19f22
BiocManager::install("trackViewer")
library("trackViewer")





ref:
美化svg https://www.bilibili.com/video/BV16J411s7Gf
https://software.broadinstitute.org/software/igv/LoadData







========================================
|-- igvtools 把 bam 转为 二进制.tdf/(文本 .wig) 格式
----------------------------------------
1. igvtools 可以用于 GUI 界面，还可以用作 命令行 工具
https://software.broadinstitute.org/software/igv/igvtools

(1) count
Computes average alignment or feature density for over a specified window size across the genome and outputs a binary tiled data .tdf file, text .wig file, or both depending on inputs.
Used to create a track that can be displayed in IGV, for example as a bar chart.
Supported input file formats: .aligned, .bam, .bed, .psl, .pslx, and .sam

(2) 命令行工具
https://software.broadinstitute.org/software/igv/igvtools_commandline

$ igvtools count -z 5 -w 25 -e 250 alignments.bam  alignments.cov.tdf  hg18

参数解释 
-z, --maxZoom num 放大倍数
	Specifies the maximum zoom level to precompute.

-w, --windowSize num 平均滑动窗口大小
	The window size over which coverage is averaged. Defaults to 25 bp.

-e, --extFactor num 计算count前read的延伸距离。
	The read or feature is extended by the specified distance in bp prior to counting. This option is useful for chip-seq and rna-seq applications. The value is generally set to the average fragment length of the library minus the average read length.


$ igvtools count -z 1 bam/test/cluster1.region.0.05.bam bam/test/cluster1.region.0.05.v0.tdf hg19
报错
Using system JDK.
Unrecognized option: --module-path=/home/wangjl/anaconda3/share/igvtools-2.5.3-0/lib
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.

差报错，说是 java 版本问题，https://github.com/igvteam/igv/issues/643




(3) 调试

$ igvtools --version
Using system JDK.
Unrecognized option: --module-path=/home/wangjl/anaconda3/share/igvtools-2.5.3-0/lib

$ which igvtools
/home/wangjl/anaconda3/bin/igvtools
该文件最后一句:
java -Djava.awt.headless=true --module-path="${DIR}/lib" -Xmx1500m --module=org.igv/org.broad.igv.tools.IgvTools "$@"


目前是 conda 的
$ which java
/home/wangjl/anaconda3/bin/java
$ java -version
openjdk version "1.8.0_152-release"


怎么使用系统的版本呢？
$ /usr/bin/java -version
openjdk version "11.0.15" 2022-04-19
OpenJDK Runtime Environment (build 11.0.15+10-Ubuntu-0ubuntu0.20.04.1)
OpenJDK 64-Bit Server VM (build 11.0.15+10-Ubuntu-0ubuntu0.20.04.1, mixed mode, sharing)


直接调用 java 语句
$ java -Xmx1500m --module-path=lib @igv.args --module=org.igv/org.broad.igv.tools.IgvTools [command] [options][arguments]



示例 igvtools count -z 5 -w 25 -e 250 alignments.bam  alignments.cov.tdf  hg18

正常了
$ /usr/bin/java -Djava.awt.headless=true -Xmx1500m --module-path=/home/wangjl/anaconda3/share/igvtools-2.5.3-0/lib @/home/wangjl/anaconda3/share/igvtools-2.5.3-0/igv.args --module=org.igv/org.broad.igv.tools.IgvTools count -z 1 -w 1 bam/test/cluster1.region.0.01.bam bam/test/cluster1.region.0.01.count.tdf hg19


(4) 再次运行 igvtools count
$ /usr/bin/java -Djava.awt.headless=true -Xmx1500m --module-path=/home/wangjl/anaconda3/share/igvtools-2.5.3-0/lib @/home/wangjl/anaconda3/share/igvtools-2.5.3-0/igv.args \
	--module=org.igv/org.broad.igv.tools.IgvTools count \
	-z 1 -w 1 bam/test/cluster1.region.0.05.bam bam/test/cluster1.region.0.05.count.tdf hg19


检查输出
$ ls -lth bam/test/
total 2.0M
-rw-rw-r-- 1 wangjl wangjl  13K May 27 11:15 cluster1.region.0.01.count.tdf
-rw-rw-r-- 1 wangjl wangjl  14K May 27 11:14 cluster1.region.0.05.count.tdf
-rw-rw-r-- 1 wangjl wangjl  13K May 27 11:10 cluster1.region.0.05.bam.tdf
-rw-rw-r-- 1 wangjl wangjl  33K May 27 10:25 cluster1.region.0.05t2.bw
-rw-rw-r-- 1 wangjl wangjl 8.6K May 27 10:24 cluster1.region.0.05t2.bedgraph
-rw-rw-r-- 1 wangjl wangjl  33K May 27 10:23 cluster1.region.0.01t2.bw


(5) 尝试输出 wig 文件，仅仅修改输出文件的后缀
$ /usr/bin/java -Djava.awt.headless=true -Xmx1500m --module-path=/home/wangjl/anaconda3/share/igvtools-2.5.3-0/lib @/home/wangjl/anaconda3/share/igvtools-2.5.3-0/igv.args \
	--module=org.igv/org.broad.igv.tools.IgvTools count \
	-z 1 -w 1 bam/test/cluster1.region.0.05.bam bam/test/cluster1.region.0.05.count.wig hg19

查看:
$ head bam/test/cluster1.region.0.05.count.wig
track type=wiggle_0
variableStep chrom=chr19 span=1
49469537	1.0
49469538	1.0
49469539	1.0
49469540	1.0

$ ls -lth bam/test/
total 2.1M
-rw-rw-r-- 1 wangjl wangjl 6.1K May 27 15:30 cluster1.region.0.05.count.wig
-rw-rw-r-- 1 wangjl wangjl  14K May 27 11:14 cluster1.region.0.05.count.tdf
-rw-rw-r-- 1 wangjl wangjl  13K May 27 11:10 cluster1.region.0.05.bam.tdf



(6) wig to bigWig
https://genome.ucsc.edu/goldenPath/help/bigWig.html


创建chrom.sizes文件 
$ wget http://hgdownload.soe.ucsc.edu/admin/exe/linux.x86_64/fetchChromSizes
$ chmod +x fetchChromSizes
$ fetchChromSizes hg19 > ref/hg19.chrom.sizes
$ sed 's/^chr//' ref/hg19.chrom.sizes > ref/hg19.chrom.noChr.sizes

转换为 bigWig 文件 
$ wget http://hgdownload.soe.ucsc.edu/admin/exe/linux.x86_64/wigToBigWig
$ chmod +x wigToBigWig

## wigToBigWig input.wig hg19.chrom.sizes BigWig.bw
$ wigToBigWig bam/test/cluster1.region.0.05.count.wig ref/hg19.chrom.sizes bam/test/cluster1.region.0.05.count.bw
$ wigToBigWig bam/test/cluster1.region.0.05.count.wig ref/hg19.chrom.noChr.sizes bam/test/cluster1.region.0.05.count.noChr.bw
报错: chromosome chr19 is not in chrom sizes file


检查：
$ ls -lth bam/test/
total 2.1M
-rw-rw-r-- 1 wangjl wangjl  33K May 27 16:13 cluster1.region.0.05.count.bw
-rw-rw-r-- 1 wangjl wangjl 6.1K May 27 15:30 cluster1.region.0.05.count.wig
-rw-rw-r-- 1 wangjl wangjl  12K May 27 15:18 cluster1.region.0.01e0.bw

-rw-rw-r-- 1 wangjl wangjl  85K May 26 22:29 cluster1.region.0.05.bam

这个似乎有点大，其他bw都是12k左右，这个是 33k。原始bam是 85k。

















========================================
|-- igv.js 网页展示 单细胞亚群的 bam 文件 (github: scIGV)
----------------------------------------
更多信息见 repo: https://github.com/DawnEve/scIGV


1. 官方链接

(1) 工具
https://igv.org/ 官网提供了
2个工具
	IGV: IGV desktop application
	IGV Web App: IGV in a web browser
	Juicebox Web: Hi-C contact map viewer
2个开发者工具
	igv.js: Use igv.js to embed an interactive genome visualization component in your web app.
	igv-reports: Generate self-contained HTML reports that consist of a table of genomic sites and associated IGV views for each site.

(2) 源码
https://github.com/igvteam
https://github.com/igvteam/igv.js
https://github.com/igvteam/igv.js/wiki







2. 准备一批bam文件: BMMC data on 10x website
(1) 总的大 bam 
$ samtools view -h /data/rawdata/bmmmc/HealthyControl_1/frozen_bmmc_healthy_donor1_possorted_genome_bam.bam| less #是 hg19，凑合用吧

D000684:453:HJ7VJBCXX:1:2214:13656:49037        272     1       10002   1       98M     *       0       0       AACCCTTATCCTATCCCTAACCCTATCCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAACCCTAA      <<...<.....<...<<<<<.GA<..<A<<<..AG<..AGA<<...<<.<.GGAA.IGGGGAGGGA<<GGGGG<AGG<AGIIIGIIIGGAGG<GGGAG      NH:i:3  HI:i:3  AS:i:88 nM:i:4  NM:i:4  CR:Z:CCCAACACGCTAAC     CQ:Z:GGA<AGAAAGGGGG     CB:Z:CCCAACACGCTAAC-1   UR:Z:CGCTG      UQ:Z:GGAAA      UB:Z:CGCTG      BC:Z:CCTGCGGT   QT:Z:AGGAGIIG


(2) 细胞分群
$ ls -lth /data/rawdata/bmmmc/HealthyControl_1/filtered_matrices_mex/hg19/

$ port=20220
$ docker run -it -d -p ${port}:8787 --name R4 \
--mount type=bind,source=/data/,target=/docker/jinwf/ \
dawneve/seurat:4.1.0a

> table(scObj$seurat_clusters)
  0   1   2   3   4   5   6   7   8   9 
832 197 170 151 131 128 123 113  95  23

就看 3-B 和 1-NK 之间的差异。




(3) 怎么取 bam 的子集?
$ 先取某一个染色体
CRB10  chr7:50,655,765-50,863,150

$ samtools --version
samtools 1.9-69-gb217a91
Using htslib 1.9-149-gf5b75ff
Copyright (C) 2019 Genome Research Ltd.

$ cd /home/wangjl/data/BMMC/demo/bams/
$ samtools view -b -h -@ 20 /data/rawdata/bmmmc/HealthyControl_1/frozen_bmmc_healthy_donor1_possorted_genome_bam.bam 7 > BMMC_donor1_chr7.bam

-rw-r--r-- 1 wangjl jinwf 667M May 20 21:39 BMMC_donor1_chr7.bam

$ samtools view BMMC_donor1_chr7.bam | less


$ samtools view --help
Usage: samtools view [options] <in.bam>|<in.sam>|<in.cram> [region ...]
  -b       output BAM
  -h       include header in SAM output
  -o FILE  output file name [stdout]
  -@, --threads INT



==> 官网启发:https://www.htslib.org/doc/samtools-view.html
Only keep reads with tag BC and were the barcode matches the barcodes listed in the barcode file.
samtools view -D BC:barcodes.txt -o /data_folder/data.barcodes.bam /data_folder/data.bam


$ samtools view -@ 50 -D CB:../cluster/BMMC_cluster1.cid.txt -o BMMC_donor1_cluster1.bam /data/rawdata/bmmmc/HealthyControl_1/frozen_bmmc_healthy_donor1_possorted_genome_bam.bam

$ samtools view -@ 100 -D CB:../cluster/BMMC_cluster3.cid.txt -o BMMC_donor1_cluster3.bam /data/rawdata/bmmmc/HealthyControl_1/frozen_bmmc_healthy_donor1_possorted_genome_bam.bam


查看
$ ls -lth
-rw-r--r-- 1 wangjl jinwf 642M May 20 22:23 BMMC_donor1_cluster3.bam
-rw-r--r-- 1 wangjl jinwf 834M May 20 22:23 BMMC_donor1_cluster1.bam

$ samtools view BMMC_donor1_cluster3.bam | wc
8834119 232587633 4893945243
$ samtools view BMMC_donor1_cluster1.bam | wc
11442753 301335347 6282407628



index 
$ samtools index -@ 10 BMMC_donor1_cluster3.bam
$ samtools index -@ 10 BMMC_donor1_cluster1.bam




(4) 发送到Yi工作站
$ cd /home/wangjl/data/BMMC/demo/
$ scp bams/* wangjl@y.biomooc.com:/home/wangjl/data/project/scIGV/bam/




(5) 太慢了，接着抽样 [抽样不解决根本问题；需要服务器支持 range, 加载会特别快]
$ cd /home/wangjl/data/project/scIGV/bam/
$ mkdir down

$ samtools view -s 0.05 -b -@ 50 BMMC_donor1_cluster3.bam > down/BMMC_donor1_cluster3.down0.05.bam
$ samtools view -s 0.05 -b -@ 50 BMMC_donor1_cluster1.bam > down/BMMC_donor1_cluster1.down0.05.bam

$ samtools index down/BMMC_donor1_cluster3.down0.05.bam
$ samtools index down/BMMC_donor1_cluster1.down0.05.bam




筛选基因: 高表达，不是DEG，去掉 RPS/RPL 基因，去掉 MT 染色体;
not like: FTH1,UBA52, CXCR4, EEF1B2, 
like APA: FTL, EEF1D, BTG1, TSC22D3, NFKBIA, UBB, DDX5, 








3. 实例: 需要放到静态服务器环境打开
(1) 下载到本地
$ wget https://igv.org/web/release/2.12.2/dist/igv.min.js

参数列表: https://github.com/igvteam/igv.js/wiki


$ pwd
/home/wangjl/data/project/scIGV

$ ls -lth
total 20K
drwxrwxr-x 2 wangjl wangjl 4.0K May 20 23:47 bam #放的bam文件
-rw-rw-r-- 1 wangjl wangjl 1.5K May 20 16:38 index2.html
-rw-rw-r-- 1 wangjl wangjl 1.1K May 20 15:59 index1.html
-rw-rw-r-- 1 wangjl wangjl   27 May 20 15:44 ReadMe.txt
drwxrwxr-x 3 wangjl wangjl 4.0K May 20 15:17 js  #js 库文件




(2) index1.html
<script src="https://igv.org/web/release/2.0.1/dist/igv.min.js"></script>

<body>
  <div id='igv-div'></div>
</body>

<script>
//我们可以通过fastaURL和indexURL以及track内的URL和indexURL来自定义fasta文件和bam文件。
var igvDiv = document.getElementById("igv-div");

//设置
var options = {
	genome: "hg19",
	//fastaURL:'http://127.0.0.1:8089/igv.js_test/chr22.fasta',
	//indexURL:'http://127.0.0.1:8089/igv.js_test/chr22.fasta.fai',
	//locus: "chr8:128,747,267-128,754,546",
	locus: 'chr12:6,644,962-6,648,055',
	tracks: [{
	  type: 'alignment',
	  format: 'bam',
	  //url: 'https://data.broadinstitute.org/igvdata/1KG/b37/data/HG02450/alignment/HG02450.mapped.ILLUMINA.bwa.ACB.low_coverage.20120522.bam',
	  //name: 'HG02450'
	  url: "normalHeLa.sort.bam", //'http://127.0.0.1:8089/igv.js_test/chr22.bam',
	  indexURL: "normalHeLa.sort.bam.bai",  //'http://127.0.0.1:8089/igv.js_test/chr22.bam.bai',
	  name:'chr12',

	}]
};

//启动
igv.createBrowser(igvDiv, options)
	.then(function (browser) {
	  console.log("Created IGV browser");
	})
</script>







(2) 测试 index1_2.html: 使用本地 bam 文件，本地fasta参考基因组

demo: view-source:https://igv.org/web/release/2.12.6/examples/cram-vcf.html
缺点：fasta 刷新就重新载入，没有缓存，导致每次刷新都要等很久！

		 reference: {
			"id": "hg19",
			"name": "Human (GRCh37/hg19)",
			"fastaURL": "https://s3.amazonaws.com/igv.broadinstitute.org/genomes/seq/hg19/hg19.fasta",
			"indexURL": "https://s3.amazonaws.com/igv.broadinstitute.org/genomes/seq/hg19/hg19.fasta.fai",
			"cytobandURL": "https://s3.amazonaws.com/igv.broadinstitute.org/genomes/seq/hg19/cytoBand.txt",
			"aliasURL": "https://s3.amazonaws.com/igv.org.genomes/hg19/hg19_alias.tab",
			"tracks": [
			  {
				"name": "Refseq Genes",
				"format": "refgene",
				"id": "hg19_genes",
				"url": "https://s3.amazonaws.com/igv.org.genomes/hg19/ncbiRefSeq.sorted.txt.gz",
				"indexURL": "https://s3.amazonaws.com/igv.org.genomes/hg19/ncbiRefSeq.sorted.txt.gz.tbi",
				"visibilityWindow": -1,
				"supportsWholeGenome": false,
				"removable": false,
				"order": 1000000,
				"infoURL": "https://www.ncbi.nlm.nih.gov/gene/?term=$$"
			  }
			],
			"chromosomeOrder": "chr1, chr2, chr3, chr4, chr5, chr6, chr7, chr8, chr9, chr10, chr11, chr12, chr13, chr14, chr15, chr16, chr17, chr18, chr19, chr20, chr21, chr22, chrX, chrY"
		  },


		tracks: [
		    // 设置轨道信息
			{
				"name": "Cluster1_NK",
				"url": "bam/down/BMMC_donor1_cluster1.down0.05.bam",
				"indexURL": "bam/down/BMMC_donor1_cluster1.down0.05.bam.bai",
				"format": "bam",
				
				"color": "purple", //set colors
			}
		]


下载到本地
$ cd /home/wangjl/data/project/scIGV
$ mkdir ref
$ mkdir ref/hg19/ && cd ref/hg19/
$ wget xxxx
几个下载

$ pwd
/home/wangjl/data/project/scIGV/ref/hg19
$ tree
.
├── cytoBand.txt
├── hg19_alias.tab
├── hg19.fasta
├── hg19.fasta.fai
├── ncbiRefSeq.sorted.txt.gz
└── ncbiRefSeq.sorted.txt.gz.tbi

$ ls -lth
total 3.0G
-rw-rw-r-- 1 wangjl wangjl  12K Apr 22  2021 hg19_alias.tab
-rw-rw-r-- 1 wangjl wangjl 125K Aug 19  2020 ncbiRefSeq.sorted.txt.gz.tbi
-rw-rw-r-- 1 wangjl wangjl 4.1M Aug 19  2020 ncbiRefSeq.sorted.txt.gz
-rw-rw-r-- 1 wangjl wangjl  32K Aug 29  2014 cytoBand.txt
-rw-rw-r-- 1 wangjl wangjl 3.5K Dec  7  2013 hg19.fasta.fai
-rw-rw-r-- 1 wangjl wangjl 3.0G Dec  7  2013 hg19.fasta



	var hg19_local={
			"id": "hg19",
			"name": "Human (GRCh37/hg19)",
			"fastaURL": "ref/hg19/hg19.fasta",
			"indexURL": "ref/hg19/hg19.fasta.fai",
			"cytobandURL": "ref/hg19/cytoBand.txt",
			"aliasURL": "ref/hg19/hg19_alias.tab",
			"tracks": [
			  {
				"name": "Refseq Genes",
				"format": "refgene",
				"id": "hg19_genes",
				"url": "ref/hg19/ncbiRefSeq.sorted.txt.gz",
				"indexURL": "ref/hg19/ncbiRefSeq.sorted.txt.gz.tbi",
				"visibilityWindow": -1,
				"supportsWholeGenome": false,
				"removable": false,
				"order": 1000000,
				"infoURL": "https://www.ncbi.nlm.nih.gov/gene/?term=$$"
			  }
			],
			"chromosomeOrder": "chr1, chr2, chr3, chr4, chr5, chr6, chr7, chr8, chr9, chr10, chr11, chr12, chr13, chr14, chr15, chr16, chr17, chr18, chr19, chr20, chr21, chr22, chrX, chrY"
		  }








(3) 测试 index2.html: 尝试只显示 coverage，不显示 alignment。标记不同颜色。
height: 总高度,
coverageTrackHeight: coverage 高度,
alignmentRowHeight: alignment 每一行的高度,

tracks: [
		    // 设置轨道信息
			{
				"name": "Cluster1_NK",
				"url": "bam/down/BMMC_donor1_cluster1.down0.05.bam",
				"indexURL": "bam/down/BMMC_donor1_cluster1.down0.05.bam.bai",
				"format": "bam",
				"type": "alignment", //"annotation",
				
				"color": "red", //set colors

				showAlignments: false,

				height:150, //默认总高度 300
				coverageTrackHeight:150, //默认覆盖度高度 50
				alignmentRowHeight:0, //比对的reads的高度，一条默认是 14
				
			},
...

$ cd /home/wangjl/test/
$ git clone https://github.com/igvteam/igv.js.git
$ cd igv.js/
$ ls -lth
total 64K
drwxrwxr-x  6 wangjl wangjl 4.0K May 22 12:30 test
drwxrwxr-x 23 wangjl wangjl 4.0K May 22 12:30 js
...
$ find . | grep "js$" | xargs grep -i -n "alignment" --color=auto 2>/dev/null






(4) 测试 index4.html: 不同源 数据中心，设置 ref 的高度和颜色
$ wget https://s3.amazonaws.com/igv.broadinstitute.org/genomes/seq/hg19/hg19.fasta

数据中心需要支持 range 和 CORS: 推荐使用 https://github.com/BioMooc/DaisyHttp
参考基因组的高度和颜色需要单独的 reference 对象: 详情见下文例子。



<meta charset=utf8>
<span>
help: https://github.com/igvteam/igv.js/wiki 
| 
test4: using data center by Flask(https://github.com/BioMooc/DaisyHttp); Set reference height;
</span>

<script src="js/igv.min.js"></script>
<div id="igv-div"></div>

<script>
	var igvDiv = document.getElementById("igv-div");

var i=2; //放大倍数， height 的系数

    var options =
	{
		//genome: "hg38",

		//重点显示的位置
		//"locus": "chr1:246,766,637-246,768,733", 
		"locus": "chr7:50,585,360-50,601,271",
		
		reference:{
			"id": "hg38",
			
			"name": "Human (GRCh38/hg38)",
			"fastaURL": "https://s3.amazonaws.com/igv.broadinstitute.org/genomes/seq/hg38/hg38.fa",
			"indexURL": "https://s3.amazonaws.com/igv.broadinstitute.org/genomes/seq/hg38/hg38.fa.fai",
			"cytobandURL": "https://s3.amazonaws.com/igv.org.genomes/hg38/annotations/cytoBandIdeo.txt.gz",
			"aliasURL": "https://s3.amazonaws.com/igv.org.genomes/hg38/hg38_alias.tab",
			"tracks": [
				{
					"name": "Refseq Genes",
					
					"height":200, // height of reference
					color:"red",  // color of this track
					displayMode: ["COLLAPSED", "SQUISHED", "EXPANDED"][2], //是否折叠显示基因模型
					
					"format": "refgene",
					"url": "https://s3.amazonaws.com/igv.org.genomes/hg38/ncbiRefSeq.txt.gz",
					"indexURL": "https://s3.amazonaws.com/igv.org.genomes/hg38/ncbiRefSeq.txt.gz.tbi",
					"visibilityWindow": -1,
					"supportsWholeGenome": false,
					"removable": false,
					"order": 1000000,
					"infoURL": "https://www.ncbi.nlm.nih.gov/gene/?term=$$"
				}
			],
			"chromosomeOrder": "chr1, chr2, chr3, chr4, chr5, chr6, chr7, chr8, chr9, chr10, chr11, chr12, chr13, chr14, chr15, chr16, chr17, chr18, chr19, chr20, chr21, chr22, chrX, chrY"
		},
		
		tracks: [			
			{
				"name": "raw_bam-N5_c1",
				"url": "http://192.168.2.120:8001/file/data/bams/N5_NH_CB_list_filtered_c1.bam",
				"indexURL": "http://192.168.2.120:8001/file/data/bams/N5_NH_CB_list_filtered_c1.bam.bai",
				"format": "bam",
				"type": "alignment", //"annotation",
				"color": "#00AF51", //set colors: green
				showAlignments: false,
				height:45*i,
				coverageTrackHeight:30*i,
				alignmentRowHeight:0, 
			},

			{
				"name": "raw_bam-N5_c5",
				"url": "http://192.168.2.120:8001/file/data/bams/N5_NH_CB_list_filtered_c5.bam",
				"indexURL": "http://192.168.2.120:8001/file/data/bams/N5_NH_CB_list_filtered_c5.bam.bai",
				"format": "bam",
				"type": "alignment", //"annotation",
				"color": "blue",
				showAlignments: false,
				height:45*i,
				coverageTrackHeight:30*i,
				alignmentRowHeight:0, 
			},

		]
	};

	igv.createBrowser(igvDiv, options)
		.then(function (browser) {
			console.log("Created IGV browser");	
		})
</script>







(6) 测试 index5.html: 使用 js 批量拼凑 tracks 信息
<meta charset=utf8>
<span>
help: https://github.com/igvteam/igv.js/wiki 
| 
test5: multiple bams, Cluster 0-9, add using js;
</span>

<script src="js/igv.min.js"></script>
<div id="igv-div"></div>

<script>
//1. settings
    var options =
	{
		genome: "hg19",
		//locus: "chr8:144,661,785-144,662,802",
		locus: "chr19:49,468,234-49,471,806",
		
		tracks: []
	};


var colors=["#A80000", 
	"#DC143C","#0000FF","#20B2AA","#FFA500","#9370DB","#98FB98","#F08080","#1E90FF","#7CFC00","#FFFF00",
	"#808000","#FF00FF","#FA8072","#7B68EE","#9400D3","#800080","#A0522D","#D2B48C","#D2691E","#87CEEB",
	"#40E0D0","#5F9EA0"]

for(var i=0; i<=9; i++){
	console.log("adding track",i);
	var oTrack={
		"name": "Cluster"+i,
		"url": "bam/BMMC_donor1_cluster"+i+".bam",
		"indexURL": "bam/BMMC_donor1_cluster"+i+".bam.bai",
		"format": "bam",
		"type": "alignment",

		"color": colors[i], //set colors: red

		showAlignments: false,

		height:50, //total height: default 300
		coverageTrackHeight:40, //coverage height: default 50
		alignmentRowHeight:0, //height of reads, default 14 per reads;
	}
	options.tracks.push(oTrack);
}


//2. run IGV 
	var igvDiv = document.getElementById("igv-div");
	igv.createBrowser(igvDiv, options)
		.then(function (browser) {
			console.log("Created IGV browser");	
		})
</script>







(7) 测试 index6.html: 加入 url 参数

这个 igv web app 打不开(可能是墙)，不过可以参考其参数列表:
https://igv.org/app/?genome=hg19&locus=myc&file=https%3A%2F%2F1000genomes.s3.amazonaws.com%2Fphase3%2Fdata%2FHG01879%2Fexome_alignment%2FHG01879.mapped.ILLUMINA.bwa.ACB.exome.20120522.bam














3.当然，如果我们想要使用vcf文件也可以，只需要修改tracks的内容，接收vcf文件就可以了，tracks的内容修改如下：
我没试出效果，留待以后再说。

/*
type: "variant",
format: "vcf",
url: "https://s3.amazonaws.com/1000genomes/release/20130502/ALL.chr22.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz",
indexURL: "https://s3.amazonaws.com/1000genomes/release/20130502/ALL.chr22.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz.tbi",
name: "1KG variants (chr22)",
squishedCallHeight: 1,
expandedCallHeight: 4,
displayMode: "squished",
visibilityWindow: 1000
*/





ref:
0. IGV官方项目 
基于nodeJS的 https://github.com/igvteam/igv-webapp
纯js https://github.com/igvteam/igv.js

1.使用igv.js插件在浏览器中展示基因组
https://blog.csdn.net/qq_35696312/article/details/84587553
2.一个基于igv.js实现的python脚本，实现简单的网页版IGV
https://blog.csdn.net/u012110870/article/details/109571112





========================================
|-- gtf文件结合 Gviz R包进行可视化 //todo
----------------------------------------
使用refGenome加上dplyr玩转gtf文件
原创： 生信技能树  生信技能树  2018-12-05


详情见 R/R32-visual-pkgs










========================================
|-- IGV track color list //todo
----------------------------------------
1. 三色组合
(1) https://www.jianshu.com/p/486f75b9d90f

绿色: #00AF51
蓝色: #0165B7
棕红: #A80000


(2) https://www.jianshu.com/p/0384e8cd1d3c
蓝 #008FFF
粉红 #FF2C86
荧光绿 #09F703



2. 四色组合
红 #FF0000
青 #24D0C7
黄 #FFC05F
重蓝: #250787






========================================
biodalliance 的基因组浏览器
----------------------------------------

<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>

    <h2>Demo</h2>
	<div id="svgHolder"></div>
	
	
    <script language='javascript' src='//www.biodalliance.org/release-0.13/dalliance-compiled.js'></script>
        <script language='javascript'>
  new Browser({
    chr:          '22',
    viewStart:    30700000,
    viewEnd:      30900000,

    coordSystem: {
      speciesName: 'Human',
      taxon: 9606,
      auth: 'GRCh',
      version: '37',
      ucscName: 'hg19'
    },

    sources:     [{name:                 'Genome',
                   twoBitURI:            '//www.biodalliance.org/datasets/hg19.2bit',
                   tier_type:            'sequence'},
                  {name:                 'Genes',
                   desc:                 'Gene structures from GENCODE 19',
                   bwgURI:               '//www.biodalliance.org/datasets/gencode.bb',
                   stylesheet_uri:       '//www.biodalliance.org/stylesheets/gencode.xml',
                   collapseSuperGroups:  true,
                   trixURI:              '//www.biodalliance.org/datasets/geneIndex.ix'},
                  {name:                 'Repeats',
                   desc:                 'Repeat annotation from Ensembl',
                   bwgURI:               '//www.biodalliance.org/datasets/repeats.bb',
                   stylesheet_uri:       '//www.biodalliance.org/stylesheets/bb-repeats.xml'},
                  {name:                 'Repeats xxxxx',
                   desc:                 'Repeats xxxxx', 
                   bwgURI:            'https://jinwlab.sustech.edu.cn/gencode.bb',  //加载自己数据，需要支持cors+https
                   noDownsample:         true}],

  });
</script>








========================================
JBrowse 纯js基因组浏览器 //todo
----------------------------------------
1. 简介
JBrowse is a fast, scalable genome browser built completely with JavaScript and HTML5. It can run on your desktop, or be embedded in your website.
https://jbrowse.org/jb2/

https://learn.gencore.bio.nyu.edu/jbrowse-visualizing-data-quickly-easily/

要点
Uploading a dataset
How to manipulate the dataset visualization
Some features
Sharing URLs


(1) 1.0 源码 
https://github.com/GMOD/jbrowse  主要是 js + perl
Full-featured and stable genome browser built with JavaScript and HTML5.


https://github.com/gmod/jbrowse-components
Monorepo with JBrowse 2 web, JBrowse 2 desktop, the JB core package, and core plugins. To customize behaviors, write an in-house plugin.





(2) 2.0 版本
JBrowse 2: a modular genome browser with views of synteny and structural variation
https://genomebiology.biomedcentral.com/articles/10.1186/s13059-023-02914-z

https://github.com/GMOD/jb2profile



(2B) R 接口
JBrowseR: JBrowse 2 genome browser 的R接口: https://pubmed.ncbi.nlm.nih.gov/34196689/
The browser can be deployed from the R console, or embedded in Shiny applications or R Markdown documents.
https://github.com/GMOD/JBrowseR/
https://gmod.github.io/JBrowseR/

使用实例: http://www.bioailab.com:3838/scAPAatlas/





2. 安装与使用

需要提前在服务器上配置好Apache服务 https://www.jianshu.com/p/272f7c7a90f1
lampp 服务器 https://zhuanlan.zhihu.com/p/116005246

















========================================
安装本地版的 doker UCSC gene browser: //todo
----------------------------------------
UCSC-browser学习：创建自己的track hubs: https://www.jianshu.com/p/486f75b9d90f
http://genome-asia.ucsc.edu/goldenPath/help/mirror.html







========================================
绘制seqlogo图
----------------------------------------
利用ggseqlogo https://blog.csdn.net/kMD8d5R/article/details/79554875
R包: http://www.bioconductor.org/packages/release/bioc/html/seqLogo.html


web tool: http://www.cbs.dtu.dk/biotools/Seq2Logo/
http://www.sohu.com/a/288877744_777125




paper: http://genome.cshlp.org/content/14/6/1188.full.
docs: http://weblogo.berkeley.edu/
中文实例： http://www.dxy.cn/bbs/topic/11662491?from=recommend

发现motif需要的软件： http://homer.ucsd.edu/homer/introduction/install.html




========================================
|-- MEME 查找motif
----------------------------------------

1.安装
http://meme-suite.org/doc/download.html


(1).下载
$ wget http://meme-suite.org/meme-software/5.0.5/meme-5.0.5.tar.gz
$ axel -n 10 http://meme-suite.org/meme-software/Databases/motifs/motif_databases.12.18.tgz
$ axel -n 10 http://meme-suite.org/meme-software/Databases/gomo/gomo_databases.3.2.tgz
$ axel -n 10 http://meme-suite.org/meme-software/Databases/cismapper/cismapper_databases.1.tgz


(2).安装
http://meme-suite.org/doc/install.html?man_type=web
MEME套装包含几个命令行工具，和一个可选的web服务。web需要  批处理器 batch scheduler: SGE and PBS

tar zxf meme-5.0.5.tar.gz
cd meme-5.0.5
./configure --prefix=$HOME/meme --with-url=http://meme-suite.org/ --enable-build-libxml2 --enable-build-libxslt
make
make test
make install


(3). 添加路径
edit ~/.bashrc to add the following line:
$ export PATH=$HOME/meme/bin:$PATH 

以上只安装了命令行工具。
输出的html文件中有指向官网的链接。
The --enable-build-libxml2 --enable-build-libxslt flags use the bundled versions of libxml2, libxslt and libexslt. You can omit these flags and use the system installed copies but ensure that they are compatible as otherwise linker errors will occur.
如果报错，可能是缺少必须的软件： http://meme-suite.org/doc/install.html?man_type=web#prerequisite

$ source ~/.bashrc
$ meme -version
5.0.5



(4)安装motif数据库
1)下载 见上文url
2)解压缩 tar xzf motif_databases.X.tgz #X是版本号
$ tar xzf motif_databases.12.18.tgz 

3)
默认的数据库目录在 安装目录/db/fasta_databases
mv motif_databases ~/meme/db/motif_databases





2. 运行 Starting meme
$ meme c12_ROW03.40ntUP.fasta -dna -oc . -nostatus -time 18000 -mod zoops -nmotifs 3 -minw 6 -maxw 50 -objfun classic -revcomp -markov_order 0

参数意义：
[-oc <output dir>]	输出文件夹 name of directory for output files, will replace existing directory
[-nostatus]		不要在终端输出进度 do not print progress reports to terminal
[-time <t>]		quit before <t> CPU seconds consumed
[-mod oops|zoops|anr]	distribution of motifs
[-nmotifs <nmotifs>]	最多找几个？ maximum number of motifs to find
[-minw <minw>]		最小宽度 minimum motif width
[-maxw <maxw>]		最大宽度 maximum motif width
[-objfun classic|de|se|cd|ce]	objective function (default: classic)
[-revcomp]		allow sites on + or - DNA strands
[-markov_order <order>]	最多使用几个马尔科夫模型？(maximum) order of Markov model to use or create

$ cd /home/wangjl/data/apa/190610APA/03_fasta
$ meme c12_ROW03.40ntUP.fasta -dna -oc ./meme -mod zoops -nmotifs 3 -minw 6 -maxw 20 -objfun classic -revcomp -markov_order 0




报错： Can't locate XML/Parser/Expat.pm in @INC (you may need to install the XML::Parser::Expat module) 
可能需要root运行
# cpan -i XML::Parser::Expat




$ meme 60_pas.fasta -dna -oc ./meme -mod zoops -nmotifs 6 -minw 6 -maxw 10 -objfun classic -markov_order 0

ZOOPS (zero or one occurence per sequence)计数







========================================
|-- HOMER 查找motif (Software for motif discovery and next-sequencing analysis)
----------------------------------------
http://homer.ucsd.edu/homer/


实例:

输入61nt的fasta文件。
$ findMotifs.pl 60_pas.fasta fasta homer_output/ -len 6,7,8,9,10 -p 20  #19:56-21:40
# 查找长度为6,7,8,9,10 的motif，使用20个线程




$ findMotifsGenome.pl H3K4Me3.bed hg19 H3K4Me3_motif/ -len 8,10,12
参数解释: https://www.jianshu.com/p/9a31f5f01e7b
# peak文件：ChIP-Seq_H3K4Me3_1_homer.bed
# 基因组版本：hg19, hg38
# 输出路径：ChIP-Seq_H3K4Me3_1_motifDir
# motif长度：-len 8,10,12 
# motif的软件默认长度为8，10，12






1. HOMER (v4.10, 5-16-2018) 使用Perl和C++写的。
Software for motif discovery and next generation sequencing analysis

HOMER (Hypergeometric Optimization of Motif EnRichment) is a suite of tools for Motif Discovery and next-gen sequencing analysis.  It is a collection of command line programs for unix-style operating systems written in Perl and C++. HOMER was primarily written as a de novo motif discovery algorithm and is well suited for finding 8-20 bp motifs in large scale genomics data.  HOMER contains many useful tools for analyzing ChIP-Seq, GRO-Seq, RNA-Seq, DNase-Seq, Hi-C and numerous other types of functional genomics sequencing data sets.


2. 安装
http://homer.ucsd.edu/homer/introduction/install.html

前置安装，需要sudo安装 
gcc
g++
make
perl
zip/unzip
gzip/gunzip
wget

需要NGS工具: 
samtools
R (with Bioconductor packages DESeq2, edgeR)
HOMER no longer requires ghostscript and weblogo

(1) 下载页
http://homer.ucsd.edu/homer/download.html
$ mkdir homer
$ cd homer
$ wget http://homer.ucsd.edu/homer/configureHomer.pl
$ perl configureHomer.pl -install

Software Installed.  If not done so already, add the homer programs to your executable path.
Add this line to your .bash_profile or .bashrc file (or other depending on your shell):
$ vim ~/.bashrc
export PATH=$PATH:/home/wangjl/data/software/homer/.//bin/
$ source ~/.bashrc

Simply typing "findMotifs.pl" should work before running Homer.


更新 perl configureHomer.pl -update
改变目录 perl configureHomer.pl -install homer (this is good for forcing the software to reinstall - preferred if you think there is something wrong) 



(2) 常用的配置命令
perl /path-to-homer/configureHomer.pl [options]

我们看下这些options都有哪些：

-list 列出可用的包
-install 安装homer需要用到的数据包
-version 安装homer包时，可以指定包版本
-remove 移除包
-update 更新所有包到最新版本
-reinstall 强制重新安装所有已经安装过的包
-all 安装所有包
-getFacts (add humor to HOMER - to remove delete contents of data/misc/)
-check 检查第三方软件：samtools, DESeq2, edgeR
-make 重新配置和编译可执行文件
-sun SunOS系统，使用gmake 和 gtar代替make 和 tar
-keepScript 不更新configureHomer.pl
-url 安装时，使用的资源地址，默认：http://homer.ucsd.edu/homer/
 Hubs & BigWig settings (with read existing settings from config.txt if upgrading):
-bigWigUrl  (Setting for makeBigWigs.pl)
-bigWigDir  (Setting for makeBigWigs.pl)
-hubsUrl  (Setting for makeMultiWigHub.pl)
-hubsDir  (Setting for makeMultiWigHub.pl)
 Configuration files: 下载 update.txt，更新config.txt


(3) 下载数据包
$ pwd  # /home/wangjl/data/software/homer

查询可用的包列表
$ perl configureHomer.pl -list


下载hg19的人类基因组
$ perl configureHomer.pl -install hg19    (to download the hg19 version of the human genome)



HOMER Known Motifs - Genome-wide predictions and UCSC Track
Human hg19 UCSC BigBed Track 170917 (load as a custom track) - [primary BED file]
http://homer.ucsd.edu/homer/data/motifs/homer.KnownMotifs.hg19.170917.bigBed.track.txt
http://homer.ucsd.edu/homer/data/motifs/homer.KnownMotifs.hg19.170917.bed.gz




3. 运行 Running findMotifs.pl with FASTA files:
(1)找到的语句和用途
1)
语法 
findMotifs.pl <targetSequences.fa> fasta <output directory> -fasta <background.fa> [options]
第二个参数必须是物种, 不一定要和fasta文件匹配，甚至可以就是一个简单的占位符"fasta"。

$ findMotifs.pl chuckNorrisGenes.fa human analysis_output/ -fasta normalHumanGenes.fa

还有其他参数控制motif查找。 findMotifs.pl 将会进行GC标准化，默认是自动标准化。 
$ findMotifs.pl lpsInducedGenes.pl mouse LPSMotifResults/ -start -400 -end 100 -len 8,10 -p 4 
## This will search for motifs of length 8 and 10 from -400 to +100 relative to the TSS, using 4 threads (i.e. 4 CPUs)
# 更多参数： http://homer.ucsd.edu/homer/microarray/index.html



2)
RNA Motif Analysis
http://homer.ucsd.edu/homer/motif/rnaMotifs.html
$ findMotifs.pl mir1-downregulated.genes.txt human-mRNA MotifOutput/ -rna -len 8



(2) 输入bed文件
$ findMotifsGenome.pl ChIP-Seq_H3K4Me3_1_homer.bed hg19 ChIP-Seq_H3K4Me3_1_motifDir/ -len 8,10,12
# 参数解释
-输入文件：awk处理好的Homer Peak/Positions file
-参考基因组：这里是hg19
-输出文件：给一个路径和输出文件的名字
-len：motif大小设置，默认8,10,12；越大需要的计算资源越多

上述命令（找motif）每一样品需要运行30-40分钟后，得到文件夹ChIP-Seq_H3K4Me3_1_motifDir,文件夹会有一个网页结果。

常用参数：
-bg：自定义背景序列；
-size: 用于motif寻找得片段大小，默认200bp；-size given 设置片段大小为目标序列长度；越大需要得计算资源越多；
-len：motif大小设置，默认8,10,12；越大需要得计算资源越多；
-S：结果输出多少motifs, 默认25；
-mis：motif错配碱基数，默认2bp；
-norevopp：不进行反义链搜索motif；
-nomotif：关闭重投预测motif；
-rna: 输出RNA motif，使用RNA motif数据库；
-h：使用超几何检验代替二项式分布；
-N：用于motif寻找得背景序列数目，default=max(50k, 2x input)；耗内存参数


2)使用 annotatePeaks.pl 对peaks进行注释
annotatePeaks.pl <Homer Peak/Positions file> <genome>  1>output.peakAnn.xls 2>output.annLog.txt 

使用实例：注释ChIP-Seq_H3K4Me3_1_homer.bed的 peaks 使用命令：
$ annotatePeaks.pl ChIP-Seq_H3K4Me3_1_homer.bed hg19 1>ChIP-Seq_H3K4Me3_1_peakAnn.xls 2>$ChIP-Seq_H3K4Me3_1_annLog.txt 









4.HOMER Motif 分析基本步骤和结果分析
Homer主要被用于 ChIP-Seq 分析，但是核酸序列motif寻找问题都可以尝试使用。


(1)预处理
一  提取序列
提供的数据是基因组位置信息，就需要提取对应的DNA信息；提供基因号时，需要选择启动子区域。对应着就是我们前面用awk 处理bed文件，最后得到要求的那四列。
	第一列: 染色体
	第二列: 起始位置
	第三列: 终止位置
	第四列: 链的方向(+/- or 0/1, where 0="+", 1="-")
 二  背景选择
未指定背景序列时，HOMER 会自动选择。（上面chipseq处理的时候就没有指定背景序列）
对基因组某些区域进行分析时，从基因组随机选择GC含量一致的序列作为背景序列。
对启动子进行分析时，除用来分析外的所有启动子将被作为背景。
自定义背景使用参数-bg
 三  GC 标准化
目标序列（对应着上面的就是Homer Peak/Positions file）和背景序列会基于GC含量按5%作为bin 查看GC含量的分布。背景序列会得到权值，从而使得其GC含量分布与目标序列一致。
ChIP-Seq 实验得到序列GC含量。
 四  自动标准化
需要分析的序列除了GC含量会带来误差，其他的生物学现象，外显子中密码子偏好性或测序实验中偏好性都会影响分析。对于足够强的偏差，HOMER 会自动追踪目标序列和背景中显著差异的特征序列，并通过调整背景序列的权重来平衡输入数据和背景中短寡聚核酸序列不平衡。
短寡聚核酸序列长度可以通过参数-nlen <#>指定。





(2)重头预测Motifs
默认情况下，HOMER 调用homer2 进行motif 分析；通过参数"-homer1" 可以指定老版本工具。

一  将输入序列解析为寡聚核苷酸序列
将输入序列按照motif 长度期望值解析为寡聚核苷酸序列，以及创建Oligo 数据表。Oligo 数据表中记录着每条oligo 在目标序列和背景中被发现的次数。

二  Oligo 自动标准化

三  全局搜索阶段
Oligo 表格信息构建好之后，HOMER 对富集的Oligo 进行全局搜索。如果一个Motif是富集的，那么属于这个Motif的Oligo 也应该会富集。首先，HOMER 会搜索可能富集的Oligo 。HOMER 允许错配 。
使用参数-mis <#> 调节允许的错配数目

四  Mask and Repeat
当最优oligo被优化成motif后，motif 对应的序列从要分析的数据中移除，接下来再分析最优的…..直到 25(默认值，"-S <#>")个motifs 被发现。
比如，我们这里处理chipseq时的情况

五   计算已知Motifs是否富集
3.5.1 导入Motif库
为了搜索输入数据中已知Motifs ，HOMER 可以输入已知Motifs 数据，可以使用HOMER 默认的 ("data/knownTFs/known.motifs")，也可以是自己构建("-mknown") 。

3.5.2 筛选每一个Motif
对于每个motif，HOMER 计算丰度（包含motif的序列/background sequences）， ZOOPS (zero or one occurence per sequence)计数以及使用超几何检验或二项式计算显著性。

















========================================
|-- homer 查找bam中的峰，bedtools merge 合并重叠的峰
----------------------------------------
1. 根据比对好的 bam ，找峰的位置
(1) makeTagDirectory
比对基因组得到bam文件之后，首先用通过makeTagDirectory这个命令，生成一个文件夹，用法如下

makeTagDirectory out_dir align.bam
输出目录文件如下

├── chr1.tags.tsv
├── chr2.tags.tsv
├── chr3.tags.tsv
...
├── chrY.tags.tsv
├── tagAutocorrelation.txt
├── tagCountDistribution.txt
├── tagInfo.txt
└── tagLengthDistribution.txt


实例
$ makeTagDirectory c1 ../N5_NH_CB_list_filtered_c1.bam #21:45
$ makeTagDirectory c5 ../N5_NH_CB_list_filtered_c5.bam



1)默认将每条染色体的比对情况有一个tags.tsv文件来存储，除此之外，还有几个以tag开头的文件，包含了一些简单的统计信息。

以比较小的c5为例
$ head c5/1.tags.tsv 
	1	14721	1	1.0	50
	1	14722	1	1.0	150
	1	14738	1	1.0	150
	1	14744	1	2.0	150


2)tagCountDistribution.txt包含了测序深度的分布信息，第一列为测序深度的值，第二列为对应的reads的比例。根据这个文件的前10行，在R里面可视化如下

$ head c5/tagCountDistribution.txt
Tags per tag position (Median = 1, tags per genomic bp = 0.004) Fraction of Positions
0       0.000000
1       0.658301
2       0.189620
3       0.064872
4       0.027592
5       0.014129
6       0.00857

## R
dt=read.table("/data/wangjl/bams/peaks/c5/tagCountDistribution.txt",skip = 1)
head(dt)
dt2=dt[1:10,]; plot(dt2$V1, dt2$V2, type="h")  # 就是从高到低的一系列柱子。

对于chip样本而言，unique mapping reads的比例越高越好，所以可以看到测序深度为1的比例是最高的。


3) tagLengthDistribution.txt包含了reads的长度分布信息，第一列为长度，第二列为对应reads的比例， 在R里面可视化如下

$ head c5/tagLengthDistribution.txt 
Tag Length (Average tag length = 117.972379)    Fraction of Tags
0       0.000000
1       0.000002
2       0.000003
3       0.002020

## R
dt=read.table("/data/wangjl/bams/peaks/c5/tagLengthDistribution.txt",skip = 1)
head(dt)
plot(dt$V1, dt$V2, type="h")  ## 是一系列从低到高的柱子。

可以对插入片段的长度分布有一个直观的了解。


4) tagAutocorrelation.txt用于评估测序数据正负链上测序深度分布的相关性，在R里面可视化如下

$ head c5/tagAutocorrelation.txt 
Distance in bp(Fragment Length Estimate: 75)(Peak Width Estimate: 75)   Same Strand (+ for Watson strand, - for Crick)  Opposite Strand
-2000   64292.0 25532.0
-1999   64515.0 25348.0
-1998   64468.0 25436.0
-1997   64349.0 25329.0
-1996   64015.0 25492.0

## R
dt=read.table("/data/wangjl/bams/peaks/c5/tagAutocorrelation.txt",skip = 1)
dim(dt) #4000    3
head(dt)
#
plot(dt$V1, dt$V2, type="l", col="red")
lines(dt$V1, dt$V3, type="l", col="blue")
## 由于10x只有RNA5'-3'一个方向的，所以blue线被压得很低。

正负连的峰值间距离为插入偏度的长度。



(2) findPeaks
分别对input和IP样本建立好tagdirectory之后就可以peak calling, 用法如下

findPeaks ip_tagdir/ -i input_tagdir -style histone -o homer.peak.txt
## ip_tagdir 就是免疫共沉淀测序；input_tagdir就是RNAseq。

实例: 我的是10x scRNAseq，只有比对后的bam文件。只需要找到峰，没有什么额外信息。
$ findPeaks c1/ -size 50 -minDist 12  -o homer.peak.c1.txt #Total Peaks identified = 370105
$ findPeaks c5/ -size 50 -minDist 12  -o homer.peak.c5.txt #Total Peaks identified = 221731
参数解释:
  -size <#> (Peak size, default: auto)
  -minDist <#> (minimum distance between peaks, default: peak size x2)


输出结果和macs2的类似，分成了两部分，文件头尾以#开头的行为注释行。
$ grep -v '#' homer.peak.c5.txt | head
#PeakID chr     start   end     strand  Normalized Tag Count    Not used        findPeaks Score Fold Change vs Local    p-value vs Local        Clonal Fold Change
11-14   11      65499049        65499099        +       97037.8 0.000   700.000000      55.41   0.00e+00        0.07
11-722  11      65499006        65499056        +       90278.1 0.000   41.000000       50.57   0.00e+00        0.23
11-1    11      65499516        65499566        +       56981.5 0.000   988.000000      29.14   0.00e+00        0.05
11-4    11      65499483        65499533        +       52463.9 0.000   955.000000      26.53   0.00e+00        0.05
#"PeakID"  "chr"  "start"       "end"      "strand"   "norCouts" "notUs "findPeaksScore" "FC"   "p"          "ClonalFC"

# 第5列只有正链，也即是不区分正负链。不是我想要的。
$ grep -v '#' homer.peak.c5.txt |awk '{print $5}' | sort | uniq -c
 221731 +
#


2)# 这个找的是转录本，不是峰。
$ findPeaks c1/ -style groseq -size 50 -minDist 12  -o homer_Chain.peak.c1.txt  ## 54632 total transcripts discovered
##  -style groseq  ##这种模式用于分析链特异性的GRO_seq数据



3) 链特异性
$ findPeaks c1/ -size 50 -minDist 12 -strand separate -o homer_Chain.peak.c1.txt #Total Peaks identified = 494496
$ findPeaks c5/ -size 50 -minDist 12 -strand separate -o homer_Chain.peak.c5.txt #Total Peaks identified = 246860

$ grep -v '#' homer_Chain.peak.c5.txt |awk '{print $5}' | sort | uniq -c
 121417 -
 125443 +
#


但是CCND1基因在IGV上看是一个峰
$ cat homer_Chain.peak.c1.txt | awk '$2==3' | awk '$3>108047000' | awk '$3<108048000' | head
3-331   3       108047208       108047258       -       103.0   0.000   74.000000       60.32   0.00e+00        0.59
3-365   3       108047180       108047230       -       81.6    0.000   72.000000       45.04   0.00e+00        0.56
3-1995  3       108047114       108047164       -       15.9    0.000   41.000000       7.43    1.14e-32        0.35








2. 合并后重叠峰 
$ bedtools --version
bedtools v2.29.2


$ bedtools merge
Tool:    bedtools merge (aka mergeBed)
Version: v2.29.2
Summary: Merges overlapping BED/GFF/VCF entries into a single interval.
Usage:   bedtools merge [OPTIONS] -i <bed/gff/vcf>


(1) 转bed
$ awk 'BEGIN{OFS = "\t"}{if(NR>34)print $2, $3, $4,$1,$6,$5}' homer_Chain.peak.c1.txt > c1_notsorted_notmerged_peak.bed
$ awk 'BEGIN{OFS = "\t"}{if(NR>34)print $2, $3, $4,$1,$6,$5}' homer_Chain.peak.c5.txt > c5_notsorted_notmerged_peak.bed


(2) sort bed 
$ bedtools sort -i c1_notsorted_notmerged_peak.bed > c1_notmerged_peak.bed
$ bedtools sort -i c5_notsorted_notmerged_peak.bed > c5_notmerged_peak.bed


(3) merge bed 
$ bedtools merge -d 100 -s -c 6 -o distinct -i c1_notmerged_peak.bed > ./c1_merge.peakfile.bed
$ bedtools merge -d 100 -s -c 6 -o distinct -i c5_notmerged_peak.bed > ./c5_merge.peakfile.bed

参数详解
-d	Maximum distance between features allowed for features to be merged.
	- Def. 0. That is, overlapping & book-ended features are merged.
	- (INTEGER)
	- Note: negative values enforce the number of b.p. required for overlap.
		
-s	Force strandedness.  That is, only merge features that are on the same strand.
		- By default, merging is done without respect to strand.
	链特异。默认不管。
-c  Specify columns from the B file to map onto intervals in A. Default: 5.
       Multiple columns can be specified in a comma-delimited list.
-o  Specify the operation that should be applied to -c.
		Valid operations:
			sum, min, max, absmin, absmax,
			mean, median, mode, antimode
			distinct (i.e., print a delimited list (NO duplicates allowed)),


$ head c1_merge.peakfile.bed
1       14696   14769   -
1       185455  185505  -
1       186281  186331  -

$ head c5_merge.peakfile.bed 
1       14703   14753   -
1       185455  185526  -
1       186300  186367  -
1       629113  629163  +

不是末端的峰也算进来了，肯定不对。

#重新获取 bedtools bamtobed，只要最后一个碱基。






$ cat c1_merge.peakfile | awk '$1==3' | awk '$2>108047000' | awk '$3<108048000' | head
3       108047114       108047258       -







ref:
http://www.360doc.com/content/19/1225/20/68068867_882178087.shtml
http://homer.ucsd.edu/homer/interactions/HiCtagDirectory.html





========================================
|-- IGV查看bed峰图 //todo
----------------------------------------

http://www.360doc.com/content/20/0304/19/68068867_896721933.shtml
bed to tdf 才能用IGV看。
wig也可以直接用IGV看。
https://www.cnblogs.com/djx571/p/12110883.html







========================================
|-- 升级版Jaspar数据库: 转录因子与DNA结合位点motif最全面的公开数据
----------------------------------------

https://mp.weixin.qq.com/s?__biz=MzI5MTcwNjA4NQ==&mid=2247486375&idx=1&sn=111912aa21e9cc8b09cd139d1a60c26e
http://jaspar.genereg.net/






========================================
相关分析的可视化: corrplot 包(输入matrix的 列 相关矩阵) 
----------------------------------------
MM=cor(mtcars); #corrplot输入的是相关系数，三种计算相关系数的方法
如果求行之间的相关，则先转置t(df);



1. 标记相关性p值
(1) 设置没通过统计的相关性结果打X
res1 = cor.mtest(mtcars, conf.level = .95)
corrplot(MM, p.mat = res1$p, sig.level = .01)


(2) 还可设置不显著的结果为空白（insig = 'blank'），
或显示p值（insig = 'p-value'）；
或用*数量代表显示性（insig = 'label_sig'）

corrplot(MM, p.mat = res1$p, insig = 'label_sig', 
         sig.level = c(.001, .01, .05), 
         pch.cex = .9, pch.col = 'black') 
##（c（.001, .01, .05）分别表示3种显著程度）


(3)###添加置信区间：
corrplot(MM, low = res1$lowCI, upp = res1$uppCI, order = 'hclust', 
	rect.col = 'navy', plotCI= 'rect', cl.pos = 'n')





2. 画出类似热图的效果：method = 'color'

(1)# (修正颜色位 红高，蓝低)，并把相关的分为3类(addrect  = 3)，每类用黑框括起来
library("corrplot")
# matrix.cor=cor(mtcars)
matrix.cor=cor( t(mtcars) )
corrplot(matrix.cor, order = "hclust",addrect  = 3, hclust.method="ward.D2")

# 默认是圆圈，可以设置为 method = 'color',

# 默认的渐变色感觉反了，改正为
col2 <- c("#67001F", "#B2182B", "#D6604D", "#F4A582",
                           "#FDDBC7", "#FFFFFF", "#D1E5F0", "#92C5DE",
                           "#4393C3", "#2166AC", "#053061")
corrplot(matrix.cor, method = 'color',
         col=colorRampPalette( rev(col2) )(200),
         order = "hclust",addrect  = 3, hclust.method="ward.D2")
#


缺点: 没有显示聚类连线，没有返回值
克服: 使用 hclust() 聚类，并返回聚类标签。



(2) 显示相关系数
# order参数设定不同展示顺序，默认order='orginal'以原始顺序展示，其他顺序有AOE，FPC，hclust；这里以AOE为例，毕竟官方说AOE排序较好；
# addCoef.col = 'grey'，给图添加相关系数（数字）并设定数字颜色为grey；
corrplot(MM, order = 'AOE', addCoef.col = 'grey')



(3) 当order是hclust时，可以用addrect参数添加聚类方框；
corrplot(MM, order = 'hclust', addrect = 2)
# hclust.method = 'ward.D2'设定聚类方法
corrplot(MM, order = 'hclust', hclust.method = 'ward.D2', addrect = 4)









3. 相关矩阵的显示方法:
method	
Character, the visualization method of correlation matrix to be used. Currently, it supports seven methods, named "circle" (default), "square", "ellipse", "number", "pie", "shade" and "color". See examples for details.

dt=t(mtcars)
head(dt) #竖着是产品/cell, 横着是指标/gene

# 按 column 标准化
dt.norm=apply(dt, 2, function(x){ log2(x/sum(x)*1e6+1) })
dt.norm=as.data.frame(dt.norm)
head(dt.norm) 
dim(dt.norm) #11 32

#par(mfrow=c(2,1), mar=c(3,2,1,1))
#(1) 用相关系数可视化
dt.cor=cor( (dt.norm)) #求列之间的相关系数
head(dt.cor)
corrplot( dt.cor, method = "color",
          order = 'hclust', hclust.method = 'ward.D2', 
          addrect = 4)
#(2) 用相关系数聚类
dt.dist=dist( t(dt.cor) )
hclust_ward.D=hclust( dt.dist, method = "ward.D2")
plot(hclust_ward.D, hang=-1, main="cor(norm data)") #行之间的聚类
rect.hclust(hclust_ward.D,4)
#(3) 用值直接聚类
dt.dist2=dist( t(dt.norm) )
hclust_ward.D2=hclust( dt.dist2, method = "ward.D2")
plot(hclust_ward.D2, hang=-1, main="norm data") #行之间的聚类
rect.hclust(hclust_ward.D2,4)
## 手工比较发现，使用标准化后的数据，直接聚类、相关系数再聚类结果没有差别。
#








4. 上三角、下三角: 多图组合
(1) type参数设定展示类型，有3种：full，upper，lower（前面展示的图都是type=“full”）；
# 	默认type='full'展示全部；当type设为其他值时，则可形成组合图。
corrplot(MM, order = 'AOE', type = 'lower')


(2) 多图组合 circle + ellipse
# tl.pos = 'd'设定文本标签展示在对角线
corrplot(MM, order = 'AOE', type = 'upper', tl.pos = 'd')
# add = TRUE在已有的图形上添加其他图形
# tl.pos = 'n'不展示文本标签, cl.pos = 'n'不展示颜色图例，
#   diag = FALSE不展示对角线的相关系数
corrplot(MM, add = TRUE, type = 'lower', method = 'ellipse', 
         order = 'AOE',  diag = FALSE, tl.pos = 'n', cl.pos = 'n')
#


(3)## circle + square
corrplot(MM, order = 'AOE',type = 'upper', tl.pos = 'd')
corrplot(MM, add = TRUE, type = 'lower', method = 'square', 
         order = 'AOE',diag = FALSE, tl.pos = 'n', cl.pos = 'n')
#


(4)## circle + colorful number
corrplot(MM, order = 'AOE', type = 'upper', tl.pos = 'd')
corrplot(MM, add = TRUE, type = 'lower', method = 'number', 
	order = 'AOE',diag = FALSE, tl.pos = 'n', cl.pos = 'n')
#







ref:
https://www.jianshu.com/p/00000f6f32df
http://www.360doc.com/content/19/0109/21/52645714_807781591.shtml






========================================
系统发育树、层次聚类方法(hierarchical cluster)、最优聚类数
----------------------------------------
https://bradleyboehmke.github.io/HOML/hierarchical.html

# Helper packages
library(dplyr)       # for data manipulation
library(ggplot2)     # for data visualization

# Modeling packages
library(cluster)     # for general clustering algorithms
library(factoextra)  # for visualizing cluster results



1. 层次聚类(hclust)是通过可视化然后人为去判断大致聚为几类，很明显在共同父节点的一颗子树可以被聚类为一个类
(1) 层次聚类 经典语句
dataset=mtcars;head(dataset)
h_dist <- dist(as.matrix(dataset))
h_clust<-hclust(h_dist, method = 'ward.D')
plot(h_clust, hang = -1) #对行进行聚类
rect.hclust(h_clust,3) #分为三类，添加矩形框

rect.hclust(clust_ward2, k = boxNunber, border = rainbow(boxN)) #可以设置矩形的颜色



(2)当order = "hclust"时，可使用hclust.method选择层次聚类的方法
#hclust.method可以为“complete”, “ward”, “single”, “average”, “mcquitty”, “median”, “centroid”
#ward.D和ward.D2是最优秀的聚类方法，推荐优先尝试。

corrplot(matrix.cor, order = "hclust",addrect  = 3, hclust.method="ward.D2")






2. 最佳分类数的确定, 好像只对 kmeans 有效： fviz_nbclust()

head(mtcars)
#一列一个细胞，一行一个基因(参数)
dt=t(mtcars)
#head(dt)
# 按照列标准化
dt=apply(dt, 2, function(x){ log2( 1+  1e6*x/sum(x) ) })
dt=as.data.frame(dt)
head(dt) 

#计算距离
dt.dist=dist( dt, method="euclidean")
#method	
#the distance measure to be used. This must be one of 
#"euclidean", "maximum", "manhattan", "canberra", "binary" or 
#"minkowski". Any unambiguous substring can be given.
class(dt.dist) #[1] "dist"
length(dt.dist) #55
head(dt.dist)


#使用距离聚类
tree1=hclust( dt.dist, method = 'ward.D2' ); plot( tree1 )  #对观测值(row)聚类
boxN=3;rect.hclust(tree1, k = boxN, border = rainbow(boxN))

dt.cor=cor(dt)
hclust( dist(dt.cor, method = "") )


#get cluster number for each item
head(cutree(tree1, k=boxN))
table(cutree(tree1, k=boxN))
# 1 2 3 
# 7 2 2

library(pheatmap)
pheatmap( as.matrix(dt), scale='row', 
          clustering_method='ward.D2',
          border_color = NA )

# 确定最佳分类数： 貌似只能是 kmeans 方法
# Allowed values include: kmeans, cluster::pam, cluster::clara, 
#  cluster::fanny, hcut, etc.
library("factoextra")
dim(dt) #11 32
fviz_nbclust( dt, FUNcluster=kmeans, method="silhouette")
fviz_nbclust( dt, FUNcluster=kmeans, method="wss")
fviz_nbclust( dt, FUNcluster=kmeans, method="gap_stat")
# method = c("silhouette", "wss", "gap_stat")







3.NbClust() function: 30 indices for choosing the best number of clusters

NbClust(data = NULL, diss = NULL, distance = "euclidean",
        min.nc = 2, max.nc = 15, method = NULL)
参数详解:
* data: matrix
* diss: dissimilarity matrix to be used. By default, diss=NULL, but if it is replaced by a dissimilarity matrix, distance should be “NULL”
* distance: the distance measure to be used to compute the dissimilarity matrix. Possible values include “euclidean”, “manhattan” or “NULL”.
	- min.nc, max.nc: minimal and maximal number of clusters, respectively
	- method: The cluster analysis method to be used including “ward.D”, “ward.D2”, “single”, “complete”, “average”, “kmeans” and more.
#

To compute NbClust() for kmeans, use method = “kmeans”.
To compute NbClust() for hierarchical clustering, method should be one of c(“ward.D”, “ward.D2”, “single”, “complete”, “average”).




(2) 评估分类标准
library(cluster)
# Gap statistic for hierarchical clustering
dt=mtcars
gap_stat <- clusGap( t(dt), FUN = hcut, K.max = 10, B = 10)
# pheatmap(dt)
fviz_gap_stat(gap_stat)







ref:
1.https://blog.csdn.net/weixin_30954607/article/details/97271072
2.https://www.cnblogs.com/think90/p/7133753.html
3.https://www.datanovia.com/en/lessons/determining-the-optimal-number-of-clusters-3-must-know-methods/



========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------


