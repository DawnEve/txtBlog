R30-adv


S4权威教程
《Advanced R》 by Hadley Wickham （旧版）http://adv-r.had.co.nz/S4.html
	第二版 https://adv-r.hadley.nz/s4.html
《R in a Nutshell》 by Joseph Adler  https://www.oreilly.com/library/view/r-in-a/9781449377502/ch10s02.html



========================================
R 环境: environment([fnName])
----------------------------------------
所有可用的环境函数:

environment(fun = NULL) # 查看定义函数时的环境名字
environment(fun) <- value

is.environment(x) #判断x是不是环境。参考is.na(x)

.GlobalEnv
globalenv()
.BaseNamespaceEnv

emptyenv()
baseenv()

new.env(hash = TRUE, parent = parent.frame(), size = 29L)

parent.env(env)
parent.env(env) <- value

environmentName(env)

env.profile(env)


new.env 创建一个环境空间
is.environment 判断是否是环境空间类型。
environment 查看函数的环境空间定义。
environmentName 查看环境空间名字。
env.profile 查看环境空间属性值。
ls 查看环境空间中的对象。
get 取出指定环境空间中的对象。
rm 删除环境空间中的对象。
assign 给环境空间中的变量赋值。
exists 查看指定环境空间中的对象是否存在。



1. R中的环境
(1)new.env()创建环境，并在新环境使用 assign() 创建变量
x=5
myEnv=new.env() #参数 parent 可以指定其父环境
assign('x', "Hello Env", env=myEnv)


函数定义 new.env(hash = TRUE, parent = parent.frame(), size = 29L)







(2) 查看和修改环境中的变量名
# ls默认查看全局环境，全局环境这时有2个变量
ls()
#[1] "myEnv" "x" 

# 新建的环境内有一个变量
ls(myEnv)
#[1] "x"


1) 使用get获取变量值
get('x') 或
> x #全局环境中的x值
[1] 5

> get('x', env=myEnv) # 环境myEnv中的变量x的值
[1] "Hello Env"


2) 使用assign()函数将对象存储到某个特定环境中，如
assign("new01","Hello Global",envir = globalenv())
其中第一个参数是对象名称，第二个参数是对象取值，第三个参数是某特定环境的名称


3) 另外，使用 assign() 和 get() 函数时可以使用$符号。
env2=new.env()
env2$y='1024'
env2$y
# [1] "1024"






(3) 获取环境
as.environment(“……”)可以返回字符串名称对应的环境，而全局环境（R_GlobalEnv）、基环境（base）和空环境（R_EmptyEnv）拥有自己的调用函数，具体如下：

library('ggplot2')
e1=as.environment("package:ggplot2");
e1
# <environment: package:ggplot2>
# attr(,"name")
# [1] "package:ggplot2"
# attr(,"path")
# [1] "d:/Program Files/R/R-3.6.1/library/ggplot2"
> ls(e1) #返回一堆该环境内的变量

> globalenv()
<environment: R_GlobalEnv>

> baseenv()
<environment: base>

> emptyenv()
<environment: R_EmptyEnv>



2) 可以直接把变量放到环境中
ee <- as.environment(list(a = "A", b = pi, ch = letters[1:8]))
ee #<environment: 0x0000000005527830>
parent.env(ee) #<environment: R_EmptyEnv>
ls(ee) # names of objects in ee [1] "a"  "b"  "ch"








(4) 获取环境内的变量和方法
使用 ls() 是获取当前环境的变量和方法。
而常见的函数sum(), length() 是base提供的。

> ls(pattern="^sum$",envir=baseenv())







(5) 获取活动环境: environment()，返回值是定义该函数的环境

b1=environment();b1 #查看当前环境的名字
# <environment: R_GlobalEnv>


1)函数内也是一个环境
fn1=function(){
  print(environment())
}
fn1()
#<environment: 0x00000000365006f8>




## 例2:
f1=function(){
  inner=function(x){x**2}
  print(environment())
  return( inner )
}
f2=f1() #<environment: 0x00000000179daa78>
environment(f2) #<environment: 0x00000000179daa78>
environment(f1) #<environment: 0x00000000179daa78>


2) 获取环境名字字符串environmentName(env2)
b1=environment();
if( environmentName(b1)=="R_EmptyEnv" ){print('Top level')}






(6) 查看上一级环境的名字 parent.env(envName)

1) 查看全局环境的上一层是啥?  全局环境的最顶层是空环境。 help(environment)

# 查看全局的父环境
b1=environment();b1
# <environment: R_GlobalEnv>
i=0;print('当前环境为:');print(b1)
while(i<12){
  i=i+1
  b2=parent.env(b1);
  cat(i,'**********其父环境为: **********\n')
  print(b2)
  b1=b2
}


############## 在 cmd 的R 中测试结果:##############
1 **********: **********
<environment: package:stats>
attr(,"name")
[1] "package:stats"
attr(,"path")
[1] "D:/Program Files/R/R-3.6.1/library/stats"
...
7 **********: **********
<environment: 0x000000001aec9678>
attr(,"name")
[1] "Autoloads"
8 **********: **********
<environment: base>
9 **********: **********
<environment: R_EmptyEnv>
Error in parent.env(b1) :

精简后: 
9 R_EmptyEnv -> 8 base -> 7 Autoloads -> 6 package:methods -> 5 package:datasets -> 4 package:utils -> 3 package:grDevices -> 2 package:graphics -> 1 package:stats -> R_GlobalEnv


############## 在Rstudio中测试结果: ##############
[1] "当前环境为:"
<environment: R_GlobalEnv>

1 **********其父环境为: **********
<environment: 0x000000000ea7d778>
attr(,"name")
[1] "tools:rstudio"
2 **********其父环境为: **********
<environment: package:stats>
attr(,"name")
[1] "package:stats"
attr(,"path")
[1] "d:/Program Files/R/R-3.6.1/library/stats"
...

10 **********其父环境为: **********
<environment: R_EmptyEnv>
Error in parent.env(b1) : the empty environment has no parent

精简后: 比着cmd的R，在 R_GlobalEnv 之外又包了一层 rstudio 工具层。
10 R_EmptyEnv -> 9 base -> 8 Autoloads -> 7 package:methods -> 6 package:datasets -> 5 package:utils -> 4 package:grDevices -> 3 package:graphics -> 2 package:stats - > 1 tools:rstudio -> R_GlobalEnv



2) 查看自定义环境的父环境

env2=new.env()
env2$y='1024'
env2
# <environment: 0x0000000005962c30>
# 创建env2的子环境 env3
env3=new.env(parent = env2)
env3 #<environment: 0x0000000002dd5660>

# 查看env3的父环境
parent.env(env3) #<environment: 0x0000000005962c30>
parent.env(env2) #<environment: R_GlobalEnv>


3) 在函数中查看父环境
注意，函数内部就是一个新的环境。
函数内的环境，是定义该函数所在的环境的子环境。

fn1=function(){
  enO=environment()
  print(enO)
  print(parent.env(enO))
  inner=function(){
    print('***')
    enIn=environment()
    enO2=parent.env(enIn)
    enG=parent.env(enO2)
    print(enIn)
    print(enO2)
    print(enG)
  }
  return(inner) #返回值是一个函数，该函数引用了外函数的变量，这就是闭包。
}


> environment(fn1)
<environment: R_GlobalEnv> #定义函数fn1的环境

> fn2=fn1()
<environment: 0x0000000005b44fb8> #外函数内的环境，是全局的子环境
<environment: R_GlobalEnv>

> environment(fn2)
<environment: 0x0000000005b44fb8> #定义函数fn2的环境，就是外函数

> ls(environment(fn2)) #外函数环境内包含enO变量，inner函数。
[1] "enO"   "inner"

> fn2()
[1] "***"
<environment: 0x0000000005bc0b50> #内函数内的环境，其父环境是外函数
<environment: 0x0000000005b44fb8>
<environment: R_GlobalEnv>







(7) 变量的搜索顺序: 在当前环境查找，没有找到，就往上一层找，直到找到返回，或者直到空环境还搜不到，就会抛出一个错误。
env2=new.env()
env2$y='1024'

# 创建env2的子环境 env3
env3=new.env(parent = env2)
env3$y2=20

ls(env=env2) # [1] "y"
ls(env=env3) # [1] "y2"

get('y2', env=env3) #20
get('y', env=env3) #[1] "1024" 向上一层查找

















========================================
|-- 变量的作用域 2
----------------------------------------

5.如果就是想在inner中修改最顶层作用域变量呢？
可以使用assign()向顶层赋值
a=c(1,2);
fun=function(){
  b=c(a,3,4);
  a=c(b,10)
  inner=function(){
    b=c(b,100)
    a<<-c(b,200) #这样就可以突破一层作用域，改变上层变量
    
    #向顶层赋值函数assign()
    assign("a", a, pos=.GlobalEnv);#向顶层赋值
    
    print(a) #[1]   3   4   5 100 200
    #内函数改变，仅在内函数有效
  }
  inner();
  print(a) #[1]  1   2   3   4 100 200
}

fun()
print(a) # 1   2   3   4 100 200




6.这个作用域在R中怎么看？environment()
a=c(1,2);
print(environment()) #<environment: R_GlobalEnv>
fun=function(){
  print(environment()) #<environment: 0x000000001a8de318>
  b=c(a,3,4);
  a=c(b,10)
  inner=function(){
    print(environment()) #<environment: 0x000000001a8dd1b0>
    b=c(b,100)
    a<<-c(b,200) #这样就可以突破一层作用域，改变上层变量
    
    a=c(a, -50) #新的改变并没有赋值给外函数中的a
    #向顶层赋值函数assign()
    assign("a", a, pos=.GlobalEnv);#向顶层赋值，新的改变直接改变全局变量a
    
    print(a) #[1]   3   4   5 100 200 -50
    #内函数改变，仅在内函数有效
  }
  inner();
  print(a) #[1]  1   2   3   4 100 200
  
  get2=function(){
    return(a)
  }
  return(get2)
}

f3=fun()
# <environment: 0x000000000545da68>
# <environment: 0x0000000005007050>
# [1]   1   2   3   4 100 200 -50
# [1]   1   2   3   4 100 200

print(a)
# [1]   1   2   3   4 100 200 -50
f3() #外函数内的值没变
# [1]   1   2   3   4 100 200






7.本地有变量，想引用外部作用域中的变量怎么办？
a=c(1,2);
print(environment()) #<environment: R_GlobalEnv>

fun=function(){
  a=c(3,4);
  b=c(10,20);
  print(environment()) #<environment: 0x000000001aa14938>
  print(ls()) #[1] "a" "b"
  
  inner=function(){
    a=c(5,6);
    print(environment()) #<environment: 0x000000001aa13798>
    print(a) #[1] 5 6
    
    print(ls()) #输出当前局部变量名。 [1] "a"
    
    #输出向上一个框架的局部变量名。
    print(ls(envir=parent.frame(n=1))) #[1] "a"     "b"     "inner"
    #ls.str()可以获得更多信息。
    
    #调整n则向上渗透。
    print(ls(envir=parent.frame(n=2)))#又向外渗透一层"a"   "fun"
  }
  inner()
}

fun()




# 只能看到，还是没取到，怎么取出外部变量值呢？
##############################
f1=function(){
  print('f1>>');
  print(is.environment(.GlobalEnv));#[1] TRUE
  print(environment()) #<environment: 0x0000000018055738>
  print('f1 end<<');
}

outer=function(){
  f2=function(){
    print('  f2>>');
    print(is.environment(.GlobalEnv)); #[1] TRUE
    print(is.environment(environment())); #[1] TRUE
    print(environment()) #<environment: 0x0000000018085940>
    print('  f2 end<<');
  }
  
  # f2创建的环境，就是outer函数内的环境
  print(environment(f2)) #<environment: 0x0000000018043f88>
  inner=function(){
    print('  inner>>');
    f1()
    print(environment(f2)) #<environment: 0x0000000018043f88> 
    #这个打印的是创建f2的环境
    f2()
    print('  inner end<<');
  }
  
  inner();
  print(environment()) #<environment: 0x0000000018043f88>
}

outer()

能打印出来变量、函数所处的环境hash，则应该也能取出来。很有启发性。

受到“R环境和变量作用域的问题  http://blog.csdn.net/thoixy/article/details/40503765”启发：
##############################
//下面终于取出来环境变量了
a=c(1)
f1=function(){
  print(a) #1
}

outer=function(){
  a=c(200)
  f2=function(){
    print(a) #200
  }
  inner=function(){
    print(a) #200
    a=c(3)
    f1()
    ee=(environment(f2)) #获取f2的环境
    print(a) #3
    print(ee$a) #200  #从f2的创建环境中获取变量a
    
    e1=environment(f1);
    print(e1) #<environment: R_GlobalEnv>
    print( e1$a  ); #1
    f2()
  }
  
  inner();
}

outer()


注意，通过环境变量取出来的值是所在环境的变量，而不是环境内的变量。
所以遇到函数（要当成普通变量），要找并列的上下文，而不是找函数内部。

R如何理解变量和环境的Lexical Scoping Rule  http://blog.csdn.net/stat_elliott/article/details/45166481






8.小结
►关于全局变量
    R语言中全局变量的使用比想象中的要多。R语言自身内部大量使用了全局变量，物理上其C语言代码还是R例程，对于这点你也许会感到惊讶。例如，超赋值运算符<<-用于许多R语言函数中(尽管通常只对上一级环境层次中的变量进行写操作)。线程化(Threaded)代码和GPU代码倾向于大量使用全局变量，这为并行对象提供了主要的通信途径。两者均用于编写高性能程序。
 
►关于“闭包”
    R语言中“闭包”包含了函数的参数、函数体以及调用时的环境。有一种编程方法是用闭包包括环境，这种编程方法使用的特性也叫做“闭包”。
    闭包包含了一个可创建局部变量的函数，并创建另一个函数可以访问该变量。
#



ref:
R语言-环境系统 https://blog.csdn.net/xiaohukun/article/details/76137052
揭开R语言中环境空间的神秘面纱 https://blog.csdn.net/u012543538/article/details/36717299





========================================
|-- 保存和载入环境: 包括全局环境<environment: R_GlobalEnv>
----------------------------------------

1.保存载入全局环境
(1) 简单示例
## 保存当前环境到文件
save.image(file='myEnvironment.RData')

解释：是保存当前工作空间的简写，就是输入q('yes')时默认执行的操作。
save.image() is just a short-cut for ‘save my current workspace’, i.e., 
save(list = ls(all.names = TRUE), file = ".RData", envir = .GlobalEnv).  # 等价语句，不建议使用默认参数。
It is also what happens with q("yes").


## 从文件获取保存过的环境变量值
load('myEnvironment.RData') #有坑：执行本语句，则会不可逆的覆盖当前环境中的同名变量




(2) 自定义函数，先检查是否环境已经清空的安全载入方式
load2=function(...){
  # print( environment() )
  if( ls( envir = globalenv() )=='load2' ){
    print('Loading')
    load(...)
  }else{
    stop("Warning: please clear the current environment!")
  }
  
  print(i)
}

load2('myEnvironment002.RData') #, envir = globalenv()








2. 保存一般环境对象

## 构建环境，以及环境中的函数
my_env = new.env(hash = TRUE, parent = .GlobalEnv)
my_env[['echo']] <- function(x) {-x}

my_env[['echo']](123)
# [1] -123
my_env$echo(123)
# [1] -123

class(my_env) #[1] "environment"
my_env  #<environment: 0x000000001644a548>


(1) 保存环境方法1:save/load，返回值仅仅是原环境的名字(字符串)，原环境已静默载入
save(my_env, file = "MyEnv.RData")
rm(my_env)
my_env$echo(123) #不可用 Error: object 'my_env' not found

# 载入
mn1=load('MyEnv.RData')
mn1 #[1] "my_env"
#
my_env$echo(123) #-123 #可用



(2) [推荐] saveRDS/readRDS。注意，readRDS返回的是环境对象，而不是对象名字字符串，和load不同。
也就是可以在载入的时候修改环境的名字。这几乎是最理想的保存和载入环境的方法了。

saveRDS(my_env, file = "MyEnv.RData")
rm(my_env)

my_env2 <- readRDS("MyEnv.RData")
my_env2 ## <environment: 0x00000000046370f8>

my_env2$echo(123) #-123


(3) save/attach 添加到搜索路径了，在当前环境中并不可见。
Another possibility is to place MyEnv.RData on the search path rather than in the global environment:

save(my_env, file = "MyEnv2.RData")
rm(my_env)

attach("MyEnv2.RData")
my_env ### <environment: 0x0000000017ddd538>
my_env$echo(123) #123



(4) 如果想把环境导入到全局环境。
Note: If you wish to load the contents of my_env into the global environment rather than loading my_env itself you will have to copy the contents out:

for(el in ls(my_env)) { assign(el, get(el, my_env)) }
echo(123) #[1] -123


(5) 如果想要保存字符串，而不是二进制文件呢？
save, saveRDS and serialize all have an ascii argument

saveRDS(my_env, file = "MyEnvA.RData", ascii=T,compress=F) #只有这样，才是文本文件，但是很多多余数据。
rm(my_env)

my_env2=readRDS("MyEnvA.RData")
my_env2$echo(123)





ref:
https://stackoverflow.com/questions/35279150/how-to-save-a-standalone-r-environment-object





========================================
|-- 进阶： jobs 中的环境
----------------------------------------
1.  实例1， apply需要传入环境。
(1)脚本 testJob.R 
Fun1 <- function(x) x^2
Fun2 <- function(x) x^3
Fun3 <- function(x) x^4
Funs <- c('Fun1', 'Fun2', 'Fun3')

print(Fun1(2))
print(Fun2(Fun1(2)))
print(Fun3(Fun2(Fun1(2))))

print('Fun1')
print(get(Funs[1]))

print('All Funs')

print(lapply(Funs, get)) #not ok

#print(mget(Funs)) #更好的函数是mget
#print(lapply(Funs, get, envir=environment())) #但是如果您想使用get，那么您要么需要传递环境，
#print(lapply(Funs, function(x)get(x)) ) # 或者在外壳中捕获环境
# 这个就是R的 闭包 了吧？外函数所在的环境一起传入进去。




(2) 直接source()运行 
> source("testJob.R")
[1] 4
[1] 64
[1] 16777216
[1] "Fun1"
function(x) x^2
<bytecode: 0x55670e0e3cf0>
[1] "All Funs"
[[1]]
function(x) x^2
<bytecode: 0x55670e0e3cf0>

[[2]]
function(x) x^3
<bytecode: 0x55670e19c3c0>

[[3]]
function(x) x^4



(3) 使用 Jobs选项卡运行，报错
[1] 4
[1] 64
[1] 16777216
[1] "Fun1"
function(x) x^2
<environment: 0x102b218>
[1] "All Funs"
Error in FUN(X[[i]], ...) : object 'Fun1' not found 
Calls: sourceWithProgress -> eval -> eval -> print -> lapply -> FUN
Execution halted
报错： 最后一个函数找不到。

把最后一行修改为 print(lapply(Funs, get, envir=environment())) 就正常运行该作业了。













ref:https://www.5axxw.com/questions/content/ag62hi



========================================
|-- evalq({}, env): 在给定环境中评估R表达式
----------------------------------------
evalq(expr, envir, enclos)
Evaluate an R expression in a specified environment.


实际上，您不需要使用RStudio的Run as Local作业来测试这一点。
您还可以通过在新的空环境中运行来复制该行为。一个简明的例子是。

evalq({
  Fun1 <- function(x) x^2
  Funs <- "Fun1"
  
  print('All Funs')
  # print(lapply(Funs, get))
  print(mget(Funs))
}, new.env())


输出：
[1] "All Funs"
$Fun1
function(x) x^2
<environment: 0x5567070f2520>





========================================
|-- 使用闭包对象: using closures as objects in R
----------------------------------------
https://www.r-bloggers.com/2015/03/using-closures-as-objects-in-r/

最早接触闭包的概念是在js中，它们都比较接近。
闭包就是返回一个函数，返回的函数可以访问被返回前的环境中的变量。
基于闭包，可以构建一套OOP系统。

1. 闭包：被返回的函数

(1) 这个初始化变量i，只有返回的函数可以访问到
fn1=function(i){
  return(function(){
    i=i+1
    return(i)
  })
}
counter=fn1(10)
counter() #11
counter() #11



(2) 怎么让计数器记住每次的数字呢？
# A: 使用穿透赋值符号 <<- ，能穿透到上一层环境

fn2=function(counter=0){
  i=counter
  return(function(){
    i <<- i+1
    return(i);
  })
}

header=fn2(1)
header() #2
header() #3
header() #4 #能计数了


(3) 能设置更多的方法吗？
可以通过返回一个list，list的每个元素都是一个函数
fn3=function(counter=0, name=""){
  i=counter
  name=name #计数器的名字
  # 模拟this
  this=list(
    increase=function(n=1){
      i <<- i+n
      return(i);
    },
    set=function(i){
      i <<- i
    },
    show=function(){
      message( this$name, ":", i  )
    },
    i=i,
    name=name
  );
  return(this)
}
# 计数器1
ct1=fn3(1, "sheep")
ct1$name #sheep
ct1$increase() #2
ct1$increase() #3
ct1$increase(15) #18

ct1$set(5)
ct1$increase() #6
ct1$show() #sheep:6

#计数器2
ct2=fn3(200, "cow")
ct2$show() #cow:200
ct2$increase(500) #700

#不影响第一个计数器
ct1$show() #sheep:6

查询该环境下的内容：
> ls(envir=environment(ct1$set))
[1] "counter" "i"       "name"    "rs"


改造为类
class(ct1) #list
class(ct1)="sheep"
class(ct1) #sheep
> is.list(ct1)
[1] TRUE


为sheep类添加方法
ct1 #输出list
print.sheep=function(ct){
  ct$show()
}
> ct1$increase()
[1] 7
> ct1
sheep:7









========================================
|-- 搜索路径: search(), attach(), detach(), with()
----------------------------------------

1. R 搜索一个变量时，是从当前的搜索路径中依次搜索的

(1) 添加前
> search() #查看 搜索路径
 [1] ".GlobalEnv"        "tools:rstudio"     "package:stats"     "package:graphics"  "package:grDevices"
 [6] "package:utils"     "package:datasets"  "package:methods"   "Autoloads"         "package:base"     


(2) 添加后
> l3=list(ages=c(1,2,3), name="Tom"); l3
$ages
[1] 1 2 3

$name
[1] "Tom"

> attach(l3) #添加一个变量到搜索路径

> search() #再次查看 搜索路径，多一个l3
 [1] ".GlobalEnv"        "l3"                "tools:rstudio"     "package:stats"     "package:graphics" 
 [6] "package:grDevices" "package:utils"     "package:datasets"  "package:methods"   "Autoloads"        
[11] "package:base"     


> ages #这个变量全局可见
[1] 1 2 3
> ls() #默认在全局变量中查，没找到 ages
[1] "l3"
> ls(2) #在第2个搜索路径(也就是刚加上的 l3 中)中查找
[1] "ages" "name"


(3) 删除某个 搜索路径
> detach("l3") #删除某个 搜索路径
> search() #查看 搜索路径
 [1] ".GlobalEnv"        "tools:rstudio"     "package:stats"     "package:graphics"  "package:grDevices"
 [6] "package:utils"     "package:datasets"  "package:methods"   "Autoloads"         "package:base"    








2. attach() 只能识别list的名字，数据框的列名
不能识别数据框的行名。

> df2=iris[1:3,]
> rownames(df2) = paste0("sp", 1:3)
> df2
    Sepal.Length Sepal.Width Petal.Length Petal.Width Species
sp1          5.1         3.5          1.4         0.2  setosa
sp2          4.9         3.0          1.4         0.2  setosa
sp3          4.7         3.2          1.3         0.2  setosa


> df2[, "Sepal.Length"] #输出第一列
[1] 5.1 4.9 4.7

> df2["sp1", ] #输出第一行
    Sepal.Length Sepal.Width Petal.Length Petal.Width Species
sp1          5.1         3.5          1.4         0.2  setosa



> attach(df2) #添加到 搜索路径
> search()
 [1] ".GlobalEnv"        "df2"               "tools:rstudio"     "package:stats"     "package:graphics" 
 [6] "package:grDevices" "package:utils"     "package:datasets"  "package:methods"   "Autoloads"        
[11] "org:r-lib"         "package:base" 


> Sepal.Length  #能识别列名
[1] 5.1 4.9 4.7

> sp1 #不识别行名
Error: object 'sp1' not found


> detach(df2) #删除该 搜索路径







3. with() 能使形式上更简洁

> with(mtcars, {
   n = mpg[1:3]  #这个n只在with内有效
   # 如果想在with函数中对全局的变量进行赋值，那么需要使用<<-这样一个运算符。
   print(n)
 })
[1] 21.0 21.0 22.8

> n
Error: object 'n' not found












========================================
R 交互式画图: 调用 js 的canvas/SVG 画图
----------------------------------------
1. 可能的想法与实现方法

R 动态生成js语言，打开后台浏览器，执行该js画图。

搜索关键词: r plot to js canvas


(1) R 处理数据，转为json，js画图

https://bioconnector.github.io/workshops/r-interactive-viz.html

The workflow is as follows:
	Data are read into R
	Data are processed (and potentially manipulated) by R
	Data are converted to JavaScript Object Notation (JSON) format
	Data are bound to JavaScript
	Data are processed (and potentially manipulated) by JavaScript
	Data are mapped to plotting features and rendered


(2) R 调用 canvas 画散点图的例子
https://github.com/wclang/xy_plot_js
https://github.com/wclang/xy_plot_compare_js


(3) Rmarkdown 中替换画图引擎，改用js画图
https://www.aliciaschep.com/blog/js-rmarkdown/
	该作者写的几个R包: https://www.aliciaschep.com/software/







2. 好用的js库

有一个js库叫 canvasjs.min.js，很多现有例子，很值得学习(使用需要授权费): https://canvasjs.com/docs/charts/basics-of-creating-html5-chart/

(1) 可能免费而强大的还是 D3.js: https://d3js.org/
	https://dev.to/nyxtom/drawing-interactive-graphs-with-canvas-and-javascript-o1j

(2) plotly 是基于  d3.js and stack.gl 的。
https://plotly.com/javascript/
	




========================================
R中的变量是否定义过了
----------------------------------------
1. whether a para is defined or not
https://www.javaroad.cn/questions/53707

is.defined <- function(sym) {
  sym <- deparse(substitute(sym))
  env <- parent.frame()
  exists(sym, env)
}
# test
#is.defined(wjl)
#is.defined(tmp)


2. 如果在函数内部，还可以使用 missing 判断

fn1 = function(x) {
    if(missing(x)){
        message("x is missing… :-(")
    }
}

fn1()
# x is missing… :-(




========================================
R 与数学 (微软教程 ipynb)
----------------------------------------

https://github.com/MicrosoftLearning/Essential-Math-R




========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------





========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------





========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



