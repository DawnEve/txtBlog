Rmarkdown


R 可重复性研究
Rmarkdown
R notebook 
R in Jupyter notebook 
BookDown






========================================
可重复性研究: Rmarkdown
----------------------------------------
https://rmarkdown.rstudio.com/articles_intro.html
https://www.rstudio.com/wp-content/uploads/2015/02/rmarkdown-cheatsheet.pdf

https://github.com/yihui/rmarkdown-cookbook
https://bookdown.org/yihui/rmarkdown/

https://zhuanlan.zhihu.com/p/633338923


1.用shiny+Rmarkdown写Assignment报告，在文档中使用shiny，既装逼又实用。
shinny 教程见 专题: R web shinny框架


2.做数据分析研究时用shiny+dashboard+dygraph开发一个可交互的数据分析应用。方便进行探索性的数据分析，可以选择变量，可以拖动时间轴，可以放大缩小时间范围或者数值y的范围，观察数据更方便。
（https://www.zhihu.com/question/35224925）


3. Rmarkdown 
https://rmarkdown.rstudio.com/

可以使用 notebook 界面，使用R, Python 和 SQL 语言。

Rmarkdown 支持很多输出: html, pdf, word等。

教程： https://rmarkdown.rstudio.com/lesson-1.html
cheatsheets: https://rmarkdown.rstudio.com/lesson-15.html


经验：
- 在 Rmarkdown 的不同trunk之间，par()会自动重置。




(1) 在Rstudio中，新建 .Rmd 文件，

头文件使用 --- 行包围。
R代码使用```行包围。
其他地方就是标准 markdown语法。

新建的Rmd中包含的操作提示：
- 运行：点击代码块中的Run按钮，或快捷键 Ctrl+Shift+Enter
- 插入代码块：工具栏点击 插入代码块，或 Ctrl+Alt+I
- 预览：每次保存都会保存预览，也可点击预览按钮，或 Ctrl+Shift+K
- 预览显示编辑器内容的呈现HTML副本。因此，不像*Knit*， *Preview*不运行任何R代码块。相反，将显示块最后一次在编辑器中运行时的输出。




(2) 运行 
```{r}
```

点击R代码旁边的 右箭头图标， 运行这一段R代码。


(3) 输出报告 

library(rmarkdown)
render("1-example.Rmd")

或者使用Rstudio的 Knit 按钮渲染输出到文件。

R markdown 一个文件包含文本、代码、输出结果。

https://rmarkdown.rstudio.com/lesson-9.html



(4) 内部处理流程
Rmd -> knitr -> md -> pandoc -> all kinds of docs.



(5) 行内代码 
`r ` 在行内展示结果，而不是代码。

比如 
a="add"
`r a` 展示为 add 

(6) 执行其他语言的代码

```{bash}
echo $PATH
```

knitr包可以执行很多语言的代码:
Python
SQL
Bash
Rcpp
Stan
JavaScript
CSS



(7) 参数 
可以在文档中使用参数 params$<parameter name>

```{r}
data{list = params$data}
```

然后在编译的时候传入参数
> render("5-parameters.Rmd", params = list(data = "aleutians"))



(8) 表格
正常表格和R中显示的一样。
如果想展示成表格样式，可以使用 knitr::kable 函数。

```{r echo =FALSE, results='asis'}
library(knitr)
kable(mtcars[1:5, ], caption="A knitr kable.")
```
Note the use of the results='asis' chunk option. This is required to ensure that the raw table output isn’t processed further by knitr.









========================================
Rmarkdown 书写规则，及其他的 Rmd
----------------------------------------
R markdown 和 R notebook 啥区别？
    https://www.geeksforgeeks.org/difference-between-r-markdown-and-r-notebook/amp/
    不明显。


1. 其他部分和标准 markdown 差不多，但是插入代码部分有更多细节。

(1)一般结构
```{r chunkName, xx=TRUE, yy=FALSE}
```

```{r}
a=20
print(a)
```

(2) 保存为图片
```{r mito, fig.height=7, fig.width=13}
# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
```
文件名为 mito-1.png ,后面是宽高设置。


(3) 仅仅是注释，不执行的R语句

```{r eval=FALSE}
install.packages("bookdown")
# or the development version
# devtools::install_github("rstudio/bookdown")
```







2. 使用别人的Rmd代码
Rmd 可以内置代码，可以边写边运行，也可以写好后直接使用 knit功能生成html代码及图片。

优点：knit 模式运行与当前环境变量是隔离的。

(1)使用别人写好的 Rmd代码：
	https://github.com/satijalab/seurat/tree/master/vignettes
	https://github.com/satijalab/seurat/blob/master/vignettes/pbmc3k_tutorial.Rmd
	
(2) Rstudio中 File- New file- R notebook 
复制文本进去 https://raw.githubusercontent.com/satijalab/seurat/master/vignettes/pbmc3k_tutorial.Rmd
保存为 00.Rmd，
然后点击左上角的 Knit，不久报错，这个过程中，环境变量一直为空。


(3) 如果是调试，则变量会污染当前环境。
快捷键: 
	执行下一个片段是 ctrl+alt+N








========================================
|-- (1)头部自定义部分
----------------------------------------
更多 rmarkdown 使用细节
https://blog.csdn.net/adan_journal_of_data/article/details/78900476

(1) 头部自定义部分
---
title: "Habits"
output: 
  html_document:
    toc: ture                  #是否展示目录
    toc_float: true             #目录的形式，是否浮动
    toc_depth: 3               #目录显示层数
    number_sections: true       #各个标题的数字标记是否展示
    df_print: paged           #表格的形式，paged创建可分页的表
    theme: cerulean              #文档主题，来源于Bootswatch(https://bootswatch.com/)
    highlight: tango               #指定语法高亮样式
    #css: css/styles.css       #加入额外的CSS，如果想从自己的css为文档提供所有样式，theme和highlight可设置为null
    #fig_width: 7                  #图片宽度
    #fig_height: 6                 #图片高度
    #fig_caption: TRUE       #图片设置，控制图形是否带有标题
    #code_folding: hide        #是否隐藏代码块
    #self_contained: false    #在外部文件中保留依赖关系
    #keep_md: true              #是否在knitr处理，pandoc渲染之后保存一份markdown文件的副本
    #template: quarterly_report.html   #可以使用模板选项替换基础pandoc模板
---


(2) 常用
---
title: “Example of R Notebook”
output: 
 html_document:
   toc: true
   toc_depth: 3
   toc_float: true
---





========================================
|-- (2) 代码块设置：逐个设置
----------------------------------------
(2).代码块设置
echo=FALSE 最终的文档中不会显示代码，只会显示代码运行的结果和图像
results="hide" 隐藏结果，显示图像
include=FALSE隐藏代码和运行的输出（写报告时可使用include=FALSE来隐藏所有的代码，从而突出图像。）
warning=FALSE 和 message=FALSE 最终文档中不会显示R软件任何的警告 / 提示信息
fig.show="hide" 隐藏图像

对于图像，可以通过fig.width和fig.height来设置宽和高，举例：
```{r scatterplot, fig.width=8, fig.height=6}
plot(x,y)

使用 include=FALSE 隐藏所有的代码、结果和图像，
```{r setup, include=FALSE}
```

同时使用 include=TRUE 和 results="hide" 则会隐藏结果显示图像

eval=FALSE显示代码而不运行，也就没有结果和图片了。适用于展示 示例代码。

表格输出设置：
```{r, results='asis'}
knitr::kable(mtcars)






========================================
|-- (3) 代码块设置：全局设置
----------------------------------------
(3) 全局代码块设置
避免每次使用代码块都重复敲代码来设置代码块，可按如下设置初始代码块：

```{r global_options, include=FALSE}
knitr::opts_chunk$set(fig.width=12, fig.height=8, fig.path='Figs/',
                   echo=FALSE, warning=FALSE, message=FALSE)

warning=FALSE 和message=FALSE最终文档中不会显示R软件任何的提示信息，
fig.path='Figs/'把图片保存在Figs子文件夹中（默认情况下图片不会被保存，注意Figs后面的斜线“/”不可少，否则图片会以Figs为文件名开头被保存在主目录中）。

如果在某个特定代码块中需要不一样的设置，可以单独设置该代码块，如：
```{r a_taller_figure, fig.height=32}
par(mfrow=c(8,2))
for(i in 1:16)
  plot(x[,i], y[,i])

在给合作者的报告中，可能会使用 include=FALSE, echo=FALSE 作为全局设置，生成图像时使用 include=TRUE ，这样可以只输出图像。







========================================
|-- (4) 行内代码 `r nrow(xx)`
----------------------------------------
(4) 行内代码(In-line code)
在报告中不要写成“There are 168 individuals.” 可以插入一点代码，比如：
There are `r nrow(my_data)` individuals.

又比如：
The estimated correlation between x and y was `r cor(x,y)`.

在R Markdown中，行内代码以 `r 和 `来表示，两者间的代码会运行并显示结果。 
注意：要确保行内代码没有跨行。






========================================
|-- (5) YAML header
----------------------------------------
(5) YAML header
YAML 是一种用于指定数据的简洁的文本格式， 与JSON有些类似但可读性更强。

在R Markdown文档开头，编写如下一段代码：

---
title: "An example Knitr/R Markdown document"
author: "Karl Broman"
date: "3 Feb 2015"
output: html_document
---

文档的开头会包含格式化的标题、作者名和日期。
author: "[Karl Broman](http://kbroman.org)"

甚至是R代码：
date: "`r Sys.Date()`"  #"2021-11-20"

date: "`r Sys.time()`"  #"2021-11-20 13:53:15 UTC"

output: html_document将RMD转化为html，pdf_document 或者word_document分别转为PDF和Word .docx文件。





========================================
|-- (10) 更多注意点
----------------------------------------
(10) 其他关于代码块设置的代码问题
必须写在一行内，不含空格和句点，可以使用-和_

fig.path="abc"而不是fig.path=abc, and out.width='\\textwidth'而不是out.width=\textwidth

使用TRUE/FALSE 而不是true/false

[参考文献]：
1. http://kbroman.org/knitr_knutshell/pages/Rmarkdown.html
2. https://yihui.name/knitr/options/#package_options
3. http://rmarkdown.rstudio.com/authoring_rcodechunks.html








========================================
|-- 浮动TOC，顶部 / 侧边目录
----------------------------------------
1. 实例1：浮动侧边目录

---
title: "ROC_test"
date: "2023-09-01"
output: 
  html_document:
    toc: true
    toc_depth: 2
    toc_float: true
    collapsed: true
    smooth_scroll: true #浮动顶部目录
---

https://www.5axxw.com/questions/content/ctifmo






========================================
|-- 载入数据的代码不显示(include=FALSE)
----------------------------------------
2. 实例2: 载入代码不显示 include=FALSE
---
title: "ATAC-seq report"
output:
    html_document:
        toc: true
        toc_float: true
    
---

```{r setup, include=FALSE}

library(ggplot2)
library(ChIPseeker)
library(enrichplot)


samples <- snakemake@params$samples
diffgroups <- snakemake@params$diffgroups
peak_dir <- snakemake@params$peak_dir
diffpeak_dir <- snakemake@params$diffpeak_dir


sp1.Rdata <- paste(peak_dir, "/", samples[1], "_anno.Rdata", sep="")
load(sp1.Rdata)
```


========================================
|-- 显示运行总时间
----------------------------------------
1. 实例1

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

start_time=Sys.time()
```

# Total time
```{r, echo=FALSE}
print(Sys.time() - start_time)
```

输出:
Total time
## Time difference of 1.247322 secs




2. 实例2

# 记录使用时间
start_time=as.numeric(Sys.time())
#...
print( paste0( round(  (as.numeric(Sys.time()) - start_time)/60, 2), " minutes elapsed." ) )








========================================
批量执行/命令渲染：生成R语言报告 (Rmarkdown in Rstudio)
----------------------------------------

1. 安装 rmarkdown 包 
> BiocManager::install("rmarkdown") #2.11
> BiocManager::install("markdown") #2.11

如果默认镜像太慢，可以换镜像
> options(repos=structure(c(CRAN="https://mirrors.tuna.tsinghua.edu.cn/CRAN/")))



In order to make use of this mirror, ask R to
> chooseBioCmirror()  #选2 Japan
# https://bioc.ism.ac.jp/

and select ISM. Afterwards you can choose repositories hosted on this mirror with:
> setRepositories() #1



(2) 报错 
> BiocManager::install("littler")

/usr/bin/ld: cannot find -lpcre2-8
/usr/bin/ld: cannot find -llzma
/usr/bin/ld: cannot find -lbz2
那就跳过







2. 新建文件
(1)新建文件 File-New File-R Markdown...
选择 document，填写 title，author。

生成一个模板示例文件。
可以编写了。

然后新建文件，需要学习markdown语法，比较简单：https://www.sohu.com/a/194382686_455817
rmarkdown语法 https://www.rstudio.com/wp-content/uploads/2015/02/rmarkdown-cheatsheet.pdf


常用模板

```{r, fig.width = 3, fig.height = 3}
# R code here
```





(2) 安装好 "rmarkdown"包 就可以选择新建 R notebook，开始书写了。 
想插入代码，点顶部的Insert；
想运行代码，ctrl+Enter即可运行光标所在的行，或者选中的代码行。

这个和Rmd 的区别是啥呢？ //todo







3. 写完文件，生成html报告

编辑器顶部，单击 Knit：Knit to HTML。knit时不影响当前R的环境变量。
最后生成一个 html 文件，图片是内置的base64字符。

注意：选中语句，ctrl+enter或者点击顶部的Run，即可运行这一句代码。





========================================
|-- 批量执行，并发渲染，命令行运行，指定输出文件夹: render()
----------------------------------------

4. 高级场景: 怎么并发运行？一次渲染多个？
注意：防止输出互相覆盖！可以输出到不同文件夹。
临时文件夹都是相对于输出目录的。

# 记录使用时间
start_time=as.numeric(Sys.time())
#...
print( paste0( round(  (as.numeric(Sys.time()) - start_time)/60, 2), " minutes elapsed." ) )


(1)使用 knit，一次一个

(2)在R的命令行执行，一次一个。但是可以多开几个shell终端，多开几个R session，手动多进程。
> rmarkdown::render("path/to/xx.Rmd")

> rmarkdown::render("test3.Rmd")

(3) 使用jobs执行，可以加载多个jobs。
在Rmd同目录下，保存这句话为R脚本，使用jobs执行。
library(rmarkdown)
rmarkdown::render("test3.Rmd", html_document(toc = TRUE, toc_depth = 2), output_dir="01/")

library(rmarkdown)
rmarkdown::render("test03-v3.Rmd", html_document(toc = TRUE, toc_depth = 2), 
                  output_dir="01/", output_file = "APC") #指定文件名

(4) 使用 Rscript 在shell中执行

$ cd /home/wangjl/data/csv/
准备2个文件和一个文件夹。
├── 01/ #如果文件夹不存在，则会自动创建该文件夹
├── test3_render.R
└── test3.Rmd

$ cat test3.Rmd
---
title: "test3"
author: "wjl"
date: "`r Sys.time()`"
output: html_document
---


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## R Markdown
text here.

```{r pwd}
print(getwd())
```

## Including Plots
Plot a figure

```{r pressure, echo=TRUE}
plot(pressure)
```

End


$ cat test3_render.R
library(rmarkdown)
rmarkdown::render("test3.Rmd", html_document(toc = TRUE, toc_depth = 2), #带目录，深度最多2层
                  #params=list(),
                  output_dir="01/", output_file="xxy")  #生成的文件路径和名字

开始渲染
$ Rscript test3_render.R
Output created: 01/xxy.html
├── 01
│   └── xxy.html




(5)==> 如果不是Rstudio的shell，则会报错 
$ Rscript Seurat_Render.R 2                                                                       
Error: pandoc version 1.12.3 or higher is required and was not found (see the help page ?rmarkdown::pandoc_available).                                                                  
Execution halted

解决方法: https://stackoverflow.com/questions/28432607/pandoc-version-1-12-3-or-higher-is-required-and-was-not-found-r-shiny
Go into RStudio and find the system environment variable for RSTUDIO_PANDOC
> Sys.getenv("RSTUDIO_PANDOC") #"/usr/lib/rstudio-server/bin/pandoc"

Then put that in your R script prior to calling the render command.
> Sys.setenv(RSTUDIO_PANDOC="--- insert directory here ---")

This worked for me after I'd been struggling to find how rmarkdown finds pandoc. I had to check github to look at the source.










========================================
|-- Rmarkdown 渲染时 传参
----------------------------------------
5.怎么传递参数？带参数的报告 Parameterized reports
https://rmarkdown.rstudio.com/lesson-6.html
https://bookdown.org/yihui/rmarkdown-cookbook/parameterized-reports.html

(1) 基本用法
# R 中
for (state in state.name) {
  rmarkdown::render('input.Rmd', params = list(state = state))
}


# Rmd中
---
title: "A report for `r params$state`"
output: html_document
params:
  state: Nebraska
  year: 2019
  midwest: true
---

The area of `r params$state` is
`r state.area[state.name == params$state]`
square miles.

优先级上，在 render() 函数中设置的优先级更高，会覆盖 Rmd中yaml的params中的设置。



(2) 也可以定义函数，为每个州、每个年份生成报告
render_one <- function(state, year) {
  # assuming the output format of input.Rmd is PDF
  rmarkdown::render(
    'input.Rmd',
    output_file = paste0(state, '-', year, '.pdf'),
    params = list(state = state, year = year),
    envir = parent.frame()
  )
}

# 为每个州、每个年份生成报告
for (state in state.name) {
  for (year in 2000:2020) {
    render_one(state, year)
  }
}


(3) 使用 GUI 定义参数
> rmarkdown::render("input.Rmd", params = "ask")


(4) 完整示例: shell下使用Rscript传递参数
需要2个文件。

$ cat test4.Rmd
---
title: "test4"
author: "wjl"
date: "`r Sys.time()`"
output:
  pdf_document:
    toc: true
params:
  a1: "hello, from Rmd!"
  data: "iris"
---


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## R Markdown
text here.

```{r pwd}
print(getwd())
print(params$a1)
print(params$data) #字符串

dat2= get(params$data)
head(dat2)
```

## Including Plots
Plot a figure

```{r pressure, echo=TRUE}
plot(dat2)
```

End


$ cat test4_render.R
# 接收参数
myArgs<-commandArgs(TRUE)
if(length(myArgs)<1){
  stop("Error: must specify the dataset name!")
}
#n1=as.numeric(myArgs[1])
df1=myArgs[1]


# 渲染html报告
library(rmarkdown)
rmarkdown::render("test4.Rmd", html_document(toc = TRUE, toc_depth = 2),
                  params=list(data=df1), #传入参数
                  output_dir="01/", output_file="xxy2")



生成报告
$ Rscript test4_render.R 
Error: Error: must specify the dataset name!
Execution halted

$ Rscript test4_render.R iris
# Output created: 01/xxy2.html
网页正文是 iris 的预览和点图。



(5) 批量执行 
for var in `seq 1 9`; 
do 
	echo $var; 
	Rscript Seurat_Render.R $var; 
done;






refer:
R Markdown: The Definitive Guide  https://bookdown.org/yihui/rmarkdown/
https://www.jianshu.com/p/bc8ff133fc37
https://blog.csdn.net/lixiaomie01/article/details/78012942
https://www.math.pku.edu.cn/teachers/lidf/docs/Rbook/html/_Rbook/rmarkdown.html


使用Rstudio设置：
https://blog.csdn.net/lixiaomie01/article/details/78012942
菜单 Tools-Global option-Sweave
Weave Rnw files using: knitr;
Typeset LaTeX into PDF using: pdfLaTex







========================================
|-- R命令行 渲染时，怎么修改Rmd的工作目录？ knitr::opts_knit$set(root.dir = "/data/") 怎么规定输出文件的位置?
----------------------------------------
1. 测试表明，Rmd内部的工作目录就是该Rmd文件所在的位置，与渲染时外部R的工作目录无关。

(1) Rmd 文件
/data/wangjl/rmarkdown_demo/bookdown-demo-main/backup/test.Rmd.getwd.Rmd

# Rmd
---
title: "testPath"
author: "wjl"
date: "2022/4/19"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## R Markdown

```{r cars}
print(getwd())
```



(2) 测试1 
# test1: R shell in Rstudio
> getwd()
[1] "/data/wangjl/rmarkdown_demo/bookdown-demo-main"

> rmarkdown::render("backup/test.Rmd.getwd.Rmd", output_dir="backup/01/")
输出文件中: ## [1] "/data/wangjl/rmarkdown_demo/bookdown-demo-main/backup"




(2) 测试2
# test2: R shell in bash
$ pwd
/home/wangjl
$ R
> rmarkdown::render("/data/wangjl/rmarkdown_demo/bookdown-demo-main/backup/test.Rmd.getwd.Rmd", output_dir="backup/01/02.html")
不对，生成的文件是 Output created: backup/01/02.html/test.Rmd.getwd.html


# 先去Rstudio的R shell > Sys.getenv("RSTUDIO_PANDOC") #[1] "/usr/lib/rstudio-server/bin/pandoc"
# 然后在这里设置 pandoc 位置 
> Sys.setenv(RSTUDIO_PANDOC="/usr/lib/rstudio-server/bin/pandoc")

重新渲染
> rmarkdown::render("/data/wangjl/rmarkdown_demo/bookdown-demo-main/backup/test.Rmd.getwd.Rmd", output_dir="backup/01/", output_file="02.html")
# 生成文件是相对于当前R的工作目录的: Output created: backup/01/02.html
> getwd()
[1] "/home/wangjl"

$ cat /home/wangjl/backup/01/02.html
打开看，里面的工作目录依旧是 ## [1] "/data/wangjl/rmarkdown_demo/bookdown-demo-main/backup"

也就是Rmd的内部工作目录和启动时的环境无关了? 只和该Rmd文件所在的位置有关。







2. 想要修改工作目录，不能使用 setwd() ，因为它只影响一个 chunk，另一个 chunk 又恢复了。

(1) Rmd 文件 
---
title: "testPath"
author: "wjl"
date: "2022/4/19"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## R Markdown

```{r cars}
setwd("/home/wangjl/")
print(getwd())
```


```{r cars2}
print("chunk2:")
print(getwd())
```


(2) 测试 in Rstudio 
> rmarkdown::render("/data/wangjl/rmarkdown_demo/bookdown-demo-main/backup/test.Rmd.getwd.Rmd", output_dir="backup/01/", output_file="03.html")

输出最后有警告:
Output created: backup/01/03.html
Warning message:
In in_dir(input_dir(), evaluate(code, envir = env, new_device = FALSE,  :
  You changed the working directory to /home/wangjl (probably via setwd()). It will be restored to /data/wangjl/rmarkdown_demo/bookdown-demo-main/backup. See the Note section in ?knitr::knit

查看输出文件，是相对于 Rstudio 当前工作目录的 backup/01/03.html 
setwd("/home/wangjl/")
print(getwd())
## [1] "/home/wangjl"


print("chunk2:")
## [1] "chunk2:"
print(getwd()) #这里又恢复了。
## [1] "/data/wangjl/rmarkdown_demo/bookdown-demo-main/backup"







3. 想要修改工作目录，只能使用 opts_knit修改 root.dir

path = '/home/wangjl/data/'
knitr::opts_knit$set(root.dir = path)

(1) Rmd 文件 
---
title: "testPath"
author: "wjl"
date: "2022/4/19"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

path = '/home/wangjl/data/'
knitr::opts_knit$set(root.dir = path)
```

## R Markdown

```{r cars}
print(getwd())
```


```{r cars2}
print("in chunk2:")
print(getwd())
```

(2) Rstudio 的R shell 渲染 

> rmarkdown::render("/data/wangjl/rmarkdown_demo/bookdown-demo-main/backup/test.Rmd.getwd.Rmd", output_dir="backup/01/", output_file="04.html")

查看输出文件，是相对于 Rstudio 当前工作目录的 backup/01/04.html
print(getwd())
## [1] "/data/wangjl"


print("in chunk2:")
## [1] "in chunk2:"
print(getwd()) #这里也修改了
## [1] "/data/wangjl"






ref:
https://www.jianshu.com/p/527dd4a5bfe0





========================================
在 jupyter notebook 中执行R代码、及问题与解决：控制图片宽高
----------------------------------------
直接在terminal中运行安装代码，不会出现IRkernel等的报错～
step1:打开terminal，
step2:输入R，进入R shell，
step3:输入以下命令

1. 安装包
(1) 失败
## install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
## devtools::install_github('IRkernel/IRkernel') 
#报错 Failed to connect to api.github.com port 443: Connection refused

# IRkernel::installspec(user = FALSE) # 或者是在系统下安装



(2)找到官网 https://github.com/IRkernel/IRkernel
说可以直接安装This package is available on CRAN:

$ sudo R
> install.packages('IRkernel')

$ R
> IRkernel::installspec()  # to register the kernel in the current R installation

等待执行完毕，打开jupyter就可以新建R的notebook了。







2. 使用 
注: 我之前一直开着jupyter的，完成上述功能后，我只是刷新了一下网页，就可以用了，并没有重启jupyter。好神奇。

在jupyter中，新建，可选择的Python和R。

也可以在jupyterlab中使用该功能。







3. trouble shooting

(1)在jupyter中使用Cairo时，2条及以上输出时，输出文件会是个空文件(0 B)，在使用前先调用dev.off();
ref: https://github.com/IRkernel/IRkernel/issues/658

dev.off() #要先执行这个，否则空文件

library(Cairo)
CairoPDF('test.pdf', width=5, height=4)
hist(mtcars$mpg, main="1")
hist(mtcars$mpg, main="2")
dev.off()


(2) for中的print不会实时显示，执行结束才一起显示
ref: https://stackoverflow.com/questions/37689694/real-time-printing-to-console-with-r-in-jupyter
https://github.com/IRkernel/IRkernel/issues/659

for(i in 1:10){
    message(i) # like paste0(), can show instantly
    print(i)
    Sys.sleep(0.5)
}



(3) 在 jupyter 中控制图的宽高。Resizing plots in the R kernel for Jupyter notebooks
ref: https://stackoverflow.com/questions/42729049/how-to-change-the-size-of-r-plots-in-jupyter
options(repr.plot.width = 1, repr.plot.height = 0.75, repr.plot.res = 100)
https://blog.revolutionanalytics.com/2015/09/resizing-plots-in-the-r-kernel-for-jupyter-notebooks.html

options(repr.plot.width = 9, repr.plot.height = 4)

gene.df=pbmc.markers %>% group_by(cluster) %>% top_n(n = 3, wt = avg_logFC)
DotPlot(pbmc, features = unique(gene.df$gene) ) +
    theme(axis.text.x=element_text(angle=60, hjust=1,size=8) ) #文字旋转60度
#



#### 示例: 这个设置和pdf()中的宽高设置一样。
options(repr.plot.width=10, repr.plot.height=8) #大的
plot(1:20)

options(repr.plot.width=4, repr.plot.height=4) #小的
plot(1:20)



ref:
https://blog.csdn.net/ICERON/article/details/82743930
https://bbs.pinggu.org/forum.php?mod=viewthread&tid=5927080&ordertype=1







========================================
上传 R 报告到 Rpubs.com / ShinyApps.io
----------------------------------------
1. Publish Share your report where users can visit it online
(1) Rpubs.com
Share non-interactive documents on RStudio’s free R Markdown publishing site
www.rpubs.com

(2) ShinyApps.io
Host an interactive document on RStudio’s server. Free and paid options
www.shinyapps.io



2. 流程









========================================
使用 bookdown 写整本书，生成可视化的网站，并发布
----------------------------------------
1. 教程
https://github.com/rstudio/bookdown-demo/
https://bookdown.org/yihui/bookdown/get-started.html




2. 起步
(1) 下载框架文件，并解压
on Yi station, with Rstudio
$ cd /home/wangjl/data/rmarkdown_demo
$ wget https://github.com/rstudio/bookdown-demo/archive/refs/heads/main.zip

$ unzip main.zip
$ ls -lth
total 16K
-rw-r--r-- 1 wangjl wangjl  12K Dec 31 19:47 main.zip
drwxr-xr-x 2 wangjl wangjl 4.0K Oct 13 21:45 bookdown-demo-main

(2) 安装Rstudio和 bookdown 包。
> options(repos=structure(c(CRAN="https://mirrors.tuna.tsinghua.edu.cn/CRAN/"))) # 推荐
> install.packages("bookdown")
> library("bookdown")

(3) 单击 bookdown-demo.Rproj 打开项目。

(4) 打开 index.Rmd 文件，单击 Rstudio 右上角 Build tab下的 Build book 按钮。
报错，没有找到 latex。
还是点 build book 的下拉箭头，生成 gitbook吧。


(5) 发布到 github 






3. 书写规则
- 一个章节一个Rmd文件中。第一章节在 index.Rmd 中。


- 不执行的R语句
```{r eval=FALSE}
install.packages("bookdown")
# or the development version
# devtools::install_github("rstudio/bookdown")
```






3. 发布到 github pages 

书的代码在文件夹中
$ pwd
/home/wangjl/data/rmarkdown_demo/bookdown-demo-main

而生成的内容(html)和图片(png)分别在 _book/ 和 _bookdown_files/ 下，我们需要记录前者，并把文件名改为 docs/。
改的方法: _bookdown.yml 文件中添加一行 output_dir: "docs"


计划使用 master 分支 记录代码，使用 gh-pages 分支 记录生成的内容。

初始化项目
$ git init
Initialized empty Git repository in /data/wangjl/rmarkdown_demo/bookdown-demo-main/.git/

创建主分支
$ git add README.md changelog.txt
$ git commit -m 'v0.1 :tada: init test'
$ git branch
* master

创建网页分支
$ git checkout -b gh-pages
Switched to a new branch 'gh-pages'


(1) 主分支记录源码 
$ git checkout master
Switched to branch 'master'

$ git add .
$ git commit -m 'v0.2 add code'


推送
$ git remote add origin git@github.com:DawnEve/R_best_practice.git
$ git push -u origin master
失败！因为之前该工作站配置了多个 github 账号，要调整前缀：
$ git remote set-url origin git@eve:DawnEve/R_best_practice.git 
$ git remote -v
再次推送
$ git push -u origin master

成功。


(2) gh-pages 分支记录生成的部分。
先build一次。

1) 转到 gh-pages 分支
$ git checkout gh-pages 

2) 好干净！除了这两个文件夹，其他都没了。
$ git add docs/        #_book _bookdown_files/
$ git commit -m '20220107'
$ git push origin gh-pages

重新回到主分支
$ git checkout master 
需要再build一次。

(3) 登录 github 网页
https://github.com/DawnEve/R_best_practice/settings/pages

设置使用 gh-pages 下的 docs/ 作为网络目录。

公开访问的网址:
https://DawnEve.github.io/R_best_practice



(4) 再次更新


step1: master 生成后，mv docs docs2
-> build 
$ mv docs docs2


step2: 切换到gh-pages 分支后删掉旧的 docs/，mv docs2 docs 
$ git checkout gh-pages
$ rm -rf docs
$ mv docs2 docs

$ git add docs/
$ git commit -m '20220107-2'
$ git push origin gh-pages

$ git checkout master



一定要在 两个分支都放几个都忽视的文件夹

在 gh-pages 分支
$ cat .gitignore
加上2行
backup/
dustbin/
注释掉 doc/



4. 能否自动更新？
https://www.travis-ci.com/

使用 github 登录。
收到验证邮件。
把一个项目迁移过来，而不是全部。






========================================
|-- bookdown 使用技巧与心得 //todo && ing
----------------------------------------
1. 
另外章节的顺序也可在_bookdown.yml文件中通过rmd_files:["file1.Rmd", "file2.Rmd", ..]指定。
如果有index.Rmd，index.Rmd总是出现在第一个位置。通常index.Rmd里面也需要有一章节，如果不需要对这一章节编号的话，可以写作# Preface {-}, 关键是{-}。


2. 图片 
插入图片最好使用knitr::include_graphics，可以同时适配HTML和PDF输出。









ref:
https://zhuanlan.zhihu.com/p/442594941







========================================
github action 怎么用
----------------------------------------
听说 github action 能自动化构建和测试。

1. 几个实例

无关实例: https://github.com/rstudio/rmarkdown/blob/main/.github/workflows/update-citation-cff.yaml



详情参考本博客: git/git 场景





========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------




========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------




========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------

