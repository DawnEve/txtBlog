R杂货铺-奇淫巧技



直接指定包的版本和地址
packageurl <- "https://cran.r-project.org/src/contrib/Archive/tidyr/tidyr_1.1.0.tar.gz"
install.packages(packageurl, repos=NULL, type="source")




========================================
R 的常用设置代码： 国内包镜像， R tips
----------------------------------------
R 最核心的配置文件： $ cat /opt/R/4.2.1/lib64/R/etc/Renviron

临时设置:
install.packages("<PackageName>", repos="https://mirrors.sustech.edu.cn/CRAN")

写入配置文件：$HOME/.Rprofile
options("repos" = c(CRAN="https://mirrors.sustech.edu.cn/CRAN"))



0. 使用国内的镜像

(0) 设置国内镜像
#使用命令行设置镜像
options()$repos        ## 查看使用install.packages安装时的默认镜像
options()$BioC_mirror  ##查看使用bioconductor的默认镜像


# 设置 bioc 包源
options(BioC_mirror="https://mirrors.ustc.edu.cn/bioc/") #不好用
options(BioC_mirror="https://mirrors.tuna.tsinghua.edu.cn/bioconductor") #推荐

# 设置 R 包源
options("repos" = c(CRAN="https://mirrors.tuna.tsinghua.edu.cn/CRAN/")) ##指定install.packages安装镜像，清华镜像

getOption('repos') # 查看当前镜像


安装
install.packages("pheatmap")
install.packages("BiocManager")






(1) CRAN 默认使用国外镜像，国内的 R 用户下载包速度可能比较慢，推荐使用 CRAN 清华源。
> file.edit("~/.Rprofile")
在该文档内追加内容
options("repos" = c(CRAN="https://mirrors.tuna.tsinghua.edu.cn/CRAN/"))
保存后重启 R。

(2) Bioconductor 默认使用国外镜像，国内的 R 用户下载包速度可能非常慢，推荐使用 Bioconductor 清华源。
先使用命令打开配置文件：
> file.edit("~/.Rprofile")
然后在该文档内追加内容：
options(BioC_mirror="https://mirrors.tuna.tsinghua.edu.cn/bioconductor")
保存后重启 R。

(3) 安装开发版本的 ggplot2 包：
> remotes::install_github("tidyverse/ggplot2")

如果 git 库还没有被支持（如中国的 gitee），可以使用 remotes::install_git() 安装。


(4) 如果下载失败，可以试试指定下载工具：
options(download.file.method="wget")


(5) 如果新安装了 gcc 12，怎么在R中指定呢？
=> 非root权限安装新版 gcc: index.php?k=c&id=1_5#6

$ mkdir -p ~/.R
$ echo 'CXX17 = g++ -std=c++17 -fPIC' > ~/.R/Makevars
使用shell R继续安装：
> install.packages("RcppTOML")

$ cat ~/.R/Makevars
CXX17 = g++ -std=c++17 -fPIC







1.
options(stringsAsFactors = FALSE) #防止字符列自动转为factor


2. 工作目录
最好使用 .Rpro 文件，避免使用 setwd() 语句。
setwd("/data/wangjl/scScripts/")
getwd()


3. 新建输出文件夹
dir.create("backup/b2/") #CellTalk/

outputRoot=paste0( getwd(), "/backup/b2/") 
outputRoot


4. 如何使library包时的信息不显示
# 禁用library的显示在批量跑Rscripts时很有用，便于直观显示错误，前提是已经做好了环境冲突测试。 
suppressMessages(library(...))







========================================
|-- 查看当前的R环境、R包及其版本号，出错提问时必备： sessionInfo()
----------------------------------------
1. 获取R版本号
> R.version.string
[1] "R version 4.3.3 (2024-02-29)"

> strsplit(R.version.string, " ")[[1]][3]
[1] "4.3.3"


> version
platform       x86_64-pc-linux-gnu
arch           x86_64
os             linux-gnu
system         x86_64, linux-gnu
status
major          4
minor          3.3
year           2024
month          02
day            29
svn rev        86002
language       R
version.string R version 4.3.3 (2024-02-29)
nickname       Angel Food Cake



2. 获取R包版本
> packageVersion("ggplot2")
[1] ‘3.5.0’



3. 更详细信息
> sessionInfo()





========================================
|-- Rstudio每次打开自动加载R包: .Rprofile 文件
----------------------------------------
1. 在 .Rprofile 中加入你需要提前加载的package，语法和R code中是一样的

$ vim ~/.Rprofile
message("hello, world!")


或在R中编辑：
> file.edit("~/.Rprofile")




========================================
|-- 抑制 warning
----------------------------------------
1. options(warn=-1)

warn如果是负数，则所有warning message都被忽略
warn = 0 (0为默认值)，则所有warning messages会被储存起来直到上级函数(此例中则是repeat()函数)运行结束
warn = 1，则一旦产生warning message，这条信息会被立即显示出来
warn = 2 或更大的数值， 则warning message会被立即显示并转换成error message。此例中，如果warn = 2，整个自定义函数都会被中断，提示warning message的内容，但是会以error message的形式弹出。



2.Rstudio中，也可以
warnings('off')



ref:
https://blog.csdn.net/stat_elliott/article/details/37878247






========================================
|-- 没有 X11 导致无法画图 //todo
----------------------------------------
1. 手动安装 X11

https://www.douban.com/note/648766046/?from=tag&_i=7531721Ks5R5I5,33900656Ir1pON


2. 重新编译安装R

> capabilities()
       jpeg         png        tiff       tcltk         X11        aqua    http/ftp 
       TRUE        TRUE        TRUE        TRUE       FALSE       FALSE        TRUE 
    sockets      libxml        fifo      cledit       iconv         NLS       Rprof 
       TRUE       FALSE        TRUE        TRUE        TRUE        TRUE        TRUE 
    profmem       cairo         ICU long.double     libcurl 
       TRUE        TRUE        TRUE        TRUE        TRUE 
> Sys.getenv(c("DISPLAY"))
[1] ":0"
> options(bitmapType='cairo')
> plot(1:10)

可以了。



========================================
|-- unable to start device X11cairo:
----------------------------------------
具体设置
详见 Linux/104-user-auth: win11 Xming + Xshell







========================================
|-- 查看 rstudio 的端口号 
----------------------------------------


1. 进程查pid，pid查端口号
(1) 143 server: 分两次查
$ ps -aux | grep rstudio
rstudio+ 27962  0.2  0.0 307024 62616 ?        Ssl  Feb05   3:27 /usr/lib/rstudio-server/bin/rserver

$ sudo netstat -anp | grep 27962
tcp        0      0 0.0.0.0:8787            0.0.0.0:*               LISTEN      27962/rserver       
tcp        0      0 10.10.118.143:8787      10.10.119.138:58340     ESTABLISHED 27962/rserver 
可见，第一个ip是本机，第二个ip是远程访客。

$ ifconfig
em2: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 10.10.118.143  netmask 255.255.252.0  broadcast 10.10.119.255


(2) 193 server: 一次直接查
$ sudo netstat -anp | grep -i rserver
tcp        0      0 0.0.0.0:8888            0.0.0.0:*               LISTEN      3713/rserver        
tcp        0      0 172.18.5.193:8888       10.25.225.251:64405     ESTABLISHED 3713/rserver



========================================
|-- hit <return> to see next plot 怎么回事？
----------------------------------------
一般是执行完示例程序后遗留问题。
# 关掉算了
par(ask=F)




========================================
** [CentOS7.9] gcc 更新后，怎么在 R / Rstudio 使用最新的gcc 12： 配置gcc路径和动态链接库
----------------------------------------
可以查看第2部分的具体设置。


1. 怎么在R和Rstudio中使用最新的 gcc?
(1) 问题与答案
无法让 RStudio Server 使用较新的 gcc 版本。我尝试将 source scl_source enable devtoolset-4 附加到我的 .bash_profile 的末尾，并设置 CC、CXX 和 COLLECT_LTD_WRAPPER环境。我的主目录中的 Makevars 文件以及 $R_HOME/etc/Renviron.site 文件中的变量。在 RStudio Server 中运行 system("gcc -v") 仍然显示 gcc 版本为 4.8.5。但是，如果 ssh 进入服务器并从那里运行 R，然后检查 gcc 版本，它会使用正确的版本 (5.3.1)。

如何让 RStudio Server 中的 R session 使用更新的 GCC 版本？


最佳答案
将包含新版本的 gcc bin 的 PATH var 放入 $R_HOME/etc/Renviron.site 像这样的东西..
PATH=/opt/rh/devtoolset-8/root/usr/bin:/opt/rh/devtoolset-8/root/usr/bin
然后全局设置

您还可以在 R-studio 中针对每个 session 进行设置
Sys.setenv("PATH"="/opt/rh/devtoolset-8/root/usr/bin:/opt/rh/devtoolset-8/root/usr/bin")

关于r - 获取 RStudio Server 开源版本以使用替代 gcc 版本，我们在Stack Overflow上找到一个类似的问题： https://stackoverflow.com/questions/54463433/





(2) 实操: 配置R的make flag参数

可以使用sudo权限安装最新的gcc:
$ sudo yum install centos-release-scl
$ sudo yum install devtoolset-9


编译参数设置: https://blog.csdn.net/qq_36608036/article/details/125554341
$ cat ~/.R/Makevars
CXX11=/home/wangjl/soft/gcc-12.3.0/bin/g++ -std=c++11 -fPIC
CXX14=/home/wangjl/soft/gcc-12.3.0/bin/g++ -std=c++14 -fPIC
CXX17=/home/wangjl/soft/gcc-12.3.0/bin/g++ -std=c++17 -fPIC
gcc=/home/wangjl/soft/gcc-12.3.0/bin/gcc





(3) 实操： 配置R的gcc位置及动态链接库

a1) 设置gcc位置： 新版本的 gcc bin 的 PATH var

避免全局配置： （跳过 a1，直接看 a2）
$ find /opt/R/4.3.2/ | grep Renviron
/opt/R/4.3.2/lib64/R/etc/Renviron

> Sys.getenv("R_HOME")
[1] "/opt/R/4.3.2/lib64/R"
所以： $R_HOME/etc/Renviron.site: /opt/R/4.3.2/lib64/R/etc/Renviron.site

这里是R的配置文件
$ ls -lth /opt/R/4.3.2/lib64/R/etc/
total 24K
-rw-r--r--. 1 root root  810 Feb  4 18:15 ldpaths   动态链接库设置
-rw-r--r--. 1 root root  209 Feb  4 18:15 javaconf  
-rw-r--r--. 1 root root 1.9K Feb  4 18:15 Renviron
-rw-r--r--. 1 root root 6.6K Feb  4 18:15 Makeconf
-rw-r--r--. 1 root root 1.2K Feb  4 18:15 repositories





a2) 使用本地配置：
> file.edit("~/.Rprofile")
# for R pkg install source ----
# options(download.file.method="wget")
# 设置 Bioconductor 源国内镜像
options(BioC_mirror="https://mirrors.tuna.tsinghua.edu.cn/bioconductor") #推荐
# 设置 R 包官方源 国内镜像
options("repos" = c(CRAN="https://mirrors.tuna.tsinghua.edu.cn/CRAN/")) ##指定install.packages安装镜像，清华镜像

# 注意： 放gcc的库，还要放py的库：
# Sys.setenv("PATH"="/home/wangjl/soft/gcc-12.3.0/bin:$PATH") #这个版本不对，因为R有自己的配置文件
# For gcc new version ----
Sys.setenv("PATH"=paste0("/home/wangjl/soft/gcc-12.3.0/bin:", Sys.getenv("PATH") ) )
#Sys.setenv("LD_LIBRARY_PATH"=paste0("/home/wangjl/soft/gcc-12.3.0/lib:/home/wangjl/soft/gcc-12.3.0/lib64:", Sys.getenv("LD_LIBRARY_PATH") ) )
# 似乎在 /etc/rstudio/rserver.conf 中配置过 rsession-ld-library-path ，这里不需要再配置 LD_LIBRARY_PATH 了。

# for py library
Sys.setenv("LD_LIBRARY_PATH"=paste0("/home/wangjl/soft/python3/lib/:", Sys.getenv("LD_LIBRARY_PATH") ) )

# 保存后重启 R: 菜单 Session - Restart R;




b) 设置 gcc 的 library 位置： 还是用了Rstudio的全局配置
https://github.com/rstudio/rstudio/issues/4262
rsession-ld-library-path should be set in rserver.conf and not in rsession.conf. Let us know if that works for you!

注意： 只放gcc的库，不用放py的库：
$ cat /etc/rstudio/rserver.conf
auth-timeout-minutes=1800
rsession-ld-library-path=/home/wangjl/soft/gcc-12.3.0/lib64/:/home/wangjl/soft/gcc-12.3.0/lib/:/usr/lib64/:/usr/local/lib/:/usr/lib/



(4) 测试
> system("gcc -v")
Using built-in specs.
COLLECT_GCC=gcc
COLLECT_LTO_WRAPPER=/home/wangjl/soft/gcc-12.3.0/libexec/gcc/x86_64-pc-linux-gnu/12.3.0/lto-wrapper
Target: x86_64-pc-linux-gnu
Configured with: ./configure --prefix=/home/wangjl/soft/gcc-12.3.0 --enable-shared --enable-threads=posix --enable-languages=c,c++,fortran --disable-multilib
Thread model: posix
Supported LTO compression algorithms: zlib
gcc version 12.3.0 (GCC) 










2. 小结：R中配置的gcc的路径和库

关键信息： 按 r-universe 的记录，编译 Seurat 4.4.0(2024-2-9) 依赖 c++ 12.3.0。
	https://satijalab.r-universe.dev/builds


(0)测试：
CentOS7系统 + R4.3.2 + Seurat 5.0.1
> system("gcc --version")
gcc (GCC) 12.3.0
Copyright (C) 2022 Free Software Foundation, Inc.


> Sys.which("g++")
                                   g++ 
"/home/wangjl/soft/gcc-12.3.0/bin/g++"

> system("R --version")
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

> packageVersion("Seurat")
[1] ‘5.0.0’





(1) make 参数文件
> system("cat ~/.R/Makevars")
#CXX17 = g++ -std=c++17 -fPIC
CXX11=/home/wangjl/soft/gcc-12.3.0/bin/g++ -std=c++11 -fPIC
CXX14=/home/wangjl/soft/gcc-12.3.0/bin/g++ -std=c++14 -fPIC
CXX17=/home/wangjl/soft/gcc-12.3.0/bin/g++ -std=c++17 -fPIC
gcc=/home/wangjl/soft/gcc-12.3.0/bin/gcc


(2) R配置文件
> system("cat ~/.Rprofile")
# for R pkg install source ----
# options(download.file.method="wget")
# 设置 Bioconductor 源国内镜像
options(BioC_mirror="https://mirrors.tuna.tsinghua.edu.cn/bioconductor") #推荐
# 设置 R 包官方源 国内镜像
options("repos" = c(CRAN="https://mirrors.tuna.tsinghua.edu.cn/CRAN/")) ##指定install.packages安装镜像，清华镜像



# For gcc new version ----
Sys.setenv("PATH"=paste0("/home/wangjl/soft/gcc-12.3.0/bin:/bin/:", Sys.getenv("PATH") ) )
#Sys.setenv("LD_LIBRARY_PATH"=paste0("/home/wangjl/soft/gcc-12.3.0/lib:/home/wangjl/soft/gcc-12.3.0/lib64:", Sys.getenv("LD_LIBRARY_PATH") ) )

# rsession-ld-library-path should be set in rserver.conf and not in rsession.conf. Let us know if that works for you!
# Sys.setenv("RSESSION_LD_LIBRARY_PATH"=paste0("/home/wangjl/soft/gcc-12.3.0/lib64/:/home/wangjl/soft/gcc-12.3.0/lib/" ) )


# for py library
Sys.setenv("LD_LIBRARY_PATH"=paste0("/home/wangjl/soft/python3/lib/:", Sys.getenv("LD_LIBRARY_PATH") ) )


# for hdf5
Sys.setenv("PATH"=paste0("/home/wangjl/soft/hdf5/bin/:", Sys.getenv("PATH") ) )
Sys.setenv("LD_LIBRARY_PATH"=paste0("/home/wangjl/soft/hdf5/lib/:", Sys.getenv("LD_LIBRARY_PATH") ) )

# R_HOME_DIR
#Sys.setenv("R_HOME_DIR"=Sys.getenv("R_HOME") )
# Sys.setenv("R_HOME"=Sys.getenv("R_HOME") )


# 保存后重启 R: 菜单 Session - Restart R;



(3) linux 用户配置文件
$ cat ~/.bash_profile
export PS1='[\u@\h \W]$ '
source ~/.bashrc
TMOUT=3600


$ cat ~/.bashrc
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

export PATH="$PATH:/home/wangjl/bin"

# for python3
export PATH=/home/wangjl/soft/python3/bin:$PATH
export LD_LIBRARY_PATH=/home/wangjl/soft/python3/lib/:$LD_LIBRARY_PATH

# for gcc 12.3.0
export PATH=~/soft/gcc-12.3.0/bin:$PATH
export LD_LIBRARY_PATH=~/soft/gcc-12.3.0/lib:$LD_LIBRARY_PATH
export LD_LIBRARY_PATH=~/soft/gcc-12.3.0/lib64:$LD_LIBRARY_PATH

# for hdf5
export PATH=$PATH:/home/wangjl/soft/hdf5/bin/
export LD_LIBRARY_PATH=/home/wangjl/soft/hdf5/lib/:$LD_LIBRARY_PATH




(4) Rstudio 配置文件(sudo才能修改)
$ cat /etc/rstudio/rserver.conf 
# Server Configuration File
# 修改端口号，一般 6k-60k 之间的整数
www-port=8787

# 指定使用的R文件，听说在新版本中 Rstudio Pro 才有这个选项。
rsession-which-r=/usr/local/bin/R

# (推荐设置)无操作自动退出时间(单位是min)，0表示不退出。我希望至少是24小时(1440min)
# session-timeout-minutes=60 # 不是这个。
auth-timeout-minutes=1800

# gcc library
rsession-ld-library-path=/home/wangjl/soft/gcc-12.3.0/lib64/:/home/wangjl/soft/gcc-12.3.0/lib/:/usr/lib64/:/usr/local/lib/:/usr/lib/








========================================
|-- 安装 Seurat V5 及其配套R包 //todo
----------------------------------------
(5a) 安装R包： 跳过
要从Rcpp开始重装一遍。

> remove.packages("Rcpp")
> install.packages("Rcpp")
总是报错：Error: package or namespace load failed for ‘Rcpp’ in dyn.load(file, DLLpath = DLLpath, ...):
 unable to load shared object '/picb/jinlab/wangjl/R/x86_64-pc-linux-gnu-library/4.3/00LOCK-Rcpp/00new/Rcpp/libs/Rcpp.so':
  /lib64/libstdc++.so.6: version `GLIBCXX_3.4.20' not found (required by /picb/jinlab/wangjl/R/x86_64-pc-linux-gnu-library/4.3/00LOCK-Rcpp/00new/Rcpp/libs/Rcpp.so)

==> 有说下载 libstdc++ https://blog.csdn.net/justlpf/article/details/130077200 
$ sudo search libstdc
libstdc++.x86_64 : GNU Standard C++ Library
libstdc++-devel.x86_64 : Header files and libraries for C++ development
已安装：
$ rpm -qa | grep libstdc
libstdc++-4.8.5-44.el7.x86_64
libstdc++-devel-4.8.5-44.el7.x86_64


==> 检查报错，确实没有这个：
$ ls -lth /lib64/libstdc++.so.6
lrwxrwxrwx. 1 root root 19 May 18  2021 /lib64/libstdc++.so.6 -> libstdc++.so.6.0.19

$ strings /lib64/libstdc++.so.6.0.19  | grep GLIBCXX | tail -n 3
GLIBCXX_3.4.18
GLIBCXX_3.4.19
GLIBCXX_DEBUG_MESSAGE_LENGTH
配置好上文3b的动态链接库，就好了。

> library(Rcpp)
> 

又遇到py报错：
install.packages("igraph")
install.packages("RcppTOML")
install.packages("RcppAnnoy")
install.packages("RcppArmadillo")
install.packages("igraph")
install.packages("reticulate")
install.packages("uwot")
install.packages("sctransform")
install.packages("leiden")

> library("reticulate")
> use_python("/home/wangjl/soft/python3/bin/python3", required = T)
Error: '/home/wangjl/soft/python3/bin/python3' was not built with a shared library.
reticulate can only bind to copies of Python built with '--enable-shared'.

重新编译python3.7









(5b) 安装R包 Seurat： 使用gcc 12 和 '--enable-shared'参数重新编译py后
# $ sudo yum install glpk-devel gmp-devel libxml2-devel libssh2-devel  #https://r.igraph.org/

以下R包都删掉，重新安装：
install.packages("Rcpp") #RcppEigen/RcppHNSW/RcppProgress
RcppTOML/RcppAnnoy/RcppArmadillo/igraph/reticulate/uwot/sctransform/leiden




测试py的调用问题，注意 py和R包(不是R)都是用gcc 12编译的，且注意 ~/.Rprofile和~/R/Makevars 配置文件。
> library("reticulate")
> use_python("/home/wangjl/soft/python3/bin/python3", required = T)
> py_config()
python:         /home/wangjl/soft/python3/bin/python3
libpython:      /home/wangjl/soft/python3/lib/libpython3.7m.so
pythonhome:     /home/wangjl/soft/python3:/home/wangjl/soft/python3
version:        3.7.17 (default, Feb  7 2024, 03:28:24)  [GCC 12.3.0]
numpy:          /home/wangjl/soft/python3/lib/python3.7/site-packages/numpy
numpy_version:  1.21.6

NOTE: Python version was forced by use_python() function
> system("pip3 -V")
pip 24.0 from /home/wangjl/soft/python3/lib/python3.7/site-packages/pip (python 3.7)
> system("which pip3")
/home/wangjl/soft/python3/bin/pip3
> system("pip3 list | grep leidenalg")

$ pip3 install leidenalg #或R> system("pip3 install leidenalg -i https://pypi.douban.com/simple/")

> system("pip3 list | grep leidenalg")
leidenalg            0.10.2




> library(leiden)
Unable to install python modules igraph and leidenalg
run in terminal:
conda install -n r-reticulate -c conda-forge leidenalg python-igraph pandas umap-learn
python modules igraph and leidenalg installed
安装这些py包：
$ pip3 install igraph       #0.10.8
$ pip3 install leidenalg     #0.10.2
$ pip3 install umap-learn    #0.5.5
$ pip3 install python-igraph  #0.10.8
重启R session，从reticulate开始运行，指定py版本，再次加载 leiden 包还是同样提示红字。再次载入就不提示了。





> Sys.setenv(MAKEFLAGS = "-j32") #设置线程数
> install.packages("Seurat")
又报错：
	sh: line 1: 44914 Segmentation fault      R_TESTS= '/opt/R/4.3.2/lib64/R/bin/R' --no-save --no-restore --no-echo 2>&1 < '/tmp/RtmpOIH1To/fileaf2f72ffd501'

	 *** caught segfault ***
	address 0x20, cause 'memory not mapped'
观察发现，g++和gcc调用的可能不同？前者用的是绝对地址，那就都改为绝对地址
	$ cat ~/.R/Makevars #添加一行
	gcc=/home/wangjl/soft/gcc-12.3.0/bin/gcc


$ vim ~/.bashrc #添加2行
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8


删除之前的Rcpp等包，重新安装。
> remotes::install_github("satijalab/seurat", "seurat5", quiet = F)
> library(Seurat)
Loading required package: SeuratObject
Loading required package: sp

Attaching package: ‘SeuratObject’

The following object is masked from ‘package:base’:

    intersect
载入成功！
> packageVersion("Seurat")
[1] ‘5.0.0’
> packageVersion("SeuratObject")
[1] ‘5.0.1’






(6) 安装 Seurat 配套的R包
> remotes::install_github("satijalab/seurat-data", "seurat5", quiet = F)
查版本号：
> packageVersion("SeuratData")
[1] ‘0.2.2.9001’


> remotes::install_github("satijalab/azimuth", "seurat5", quiet = F)
报错： 
Downloading GitHub repo satijalab/azimuth@seurat5
Error: Failed to install 'Azimuth' from GitHub:
  HTTP error 404.
  No commit found for the ref seurat5

  Did you spell the repo owner (`stuart-lab`) and repo name (`signac`) correctly?
  - If spelling is correct, check that you have the required permissions to access the repo.
原因： repo 没有该标签？网页查看，是有的。
没想到下载成了问题



> remotes::install_github("satijalab/seurat-wrappers", "seurat5", quiet = F)
> remotes::install_github("stuart-lab/signac", "seurat5", quiet = F)






(7) 提升速度的包，处理大数据集的R包
# remotes::install_github("bnprks/BPCells", quiet = F)
> setRepositories(ind = 1:3, addURLs = c('https://satijalab.r-universe.dev', 'https://bnprks.r-universe.dev/'))
> install.packages(c("BPCells", "presto", "glmGamPoi"))


> install.packages("hdf5r")
报错： configure: error: The version of hdf5 installed on your system is not sufficient. Please ensure that at least version 1.8.13 is installed
ERROR: configuration failed for package ‘hdf5r’
$ rpm -qa | grep hdf5
hdf5-1.8.12-13.el7.x86_64
hdf5-devel-1.8.12-13.el7.x86_64
正好差了一个小版本号。







========================================
|-- CentOS7.9无root 编译安装依赖库: zlib, hdf5, netcdf-c-4.9, CMake 3.2
----------------------------------------
之前安装位置：/home/wangjl/soft/hdf5
$ ls -lth /home/wangjl/soft/hdf5
total 32K
drwxr-xr-x. 2 wangjl jinlab 8.0K Feb  7 15:18 bin
drwxr-xr-x. 3 wangjl jinlab 8.0K Feb  7 15:18 share
drwxr-xr-x. 2 wangjl jinlab 8.0K Feb  7 15:18 include
drwxr-xr-x. 2 wangjl jinlab 8.0K Feb  7 15:18 lib

$ rm -rf /home/wangjl/soft/hdf5
以后统一移动到：/home/wangjl/.local/


hdf5依赖于zlib


1.Build zlib: 数据压缩库
zlib 1.2.11 is a general purpose data compression library.
https://sourceforge.net/projects/libpng/files/zlib/1.2.11/

$ cd ~/Downloads/
$ wget https://sourceforge.net/projects/libpng/files/zlib/1.2.11/zlib-1.2.11.tar.xz/download
$ mv download zlib-1.2.11.tar.xz
-rw-r--r--.  1 wangjl jinlab 457K Jan 16  2017 zlib-1.2.11.tar.xz

$ tar -xvJf zlib-1.2.11.tar.xz
$ cd zlib-1.2.11
$ ./configure --prefix=/home/wangjl/.local
$ make check install
$ make check
$ make install

新增文件在：
$ ls -lth /home/wangjl/.local/include/

ok;







2. HDF5, specifying the location of the zlib library
hdf5-1.10.3.tar.bz2
(1)下载
$ cd ~/Downloads/
$ wget https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.10/hdf5-1.10.11/src/hdf5-1.10.11.tar.gz
$ tar xvf hdf5-1.10.11.tar.gz
$ cd hdf5-1.10.11

(2) 编译安装
$ ./configure --with-zlib=/home/wangjl/.local --prefix=/home/wangjl/.local
$ make clean

$ make check #似乎做了 make 的工作？耗时很久
$ make -j 10
$ make install

警告或报错:	libtool: warning: relinking 'libhdf5_hl.la'
	Libraries have been installed in:
	   /home/wangjl/.local/lib

	If you ever happen to want to link against installed libraries
	in a given directory, LIBDIR, you must either use libtool, and
	specify the full pathname of the library, or use the '-LLIBDIR'
	flag during linking and do at least one of the following:
	   - add LIBDIR to the 'LD_LIBRARY_PATH' environment variable
		 during execution
	   - add LIBDIR to the 'LD_RUN_PATH' environment variable
		 during linking
	   - use the '-Wl,-rpath -Wl,LIBDIR' linker flag
	   - have your system administrator add LIBDIR to '/etc/ld.so.conf'

(3) 检查
$ ls -lth /home/wangjl/.local/bin | head
total 4.3M
-rwxr-xr-x. 1 wangjl jinlab 161K May  2 15:20 h5watch
-rwxr-xr-x. 1 wangjl jinlab 161K May  2 15:20 h5copy
-rwxr-xr-x. 1 wangjl jinlab 157K May  2 15:20 h5format_convert


(4) 配置文件
$ vim ~/.bashrc
# for hdf5
#export PATH=$PATH:/home/wangjl/soft/hdf5/bin/
#export LD_LIBRARY_PATH=/home/wangjl/soft/hdf5/lib/:$LD_LIBRARY_PATH

# for ~/.local/ libs 
export LD_LIBRARY_PATH=/home/wangjl/.local/lib/:$LD_LIBRARY_PATH
export PATH=/home/wangjl/.local/bin:$PATH
export PKG_CONFIG_PATH=/home/wangjl/.local/lib/pkgconfig:$PKG_CONFIG_PATH


$ vim ~/.Rprofile
Sys.setenv("PATH"=paste0("/home/wangjl/soft/gcc-12.3.0/bin:/bin/:", Sys.getenv("PATH") ) )

# for hdf5, and so on.
Sys.setenv("PATH"=paste0("/home/wangjl/.local/bin/:", Sys.getenv("PATH") ) )
Sys.setenv("LD_LIBRARY_PATH"=paste0("/home/wangjl/.local/lib/:", Sys.getenv("LD_LIBRARY_PATH") ) )

报错： /bin/sh: patch: command not found
$ sudo yum -y install patch


> install.packages("hdf5r")
正常安装了。
> library(hdf5r)
Error: package or namespace load failed for ‘hdf5r’ in dyn.load(file, DLLpath = DLLpath, ...):
 unable to load shared object '/picb/jinlab/wangjl/R/x86_64-pc-linux-gnu-library/4.3/hdf5r/libs/hdf5r.so':
  libhdf5_hl.so.100: cannot open shared object file: No such file or directory
载入又报错。
重新安装：
> install.packages("hdf5r")
> # install.packages("hdf5r", configure.args="--with-hdf5=/home/wangjl/.local/bin/h5cc")

需要手动引入该文件
> dyn.load('/home/wangjl/.local/lib/libhdf5_hl.so.100')
> library(hdf5r)




(5) ===> 还可以继续安装老版本：
> remotes::install_version("SeuratObject", "4.1.4", repos = c("https://satijalab.r-universe.dev", getOption("repos")))
> remotes::install_version("Seurat", "4.4.0", repos = c("https://satijalab.r-universe.dev", getOption("repos")))




(6) rhdf5
> BiocManager::install("rhdf5")
报错： 一个g++ 命令行中出现了：
	WARNING: ignoring environment value of R_HOME 
	[1] /picb/jinlab/wangjl/R/x86_64-pc-linux-gnu-library/4.3/00LOCK-rhdf5/00new 
	[2] /picb/jinlab/wangjl/R/x86_64-pc-linux-gnu-library/4.3 
	[3] /picb/jinlab/wangjl/Downloads/R-4.3.2/library

> Sys.getenv("R_HOME")
[1] "/opt/R/4.3.2/lib64/R"

https://github.com/datasnakes/renv/issues/38
	Set R_HOME_DIR in the .Renviron to see if that helps #没作用


BiocManager::install("HDF5Array")


$ find ~/Downloads/R-4.3.2/ | grep -in "Renviron"
289:/home/wangjl/Downloads/R-4.3.2/etc/Renviron
291:/home/wangjl/Downloads/R-4.3.2/etc/Renviron.in








3.build netcdf
https://downloads.unidata.ucar.edu/netcdf/
$ wget https://downloads.unidata.ucar.edu/netcdf-c/4.9.2/netcdf-c-4.9.2.tar.gz
$ tar -zxvf netcdf-c-4.9.2.tar.gz
$ cd netcdf-c-4.9.2
$ less INSTALL.md #帮助

$ CPPFLAGS=-I/home/wangjl/.local/include LDFLAGS=-L/home/wangjl/.local/lib ./configure --prefix=/home/wangjl/.local
$ make -j 10
$ make check
$ make install

欢迎词：
| Congratulations! You have successfully installed netCDF!    |
|                                                             |
| You can use script "nc-config" to find out the relevant     |
| compiler options to build your application. Enter           |
|                                                             |
|     nc-config --help                                        |
|                                                             |
| for additional information.                                 |
|                                                             |
| CAUTION:                                                    |
|                                                             |
| If you have not already run "make check", then we strongly  |
| recommend you do so. It does not take very long.
| Before using netCDF to store important data, test your      |
| build with "make check".                                    |
|                                                             |
| NetCDF is tested nightly on many platforms at Unidata       |
| but your platform is probably different in some ways.       |
|                                                             |
| If any tests fail, please see the netCDF web site:          |
| https://www.unidata.ucar.edu/software/netcdf/                |
|                                                             |
| NetCDF is developed and maintained at the Unidata Program   |
| Center. Unidata provides a broad array of data and software |
| tools for use in geoscience education and research.         |
| https://www.unidata.ucar.edu                                 |







4. CMake 3.2 or higher
(1) 下载
$ wget https://github.com/Kitware/CMake/releases/download/v3.28.3/cmake-3.28.3.tar.gz
-rw-r--r--. 1 wangjl jinlab 11M May  2  2024 /home/wangjl/Downloads/cmake-3.28.3.tar.gz

$ tar zxvf cmake-3.28.3.tar.gz #耗时 10min
$ cd cmake-3.28.3
$ less README.rst #帮助

(2) 编译安装
$ ./bootstrap --prefix=/home/wangjl/.local/ #耗时
	报错：CMake Error at CMakeLists.txt:93 (message):
	The C++ compiler does not support C++11 (e.g.  std::unique_ptr).
	
	-- Configuring incomplete, errors occurred!
	See also "/home/wangjl/Downloads/cmake-3.25.3/CMakeFiles/CMakeOutput.log".
	See also "/home/wangjl/Downloads/cmake-3.25.3/CMakeFiles/CMakeError.log".

	$ cat CMakeFiles/CMakeError.log | grep -in error
	$ cat CMakeLists.txt | grep -i ""


==> 换之前的版本
https://github.com/Kitware/CMake/releases/tag/v3.25.3
$ wget https://github.com/Kitware/CMake/releases/download/v3.25.3/cmake-3.25.3.tar.gz
$ tar zxvf cmake-3.25.3.tar.gz #18:25->
$ cd cmake-3.25.3
$ less README.rst #帮助 $ ./bootstrap && make && sudo make install
	You need to have a C++ compiler (supporting C++11) and a ``make`` installed.
	$ ./bootstrap --help
	$ gcc --version #怎么查是否支持c++11?
	gcc (GCC) 12.3.0
	Copyright (C) 2022 Free Software Foundation, Inc.

$ ./bootstrap --prefix=/home/wangjl/.local/ #耗时 19:00->
	同样报错。

$ gmake
$ make install



==> 通过yum安装 cmake3
$ yum info cmake3  #Version     : 3.17.5
$ rpm -qa | grep -in cmake3
$ sudo yum install cmake3

$ rpm -qa | grep -in cmake3 
915:cmake3-data-3.17.5-1.el7.noarch
2074:cmake3-3.17.5-1.el7.x86_64

$ cmake3 --version
cmake3 version 3.17.5

$ which cmake3
/usr/bin/cmake3

$ ln -s /usr/bin/cmake3 ~/.local/bin/cmake
退出系统，再次登录
$ cmake --version
cmake3 version 3.17.5


(3) 检查
$ cmake --version

> system("cmake --version")




ref:
直接替换 gcc 动态链接库： https://blog.csdn.net/justlpf/article/details/130077200 太激进，没采用
Rstudio中 替代 gcc 版本： https://www.coder.work/article/8378298
	关于gcc在Rstudio中的设置 https://stackoverflow.com/questions/54463433/get-rstudio-server-open-source-edition-to-use-alternative-gcc-version














========================================
安装或更新 R base 
----------------------------------------




========================================
|-- Ubuntu 2004 安装 R 4.1.1 及 Rstudio v1.4.1717
----------------------------------------

系统从 ubuntu1804 升级到 20.04， R不能用了。


1. 删除掉之前的残余。
(1) R因为缺文件报错，不知道怎么抢救，所以只能删了重装。

$ R --version
/data/public/R-4.1.1/lib/R/bin/exec/R: error while loading shared libraries: libicuuc.so.60: cannot open shared object file: No such file or directory

$ sudo mv /data/public/R-4.1.1 /data/public/R-4.1.1-backup


(2) Rstudio: 网页也启动不了。

$ sudo service rstudio-server status
[sudo] password for wangjl: 
Unit rstudio-server.service could not be found.






2. 安装 R 

(1) 安装在 /data/public/
(2) 下载
$ wget https://mirrors.tuna.tsinghua.edu.cn/CRAN/src/base/R-4/R-4.1.1.tar.gz
$ tar zxvf R-4.1.1.tar.gz
$ cd R-4.1.1

(3) 配置
$ ./configure --prefix=/data/public/R-4.1.1 --enable-R-shlib ##必须有后面这个选项(/data/public/R-4.1.1/lib64/R/lib/libR.so)，

## ./configure --prefix=/data/public/R-4.1.1 --enable-R-shlib --with-cairo=yes #看结果默认是带 cairo的

(4) 编译 
$ make  #20:17 -> 大约6min 20:23

JAVA_HOME        : /usr/lib/jvm/java-11-openjdk-amd64
Java library path: $(JAVA_HOME)/lib/server
JNI cpp flags    : -I$(JAVA_HOME)/include -I$(JAVA_HOME)/include/linux
JNI linker flags : -L$(JAVA_HOME)/lib/server -ljvm
Updating Java configuration in /home/wangjl/soft/R-4.1.1
Done.

make[1]: Leaving directory '/data/wangjl/soft/R-4.1.1'

(5) 安装
$ sudo make install


(6) 检查版本号 
$ which R
/usr/local/bin/R

$ ls -l /usr/local/bin/R  #这是之前设置的软链接
lrwxrwxrwx 1 root root 26 Sep  3 21:39 /usr/local/bin/R -> /data/public/R-4.1.1/bin/R

$ R --version
R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under the terms of the
GNU General Public License versions 2 or 3.
For more information about these matters see
https://www.gnu.org/licenses/.


安装 R 挺顺利的。


(7) 恢复已经安装的R包
$ R 
> .libPaths()
[1] "/home/wangjl/R/x86_64-pc-linux-gnu-library/4.1"
[2] "/data/public/R-4.1.1/lib/R/library"   

$ sudo mv /data/public/R-4.1.1/lib/R/library /data/public/R-4.1.1/lib/R/library-backup
$ sudo mv /data/public/R-4.1.1-backup/lib/R/library /data/public/R-4.1.1/lib/R/library

在R中测试可用。
删除备份文件：慎重！仔细核对！
$ sudo rm -rf /data/public/R-4.1.1/lib/R/library-backup
$ sudo rm -rf /data/public/R-4.1.1-backup


ggplot2 修复了，但是 Seurat 报错，重新安装吧。
> library("ggplot2")
> library("Seurat")
Error: package or namespace load failed for ‘Seurat’ in dyn.load(file, DLLpath = DLLpath, ...):
 unable to load shared object '/data/public/R-4.1.1/lib/R/library/stringi/libs/stringi.so':
  libicui18n.so.60: cannot open shared object file: No such file or directory


使用高级权限
$ sudo R 
> library(BiocManager, lib.loc = "/data/public/R-4.1.1/lib/R/library")
Bioconductor version 3.13 (BiocManager 1.30.16), R 4.1.1 (2021-08-10)
> BiocManager::install("Seurat")
... 同意更新。
用到c的包需要重新编译。
> BiocManager::install("Seurat", force=T)
Error in dyn.load(file, DLLpath = DLLpath, ...) : 
  unable to load shared object '/data/public/R-4.1.1/lib/R/library/stringi/libs/stringi.so':
  libicui18n.so.60: cannot open shared object file: No such file or directory
Calls: <Anonymous> ... namespaceImport -> loadNamespace -> library.dynam -> dyn.load
Execution halted


> library(stringi)
Error: package or namespace load failed for ‘stringi’ in dyn.load(file, DLLpath = DLLpath, ...):
 unable to load shared object '/data/public/R-4.1.1/lib/R/library/stringi/libs/stringi.so':
  libicui18n.so.60: cannot open shared object file: No such file or directory


$ ldd /data/public/R-4.1.1/lib/R/library/stringi/libs/stringi.so
	linux-vdso.so.1 (0x00007ffd051b3000)
	libicui18n.so.60 => not found
	libicuuc.so.60 => not found
	libR.so => /usr/lib/libR.so (0x00007f7213b1b000)
...
	libicudata.so.66 => /usr/lib/x86_64-linux-gnu/libicudata.so.66 (0x00007f720f251000)
安装 missing 的包，查询 packages.ubuntu.com
wget or curl to download http://security.ubuntu.com/ubuntu/pool/main/i/icu/libicu60_60.2-3ubuntu3.1_amd64.deb (from the link I gave)
没查到。


后来重装该包，好了。
> remove.packages("stringi", lib="/data/public/R-4.1.1/lib/R/library")
> install.packages("stringi", lib="/data/public/R-4.1.1/lib/R/library")
> BiocManager::install("Seurat", force=T)
> library("Seurat")
Attaching SeuratObject
正常了。








3. 安装 Rstudio: 遇到很多报错。
https://www.rstudio.com/products/rstudio/download-server/

Install for Debian 10 / Ubuntu 18 / Ubuntu 20

$ sudo apt-get install gdebi-core
$ wget https://download2.rstudio.org/server/bionic/amd64/rstudio-server-1.4.1717-amd64.deb
$ sudo gdebi rstudio-server-1.4.1717-amd64.deb
Reading package lists... Done
Building dependency tree        
Reading state information... Done
Reading state information... Done
报错:
This package is uninstallable
Cannot install 'libclang-dev'



(2) 安装该包 
$ sudo apt install libclang-dev

Some packages could not be installed. This may mean that you have
requested an impossible situation or if you are using the unstable
distribution that some required packages have not yet been created
or been moved out of Incoming.
The following information may help to resolve the situation:

The following packages have unmet dependencies:
 libclang-dev : Depends: libclang-10-dev (>= 10~) but it is not going to be installed


2) 更新
$ sudo apt-get update
$ sudo apt-get upgrade

The following packages were automatically installed and are no longer required:
  dh-python fonts-gfs-bodoni-classic fonts-gfs-didot-classic golang-docker-credential-helpers lib32gcc1 libarmadillo8 libasan3 libbison-dev libcamd2 libcamlp4-ocaml-dev libccolamd2
  libcholmod3 libclang1-10 libclang1-6.0 libdap25 libdsdp-5.8gf libemf1 libgcc-6-dev libgnome-keyring-common libhts2 liblockfile-bin liblua5.1-0 libluajit-5.1-common libmetis5
  libnginx-mod-http-geoip libobjc4 libodbc1 libplot2c2 libpotrace0 libproj12 libpython-all-dev libpython3.6-dev libruby2.5 libsuperlu5 libumfpack5 libx11-xcb-dev libx32gcc1
  libxcb-dri2-0-dev libxerces-c3.2 libxxf86vm-dev libzip4 libzip5 linux-headers-4.15.0-132 linux-headers-4.15.0-147 linux-headers-4.15.0-147-generic linux-headers-4.15.0-156
  linux-headers-4.15.0-156-generic linux-modules-4.15.0-147-generic linux-modules-4.15.0-156-generic llvm-6.0 llvm-6.0-runtime pfb2t1c2pfb proj-data python-backports.functools-lru-cache
  python-bs4 python-chardet python-cycler python-dateutil python-decorator python-enum34 python-html5lib python-ipython-genutils python-jdcal python-lockfile python-lxml python-mistune
  python-mysql.connector python-olefile python-pep8 python-pexpect python-pil python-ptyprocess python-pycodestyle python-pygments python-pysqlite2 python-ruamel.yaml python-shellescape
  python-simplegeneric python-simplejson python-soupsieve python-subprocess32 python-traitlets python-tz python-urllib3 python-webencodings python-wheel python-xlrd ruby-did-you-mean
  x11proto-xf86vidmode-dev

Use 'sudo apt autoremove' to remove them.
The following packages have been kept back:
  build-essential cpp g++ gcc gcc-multilib gfortran libhdf5-dev
0 upgraded, 0 newly installed, 0 to remove and 7 not upgraded.

$ sudo apt autoremove
... 删除很多包。

再次执行
$ sudo apt-get update
$ sudo apt-get upgrade
The following packages have been kept back:
  build-essential cpp g++ gcc gcc-multilib gfortran libhdf5-dev
0 upgraded, 0 newly installed, 0 to remove and 7 not upgraded.


$ sudo apt-get dist-upgrade
## to get newest dependencies installed. 



3) 
$ sudo apt install libclang-dev
The following packages have unmet dependencies:
 libclang-dev : Depends: libclang-10-dev (>= 10~) but it is not going to be installed

$ sudo apt install libclang-10-dev


$ sudo apt list | grep libclang

WARNING: apt does not have a stable CLI interface. Use with caution in scripts.

libclang-10-dev/focal 1:10.0.0-4ubuntu1 amd64
libclang-10-dev/focal 1:10.0.0-4ubuntu1 i386

这是说 gcc 太落后了吗？
$ gcc --version
gcc (Ubuntu 7.5.0-6ubuntu2) 7.5.0
Copyright (C) 2017 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE





4) 搜到一个 解决方法 
https://stackoverflow.com/questions/67383617/unable-to-install-rstudio-cannot-install-libclang-dev
$ sudo aptitude install clang
     Keep the following packages at their current version:
1)     clang [Not Installed]                              
2)     clang-10 [Not Installed]                           
3)     libgcc-9-dev [Not Installed]                       
4)     libobjc-9-dev [Not Installed]                      
5)     libstdc++-9-dev [Not Installed]                    
Accept this solution? [Y/n/q/?] n

The following actions will resolve these dependencies:
     Downgrade the following packages:                                                                 
1)     gcc-9-base [9.4.0-1ubuntu1~18.04 (now) -> 9.3.0-17ubuntu1~20.04 (focal-security, focal-updates)]
2)     libasan5 [9.4.0-1ubuntu1~18.04 (now) -> 9.3.0-17ubuntu1~20.04 (focal-security, focal-updates)]  
Accept this solution? [Y/n/q/?] y
...
Do you want to continue? [Y/n/?] Y


再次安装下载好的 Rstudio 包
$ sudo gdebi rstudio-server-1.4.1717-amd64.deb
...
RStudio Server
 RStudio is a set of integrated tools designed to help you be more productive with R. It includes a console, syntax-highlighting editor that supports direct code execution, as well as tools for plotting, history, and workspace management.
Do you want to install the software package? [y/N]:y
...




(3) 检查服务
$ sudo service rstudio-server status

http://<IP>:8787/






## 由于编写Rcpp遇到Rstudio的bug，老提示错误，尝试其他机器的新版本没问题，决定升级。(2022.6.6)
老版本: Version 1.4.1717
新版本: 2022.02.3 Build 492

https://www.rstudio.com/products/rstudio/download-server/
https://www.rstudio.com/products/rstudio/download-server/debian-ubuntu/

$ cd /home/wangjl/soft/
$ wget https://download2.rstudio.org/server/bionic/amd64/rstudio-server-2022.02.3-492-amd64.deb
$ sudo gdebi rstudio-server-2022.02.3-492-amd64.deb

$ sudo service rstudio-server restart
$ sudo service rstudio-server status










========================================
|-- Build R 4.2 from source on centOS7.9 (2022.5.12)
----------------------------------------

1. 安装 centOS7 系统
在 Oracle VM VirtualBox 中安装 centOS7 系统。
宿主机是 ubuntu1804, vm 版本号是 6.1。

(1) 新建虚拟机，内存2G，磁盘 15G。
(2) 导入 iso 文件到光盘
CentOS-7-x86_64-Everything-2009.iso  9.5GB

启动
授权 硬盘自动分。
software selection, 选择 Server with GUI/ GNOME Desktop?前者吧。
同时勾选右侧的 NFS 和 development tools
点击开始，设置root 密码 123，设置 user wangjl/123 勾选作为管理员。
等待安装: 15:21--> 16:02

reboot.
如果默认安装 minimal，是shell界面！
Server with GUI 是图形界面。

重启同意条款。同意联网。


设置自动联网。
右击，最下面打开终端，修改活动网卡(就是 ifconfig 中你正在使用的IP所在的那个网卡)的配置文件的 ONBOOT 为 yes
$ grep -i onboot /etc/sysconfig/network-scripts/ifcfg-enp0s3 
ONBOOT=yes

$ sudo reboot # 重启，看网络正常连接



(3) 安装基础工具
$ sudo yum install vim -y
$ sudo yum install tmux -y
保存虚拟机快照。万一做错了恢复该快照，重来。


(4) 查看系统版本号
$ cat /etc/redhat-release
CentOS Linux release 7.9.2009 (Core)


# 这一步安装可跳过
$ sudo yum install redhat-lsb -y
$ lsb_release -a
LSB Version:	:core-4.1-amd64:core-4.1-noarch:cxx-4.1-amd64:cxx-4.1-noarch:desktop-4.1-amd64:desktop-4.1-noarch:languages-4.1-amd64:languages-4.1-noarch:printing-4.1-amd64:printing-4.1-noarch
Distributor ID:	CentOS
Description:	CentOS Linux release 7.9.2009 (Core)
Release:	7.9.2009
Codename:	Core







2.开始yum安装R
(1) 检查系统自带的版本号
$ R
bash: R: command not found...
没有。真是个空白系统。


(2) yum 安装的R太古老
之前尝试的，是
$ which R
/usr/bin/R

$ R --version
R version 3.6.0 (2019-04-26) -- "Planting of a Tree"



(3) 另一个工作站的R 
$ which R
/usr/local/bin/R

$ R --version
R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)






3. 使用源码安装最新版 R

(1) 下载与解压
https://cran.rstudio.com/src/base/R-4/
最新版的是  R-4.2.0.tar.gz          2022-04-22 07:05   36M 

$ cd 
$ mkdir soft && cd soft
$ export R_VERSION=4.2.0

$ wget https://cran.rstudio.com/src/base/R-4/R-4.2.0.tar.gz
$ tar -xzvf R-${R_VERSION}.tar.gz
$ cd R-${R_VERSION}



(2) Build and install R

## 升级系统，补充一些包
$ tmux   #升级时间较长，防止意外中断
$ sudo yum install epel-release 
$ sudo yum update 
# #565M, 286个包，可能需要几个小时，取决于网速。中间 GPG key 选 y;  16:47--> 17:05 
### sudo shutdown -r now  #能跳过重启


安装build的依赖
$ sudo yum-builddep R 
##188M, 281个包，耐心等待 17:11-->17:19



配置，主要是--prefix 指定安装位置
$ sudo mkdir -p /opt/R/
$ ./configure \
--prefix=/opt/R/${R_VERSION} \
--enable-memory-profiling \
--enable-R-shlib \
--with-blas \
--with-lapack

最后报警告，可以忽略，没啥影响。
configure: WARNING: neither inconsolata.sty nor zi4.sty found: PDF vignettes and package manuals will not be rendered optimally


编译 17:21-->17:27
$ make

安装
$ sudo make install

清理残余
$ make clean




(3) 检查
$ ls /opt/R/${R_VERSION}/
bin lib64 share

$ /opt/R/${R_VERSION}/bin/R --version
R version 4.2.0 (2022-04-22) -- "Vigorous Calisthenics"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)



(4) 添加软链接
Create a symlink to R
$ sudo ln -s /opt/R/${R_VERSION}/bin/R /usr/local/bin/R
$ sudo ln -s /opt/R/${R_VERSION}/bin/Rscript /usr/local/bin/Rscript




(5) 再次检查当前R
重新登录终端
$ ssh wangjl

$ which R
/usr/local/bin/R

$ R --version
R version 4.2.0 (2022-04-22) -- "Vigorous Calisthenics"
已经是R最新版了

$ whereis R
R: /usr/local/bin/R






4. 安装 Rstudio server
Download RStudio Server
Download RStudio Server for Red Hat/CentOS: https://www.rstudio.com/products/rstudio/download-server/
Install for Red Hat / CentOS 7: https://www.rstudio.com/products/rstudio/download-server/redhat-centos/

(1) 下载与安装
$ cd ~/soft/
$ wget https://download2.rstudio.org/server/centos7/x86_64/rstudio-server-rhel-2022.02.2-485-x86_64.rpm
$ sudo yum install rstudio-server-rhel-2022.02.2-485-x86_64.rpm


检查服务状态
$ sudo service rstudio-server status
看到 active (running) 表示启动了。


(2) 查IP
$ ifconfig
查询IP地址：192.168.2.105
对于云服务器，使用公网IP。


(3) 打开防火墙的 8787 端口
//开放8787端口访问
$ sudo iptables -I IN_public_allow -p tcp --dport 8787 -j ACCEPT
$ sudo iptables -I INPUT -p tcp --dport 8787 -j ACCEPT

## 这样也行，我没试过。
sudo firewall-cmd --permanent --zone=public --add-port=8787/tcp
sudo firewall-cmd --reload



(4) 浏览器登录 Rstudio server 
打开浏览器，输入 http://<IP>:8787/ 即可看到 Rstudio server 的登录界面。
输入自己的 linux 用户名和密码，即可使用R了。
里面也是R的最新版 R 4.2.0






5. 个性化设置(可选)
https://support.rstudio.com/hc/en-us/articles/200552316-Configuring-the-Server

(1) 主要是这2个文件:
/etc/rstudio/rserver.conf
/etc/rstudio/rsession.conf

$ sudo vim /etc/rstudio/rserver.conf
# 修改端口号，一般 6k-60k 之间的整数
www-port=8788

# 指定使用的R文件，听说在新版本中 Rstudio Pro 才有这个选项。
rsession-which-r=/usr/local/bin/R

# (推荐设置)无操作自动退出时间(单位是min)，0表示不退出。我希望至少是24小时(1440min)
# session-timeout-minutes=60 # 不是这个。
auth-timeout-minutes=1800


# 外部库。通过修改rsession-ld-library-path 添加系统的库路径作为外部库以供RStudio server调用。
# 有时候R需要依赖系统的一些库的时候，就可以添加上系统库的路径让R也可以调用到
rsession-ld-library-path=/usr/lib64/:/usr/local/lib/:/usr/lib/  #没看出来有啥用




(2) 所有修改的配置文件都是在重启服务后才生效
$ sudo service rstudio-server restart

开端口
$ sudo iptables -I IN_public_allow -p tcp --dport 8788 -j ACCEPT
$ sudo iptables -I INPUT -p tcp --dport 8788 -j ACCEPT


再看登录页面 http://192.168.2.105:8788/auth-sign-in
显示: You will automatically be signed out after 1800 minutes of inactivity.

> .libPaths()
[1] "/home/wangjl/R/x86_64-pc-linux-gnu-library/4.2"
[2] "/opt/R/4.2.0/lib64/R/library"



(3) 启动与停止 rstudio-server 服务
$ service rstudio-server status #服务状态
Redirecting to /bin/systemctl status rstudio-server.service
● rstudio-server.service - RStudio Server
   Loaded: loaded (/usr/lib/systemd/system/rstudio-server.service; enabled; vendor preset: disabled)
   Active: active (running) since Thu 2022-05-12 06:07:49 EDT; 5min ago  #表明运行正常

$ sudo service rstudio-server start  #开启服务
$ sudo service rstudio-server stop # 关闭服务





(4) 设置开机启动(主要是设置防火墙)

#重启后，检查服务是否开启
$ sudo reboot 
$ service rstudio-server status # 服务状态，开启

但是网页端无法访问，原因是防火墙拦截了。
之前的端口设置是暂时的，怎么能设置成永久的呢？

$ sudo iptables -I INPUT -p tcp --dport 8788 -j ACCEPT

#保存修改到数据表，报错
$ sudo service iptables save
The service command supports only basic LSB actions (start, stop, restart, try-restart, reload, force-reload, status). For other actions, please try to use systemctl.



解决方法：关掉 firewalld 打开 iptables-services 服务。 
$ sudo systemctl stop firewalld     #关闭防火墙
$ sudo systemctl disable firewalld.service #禁止firewall开机启动
$ sudo yum install iptables-services 　 #安装或更新服务
$ sudo systemctl enable iptables        #启动iptables
$ sudo systemctl start iptables        #打开iptables
$ sudo service iptables save        #保存

重启iptables服务：
$ sudo service iptables restart
执行完毕之后 /etc/sysconfig/iptables 文件就有了

查看该文件
$ sudo cat /etc/sysconfig/iptables
# Generated by iptables-save v1.4.21 on Thu May 12 06:34:05 2022
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [332:66077]
-A INPUT -p tcp -m tcp --dport 8788 -j ACCEPT
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
-A INPUT -p icmp -j ACCEPT
-A INPUT -i lo -j ACCEPT
-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT
-A INPUT -j REJECT --reject-with icmp-host-prohibited
-A FORWARD -j REJECT --reject-with icmp-host-prohibited
COMMIT
# Completed on Thu May 12 06:34:05 2022


查看防火墙端口状态 
$ sudo iptables -nL

再重启时，服务本身就启动了，端口也开了，就可以直接登录网页版 rstudio 了。








(5) 一般要安装这2个包，再安装 devtools
$ sudo yum install libxml2-devel
$ sudo yum install openssl-devel

> install.packages("devtools")
> library("devtools")





> install.packages("Seurat")
# ERROR: dependencies ‘leiden’, ‘reticulate’, ‘SeuratObject’ are not available for package ‘Seurat’
# installation of package ‘RcppTOML’ had non-zero exit status

> install.packages("BiocManager")
> BiocManager::install("Seurat")






========================================
|-- centOS7 的 Rstudio 出错打不开怎么办？
----------------------------------------
1. 查看错误报告
$ sudo journalctl -u rstudio-server


$ sudo service rstudio-server status
Active: active (running) since Mon 2023-01-02 17:09:02 CST; 2min 31s ago


查看端口号
$ sudo vim /etc/rstudio/rserver.conf
www-port=8888


重启
$ sudo rstudio-server restart 
TTY detected. Printing informational message about logging configuration. Logging configuration loaded from '/etc/rstudio/logging.conf'. Logging to '/var/log/rstudio/rstudio-server/rserver.log'.


按命令 查进程号
$ sudo ps -aux | grep rstudio
rstudio+  76782  0.0  0.0 185008  6296 ?        Ssl  17:17   0:00 /usr/lib/rstudio-server/bin/rserver
wangjl    77230  0.0  0.0 110536   908 pts/4    S+   17:23   0:00 grep --color=auto rstudio



(2)按端口号查 pid
$ sudo netstat -anp | grep 8888
tcp        0      0 0.0.0.0:8888            0.0.0.0:*               LISTEN      76782/rserver       

$ sudo lsof -i:8888
COMMAND   PID           USER   FD   TYPE   DEVICE SIZE/OFF NODE NAME
rserver 76782 rstudio-server    7u  IPv4 34455933      0t0  TCP *:ddi-tcp-1 (LISTEN)



(3) 查看打开的端口
$ sudo iptables -nL
target     prot opt source               destination         
ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:8888


最后发现换个浏览器就可以了，或者不使用域名，使用IP也行。
为什么使用 chrome+域名 不行，不清楚。





ref:
https://zhuanlan.zhihu.com/p/432156941









========================================
使用他人的R包路径 .libPaths()
----------------------------------------

1. monocle3 R pkg on 193 server
# use zhoub's R lib path, which contain monocle3 R pkg on 193

(1) in shell (可能非必要步骤)
$ vim ~/.bashrc #添加一行
export LD_LIBRARY_PATH="/home/zhoub/local/gdal-2.4.2/lib:$LD_LIBRARY_PATH"

$ source ~/.bashrc


(2) in R
重启 Rsession: Rstudio 菜单 Session - Restart R
> .libPaths( c(.libPaths(), "/home/zhoub/R/x86_64-pc-linux-gnu-library/4.2"))

> .libPaths()
[1] "/data/jinwf/wangjl/R/x86_64-pc-linux-gnu-library/4.2" "/opt/R/lib64/R/library"                              
[3] "/home/yushiya/R/x86_64-pc-linux-gnu-library/4.2"      "/home/zhoub/R/x86_64-pc-linux-gnu-library/4.2" 

(3) load C library
> dyn.load("/home/wangjl/local/gdal-2.4.4/libgdal.so.20.5.4") #必要

(4) 
> library(monocle3) #1.2.9











========================================
|-- 安装github上某个包，使用@指定 hash 
----------------------------------------

devtools::install_github("DawnEve/GEB@a809754")






========================================
如何在shell脚本中调用R脚本并传递参数？各种运行R及R脚本的方法 -- (打造pipeline必备技能)
----------------------------------------

$ Rscript path/to/myscript.R
$ Rscript path/to/myscript.R arg1 arg2 arg3

myArgs<-commandArgs(TRUE)

print(myArgs)
print(class(myArgs))

n1=as.numeric(myArgs[1])





1.目的: shell中调用R脚本

(1)准备 R 脚本
$ cat myRscript.R 
library('ggplot2')
library('Cairo')

print("this is a line")

CairoPDF(file="test.pdf",width=5,height=5)
ggplot(diamonds, aes(carat, price))+geom_point()
dev.off()


(2) shell调用该脚本

方法1: Rscript 直接在屏幕上显示结果（推荐使用该方法，直观）
$ Rscript myRscript.R 
## 可以看到生成的pdf文件，和打印出来的文字，及其他信息。


方法2: R CMD BATCH 结果输出到文件（结果就像截屏，相当于代码逐行执行。不推荐） 详细实例看(5)
$ R CMD BATCH myscript.R  #标准输出重定向到 .Rout 文件。
## Check the output
$ cat myscript.Rout


如果碰到报错了，请看2
如何传入参数，请看3




(3) 如果写好头文件，添加可执行权限，则可以直接在shell中传参并执行
$ cat test.R 
#!/usr/bin/env Rscript

args = commandArgs(trailingOnly = TRUE)
n=as.numeric( args[1L] )
print( paste("n=", n+1 ) );
message(sprintf("Hello %s", args[2L]))


关于第一行，建议用这种写法，方便在不同电脑上一致。而绝对路径则换个电脑就需要修改代码。
但是绝对地址能指定是哪一个版本的的R，否则默认就是使用路径中的第一个R。
The first line is the shebang line. It’s best practice to use /usr/bin/env Rscript instead of hard-coding the path to your R installation. Otherwise you risk your script breaking on other computers.

增加执行权限，然后传入2个参数并执行： 
$ chmod +x test.R
$ ./test.R 10 fromShell
[1] "n= 11"
Hello fromShell

小结: print() 显示有编号[1]，而 message 则更像原生shell 输出。




(4) 在一行shell中同时执行多个R脚本

$ Rscript -e 'date()' -e 'format(Sys.time(), "%a %b %d %X %Y")'
[1] "Wed Jul 21 11:20:05 2021"
[1] "Wed Jul 21 11:20:05 AM 2021"

$ Rscript -e 'Sys.time()'
[1] "2021-07-21 11:23:14 CST"

$ Rscript -e "head(iris,2)"
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4         0.2  setosa



还可以单行执行R -e 但是会有很多无用的R启动输出(不推荐)
$ R -e 'install.packages(c("package1", "package2"))'
R -e 'install.packages(c("package1", "package2"), lib="/usr/local/lib/R/site-library")'  #指定安装地址









(5) R CMD BATCH foo.R  重定向标准输出到文件 .Rout，比如 foo.Rout
$ cat foo.R
set.seed(2021)
print(rnorm(10))

$ R CMD BATCH foo.R  #默认生成的是 .Rout 文件
$ cat foo.Rout #查看，共27行
R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
...
> set.seed(2021)
> print(rnorm(10))
 [1] -0.12245998  0.55245663  0.34864950  0.35963224  0.89805369 -1.92256952
 [7]  0.26174436  0.91556637  0.01377194  1.72996316
> 
> proc.time()
   user  system elapsed 
  0.492   0.487   0.153


Note: you'll want to try out the --vanilla and other options to remove all the startup cruft.
cruft [krʌft] 令人讨厌的东西，不整齐的部分

$ R CMD BATCH --vanilla foo.R
查看结果，没啥变化。








2.报错： 碰到gglot2包总是找不到，怎么办？

(1)查询R包调用路径
> .libPaths()
[1] "/home/wangjl/R/x86_64-redhat-linux-gnu-library/3.5"
[2] "/usr/lib64/R/library"                              
[3] "/usr/share/R/library"


(2)临时设置R包调用路径（退出R，设置就失效了。下次还要重新设置）
> library(ggplot2) #没有找到
Error in library(ggplot2) : there is no package called ‘ggplot2’
> 
> .libPaths()
[1] "/usr/lib64/R/library" "/usr/share/R/library"
> .libPaths("/home/wangjl/R/x86_64-redhat-linux-gnu-library/3.5") #添加R包新路径
> 
> library(ggplot2) 
Registered S3 methods overwritten by 'ggplot2':
  method         from 
  [.quosures     rlang
  c.quosures     rlang
  print.quosures rlang

(3)添加文件 ~/.Rprofile 
.libPaths("/home/wangjl/R/x86_64-redhat-linux-gnu-library/3.5")

则再次使用终端打开R时，就会自动加载好该包地址。






3. 在shell中调用R脚本，怎么传入/获取参数？

脚本 my2.R
$ cat my2.R 
#获取命令行参数
myArgs<-commandArgs(TRUE)

#myArgs是所有参数的向量
print(myArgs) 
print(class(myArgs))


shell 调用
$ Rscript my2.R 12 2 35
[1] "12" "2"  "35"
[1] "character"

注意取出来的参数是所有参数连在一起的character
第一个参数的下标是1.
需要变成数字的话，需要R代码实现：as.numeric(myArgs[1])





4. 如何在shell脚本中调用R脚本，并传递参数
$ cat my3.R
myArgs<-commandArgs(TRUE)

#myArgs是所有参数的向量
print(myArgs)
print(class(myArgs))

n1=as.numeric(myArgs[1])
n2=as.numeric(myArgs[2])
print(n1+n2)

$ cat test.sh
#!/bin/bash
source /etc/profile
echo "start: `date`"
/usr/bin/Rscript my3.R $1 $2 #不用绝对路径也可以
echo "end:`date`"


输出
$ Rscript my3.R 12 2 35
[1] "12" "2"  "35"
[1] "character"
[1] 14

$ bash test.sh 12 2 35
start: Thu Jul 18 04:01:08 EDT 2019
[1] "12" "2" 
[1] "character"
[1] 14
end:Thu Jul 18 04:01:08 EDT 2019



(2) 如果不加True，则会从第六个才是参数
$ vim test.R
Args <- commandArgs()
cat("Args[1]=",Args[1],"\n")
print(Args)

$ Rscript test.R 1 2 3
Args[1]= /usr/lib64/R/bin/exec/R 
[1] "/usr/lib64/R/bin/exec/R" "--slave"                
[3] "--no-restore"            "--file=test.R"          
[5] "--args"                  "1"                      
[7] "2"                       "3"




5.在shell脚本中调用R脚本，并在shell中接收返回值，判断是否成功执行 //todo









refer:
1.传参 https://www.cnblogs.com/awishfullyway/p/6632662.html
2.R包路径 https://bbs.pinggu.org/forum.php?mod=viewthread&tid=4585044&page=1
3.如何用R写命令行工具 https://blog.sellorm.com/2017/12/18/learn-to-write-command-line-utilities-in-r/ //todo



========================================
|-- 如何在R中调用shell脚本?
----------------------------------------
1. system() invokes the OS command specified by command.
Usage
system(command, intern = FALSE,
       ignore.stdout = FALSE, ignore.stderr = FALSE,
       wait = TRUE, input = NULL, show.output.on.console = TRUE,
       minimized = FALSE, invisible = TRUE)
#

(2). 实例
R脚本
$ vim test.R
Args <- commandArgs(T)

shell_cmd<-paste0("grep -n CHR ",Args[1])
grep_out<-system(shell_cmd, intern = TRUE) #调用shell的grep命令
# cat(grep_out)
print(grep_out)

文档内容
$ cat aa.txt 
this
is CHR
a
CHR2 book

调用结果
$ Rscript test.R aa.txt
# 2:is CHR 4:CHR2 book  ## R中使用cat的输出
[1] "2:is CHR"     "4:CHR2 book "






2. 更多实例
https://github.com/ElkonLab/scAPA/blob/master/scAPA/R/First_threesteps.R

(1) 封装到R函数 
#'  The function reads the output file generated by Homer findPeaks. It
#'  Renders it into a bed file, sort it, and then merge peaks that are
#'  less than 100 (nt) apart using bedtools merge.
#' @return Writes a bed file 'merge.peakfile.bed' with the merged peaks.
merge_peaks <- function(bedtools.path, path, peaks.file){
	# home_dir <- getwd()
	# on.exit(setwd(home_dir))
	# setwd(path)
	
	#R中执行 awk 
	readHomerfile.command <- paste0('awk \'BEGIN{OFS = "\t"}{if(NR>34) ',
								  'print $2, $3, $4, "',
								',.",".",$5}\' ', peaks.file,
								' > ./notsorted_notmerged_peak.bed')
	system(command = readHomerfile.command, wait = T)  
	
	# R中调用 bedtools sort 
	# Sort the bed using bedtools Sort (required for bedtools merge)
	bedtools.sort.command <- paste0(bedtools.path, "bedtools sort -i ./notsorted",
									 "_notmerged_peak.bed > ./notmerged_peak.bed")
	system(command = bedtools.sort.command, wait = T)
	system(command = "rm ./notsorted_notmerged_peak.bed", wait = T) # 删掉临时文件 rm
	
	
	# Merge using bedtools merge
	bedtools.merge.command <- paste0(bedtools.path,
									 "mergeBed -d 100 -s -c 6 -o distinct -i ",
									 "./notmerged_peak.bed > ./merge.peakfile")
	system(command = bedtools.merge.command, wait = T)
	
	#Turning the output into a bed file
	render.tobed.command <- paste0('awk \'BEGIN{OFS = "\t"}{print $1, $2, $3, ',
								   '".",".",$4}\' ./merge.peakfile > .',
								   '/merge.peakfile.bed')
	system(command = render.tobed.command, wait = T)
	system(command = "rm ./merge.peakfile", wait = T)
	system(command = "rm ./notmerged_peak.bed", wait = T)
}




========================================
|-- R 调用 R脚本 (实例)：并发执行
----------------------------------------
3. R 调用 R脚本(这个不能控制并发核心数)
假设有一个耗时任务，我们使用多线程加快进度。

step1:
- 100个细胞，分成批次，多线程执行
- 分别对cid加1
- 保存为文件
step2:
- 合并各批次结果


$ seq 1 100 >cid.txt
|-cid.txt


一共包括2个R脚本，第一个调用第二个。
|-master.R 
|-worker.R 


$ cat master.R 
# separate the task
batch=30;
total=100;


last=0;
for(i in 1:total){
  if(i %% batch == 0){
    # cat(last+1, i, "\n");
    system(command = paste0("Rscript worker.R ",last+1, " ", i) , wait = F)
    last=i;
  }
}

if(last+1 < total){
    # cat(last+1, total, "\n");
    system(command = paste0("Rscript worker.R ",last+1, " ", total) , wait = F)
}





$ cat worker.R
# get parameters
myArgs<-commandArgs(TRUE)

id1=as.numeric(myArgs[1])
id2=as.numeric(myArgs[2])
cat("start working, from-to: ", id1, id2, "\n");

# get cell id by the input para
cids= readLines("cid.txt");
cids=cids[id1:id2]

# a time-consuming job
work=function(id){
  Sys.sleep(0.01 + runif(1)*0.02);
  return( as.numeric(id)+1);
}

# do the analysis
df=NULL;
for(i in 1:length(cids)){
 # cat(i, cids[i], "\n");
 id=cids[i];
 df=rbind(df,  data.frame(
    id=id,
    result=work(id)
  ));
}
#print(df);
write.table(df,  paste0("tmp/result_",id1, "_", id2, ".txt"), col.names=F, quote = F )



运行：
$ mkdir tmp/
$ Rscript master.R 

手动合并
$ cat tmp/result* tmp/total.txt

检查结果 
$ ls -lth tmp/







2. 使用snakemake可以控制并发脚本数，在R中调用 snakemake 脚本，并读取最终结果文件。
snakemake 脚本在: https://github.com/DawnEve/snakemakeWorkflow/tree/master/R_script/demo1

如何不打扰用户的情况下调用 python 并发脚本？

$ seq 1 100 > cid.txt
$ R
snakePath="/home/wangjl/soft/snakemakeWorkflow/R_script/demo1/"
threads=4;
system(command = paste0("snakemake -s ",snakePath,"main.sf -p -j ", threads) , wait = T);
# here will be many output text like you run snakemake in shell, wait until task ends.

a=readLines("worker/stat.txt")
print(a) #[1] "5150"







ref:
https://www.cnblogs.com/emanlee/p/6930884.html





========================================
|-- Rscript --vanilla 是什么模式？ //todo
----------------------------------------
1. 见过的实例

(1) shell 直接调用的情况
$ Rscript --vanilla drawPCA.R normed.csv output.pdf

(2) 在py中调用R脚本，并传参
import subprocess
subprocess.call("/usr/local/bin/Rscript --vanilla script.r input.txt output.pdf", shell=True)

貌似无法获取结果。除非写到文件中，在用py读进来？


(3) R 中调用R脚本
> system("Rscript --vanilla test.R")


(4) 自己用的话
#! /usr/bin/Rscript --vanilla

考虑多个R版本，则使用 
#! /usr/bin/env Rscript
这会在当前环境(PATH)中正确的地方查找。
这种情况下无法加 --vanilla 参数。

#! /usr/bin/env Rscript --vanilla
     the error message simply is
/usr/bin/env: Rscript --vanilla: No such file or directory


(5) 参数的控制
https://www.r-bloggers.com/2015/09/passing-arguments-to-an-r-script-from-command-lines/

$ cat sillyScript.R
#!/usr/bin/env Rscript
args = commandArgs(trailingOnly=TRUE)

# test if there is at least one argument: if not, return an error
if (length(args)==0) {
  stop("At least one argument must be supplied (input file).n", call.=FALSE)
} else if (length(args)==1) {
  # default output file
  args[2] = "out.txt"
}

## program...
df = read.table(args[1], header=TRUE)
num_vars = which(sapply(df, class)=="numeric")
df_out = df[ ,num_vars]
write.table(df_out, file=args[2], row.names=FALSE)


运行脚本
$ Rscript -e "write.table(iris, 'iris.txt')" #提供数据

$ Rscript --vanilla sillyScript.R iris.txt out2.txt
或
$ Rscript --vanilla sillyScript.R iris.txt

$ Rscript --vanilla sillyScript.R #报错
Error: At least one argument must be supplied (input file).n
Execution halted








2. 这个 Rscript --vanilla 啥意思？

(1) 线索1 https://stackoverflow.com/questions/12540138/how-can-i-make-my-r-session-vanilla

How can I ensure a consistent R environment among different users on the same server?
- 不受特定用户设置的影响，
- doesn't read R history, profile, or environment files
- doesn't reload data or objects from previous sessions

help("vanilla")
?new.env

(2) ??vanilla
Run an R child process, with no configuration
运行一个没有配置项的R子进程。

Description
It tries to mimic a fresh R installation. In particular:
 - No library path setting.
 - No CRAN(-like) repository is set.
 - The system and user profiles are not run.

该模式下
library(callr)
r(.libPaths()) #不起作用
r(function() .libPaths()) 可以。












========================================
R语言-代码规范（Google's R Style Guide）
----------------------------------------
R是一个高级编程语言主要用于统计计算和图形。R编程风格指南的目标是使我们的R代码更容易阅读、分享和验证。
以下R代码规则是在谷歌的整个R合作用户社区下进行设计的。

在2016年，Google发布了R语言编程规范指导，一共有15条，分别有：覆盖文件名规范，变量名规范，每行代码长度，缩进，花括号使用，赋值表达，if else，分号的不使用，函数定义，函数注释等等。


R语言的代码规范总结起来有以下内容：
1.对象命名要赋予意义
2.使用空行来分割逻辑
3.必要时使用注释和花括号
4.不用的代码和引用删除，代码整洁，精炼而富有含义。
5.不要用中文拼音做变量名，提高代码水平层次
6.代码程序可用，清晰优雅，高效
7.多写代码，多思考， 常常回顾代码。




1. 符号和命名(Notation and Naming)

(1)文件名(File names)
File names should end in .R and, of course, be meaningful.
GOOD: predict_ad_revenue.R
BAD: foo.R


(2)标识符（Identifiers）
不要使用下划线(_)或连字符(-)标识符。
标识符应按照以下命名约定。
变量名的首选形式都是小写字母和单词分开用点(variable.name),但也接受variableName;函数名最初的大写字母和没有点(FunctionName);

##? 为什么不提倡下划线呢？

1)variable.name is preferred, variableName is accepted
GOOD: avg.clicks
OK: avgClicks
BAD: avg_Clicks

2)FunctionName
GOOD: CalculateAvgClicks
BAD: calculate_avg_clicks , calculateAvgClicks
Make function names verbs.
Exception: When creating a classed object, the function name









2.语法（Syntax）
(1)每行最大长度（Line Length）
The maximum line length is 80 characters.

(2)缩进（Indentation）
当缩进代码, 使用两个空间。绝不使用制表符或混合制表符和空格。例外:括号内发生换行时,使其与括号内的第一个字符对齐。

(3)间距（Spacing）
所有的二元操作都需要空格，（=，+ ，- ，<-）前后都需要空格。
例外:当符号 = 是函数调用时的传递参数周围不用空格隔开。
不要在符号“，”前空格隔开，但需要在“，”后添加空格
GOOD:
	tab.prior <- table(df[df$days.from.opt < 0, "campaign.id"]) 
	total <- sum(x[, 1]) 
	total <- sum(x[1, ])

BAD:
	tab.prior <- table(df[df$days.from.opt<0, "campaign.id"])  # Needs spaces around '<' 
	tab.prior <- table(df[df$days.from.opt < 0,"campaign.id"])  # Needs a space after the comma
	tab.prior<- table(df[df$days.from.opt < 0, "campaign.id"])  # Needs a space before <-
	tab.prior<-table(df[df$days.from.opt < 0, "campaign.id"])  # Needs spaces around <-
	total <- sum(x[,1])  # Needs a space after the comma 
	total <- sum(x[ ,1])  # Needs a space after the comma, not before

在左括号之前添加一个空格，除了函数的调用
GOOD:
	if (debug)

BAD:
	if(debug)

Extra spacing (i.e., more than one space in a row) is okay if it improves alignment of equals signs or arrows (<-).
为了对齐，可以使用多个空格。
plot(x    = x.coord,     
     y    = data.mat[, MakeColName(metric, ptiles[1], "roiOpt")],     
     xlab = "dates", 
     ylab = metric,
     main = (paste(metric, " for 3 samples ", sep = "")))
#


(4)花括号（Curly Braces）
一个左括号不应该自己一行; 而一个右括号应该总是一行。
当一个代码块是一个单独声明时你可以不适用花括号。但是，你必须考虑其他相同的情况，以保持一致。
	if (is.null(ylim)) {  ylim <- c(0, 0.06) }
#xor (but not both)
	if (is.null(ylim))  ylim <- c(0, 0.06)

Always begin the body of a block on a new line.

BAD:
	if (is.null(ylim)) ylim <- c(0, 0.06) 
	if (is.null(ylim)) {ylim <- c(0, 0.06)}

花括号与else
一个else语句应该总是被花括号包围在同一行。
Good:
	if (condition) {  
	  one or more lines 
	} else {  
	  one or more lines 
	}

Bad:
	if (condition) {  
	  one or more lines 
	} 
	else {  
	  one or more lines 
	}

(5)赋值（Assignment）
Use <-, not =, for assignment.
GOOD:
	x <- 5

BAD:
	x = 5
##? 我倾向于使用=，理由是：和其他语言兼容，容易识别；且打字快，省时间！


(6)注释前放一个空格，即书写#号后，空一个写注释，注释养成英文注释的习惯。
修改前
#Get data information 
newdata <- read.csv(PArameter4)

修改后
# Get data information 
newdata <- read.csv(PArameter4)

(7)分号，尽量不要使用。
不要以分号结束一行, 也不要利用分号在同一行放多于一个命令.
 (分号是毫无必要的, 并且为了与其他Google编码风格指南保持一致, 此处也需要略去.)









3. Organization
(1)总体布局和排序（General Layout and Ordering）
如果每个人都使用相同的一般顺序, 我们能够更快和更容易阅读和理解彼此的脚本。一般开头需包含：
	版权声明注释
	作者评论
	文件描述的评论,包括程序的目的,输入和输出
	source() 和 library() 声明
	函数定义
	已执行的语句
单元测试应该在一个单独的文件名为originalfilename_test.R。

(2)代码注释（Commenting Guidelines）
简短的注释可以放置在代码之后，用 空格 + # + 空格隔开 ,较长的注释可以单独一行。

# Create histogram of frequency of campaigns by pct budget spent. 
hist(df$pct.spent,    
     breaks = "scott",  # method for choosing number of buckets     
     xlab   = "Fraction of budget spent",     
     ylab   = "Frequency (count of campaignids)")

(3)函数定义和调用（Function Definitions and Calls）
函数定义应该首先列出参数没有默认值, 紧随其后的是那些有默认值的。
在函数定义和函数调用时,允许多个参数一行，但是换行只允许在参数之间进行。
GOOD：
PredictCTR <- function(query, property, num.days,                                              
                       show.plot = TRUE)

BAD:
PredictCTR <- function(query, property, num.days, show.plot =     
                       TRUE)
#
理想情况下,单元测试应该作为样本函数调用(共享库例程)。









4.Functions
(1)错误应该使用 stop() 进行提醒
(2)使用 attach 造成错误的可能数不胜数. 避免使用它.rm(list=ls())用于清除所有的变量。

(3)部分英文名称不能作为对象名，函数命名应以动词或者动词性短语为主，例如
if=1
错误: 意外的’=’ in “if=”

(4)函数和变量的命名则需要尤其小心，在 R 环境对于大小写是极其敏感的。
变量名应该都使用小写字母，而函数名则可以在首字母使用大写，另一点需要注意的是变量和函数命名时应尽量避免与 R 环境中本身存在的一些函数或者变量重名，不然系统也会混乱弄不清的。
不同单词间可以用 . 或者 _ 来连接，看个人习惯，但貌似谷歌的 R语言代码规范上要求使用 . 来连接。
而命名函数则尽量不要使用下划线或者点连接符，在单词选择上也较好能体现函数的动作，以动词来命名函数。

函数命名不要使用点，因为点号是为定义泛型函数的。

(5)少用循环而多用 R 自带的向量化运算。
R 的循环效率极低，能不用则不用。关于 apply 函数族的用法运算精髓应多加进行整理。


(6)函数说明(Function Documentation)
函数在定义行下方都应当紧接一个注释区。这些注释应该包含一句关于函数的描述，一段关于该函数的参数列表的的描述(包括数据类型), 和一个返回值的描述。这些注释需具有足够的描述性的,调用者可以通过阅读注释即可懂得如何调用该函数。

这些注释应当由如下内容组成: 
此函数的一句话描述; 
此函数的参数列表, 用 Args: 表示, 对每个参数的描述 (包括数据类型); 
以及对于返回值的描述, 以 Returns: 表示. 
这些注释应当描述得足够充分, 这样调用者无须阅读函数中的任何代码即可使用此函数. 


示例函数 Example

CalculateSampleCovariance <- function(x, y, verbose = TRUE) {  
  # Computes the sample covariance between two vectors.  
  #  
  # Args:  
  #   x: One of two vectors whose sample covariance is to be calculated.  
  #   y: The other vector. x and y must have the same length, greater than one,  
  #      with no missing values.  
  #   verbose: If TRUE, prints sample covariance; if not, not. Default is TRUE.  
  # 
  # Returns:  
  #   The sample covariance between x and y.  

  n <- length(x)  
  # Error handling  
  if (n <= 1 || n != length(y)) {   
    stop("Arguments x and y have different lengths: ",
         length(x), " and ", length(y), ".")     
  }
  if (TRUE %in% is.na(x) || TRUE %in% is.na(y)) {  
    stop(" Arguments x and y must not have missing values.") 
  }
  covariance <- var(x, y)  
  if (verbose)    
    cat("Covariance = ", round(covariance, 4), ".\n", sep = "")  
  return(covariance) 
}









5.最后的话
Use common sense and BE CONSISTENT.

If you are editing code, take a few minutes to look at the code around you and determine its style. If others use spaces around their if clauses, you should, too. If their comments have little boxes of stars around them, make your comments have little boxes of stars around them, too.

The point of having style guidelines is to have a common vocabulary of coding so people can concentrate on what you are saying, rather than on how you are saying it. We present global style rules here so people know the vocabulary. But local style is also important. If code you add to a file looks drastically different from the existing code around it, the discontinuity will throw readers out of their rhythm when they go to read it. Try to avoid this.

OK, enough writing about writing code; the code itself is much more interesting. Have fun!




https://blog.csdn.net/qq_27755195/article/details/51587172






========================================
使用docker运行R
----------------------------------------
1. 只运行R，当前黑窗口显示

$ docker run --rm -it rstudio/r-base:4.0-focal




========================================
|-- 使用docker运行 Rstudio: R 4.0.4, Seurat 4.0.0, monocle3 v0.2.3.0
----------------------------------------
1. 运行 Rstudio，需要有可用的端口。

最佳实践: 1.(2) 1);

(1) 可以打开web界面
# https://hub.docker.com/r/rocker/rstudio


选择不同版本的R (Use different versions of R)
docker run -d -p 8787:8787 -e PASSWORD=yourpasswordhere rocker/rstudio:devel
docker run -d -p 8787:8787 -e PASSWORD=yourpasswordhere rocker/rstudio:3.2.0


1) 做端口映射，-p 外部端口 5000 : 指向docker内部接口8787。
$ docker run -d -p 5000:8787 -e PASSWORD=yourpasswordhere rocker/rstudio
使用web窗口登录: http://ipV4:5000
user: rstudio
pass: 自己设置的

## R version 4.0.4 (2021-02-15) -- "Lost Library Book"


2) 为用户名 rstudio 添加sudo权限。Give the user root permissions (add to sudoers)
$ docker run -d -p 8787:8787 -e ROOT=TRUE -e PASSWORD=yourpasswordhere rocker/rstudio

3) 做文件映射，-v 外部当前文件夹: docker内部文件夹。
Link a local volume (in this example, the current working directory, $(pwd)) to the rstudio container:
$ docker run -d -p 8787:8787 -v $(pwd):/home/rstudio -e PASSWORD=yourpasswordhere rocker/rstudio

为了防止影响过大，外部主机是不是应该设置一个专门的文件夹？
$ chmod 777 /home/wangjl/data/dockerRstudio
$ docker run -d -p 5000:8787 -v /home/wangjl/data/dockerRstudio:/home/rstudio/data -e PASSWORD=yourpasswordhere rocker/rstudio


# 进入docker内部，很多命令不能用。
$ docker ps
$ docker exec -it 06e bash



4) 跳过密码输入 Bypassing the authentication step
注意：不要在阿里云等公网使用，只在安全的局域网内使用，否则容易出安全问题。
Simply set the environmental variable DISABLE_AUTH=true, e.g.

$ docker run --rm \
  -p 127.0.0.1:5000:8787 \
  -e DISABLE_AUTH=true \
  rocker/rstudio

登录地址:  http://localhost:5000
不用输入用户名和密码，直接登录 rstudio用户了。


5) 使用root登录一个运行中的实例 Access a root shell for a running rstudio container instance

# 使用 docker ps 查看，第一列就是运行中的 docker id。
$ docker exec -ti <CONTAINER_ID> bash

# 然后就可以使用安装/维护系统了，比如 apt-get、添加删除用户等。










(2) 安装包路径的映射
感觉包保存到容器内部吧，这样推送的包就可以直接使用某个已经安装的包了。

但是重开容器，就要重新安装，也很麻烦。
如果做了包路径映射，新的容器能找到这个包吗？

1) 新建带包映射的容器 【最佳句子】
$ mkdir -p /home/wangjl/data/dockerRstudio/R_lib_4.0
$ chmod 777 /home/wangjl/data/dockerRstudio/R_lib_4.0 #存放R包

$ docker run -d -p 5000:8787 -v /home/wangjl/data/dockerRstudio:/home/rstudio \
	-v /home/wangjl/data/dockerRstudio/R_lib_4.0:/home/rstudio/R/x86_64-pc-linux-gnu-library/4.0 \
	-e ROOT=TRUE \
	-e PASSWORD=yourpasswordhere rocker/rstudio
#

2) 修改包的查找路径
对docker的操作：在Rstudio的terminal中执行。
R的默认目录下新建（如果没有的话）.Rprofile 文件，在里面加上一行:
.libPaths("/home/rstudio/R/x86_64-pc-linux-gnu-library/4.0")

然后重启R：Rstudio 菜单 Session - quit session.

> .libPaths() # 包的查找路径，应该是优先安装到第一个中。
[1] "/home/rstudio/R/x86_64-pc-linux-gnu-library/4.0"
[2] "/usr/local/lib/R/site-library"                  
[3] "/usr/local/lib/R/library"


3) 安装包，并测试
library(ggplot2) #no package ...
install.packages("ggplot2") #11:40 - 11:43
library(ggplot2)

head(mtcars)
ggplot(mtcars, aes(mpg, wt, color=factor(cyl) ))+geom_point()+
  theme_bw()

4) 检查文件 
物理机：$ ls /home/wangjl/data/dockerRstudio/R_lib_4.0/  
docker内: $ ls /home/rstudio/R/x86_64-pc-linux-gnu-library/4.0
输出:
assertthat  desc      farver    labeling   pkgconfig    R6            scales       waldo
brio        diffobj   ggplot2   lifecycle  pkgload      RColorBrewer  testthat     withr
callr       digest    glue      magrittr   praise       rematch2      tibble
cli         ellipsis  gtable    munsell    prettyunits  rlang         utf8
colorspace  evaluate  isoband   pillar     processx     rprojroot     vctrs
crayon      fansi     jsonlite  pkgbuild   ps           rstudioapi    viridisLite

5) 关掉这个容器，重新开一个
$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
3d8f00fc78a9        rocker/rstudio      "/init"                  About an hour ago   Up About an hour    0.0.0.0:5000->8787/tcp   vigorous_elgamal

$ docker stop 3d8f
$ docker run -d -p 5000:8787 -v /home/wangjl/data/dockerRstudio:/home/rstudio \
	-v /home/wangjl/data/dockerRstudio/R_lib_4.0:/home/rstudio/R/x86_64-pc-linux-gnu-library/4.0 \
	-e ROOT=TRUE \
	-e PASSWORD=yourpasswordhere rocker/rstudio
$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
41fdd9af3312        rocker/rstudio      "/init"                  6 seconds ago       Up 5 seconds        0.0.0.0:5000->8787/tcp   nifty_boot


# 登录web后，可以直接导入 ggplot2, 也就是新开的能找到原始的安装包。
> library(ggplot2)














2. 安装更多的包到该镜像上

(1) 在docker中安装 Seurat包 v4.0.0
$ cp /data/wangjl/scScripts/backup/a2/pbmc10k-Tsubset_final.rds .


> install.packages("BiocManager")
> BiocManager::install("monocle")
Error: .onLoad failed in loadNamespace() for 'XML', details:
Installation path not writeable, unable to update packages: boot, cluster, MASS, mgcv



> BiocManager::install("Seurat")
> library(Seurat)
Error: package or namespace load failed for ‘Seurat’ in dyn.load(file, DLLpath = DLLpath, ...):
 unable to load shared object '/home/rstudio/R/x86_64-pc-linux-gnu-library/4.0/igraph/libs/igraph.so':
  libxml2.so.2: cannot open shared object file: No such file or directory

$ sudo apt install libxml2
$ sudo apt install libglpk-dev #比较大
## 可以载入 Seurat 了。
$ sudo apt install libxt-dev #解决一个warning


在Rstudio中可用:
# BiocManager::install("Seurat")
library(Seurat)
scRNA=readRDS("pbmc10k-Tsubset_final.rds")
DimPlot(scRNA)
DimPlot(scRNA, label=T)
#
FeaturePlot(scRNA, features = c("CD3D","CD4","CD8A", 'CCR7', 'ITGB1',"GZMB") )



2)
## 提交新镜像
$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
78d8611d7559        rocker/rstudio      "/init"                  29 minutes ago      Up 29 minutes       0.0.0.0:5000->8787/tcp   infallible_matsumoto

$ docker commit -m 'Seurat is ok, if with pkg dir on github' 78d8611d7559 dawneve/rstudio:Seurat
sha256:0ccae6079dadb8cad8b05efb11a07f9f7fe6b3fd5634c87f7c2008025bfb9f81

$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
dawneve/rstudio     Seurat              0ccae6079dad        15 seconds ago      2.09GB
rocker/rstudio      latest              9e22c8cd092b        9 days ago          1.95GB

比基础版又多了1G(apt安装的3个包)，还不包括物理机上的R包文件夹。
~/data/dockerRstudio$ sudo du -sh
1.6G    .

$ docker stop 78d
78d


### 重启R session, 不保存内存的东西。又提交了一个commit。
$ docker commit -m 'Seurat is ok, if with pkg dir on github' e2957a0e8b19 dawneve/rstudio:Seurat_
sha256:e4131393d1ed635d345d44cd1c459939dece46843b84b652bce0ecd66d90fc1c
看docker images 是一样大，说明只有硬盘里的有作用，内存中的不会保存到镜像中。
再删掉这个镜像: docker rmi e4131393d1ed



3) 推送到 docker hub:

$ sudo apt install gnupg2 pass 先安装包，否则登录失败。
## https://stackoverflow.com/questions/50151833/cannot-login-to-docker-account/50569553

$ docker logout
$ docker login -u dawneve 
## yourPassWord #登陆

$ docker image push dawneve/rstudio:Seurat #推送2.09G的镜像

## 貌似不到5min就传好了 https://hub.docker.com/u/dawneve
https://hub.docker.com/r/dawneve/rstudio/tags?page=1&ordering=last_updated




4) 添加注释
https://hub.docker.com/repository/docker/dawneve/rstudio

打包物理机上的R包文件到github附件上: https://github.com/DawnEve/scRNAseqCode/releases/tag/scDocker-Seurat
$ tar -cvzf pkgs_forDocker_seurat.tar.gz /home/wangjl/data/dockerRstudio

## 教训：这样用绝对路径打包的，解压后也是绝对路径。下次还是用相对路径打包吧。
$ tar -cvzf pkgs_forDocker_seurat.tar.gz dockerRstudio
tar: Exiting with failure status due to previous errors












(2) 在docker中安装 monocle3 包 #v0.2.3.0 (beta)
别人写好的包含有monocle3的容器 https://quay.io/repository/biocontainers/r-monocle3?tab=info


$ docker run -d -p 5000:8787 -v /home/wangjl/data/dockerRstudio:/home/rstudio \
	-v /home/wangjl/data/dockerRstudio/R_lib_4.0:/home/rstudio/R/x86_64-pc-linux-gnu-library/4.0 \
	-e ROOT=TRUE \
	-e PASSWORD=yourpasswordhere dawneve/rstudio:Seurat
#



1) 版本选择与安装
http://cole-trapnell-lab.github.io/monocle-release/docs/#installing-monocle

Monocle 2 and Monocle 3 alpha are deprecated
Please use our new package, Monocle 3!
https://cole-trapnell-lab.github.io/monocle3/


https://cole-trapnell-lab.github.io/monocle3/docs/introduction/
paper: monocle3 https://www.nature.com/articles/s41586-019-0969-x


# 安装 
https://cole-trapnell-lab.github.io/monocle3/docs/installation/

if (!requireNamespace("BiocManager", quietly = TRUE))
	install.packages("BiocManager")

BiocManager::install(c('BiocGenerics', 'DelayedArray', 'DelayedMatrixStats',
                       'limma', 'S4Vectors', 'SingleCellExperiment',
                       'SummarizedExperiment', 'batchelor', 'Matrix.utils'))

install.packages("devtools")
devtools::install_github('cole-trapnell-lab/leidenbase')
devtools::install_github('cole-trapnell-lab/monocle3')


## 报错: libudunits2.so.0: cannot open shared object file
> Track_genes <- graph_test(cds, neighbor_graph="principal_graph", cores=10)

$ sudo apt install libudunits2-dev #6M ?
$ sudo apt install libproj-dev  #38M
$ sudo apt install libgdal-dev  #423M


# 使用验证
https://github.com/cole-trapnell-lab/monocle3

https://cole-trapnell-lab.github.io/monocle3/
https://cole-trapnell-lab.github.io/monocle3/docs/starting/

> library(monocle3) #v0.2.3.0

# Provide the path to the Cell Ranger output.
> cds <- load_cellranger_data("~/Downloads/10x_data")

感觉不好用。。。



2) 提交新镜像
$ docker ps
CONTAINER ID        IMAGE                    COMMAND                  CREATED             STATUS              PORTS                    NAMES
e2957a0e8b19        dawneve/rstudio:Seurat   "/init"                  19 hours ago        Up 19 hours         0.0.0.0:5000->8787/tcp   friendly_borg

$ docker commit -m 'monocle3 is ok, if with pkg dir on github' e2957a0e8b19 dawneve/rstudio:monocle3

$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
dawneve/rstudio     monocle3            8893c1f83058        4 minutes ago       2.58GB
dawneve/rstudio     Seurat              0ccae6079dad        19 hours ago        2.09GB
rocker/rstudio      latest              9e22c8cd092b        10 days ago         1.95GB

比着上一个版本又增加了0.5GB。还不包括R包。
~/data/dockerRstudio$ sudo du -sh
5.6G    .
这也太大了吧。。。
重启R session之后变小了: 1.1G    .



3) 推送到 docker hub:
## sudo apt install gnupg2 pass #先安装包，否则登录失败。

$ docker login -u dawneve 
## yourPassWord #登陆

$ docker image push dawneve/rstudio:monocle3 #推送2.58G的镜像
仔细看，发现只需要推送一层，其他层都已经在了，所以快。


https://hub.docker.com/r/dawneve/rstudio/tags?page=1&ordering=last_updated


4) 添加注释
https://hub.docker.com/repository/docker/dawneve/rstudio

打包物理机上的R包文件到github附件上: https://github.com/DawnEve/scRNAseqCode/releases/tag/scDocker-monocle3

$ tar -cvzf pkgs_forDocker_Seurat_monocle3.tar.gz dockerRstudio
-rw-rw-r--  1 wangjl wangjl 384M Mar  2 10:45 pkgs_forDocker_Seurat_monocle3.tar.gz


只打包某个时间点之后的文件呢？
$ tar czvf pkgs_forDocker_monocle3_incre.tar.gz --newer-mtime  "2021-03-01 17:00:00" dockerRstudio
-rw-rw-r-- 1 wangjl wangjl 156M Mar  2 11:04 pkgs_forDocker_monocle3_incre.tar.gz
这个增量包小了很多。













# 不能用
$ docker run -t -p 5000:8004 opencpu/rstudio  















========================================
|-- 直接能用的 Seurat 容器: satijalab/seurat:4.0.3
----------------------------------------
0. 测试
(1)下载位置
https://satijalab.org/seurat/articles/install.html
https://hub.docker.com/r/satijalab/seurat

$ docker pull satijalab/seurat:4.0.0

(2)启动 
$ docker run -d -p 5000:8787 satijalab/seurat:4.0.0 bash 
只能在黑窗口下使用，不知道怎么用Rstudio。

(3) 有2个思路
- 在这个 seurat 镜像中安装一个 rstudio。
- 在 rstudio 镜像中安装 seurat 包。貌似这个更容易实现。





1. 参考 Seurat 官网 install 目录下最后几行。
We provide docker images for Seurat via dockerhub.
rstudio 专栏: https://environments.rstudio.com/docker


(1)To pull the latest image from the command line:
docker pull satijalab/seurat:latest

查看可用标签
https://hub.docker.com/r/satijalab/seurat
最新式 4.0.3
$ docker pull satijalab/seurat:4.0.3

$ docker images
REPOSITORY                   TAG             IMAGE ID       CREATED        SIZE
satijalab/seurat             4.0.3           8852687a5c21   3 months ago   3.61GB

2) 如果拉取失败，只能让其他人拉取后打包发过来，再导入。
$ docker save -o seurat_4.0.3.tar satijalab/seurat:4.0.3
另一台导入主机
$ docker load &lt; seurat_4.0.3.tar


(2)To use as a base image in a new Dockerfile:
FROM satijalab/seurat:latest





2. 运行 

(1) 运行
要保证端口没被占用: -p 20180:80
保证文件夹挂载合理: /home/wangjl/data/dockerHome/

$ docker run -it -d \
--mount type=bind,source=/home/wangjl/data/dockerHome/,target=/work/ \
--workdir=/work/ \
-p 20180:80 \
satijalab/seurat:4.0.3 bash

为了防止停止时数据被删除，最好不适用--rm参数。

就是个黑窗口。$ R 打开R。


(2)貌似没有 Rstudio，安装进去？
$ docker exec -it 071a bash
# apt-get update
# apt-get install gdebi-core
# wget https://download2.rstudio.org/server/bionic/amd64/rstudio-server-1.4.1717-amd64.deb
# gdebi rstudio-server-1.4.1717-amd64.deb

## 检查效果
# service rstudio-server restart
没有效果，搞不定。
可能是没有export 端口?


2)不过里面的包可以搞出来
容器内部
# ls /usr/local/lib/R/site-library/ |wc
    219     219    1850

容器外
$ mkdir /data/rawdata/R4.1_pkgs
$ docker cp 36db:/usr/local/lib/R/site-library/ /data/rawdata/R4.1_pkgs/

这些包大概有1G
$ du -sh /data/rawdata/R4.1_pkgs/site-library/
1.1G	/data/rawdata/R4.1_pkgs/site-library/

复制完包，这个容器就可以关闭/删除了。
$ docker stop 071a










3. 尝试从头建立镜像
(1) 文件准备
- 拉基础镜像 satijalab/seurat:4.0.3
- 准备配置文件
- 下载 rstudio 安装文件

$ cat Dockerfile 
FROM satijalab/seurat:4.0.3
RUN apt-get update && apt-get install gdebi-core -y
# ADD rstudio-server-1.4.1717-amd64.deb /home/
# RUN cd /home && gdebi rstudio-server-1.4.1717-amd64.deb && rm rstudio-server-1.4.1717-amd64.deb
EXPOSE 8787
CMD ["bash"]

(2) 开始构建
由于 gdebi 命令后需要输入 y，不知道怎么实现，只好采用注释掉，进容器安装后，采用 commit 提交修改。

$ docker build -t r1 ./


(3) 安装rstudio
$ docker run --rm -it -v /home/wangjl/data/dockerHome:/home/work --workdir=/home/work/ r1 bash
root@906918b93347:/home/work# gdebi rstudio-server-1.4.1717-amd64.deb
y

(4) 新建用户
# usr=rstudio
# useradd -s /bin/bash -d /home/${usr} -m ${usr}
# passwd rstudio #密码是123456
加入sudo
# echo "rstudio ALL=(ALL:ALL) ALL" >> /etc/sudoers


(5) 提交修改 
$ docker ps # 查看容器id
把该容器提交为新镜像
$ docker commit -m 'Seurat4.0.3+Rstudio' 002 r2
r2                       latest              0f9887056dfc        4 seconds ago       4.53GB

(6) 加上可见意义的标签
$ docker tag r2 dawneve/seurat:4.0.3a

dawneve/seurat           4.0.3a              0f9887056dfc        7 minutes ago       4.53GB

小结：以上过程还能怎么优化？








4. 启动容器，加上文件映射
$ docker run --rm -it -d -p 20180:8787 \
--mount type=bind,source=/home/wangjl/data/dockerHome/,target=/home/rstudio/data/ \
--workdir=/home/rstudio/ \
dawneve/seurat:4.0.3a

进入容器内部
$ docker exec -it 208 bash

重启rstudio
# service rstudio-server restart
# exit
exit


浏览器登陆
http://172.18.5.193:20180/
用户 rstudio
密码 123456

注意：
- 要先设置宿主机文件夹 /home/wangjl/data/dockerHome/ other可写。
- 容器内仅 /home/rstudio/data/ 数据会保留，其他数据都会随着容器的停止而被删除。







========================================
|-- 在 rstudio 镜像中安装 seurat 包
----------------------------------------
宿主机是一个 centOS7，硬件较强。

1. 换个思路，从Rstudio 基础镜像，安装 Seurat包
https://hub.docker.com/r/rocker/rstudio/tags?page=1&ordering=last_updated
https://github.com/rocker-org/rocker-versioned2/issues


(1) 最新版是 4.1.1
$ docker pull rocker/rstudio:4.1.1

$ docker images
REPOSITORY               TAG                 IMAGE ID            CREATED             SIZE
rocker/rstudio           4.1.1               1878e29db52f        13 days ago         1.93GB


(2) 精简测试 - 到复杂参数
$ docker run --rm -it -e PASSWORD=yourpasswordhere -p 20219:8787 rocker/rstudio:4.1.1

警告：一次只能运行一个容器！否则浏览器无法登陆！https://github.com/rocker-org/rocker-versioned2/issues/193
关闭容器: 
docker stop xxx
其中容器编号通过 docker ps 查看。


打开浏览器 http://172.18.5.193:20219
用户名: rstudio
密码: yourpasswordhere

2)
-e DISABLE_AUTH=true \ 加上这一句就不用输入密码了，不过不安全。
加上-d参数，启动后，后台运行。
$ docker run --rm -it -e DISABLE_AUTH=true -p 20219:8787 rocker/rstudio:4.1.1


3) --mount 文件夹映射
$ docker run --rm -it -p 20219:8787 \
--mount type=bind,source=/home/wangjl/data/dockerHome/,target=/home/rstudio/ \
-e DISABLE_AUTH=true rocker/rstudio:4.1.1

报错：
[rsession-rstudio] ERROR system error 13 (Permission denied) [path: /home/rstudio/.config/rstudio, target-dir: ]




3)更多参数
--workdir 指定工作目录

$ docker run --rm -it -p 20219:8787 \
--mount type=bind,source=/home/wangjl/data/dockerHome/,target=/home/rstudio/ \
-e PASSWORD=yourpasswordhere rocker/rstudio:4.1.1


浏览器登录报错：
Could not connect to the R session on RStudio Server.
Unable to connect to service (1)

命令行报错
28 Sep 2021 01:53:50 [rsession-rstudio] ERROR system error 13 (Permission denied) [path: /home/rstudio/.local/share/rstudio, target-dir: ]; OCCURRED AT rstudio::core::Error rstudio::core::FilePath::createDirectory(const string&) const src/cpp/shared_core/FilePath.cpp:812; LOGGED FROM: int main(int, char* const*) src/cpp/session/SessionMain.cpp:1980

据说，这个错误的原因是 selinux 是开着的：
$ sestatus
https://community.rstudio.com/t/rserver-1692-error-system-error-13-permission-denied/46972/10
关掉并重启服务器即可。
这是共用的，不可能重启。

临时方式
$ getenforce
Enforcing
$ sudo setenforce 0
$ getenforce
Permissive

找到原因了，不能完全覆盖掉 /home/rstudio/ 目录。
恢复seLinux。
$ sudo setenforce 1
$ getenforce
Enforcing


(4) 完整命令
$ docker run --rm -it -p 20181:8787 \
--mount type=bind,source=/data/rawdata/R4.1_pkgs/site-library/,target=/usr/local/lib/R/site-library/ \
--mount type=bind,source=/home/wangjl/data/dockerHome/,target=/home/rstudio/data/ \
--workdir=/home/rstudio/ \
-e PASSWORD=123 rocker/rstudio:4.1.1


还需要进入容器，安装几个包。
$ docker exec -it xxx bash
# apt update
# apt install libxml2 -y
# apt install libglpk-dev -y #比较大
## 可以载入 Seurat 了。
# apt install libxt-dev -y #解决一个warning

把该容器提交为新镜像
$ docker commit -m 'Rstudio with Seurat4.0.3' 21d dawneve/seurat:4.0.3
sha256:8966

$ docker images
REPOSITORY               TAG                 IMAGE ID            CREATED             SIZE
dawneve/seurat           4.0.3               8966150e1cd9        18 seconds ago      2.1GB


(4) 使用该新镜像，启动容器 
$ docker run --rm -it -d -p 20180:8787 \
--mount type=bind,source=/data/rawdata/R4.1_pkgs/site-library/,target=/usr/local/lib/R/site-library/ \
--mount type=bind,source=/home/wangjl/data/dockerHome/,target=/home/rstudio/data/ \
--workdir=/home/rstudio/ \
-e PASSWORD=yourpasswordhere dawneve/seurat:4.0.3b

注意2点:
- 不能覆盖掉 /home/rstudio/ 文件夹，因为很多缓存文件在里面。
- 要在容器外，对可写文件夹设置可写操作 $ chmod 777 dockerHome/


打开浏览器 http://172.18.5.193:20180/
用户名: rstudio
密码: yourpasswordhere
-e DISABLE_AUTH=true \ 加上这一句就不用输入密码了，不过不安全。







2. 推送镜像到 docker hub.

$ docker images
REPOSITORY               TAG                 IMAGE ID            CREATED             SIZE
dawneve/seurat           4.0.3a              0f9887056dfc        12 minutes ago      4.53GB
dawneve/seurat           4.0.3b              7b5fc23f2fd7        2 hours ago         2.1GB

$ docker login -u dawneve
Password: 
WARNING! Your password will be stored unencrypted in /home/wangjl/.docker/config.json.
Configure a credential helper to remove this warning. See
https://docs.docker.com/engine/reference/commandline/login/#credentials-store

Login Succeeded


到网页版新建repo:
https://hub.docker.com/repository/docker/dawneve/seurat
https://hub.docker.com/u/dawneve

$ docker push dawneve/seurat:4.0.3a
$ docker push dawneve/seurat:4.0.3b








========================================
|-- Rstudio 多版本R的实现？使用 docker 建立R4.1+Seurat4.1.0+Rstudio镜像并启动容器新建多用户[2022.4.27]
----------------------------------------

背景介绍：实验室有一台大号服务器，主要使用的是 R3.6 ，现在到了2022年，主流R包已经到了 R 4.1 平台了。
有些同学项目没做完，要用历史代码；有些同学感觉新的包更好用，老的包已经下载不了了。
不能整体升级的情况下，怎么同时满足R3.6和R4.0用户的需求呢？

另一个背景：大家主要用 /data4/ 文件服务器保存数据。

计划：开一个更多用户的功能完善的 docker，做好文件映射。




1. 重新构建新镜像：在 Seurat 4.1.0 上安装 Rstudio，能节省很多下载R包的时间。

使用哪个系统构建呢？使用Ubuntu 20.04 工作站吧，12核32G内存。
$ docker --version
Docker version 20.10.14, build a224086


(1) 下载Seurat 基础镜像
https://hub.docker.com/r/satijalab/seurat

最新版是 4.1.0，共 1.39G
$ docker pull satijalab/seurat:4.1.0

检查：4G, 这可不小啊!
$ docker images
REPOSITORY                   TAG        IMAGE ID       CREATED         SIZE
satijalab/seurat             4.1.0      4a335da5cd97   6 weeks ago     4.02GB


检查发现：没有 Rstudio
$ docker run --name=Rs4 --rm -it -d -p 20180:8787 satijalab/seurat:4.1.0



(2) 下载最新版的 Rstudio 
https://www.rstudio.com/products/rstudio/download-server/debian-ubuntu/

$ mkdir build2 #就在这个文件夹干活了。
$ cd build2/
$ wget https://download2.rstudio.org/server/bionic/amd64/rstudio-server-2022.02.1-461-amd64.deb


检查:
$ pwd
/home/wangjl/build2
$ ls -lth
total 60M
-rw-rw-r-- 1 wangjl wangjl 60M Mar 23 23:30 rstudio-server-2022.02.1-461-amd64.deb


$ mkdir scripts




(3) 写 Dockerfile 及需要的其他文件

$ cat Dockerfile
FROM satijalab/seurat:4.1.0
ENV DEFAULT_USER=rstudio
ENV PASSWORD=123456
ENV UID=1001
ENV GID=1001

ADD rstudio-server-2022.02.1-461-amd64.deb /home/
COPY scripts/* /rocker_scripts/
RUN /rocker_scripts/install_Rstudio2.sh

EXPOSE 8787
ENTRYPOINT ["/rocker_scripts/docker-entrypoint.sh"]
CMD ["bash"]





########
# 用到的脚本文件:
$ cat scripts/install_Rstudio2.sh
#!/bin/bash
set -e

## 安装Rstudio
apt-get update && apt-get install -y gdebi-core \
    psmisc sudo libclang-dev libpq5
Rstudio_version="2022.02.1-461"
cd /home && gdebi -n rstudio-server-${Rstudio_version}-amd64.deb && rm rstudio-server-${Rstudio_version}-amd64.deb


## 清理缓存
apt-get clean

rm -rf /var/lib/apt/lists/*
rm -rf /var/cache/*






######## 服务貌似没启动，还需要手动进入容器内启动，不知道为什么 //todo
# 我决定不新建用户了，所以 Dockerfile 前面的 ENV 变量也没啥用了。
$ cat scripts/docker-entrypoint.sh
#!/bin/bash

## 启动服务
service rstudio-server start

exec "$@"






(4) 开始构建

当前目录下文件结构:
$ tree
.
├── Dockerfile
├── rstudio-server-2022.02.1-461-amd64.deb
└── scripts
    ├── docker-entrypoint.sh
    └── install_Rstudio2.sh

脚本要有可执行权限，否则后面会报错
$ chmod a+x scripts/docker-entrypoint.sh
$ chmod a+x scripts/install_Rstudio2.sh


开始构建
$ docker build -t seurat:4.1.0a ./
会有很多输出，除了出错信息，其他忽略。
时长取决于网速，2-10min。

$ docker images
REPOSITORY                   TAG        IMAGE ID       CREATED          SIZE
seurat                       4.1.0a     9b1bcc05e67e   14 seconds ago   4.93GB


测试，发现可以启动。
$ docker run -it -d -p 9001:8787 --name R4 \
--mount type=bind,source=/data/,target=/docker/jinwf/ \
seurat:4.1.0a








(5) 镜像转移到大号服务器

加上用户名前缀:
$ docker tag 9b1b dawneve/seurat:4.1.0a


镜像打包压缩
$ docker save dawneve/seurat:4.1.0a | gzip -c > seurat_4.1.0a.tar.gz
-rw-rw-r-- 1 wangjl wangjl 1.7G Apr 27 12:23 seurat_4.1.0a.tar.gz

优盘或者网络传输到新机器
$ scp seurat_4.1.0a.tar.gz wangjl@x.biomooc.com:/home/wangjl/

新机器导入gz包
$ gunzip -c seurat_4.1.0a.tar.gz | docker load

$ docker images
REPOSITORY                     TAG                 IMAGE ID            CREATED             SIZE
dawneve/seurat                 4.1.0a              9b1bcc05e67e        15 minutes ago      4.93GB












2. 使用该镜像启动容器
2022.4.27 
for anyone
docker: R 4.1, Seurat 4.1.0, then install Rstudio;
server: 193


(1) 开端口号
$ sudo iptables -I INPUT -p tcp --dport $port -j ACCEPT


(2) 启动容器
$ port=20220
$ docker run -it -d -p ${port}:8787 --name R4 \
--mount type=bind,source=/data/jinwf/,target=/docker/jinwf/ \
dawneve/seurat:4.1.0a


#check
$ docker ps
CONTAINER ID        IMAGE                   COMMAND                  CREATED             STATUS              PORTS                     NAMES
852ef3e0055c        dawneve/seurat:4.1.0a   "/rocker_scripts/doc…"   3 seconds ago       Up 2 seconds        0.0.0.0:20220->8787/tcp   R4


进入容器
$ docker exec -it R4 bash
# service rstudio-server start
提示: TTY detected. Printing informational message about logging configuration. Logging configuration loaded from '/etc/rstudio/logging.conf'. Logging to '/var/log/rstudio/rstudio-server/rserver.log'

新建组
# groupadd -g 1001 jinwfDocker


##### 检查R包位置
# R
> .libPaths()
[1] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library" 

> q()





(3) 添加具体的用户
外部查 真实 uid 和 gid
$ id huxl
uid=1035(huxl) gid=1001(jinwf) groups=1001(jinwf)

产生随机密码:
$ date | md5sum | cut -c 1-8
73d5cf53


进入容器
$ docker exec -it R4 bash

新建用户(设置信息，根据宿主机的 id xxx 给出的信息确定 uid)
# user="huxl"
# uid=1035

# userInner="${user}2"
# useradd -s /bin/bash -d /home/${userInner}  -m ${userInner} -u ${uid} -g 1001
# passwd ${userInner} # 73d5cf53
# su ${userInner}

$ cd
$ ln -s /docker/jinwf/${user}/ data
$ exit
# exit

测试可用登录，由于用户现在能影响其他用户数据了，不再开sudo权限！！







########################
# 测试新建用户 wangxf2
########################
外部查 真实 uid 和 gid
$ id wangxf
uid=1018(wangxf) gid=1001(jinwf) groups=1001(jinwf)

产生随机密码:
$ date | md5sum | cut -c 1-8
5f7684c2


进入容器
$ docker exec -it R4 bash

新建用户(设置信息，根据宿主机的 id xxx 给出的信息确定 uid)
# user="wangxf"  #手工设置，和外部一致
# uid=1018  #手工设置，和外部一致

# userInner="${user}2"
# useradd -s /bin/bash -d /home/${userInner}  -m ${userInner} -u ${uid} -g 1001
# passwd ${userInner} # 73d5cf53
# su ${userInner}

$ cd
$ user="wangxf" #手动指定
$ ln -s /docker/jinwf/${user}/ data
$ exit
# exit

# 访问方式: R 4.1 + Rstudio + Seurat 4.1.0
http://x.biomooc.com:20220
usr:wangxf2
pass:5f7684c2





########################
# 测试新建用户 wangjl2 -> wangwjl 打错了
########################
外部查 真实 uid 和 gid
$ id wangjl
uid=1012(wangjl) gid=1001(jinwf) groups=1001(jinwf),978(docker)

产生随机密码:
$ date | md5sum | cut -c 1-8
92159e17


进入容器
$ docker exec -it R4 bash

新建用户(设置信息，根据宿主机的 id xxx 给出的信息确定 uid)
# user="wangwjl"  #手工设置，和外部一致
# uid=1012  #手工设置，和外部一致

# userInner="${user}2"
# useradd -s /bin/bash -d /home/${userInner}  -m ${userInner} -u ${uid} -g 1001
# passwd ${userInner}
# su ${userInner}

$ cd
$ user="wangjl" #手动指定
$ ln -s /docker/jinwf/${user}/ data
$ exit
# exit










(4) 测试访问:
http://x.biomooc.com:20220
usr:huxl2
pass:73d5cf53


> .libPaths()
[1] "/home/huxl2/R/x86_64-pc-linux-gnu-library/4.1"
[2] "/usr/local/lib/R/site-library"                
[3] "/usr/local/lib/R/library"  



注意: 反复阅读并理解第3条！为了数据安全，请及时修改密码(第4条)。

1. (理解第三条的基础)宿主机文件夹 /data/jinwf/ 和容器内的 /docker/jinwf/ 是对应的；
	外部文件夹 /data/jinwf/${user}/ 和容器内 /home/${user}2/data/ 软链接绑定的(内容完全一致，实时同步)。
2. shell 只能使用Rstudio界面的terminal，这是一个单线程的。
3. 容器内仅 /home/${user}2/data/ 数据会保留，其他数据都会随着容器的停止而被【删除】。一定要理解这句话！
	建议把容器内  自己家目录的 R/ 建到 data/ 下，防止容器停止时被删除。
	建立的方式: 
		$ mv R data/R_inDocker
		$ user="huxl" #手动填写用户名，外部使用的用户名
		$ ln -s /docker/jinwf/${user}/R_inDocker R
4. 尽快修改密码！！！ $ passwd "${user}2"
	为了促进大家改密码，以后默认密码设置为 12 位: $ date | md5sum | cut -c 1-12






========================================
R reticulate 设置 python 环境
----------------------------------------

1. 要刚开启的时候设置 使用哪个 python，只能设置一次 

# in shell 
$ which python3
/home/wangjl/anaconda3/bin/python3
$ which python
/home/wangjl/anaconda3/bin/python

$ pip list | grep leidenalg
leidenalg                         0.8.10
$ pip list | grep igraph
igraph                            0.9.11



# in R
library("reticulate")
use_python("/usr/bin/python", required = T)
py_config()
注意

1) 每开启一个session，第一次设置生效，之后再使用这个命令不生效，需要重启session
2) py_config()命令要放在最后，使设置生效



更进一步的看 sc/Seurat source: RunUMAP() 3.2




========================================
快速构建R环境：复现
----------------------------------------
https://github.com/binder-examples/r


- rocker/binder 
- r-conda 








========================================
windows11 安装 R 4.4.0 和Rstudio: 安装 Seurat 4.4.0 / CytoTRACE
----------------------------------------
1. 下载R
https://mirrors.tuna.tsinghua.edu.cn/CRAN/bin/windows/base/
https://posit.co/download/rstudio-desktop/
	2024.04.0 Build 735 / "Chocolate Cosmos" Release (a00d0e77, 2024-04-24) for windows




2. 安装 CytoTRACE
官网：https://cytotrace.stanford.edu/

安装包: 包的安装需下载安装包、本地安装即可
@J3$ ~/Downloads/
$ wget https://cytotrace.stanford.edu/CytoTRACE_0.3.3.tar.gz
下载到本地win。

启动 win11 Rstudio:
> install.packages("devtools")
> devtools::install_local("D:\\ProgramFiles\\Downloads\\CytoTRACE_0.3.3.tar.gz")
报错：1: package ‘sva’ is not available for this version of R

> install.packages("BiocManager")
> BiocManager::install("sva")
	> BiocManager::install("GenomeInfoDb") #ok
	> BiocManager::install("KEGGREST") #ok
	> BiocManager::install("genefilter")
> devtools::install_local("D:\\ProgramFiles\\Downloads\\CytoTRACE_0.3.3.tar.gz")
> library("CytoTRACE")
Welcome to the CytoTRACE R package, a tool for the unbiased prediction of differentiation states in scRNA-seq data. For more information about this method, visit https://cytotrace.stanford.edu.


继续安装：
> install.packages("Seurat") #默认是V5
退回去，报错：'make' not found
	> packageurl <- "https://cran.r-project.org/src/contrib/Archive/Seurat/Seurat_4.4.0.tar.gz"
	> install.packages(packageurl, repos=NULL, type="source")
删除V5。


重新安装:
> library(devtools)
> install_version("Seurat", version = "4.4.0")
下载 https://cran.rstudio.com/bin/windows/Rtools/rtools44/files/rtools44-6104-6039.exe，同意。

## writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
重启Rstuidio
Call `pkgbuild::check_build_tools(debug = TRUE)` to diagnose the problem.
> pkgbuild::check_build_tools(debug = TRUE)
Your system is ready to build packages!

> devtools::install_version("Seurat", version = "4.4.0")
> devtools::install_version("SeuratObject", version = "4.1.4") #默认 5.0.1，降级到v4
	https://github.com/cran/SeuratObject 查版本

检查:
> library(Seurat)
Attaching SeuratObject

> library(CytoTRACE)







========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------




========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------

