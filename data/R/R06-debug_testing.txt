R06-debug_testing






========================================
R语言常见: 无报错信息的错误
----------------------------------------
1. 如果布尔值向量包含了NA，则对数据框取子集时结果可能异常

# NA in bool array Error:
arr=c( rep(T, 50), rep(NA, 50), rep(F, 50) )
head(arr)
tail(arr)
str(arr) #150
dim(iris)


> iris[arr, ] |> dim() #100 5 #100条：似乎不对，T和NA都给出来了
[1] 100   5
> iris[which(arr), ] |> dim() #50 条：用which只给出T的值
[1] 50  5


# 检查为什么？
table(arr) #总和不对 100


# 直接证据，发现有NA
unique(arr) #TRUE    NA FALSE




2.






========================================
Debugging: R语言调试代码
----------------------------------------
和其他语言一样你自然可以通过print一些参数之类的方法进行debug,但是R或RStudio提供的一些代码调试工具还是能为你提供一些有用的尝试。
这些工具包括：traceback、browser、debug、debugonce、trace和recover函数。

一般debug包括两个步骤，首先是定位代码错误发生的位置，然后是找出代码发生错误的原因并解决



1. 其中第一步可以借助traceback函数来完成
traceback
R语言中的函数调用报错，一般不是很精确，很难查找到出错的具体原因。
很多R函数之间都会存在互相调用的情况，如何确定出错的函数往往是个难题。
traceback函数可以帮助你精确定位错误的位置。


例子: 
first<-function()second()
second<-function()third()
third<-function()fourth()
fourth<-function()fifth()
fifth<-function()bug()

上述函数都在调用下一个函数（除了最后一个函数）
由于bug函数不存在，运行first()将会报错
Error in bug() : could not find function "bug"

> first()
 Error in bug() : could not find function "bug" 
> traceback() #可见第一条就是错误的位置 fifth()函数的第一行
5: fifth() at #1
4: fourth() at #1
3: third() at #1
2: second() at #1
1: first()




ref:
https://blog.csdn.net/xiaohukun/article/details/76659515



========================================
|-- 逐行检验模式 options(error=recover)
----------------------------------------

1. 先用 traceback 基本定位到这一行。
然后执行看函数内部。

set.seed(2021)
carrier<-rep(c(0,1), c(100,200)) #携带者
null.y<-rnorm(300) #随机分布的可能性？
alt.y<-rnorm(300, mean=carrier/2) #携带者可能性高

one.test <- function(x,y) {
	xstar<-sample(x)
	mean(y[xstar==1])-mean(y[xstar==0])
}

ywrong=data.frame( rnorm(300, mean=carrier/2) ) #不是vector，错写成了 data.frame

one.test(carrier, ywrong)
# Error in `[.data.frame`(y, xstar == 1) : undefined columns selected
这时候我们想查一下当时环境内的变量，

> options(error=recover) ##进入事后分析模式
> one.test(carrier,ywrong)
Error in `[.data.frame`(y, xstar == 1) : undefined columns selected

Enter a frame number, or 0 to exit   

1: one.test(carrier, ywrong)
2: #3: mean(y[xstar == 1])
3: #3: y[xstar == 1]
4: #3: `[.data.frame`(y, xstar == 1)

Selection: 1
Called from: mean(y[xstar == 1])
Browse[1]> str(xstar)
 num [1:300] 1 1 1 1 1 1 1 1 1 1 ...
Browse[1]> str(y)
'data.frame':	300 obs. of  1 variable:
 $ rnorm.300..mean...carrier.2.: num  0.149 -0.312 -1.26 0.052 0.204 ...

#退出事后分析模式
点击命令行上面的 stop。
> options(error=NULL)










========================================
|-- 调试函数 stop('sth')：报 Error
----------------------------------------
配合if，相当于断言。

例1: 读取文本第x行
fn2=function(x=2){
  print('line1')
  if(x<0){
    stop( paste('Stoped here: x should be greater than 0; but x=',x) )
  }
  print('line2')
}

> fn2(10)
[1] "line1"
[1] "line2"

> fn2(-1)
[1] "line1"
Error in fn2(-1) : Stoped here: x should be greater than 0; but x= -1




例2：如果除数为0则报错
for(y in -2:2){
  if(y==0){
    stop("Divided by 0")
  }
  print(1/y)
}
# 输出: 
[1] -0.5
[1] -1
Error: Divided by 0





========================================
|-- 函数的调试debug 和性能分析 system.time()
----------------------------------------

一、函数的调试 debug
1.手动添加 print(xx)， 随时查看变量，判断出错位置。
缺点：比较繁琐，特别是程序较长的时候。

2.使用R的调试工具。
(1) debug(f)函数可以把函数f()设置成调试状态，意味着每次调用f()都会进入这一状态。
取消这一状态需调用 undebug(f)。
在2.10版本之后，可以使用 debugonce()代替，仅检查漏洞一次。


(2)程序调试工具还能跟踪运行步骤，进而加深对程序处理过程的理解

#递归的原理：将x类型的原始问题降级为一个或划分为若干个更小的同类型问题，然后对每个较小问题调用f()函数自身，直到达到终止条件，再将各个小问题的结果向上返回并整理来解决问题。

#递归算法排序
qs=function(x){
  if(length(x)<=1) return(x)
  pivot=x[1]
  therest=x[-1]
  sv1=therest[therest<pivot]
  sv2=therest[therest>=pivot]
  sv1=qs(sv1)
  sv2=qs(sv2)
  return(c(sv1,pivot,sv2))
}
a=c(8,7,20,9,45,3)
qs(a)
# [1]  3  7  8  9 20 45

#使用调试工具，跟踪代码
#trace code
debugonce(qs)
qs(a)
然后回车查看下一步，或者输入变量回车，查看当前变量的值。




二、性能优化
https://www.zhihu.com/question/23589055
1.跟踪运行的时间
add=function(a,b){
	return(a+b)
}

方法1：
time1=Sys.time();
add(1,2);
time2=Sys.time();
print(paste("消耗时间",time2-time1));


方法2：【推荐】
system.time(add(1,2))
用户user 系统system 流逝elapsed 
0.10 0.00 0.09 


三个数字分别表示 
user:消耗在应用程序（非操作系统部分）执行的时间；
system: 低层操作系统执行（如磁盘读写等）部分的时间；
elapsed:是经过的总时间（可以认为是前两者的总和）。
一般优化时主要关注user时间。





2.避免使用for循环，优先使用向量化操作

x=runif(1e6)
y=runif(1e6)

#向量化
system.time(z<-x+y) #这里不能使用=，否则会被认为是传入的参数而报错
# 用户 系统 流逝 
# 0.01 0.00 0.02 

#for循环
z=vector(length=1e6)
system.time(for(i in 1:length(x)) z[i]=x[i]+y[i])
# 用户 系统 流逝 
# 0.13 0.00 0.12 #为什么elapse比user还小呢？不清楚


可见，向量化(0.01s)运行速度远远高于for循环(0.13s)。

当然，速度的提升是以更多内存消耗为代价的。时间和空间的权衡经常无法避免。






========================================
|-- tryCatch() 应对可能的错误，保证程序继续运行
----------------------------------------
1. 基础示例

(1) error参数是一个函数，输入是当前报错，输出是报错输出的文本
msg <- tryCatch({
    text[seq(which(text == "")[1] + 1, length(text), 1)]
  }, error = function(e) {
    print(e)
    paste0("Error 01")
})
## <simpleError in text == "": comparison (1) is possible only for atomic and list types>
msg
## [1] "Error 01"



(2) 支持 finally 语句 

> tryCatch(ls[1], finally = print("The finally cmd"))
Error in ls[1] : object of type 'closure' is not subsettable
[1] "The finally cmd"





2. 循环中，如何在报error后继续运行后面的代码？

# i=3的时候会报错
testFUN=function(i){
  if(i==3){
    ls[i]
  }else{
    print(i)
  }
  print("hello")
}

> testFUN(1)
[1] 1
[1] "hello"

> testFUN(3)
Error in ls[i] : object of type 'closure' is not subsettable


# i=3报错后继续运行i=4
for(i in 1:4){
  tryCatch({
	testFUN(i)
  },error = function(e){  cat("Error: The input is ",i,"\n") }
  )
  print( paste("------>", i, " is done!") )
}

输出：
[1] 1
[1] "hello"
[1] "------> 1  is done!"
[1] 2
[1] "hello"
[1] "------> 2  is done!"
Error: The input is  3 
[1] "------> 3  is done!"
[1] 4
[1] "hello"
[1] "------> 4  is done!"

可见，i=3时没有输出 hello，虽然报错了，但是我们已经捕获并处理了，
所以程序并没有停止，而是继续运行下一个循环。




========================================
|-- 怎么能休眠2s再执行？
----------------------------------------
1. 系统休眠几秒，用Sys.sleep 语句。
for(i in 1:3){
  print(i)
  Sys.sleep(2)
}

可以用这个命令模拟耗时任务。







========================================
Testing: 使用 testthat 包做 Unit test (R单元测试)
----------------------------------------

# 安装包，略。
if (!require(testthat)) install.packages('testthat')


1. 简单使用

(1) 使用函数 test_that() 比较计算结果和期望值，并断定计算结果是否符合预期。
testthat uses test_that() function to create a test and uses expectations for unit testing of code. An expectation allows us to assert that the values returned by a function match the ones we should get. 

函数结构：
library("testthat")
test_that(desc, code)

test_that("Message to be displayed",
          { expect_equal(function_f(input x), expected_output_y)
            expect_equivalent(function_f(input x), expected_output_y)
            expect_identical(function_f(input x), expected_output_y)
            .
            .
            .
          })


该包中的测试函数有超过20个，根据需要查找:
There are more than 20 expectations in the testthat package.



https://www.geeksforgeeks.org/unit-testing-in-r-programming/





========================================
|-- 测试函数
----------------------------------------

(2) 写一个测试函数

例子1：简单函数的测试
doubleMe=function(x){ x*2 }

# 测试
test_that("Not equal when input c(2,0,-2)",
          { expect_equal(doubleMe(2), 4)
            expect_equal(doubleMe(0), 0)
            expect_equivalent(doubleMe(-2), -4)
          })
# Test passed 🌈



例子2: 测试函数内可以运算
Fibonacci <- function(n){
  a <- 0
  b <- 1
  for (i in 1:n){
    temp <- b
    b <- a
    a <- a + temp
  }
  return(a)
}

# 测试，使用金标准给出期望值
test_that("Test Fibo(15)",{
  phi <- (1 + sqrt(5))/2
  psi <- (1 - sqrt(5))/2
  expect_equal(Fibonacci(15), (phi**15 - psi**15)/sqrt(5))
})





========================================
|-- 测试文件: 可包含多个测试函数
----------------------------------------

(3) 写一个测试文件(包含1个及以上的测试函数)

例子: 阶乘函数
factorial <- function(n) {
  if(n == 0) {
	return(1) 
  }else{
    return(n * factorial(n - 1))
  }
}


# import testthat package
library(testthat)
# use expect_that to create tests
test_that(
  "Factorial of number $n",
  {
    expect_equal(factorial(5), 120)
    expect_identical(factorial(2), 2)
    expect_equal(factorial(8), 40320)
  }
)


source("your_file_path")  # This is only needed if your project is not a package

要按照一定的文件目录组织代码。一个R文件夹放代码，一个 tests/testthat 文件夹放所有的测试脚本。


然后从R控制台，
运行一个测试文件的所有测试： test_file("./path/to/file")
或者运行一个文件夹内的所有测试： test_dir("./path/to/folder")

以上两个函数都有一个 reporter= 参数，有几个选项可以提供：
- progress  带进度条（默认） it is the default value 
- minimal   最简报告 for a minimal report
- location   shows the file, line, and column of the test run (failed or otherwise),
- debug    allows you to debug interactively a failing test and more.

> test_dir("./path/to/folder", reporter=c("minimal", "location"))



## 测试文件的例子:
$ cat tests/test_1.R 
library(testthat)
# use expect_that to create tests
test_that(
  "Factorial of number <=3",
  {
    expect_equal(factorial(0), 1)
    expect_identical(factorial(1), 1)
    expect_equal(factorial(2), 2)
    expect_equal(factorial(3), 6)
  }
)
test_that(
  "Factorial of number >3",
  {
    expect_equal(factorial(5), 120)
    expect_identical(factorial(2), 2)
    expect_equal(factorial(8), 40320)
  }
)


> test_file("tests/test_1.R")

══ Testing test_1.R ═════════════════════════════════════════════════════════════════════════════
[ [ FAIL[ FAIL 0 | [ FAIL 0 | WARN[ FAIL 0 | WARN 0 | [ FAIL 0 | WARN 0 | SKIP[ FAIL 0 | WARN 0 | SKIP 0 | FAIL 0 | WARN 0 | SKIP 0 | PASS 0 | WARN 0 | SKIP 0 | PASSWARN 0 | SKIP 0 | PASS 0 | SKIP 0 | PASSSKIP 0 | PASS 0 | PASSPASS 7 ] Done!



> test_file("tests/test_1.R", reporter=c("minimal") ) #这输出够简单
.......

> test_file("tests/test_1.R", reporter=c("minimal", "location") )
Start test: Factorial of number <=3
.  test_1.R:4:5 [success]
.  test_1.R:5:5 [success]
.  test_1.R:6:5 [success]
.  test_1.R:7:5 [success]
End test: Factorial of number <=3

Start test: Factorial of number >3
.  test_1.R:13:5 [success]
.  test_1.R:14:5 [success]
.  test_1.R:15:5 [success]
End test: Factorial of number >3







========================================
|-- 测试文件夹：可包含多个测试文件
----------------------------------------

(4) 测试文件夹
library(testthat) 
source("path/to/fibo.R") #要载入待测试的函数
test_results <- test_dir("path/to/tests", reporter="summary")
test_results # 耗时分析
You'll see each file and each function inside the files that were tested, and also whether the test was skipped, failed


$ cat tests/test_2.R
test_that("Test Fibo(15)",{
  phi <- (1 + sqrt(5))/2
  psi <- (1 - sqrt(5))/2
  expect_equal(Fibonacci(15), (phi**15 - psi**15)/sqrt(5))
})

$ ls tests/
test_1.R  test_2.R


# 开始测试
> test_dir("tests/", reporter=c("minimal", "location") )
Start test: Factorial of number <=3
.  test_1.R:4:5 [success]
.  test_1.R:5:5 [success]
.  test_1.R:6:5 [success]
.  test_1.R:7:5 [success]
End test: Factorial of number <=3

Start test: Factorial of number >3
.  test_1.R:13:5 [success]
.  test_1.R:14:5 [success]
.  test_1.R:15:5 [success]
End test: Factorial of number >3

Start test: Test Fibo(15)
.  test_2.R:4:3 [success]
End test: Test Fibo(15)


> rs=test_file("tests/test_1.R", reporter=c("summary") )
> rs
      file context                    test nb failed skipped error warning  user system  real passed
1 test_1.R       1 Factorial of number <=3  4      0   FALSE FALSE       0 0.013      0 0.013      4
2 test_1.R       1  Factorial of number >3  3      0   FALSE FALSE       0 0.004      0 0.004      3




如果你想要一个没有bug、格式良好的代码，单元测试是必要的。
Unit testing is necessary if you want a bug free, well-formed code.



ref:
https://www.geeksforgeeks.org/unit-testing-in-r-programming/
https://www.r-bloggers.com/2016/03/unit-testing-with-r/
https://testthat.r-lib.org/




========================================
R包的测试 //todo
----------------------------------------

https://r-pkgs.org/tests.html







========================================
----------------------------------------





========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------





========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------





========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


