R包与bioconductor


常用语句：
if (!requireNamespace("BiocManager", quietly = TRUE)){
    install.packages("BiocManager")
}
BiocManager::install("ggplot2")




R程序官网：http://www.r-project.org/
bioconductor可用包：https://bioconductor.org/packages/3.3/bioc/
manual:http://compbio.mit.edu/cummeRbund/manual_2_0.html
ggplot2:http://ggplot2.org/  http://ggplot2.tidyverse.org/reference/

更好的流程是： 
ubuntu1604安装好，直接apt安装r-base，之后安装bioconductor，顺便提前apt安装xml和curl库。


可用的镜像：
    https://cran.stat.auckland.ac.nz/web/packages/diffusionMap/index.html
    https://mirrors.pku.edu.cn/CRAN/web/packages/diffusionMap/index.html




========================================
R 包通用、常用操作
----------------------------------------
函数.libPaths()能够显示库所在的位置，
函数library()则可以显示库中有哪些包，
命令search()可以知道哪些包已加载并可使用。




========================================
|-- R 包安装与卸载、加载与卸除
----------------------------------------

1.选择使用哪个镜像：
setRepositories()






2. 安装与删除(卸载)R包
(1) 使用 library() 可以查看已经安装的包的列表，会打开一个新窗口显示信息。

(2) 已经安装的包：使用 installed.packages() 可以看到各个包安装的路径，版本号等信息。
也可以使用 .packages(all.available=T) 就在控制台中显示已安装包的名字，只显示包的名字。

要查看已安装包的帮助信息，比如该包中有哪些函数，可使用 help(package=“graphics”) 。如果该包提供了信息，会以本地网页的形式打开帮助文件。

(3) 安装包
使用命令 install.packages(“包名”)，或者
install.packages(“包名”, contriburl=“http://url”, dependencies = TRUE)

如果安装的时候要指定安装目录，可以使用install.packages(“stepNorm”, contriburl=“http://url”, lib=“mydir”)
也可以在gui菜单中选择程序包->安装程序包来进行。另外，如果是已经下载了包文件，离线安装。比如，有package.zip，可以在程序包->Install package from local zip file…来进行安装。


(4) 卸载删除包
使用remove.packages(c(“pkg1”,“pkg2”) , lib = file .path(“path”, “to”, “library”))
注：
“pkg1”,"pkg2"表示包名，即一次可以卸载多个包；
“path”, “to”, "library"表示R的库路径，字符向量，通常情况下只输一个路径即可。使用命令**.libPaths()可以查看库路径**。示例：
remove.packages(c(‘zoom’),lib=file.path(‘C:\Program Files\R\R-3.2.2\library’))


(5) 查看已安装包的版本号
packageVersion("SingleR") #‘1.1.6’



(6) 查看 BiocManager 是否有警告
BiocManager::valid() #诊断
BiocManager::valid()$out_of_date # 过时的包

如果升级，使用空命令
BiocManager::install() #升级 all







3. 加载与卸除R包
(1) 载入包
包被安装后，在使用前需要加载。加载包使用命令 library(包名)，比如library(codetools)。


(2) 查看当前加载的包
查看有哪些包是被加载的，使用命令(.packages()) ，注意小括号和点号不能省略。

> print(.packages())
> (.packages()) 


## To see the list of currently loaded packages use
> search() #相比上句少了几个

R函数查找路径:
> search()
 [1] ".GlobalEnv"        "package:wjl008"    "tools:rstudio"     "package:stats"    
 [5] "package:graphics"  "package:grDevices" "package:utils"     "package:datasets" 
 [9] "package:methods"   "Autoloads"         "package:base"


(3) 卸除已加载的包
要将已经加载的包卸除。注意不是卸载删除，只是不加载这个包。在包函数冲突时需要。
使用命令 detach(“package:包名”)。或则detach(“package:包名”, unload=TRUE)

如卸除RMySQL包
>detach('package:RMySQL')

注意是卸除，不是卸载，也就是说不是把包从R运行环境中彻底删除，只是不希望该包被加载使用。
在包使用函数冲突，检验函数依赖时比较有用。

>detach('package:ggplot2')
在升级该包时，不能是加载状态，如果不想重启Rstudio，就可以先卸除该包，再执行安装命令，安装新包。












3. 出问题时，项目进程中，定期记录所有使用的R包及版本号
整个 R 会话当前的所有信息都可以通过 sessionInfo() 获取，在向他人提问时提交该命令结果是一个良好的习惯。

(1) 记录当前R状态：加载了哪些包
> sessionInfo()
R version 4.1.1 (2021-08-10)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 20.04.3 LTS
...
attached base packages:
[1] grid      stats     graphics  grDevices utils     datasets  methods   base
...


(2) 记录全部已安装的R包名
> pkgs=.packages(all.available=T) 
> length(pkgs)
[1] 750
> head(pkgs)
[1] "AnnotationDbi"    "AnnotationFilter" "askpass"          "assertthat"       "backports"       
[6] "base64enc" 


(3) 记录全部已安装R包名字、版本号、路径
> pkg_df=installed.packages()
> dim(pkg_df)
[1] 881  16
> colnames(pkg_df)
 [1] "Package"               "LibPath"               "Version"               "Priority"              "Depends"               "Imports"               "LinkingTo"            
 [8] "Suggests"              "Enhances"              "License"               "License_is_FOSS"       "License_restricts_use" "OS_type"               "MD5sum"               
[15] "NeedsCompilation"      "Built" 

> head(pkg_df[,c("Package", "LibPath", "Version", "Enhances", "License","OS_type", "NeedsCompilation")])
                 Package            LibPath                                                Version  Enhances License              OS_type NeedsCompilation
AnnotationDbi    "AnnotationDbi"    "/data/jinwf/wangjl/R/x86_64-pc-linux-gnu-library/4.2" "1.58.0" NA       "Artistic-2.0"       NA      "no"            
AnnotationFilter "AnnotationFilter" "/data/jinwf/wangjl/R/x86_64-pc-linux-gnu-library/4.2" "1.20.0" NA       "Artistic-2.0"       NA      "no"            
askpass          "askpass"          "/data/jinwf/wangjl/R/x86_64-pc-linux-gnu-library/4.2" "1.1"    NA       "MIT + file LICENSE" NA      "yes"           
assertthat       "assertthat"       "/data/jinwf/wangjl/R/x86_64-pc-linux-gnu-library/4.2" "0.2.1"  NA       "GPL-3"              NA      "no"            
backports        "backports"        "/data/jinwf/wangjl/R/x86_64-pc-linux-gnu-library/4.2" "1.4.1"  NA       "GPL-2 | GPL-3"      NA      "yes"           
base64enc        "base64enc"        "/data/jinwf/wangjl/R/x86_64-pc-linux-gnu-library/4.2" "0.1-3"  "png"    "GPL-2 | GPL-3"      NA      "yes"


> head(pkg_df[c("Seurat", "SeuratObject", "ggplot2"),c("Package", "LibPath", "Version", "Enhances", "License","OS_type", "NeedsCompilation")])
             Package        LibPath                                                Version Enhances License              OS_type NeedsCompilation
Seurat       "Seurat"       "/home/yushiya/R/x86_64-pc-linux-gnu-library/4.2"      "4.1.1" NA       "MIT + file LICENSE" NA      "yes"           
SeuratObject "SeuratObject" "/home/yushiya/R/x86_64-pc-linux-gnu-library/4.2"      "4.1.0" NA       "MIT + file LICENSE" NA      "yes"           
ggplot2      "ggplot2"      "/data/jinwf/wangjl/R/x86_64-pc-linux-gnu-library/4.2" "3.3.6" "sp"     "MIT + file LICENSE" NA      "no" 






4. 批量安装R包: R 包文件名的备份和按列表安装
新版本的R环境，怎么快速安装R包环境呢？

(1)先从老环境获取R包名字。
backupPkgNames=function(filename=""){
	now=function(){
	  format(Sys.time(), '.%Y%m%d_%H%M%S.')
	}
	
	if(""==filename){
		filename=sprintf("~/R/x86_64-pc-linux-gnu-library/R_pkg_list%sdf.txt",now());
	}
	write.table(installed.packages()[, c("Package", "Version")], 
		filename, 
		quote=F, row.names = F)
	message("saved R pkg list to:", filename);
}
backupPkgNames()


$ ls -lth ~/R/x86_64-pc-linux-gnu-library/
total 24K
-rw-r--r--.   1 wangjl jinwf  13K Jul  1 11:30 R_pkg_list.20220701_113022.df.txt
drwxr-xr-x. 128 wangjl jinwf 4.0K Jul  1 10:15 4.2
-rw-r--r--.   1 wangjl jinwf   36 Jun 30 10:29 ReadMe.txt




(2) 批量安装R包










========================================
|-- R包的安装位置，查询和设置: .libPaths( c(.libPaths(), "add/new/path/") )
----------------------------------------
1. 查询包的安装位置

> Sys.getenv("LD_LIBRARY_PATH") #这是动态链接库
[1] "/usr/local/lib/R/lib::/lib:/usr/local/lib:/usr/lib/x86_64-linux-gnu:/usr/lib/jvm/java-11-openjdk-amd64/lib/server"


> Sys.getenv() #获取全部配置参数

# R_LIBS_SITE             /usr/local/lib/R/site-library:/usr/lib/R/site-library:/usr/lib/R/library ##内置的包 R3.6


> Sys.getenv("R_LIBS") 
[1] "/usr/local/lib/R/site-library: #找到了刚安装的 ggplot2
/usr/local/lib/R/library" ##内置的包 R4.0: base, stats4, class, 







2. 临时添加R包目录
用户自定义安装包路径：.libPaths()

(1) server 193
直接在R的命令行添加，只在当前 R session 起作用。
> .libPaths() #查询R包路径
[1] "/data/jinwf/wangjl/R/x86_64-pc-linux-gnu-library/4.2"
[2] "/opt/R/lib64/R/library" 


可以把其他人的库目录加到最后，作为补充。把其他人的库放前面不好，因为没法写入可能导致无法安装R包。
> .libPaths( c(.libPaths(), "~/data/R/x86_64-redhat-linux-gnu-library/4.2.1/") ) #设置R包路径

> .libPaths()
[1] "/data/jinwf/wangjl/R/x86_64-pc-linux-gnu-library/4.2"      
[2] "/opt/R/lib64/R/library"                                    
[3] "/data/jinwf/wangjl/R/x86_64-redhat-linux-gnu-library/4.2.1" # 貌似新版本都主动避免 redhat 这个关键词了。这个目录我自创的。


查询:
$ which R
/opt/R/bin/R
$ ls -lth /opt/R/bin/R
-rwxr-xr-x. 1 root root 8.8K Jun 24 21:47 /opt/R/bin/R

查询环境变量：
# Sys.getenv() # Sys.setenv()
> Sys.getenv("R_LIBS_USER")  #用户自定义安装的包
[1] "/home/wangjl/R/x86_64-pc-linux-gnu-library/4.2"

原因是因为 /home/wangjl/R 是一个软连接文件。
$ ls -lth /home/wangjl/R
lrwxrwxrwx. 1 wangjl jinwf 20 May 10 18:26 /home/wangjl/R -> /data/jinwf/wangjl/R


> grep("LIB|PATH", names(Sys.getenv()), value=T)
[1] "LD_LIBRARY_PATH"    "MODULEPATH"         "PATH"              
[4] "QTLIB"              "R_LIBS_SITE"        "R_LIBS_USER"       
[7] "R_STRIP_SHARED_LIB" "R_STRIP_STATIC_LIB"
> Sys.getenv()[ grep("LIB|PATH", names(Sys.getenv())) ]
LD_LIBRARY_PATH         /opt/R/lib64/R/lib:/usr/local/lib64:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.332.b09-1.el7_9.x86_64/jre/lib/amd64/server
MODULEPATH              /usr/share/Modules/modulefiles:/etc/modulefiles
PATH                    /home/wangjl/data/software/subread-1.6.0-Linux-x86_64/bin:/home/wangjl/bin:/home/wangjl/.aspera/connect/bin:/home/wangjl/software/sratoolkit.2.10.9-centos_linux64/bin:/home/wangjl/software/soft_bin/:/home/wangjl/data/software/samtools:/home/wangjl/software/bowtie2-2.3.5.1-linux-x86_64:/home/wangjl/software/annovar:/home/wangjl/meme/bin:/home/wangjl/software/anaconda3/bin:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/opt/R/bin:/home/wangjl/data/software/homer/.//bin/:/home/wangjl/software/ncbi-blast-2.10.1+/bin/:/home/wangjl/.local/bin:/home/wangjl/bin
QTLIB                   /usr/lib64/qt-3.3/lib
R_LIBS_SITE             /opt/R/lib64/R/site-library
R_LIBS_USER             /home/wangjl/R/x86_64-pc-linux-gnu-library/4.2
R_STRIP_SHARED_LIB      strip --strip-unneeded
R_STRIP_STATIC_LIB      strip --strip-debug

主要就是: R_LIBS_SITE 和 R_LIBS_USER




(2) server 10
> .libPaths()
[1] "/data3/wangjl/R/x86_64-pc-linux-gnu-library/4.1"
[2] "/opt/R/4.1.0/lib64/R/library" 

$ which R
/usr/local/bin/R
$ ls -l /usr/local/bin/R
lrwxrwxrwx. 1 root root 18 May 18 19:46 /usr/local/bin/R -> /opt/R/4.1.0/bin/R


查询环境变量：
> Sys.getenv("R_LIBS_USER")
[1] "~/R/x86_64-pc-linux-gnu-library/4.1"


$ ls -lth ~/R
lrwxrwxrwx. 1 wangjl user 15 Feb 24 17:07 /home/wangjl/R -> /data3/wangjl/R





(3) 指定要安装的地点
> library('caTools',lib='~/MyRlibs')






2. 永久添加
把R包安装目录下入用户自己的R配置文件 ~/.Rprofile 

$ cat ~/.Rprofile 
.libPaths("/home/wangjl/R/x86_64-pc-linux-gnu-library/4.0")
message("Jia you")


重启R(Rstudio 菜单 Session - quit session)，再次查询
> .libPaths() # 包的查找路径

警告：不要在配置文件中使用 print() 输出，可能导致各种报错！
	建议使用 message/stop 等输出信息。




3. 系统级的R配置文件
$ ls -lth /etc/rstudio/
total 12K
-rw-r--r--. 1 root           root  101 Jun 28 09:18 rserver.conf
-rw-r--r--. 1 root           root   60 Jun 25 14:29 rsession.conf
drwxr-xr-x. 2 root           root   23 Jun 25 13:59 fonts
drwxr-xr-x. 2 root           root   23 Jun 25 13:59 themes
-rw-------. 1 rstudio-server root 2.5K Jun 25 13:59 database.conf

主要是前2个。
(1)
$ cat /etc/rstudio/rserver.conf 
# Server Configuration File
www-port=8888

rsession-which-r=/opt/R/bin/R

auth-timeout-minutes=1800


检查：
$ /opt/R/bin/R --version
WARNING: ignoring environment value of R_HOME
R version 4.2.1 (2022-06-23) -- "Funny-Looking Kid"




(2)
$ cat /etc/rstudio/rsession.conf 
# R Session Configuration File
session-timeout-minutes=3600 #这个怎么起作用的？







========================================
|-- 安装 指定版本/老版本 的R包：remotes::install_version("name", "version", repos=c())
----------------------------------------
remotes::install_version("Seurat", "4.4.0", repos = c("https://satijalab.r-universe.dev", getOption("repos")))






========================================
|-- 如何查看R语言package中自带哪些数据集以及各个数据集的描述？
----------------------------------------
查找所有已经安装的包:
> library()


1.如何知道一个包内的函数名字列表？
help(package="packagename")

假设包的名字叫abc，里面某一个函数叫def:可以用  library(help=abc)  看这个包里有什么函数，数据集等。
调用这个包可以用  library(abc)  。
如果要看函数如何用，可以  ?def，这样会出来函数的帮助文件。
如果要看具体函数的代码，很多情况直接输入  def  是不行的，因为R是面向对象的程序语言，可以先用methods(def)看这个函数有什么“方法”。

比如sspir这个包，想看里面的kfilter函数的代码，可以用library(sspir)加载这个包，然后methods(kfilter)，下面会出来结果：kfilter.SS和kfilter.ssm。然后你直接输入kfilter.SS就出来具体代码了。

http://bbs.pinggu.org/thread-1556305-1-1.html



(1) 查看R内置数据集
data()
## Data sets in package ‘datasets’:
...

(2)查看包中的数据集
print(data(package='具体的package名'))
例如：
print(data(package='fda'))
通过上述命令，就可知道具体的package中包含的datasets。

载入包中的数据，通过
print(data(package='glmnet')) #显示该包中的所有数据集
data('CoxExample') #载入数据


(3)对于某个特定的数据集，我们可通过命令
?数据集名称
来进一步了解数据集，如对于fda包中的数据集CanadianWeather，可用?CanadianWeather 查看该数据集的详细描述。












========================================
|-- 如何获得R包的全部（所有）函数名字？
----------------------------------------
1. library(help = datasets) # Get the list of functions in the package
library(help = ggplot2) 
#自动打开新标签，向下滚动，找到 索引 Index。
# +.gg                    Add components to a plot
# CoordSf                 Visualise sf objects
# aes                     Construct aesthetic mappings


或只看索引
x <- library(help = ggplot2)
x$info[[2]]




2. ls("package:datasets") will list all the objects in the package 【推荐】
只看base基础包函数名可以 ls("package:base")

> ls("package:ggplot2") 
#  [1] "%+%"        "%+replace%"     "aes"                      
#  [4] "aes_"       "aes_all"        "aes_auto" 




3. List Objects and their Structure
> library(ggplot2)
#Need help? Try Stackoverflow: https://stackoverflow.com/tags/ggplot2.

> lsf.str("package:ggplot2") #List Objects and their Structure
# %+% : function (e1, e2)  
# %+replace% : function (e1, e2)  
# aes : function (x, y, ...)  


# 查看所有的变量名（含函数名）
> ls(envir=as.environment("package:ggplot2"))
#  [1] "%+%"                       "%+replace%"                "aes"                      
#  [4] "aes_"                      "aes_all"                   "aes_auto"                 
#  [7] "aes_q"                     "aes_string"                "after_scale"   





4. help(package="程序包名") #打开web帮主页
help(package="ggplot2")
help(package="pasilla")



5. If you want all exported functions (i.e. functions accessible via ::), then getNamespaceExports(pkgName) will do the trick.
> getNamespaceExports('ggplot2')
  [1] "draw_key_vpath"            "StatDensity2dFilled"       "find_panel"               
  [4] "stat_density2d_filled"     "stat_count"                "scale_fill_date"
#


(2)
If you want all functions in the package, including the ones accessible via :::, you can do ls(getNamespace(pkgName)).

> ls(getNamespace("ggplot2"))
  [1] "[.mapped_discrete"                "[.uneval"                        
  [3] "[[.ggproto"                       "[[<-.uneval"                     
  [5] "[<-.mapped_discrete"              "[<-.uneval"                      
  [7] "%+%"                              "%+replace%"                      
  [9] "%||%"                             "%|W|%" 
#



refer:
https://stackoverflow.com/questions/20535247/seeking-functions-in-an-r-package






========================================
安装R包的几种方法(Install Bioconductor Packages)
----------------------------------------
新版R包安装函数有变化：
To install this package, start R (version "3.6") and enter:

if (!requireNamespace("BiocManager", quietly = TRUE)){
    install.packages("BiocManager")
}
BiocManager::install("pasilla")



#从github安装包
https://github.com/twitter/AnomalyDetection:
library(devtools)
install_github("twitter/AnomalyDetection")


#常规安装bioconductor包
source('https://bioconductor.org/biocLite.R');
biocLite('glmnet')


#指定本地包名
install.packages(path_to_file, repos = NULL, type="source")
install.packages("E:\matrixStats_0.51.0.tar.gz", repos = NULL, type="source")

#指定包的镜像
install.packages("RJSONIO", repos = "http://www.omegahat.org/R", type="source")

#直接命令行安装R包
D:\Program Files\R\R-3.3.2\bin\x64>Rcmd INSTALL E:\xx_1.0.1.tar.gz
R CMD build --binary RJSONIO_0.2-3.tar.gz






####

http://www.bioconductor.org/install/#install-bioconductor-packages
http://www.bioconductor.org/packages/release/bioc/html/cummeRbund.html
http://compbio.mit.edu/cummeRbund/


## try http:// if https:// URLs are not supported
> source("https://bioconductor.org/biocLite.R")
> biocLite() #推荐先安装默认组件 
> biocLite('cummeRbund') #再具体安装某一个

BioC_mirror: https://bioconductor.org
Using Bioconductor 3.3 (BiocInstaller 1.22.3), R 3.3.1 (2016-06-21).
Installing package(s) ‘cummeRbund’
also installing the dependencies ‘httpuv’, ‘xtable’, ‘htmltools’, ‘shiny’, ‘jsonlite’, ‘mime’, ‘curl’, ‘openssl’, ‘R6’, ‘lambda.r’, ‘futile.options’, ‘Matrix’, ‘chron’, ‘interactiveDisplayBase’, ‘httr’, ‘colorspace’, ‘futile.logger’, ‘snow’, ‘survival’, ‘Formula’, ‘cluster’, ‘rpart’, ‘nnet’, ‘acepack’, ‘foreign’, ‘gridExtra’, ‘data.table’, ‘AnnotationHub’, ‘dichromat’, ‘munsell’, ‘labeling’, ‘stringi’, ‘magrittr’, ‘bitops’, ‘BiocParallel’, ‘SummarizedExperiment’, ‘Hmisc’, ‘VariantAnnotation’, ‘ensembldb’, ‘DBI’, ‘digest’, ‘gtable’, ‘MASS’, ‘scales’, ‘stringr’, ‘Rcpp’, ‘GenomicRanges’, ‘XML’, ‘IRanges’, ‘XVector’, ‘GenomeInfoDb’, ‘Biostrings’, ‘zlibbioc’, ‘RCurl’, ‘Rsamtools’, ‘GenomicAlignments’, ‘lattice’, ‘RColorBrewer’, ‘biomaRt’, ‘AnnotationDbi’, ‘GenomicFeatures’, ‘BSgenome’, ‘biovizBase’, ‘latticeExtra’, ‘matrixStats’, ‘BiocGenerics’, ‘RSQLite’, ‘ggplot2’, ‘reshape2’, ‘fastcluster’, ‘rtracklayer’, ‘Gviz’, ‘plyr’, ‘S4Vectors’, ‘Biobase’

如果下载失败，及时手动下载补充安装包：
位置：/tmp/Rtemptxxxx/downloaded_packages （使用root权限）
链接类型：https://cran.r-project.org/src/contrib/Formula_1.2-1.tar.gz
需要找一个靠谱的cran源。

安装后这些包的位置：
/usr/local/lib/R/site-library/


教训：使用R3.3.1版本安装出现更多警告！使用R3.2正常安装。
The downloaded source packages are in
	‘/tmp/RtmpFiZMVb/downloaded_packages’
There were 29 warnings (use warnings() to see them)
> warnings()
Warning messages:
1: In install.packages(pkgs = doing, lib = lib, ...) :
  installation of package ‘cluster’ had non-zero exit status
2: In install.packages(pkgs = doing, lib = lib, ...) :
  installation of package ‘acepack’ had non-zero exit status
3: In install.packages(pkgs = doing, lib = lib, ...) :
  installation of package ‘munsell’ had non-zero exit status
4: In install.packages(pkgs = doing, lib = lib, ...) :
  installation of package ‘htmltools’ had non-zero exit status
...
29: In install.packages(pkgs = doing, lib = lib, ...) :
  installation of package ‘cummeRbund’ had non-zero exit status
> 

  
安装好后，可以使用" .packages(all. available=TRUE) "在R中查看已安装的程序包。




查看该包的详细文档：
> browseVignettes("cummeRbund")




========================================
|-- 没有root 权限下 R安装包方法
----------------------------------------

1. 查看R包的引用路径
> .libPaths() 
## [1] "/home/wangjl/R/x86_64-pc-linux-gnu-library/3.4"
## [2] "/usr/local/lib/R/site-library"                 
## [3] "/usr/lib/R/site-library"                       
## [4] "/usr/lib/R/library" 



2.如果想指定目录，可以在自己的home目录下，创建一个名称为 .Rprofile 的文件；
文件内容修改成： 
R_LIBS_USER="your lib path"

例如：
R_LIBS_USER="/home/BBQ100/R_lib"

重新打开1个R，然后再去查看.libPaths() ，是否添加成功。
如果没有成功

用以下方法：
在 ~/.bashrc 中设置
export R_LIBS_USER=/your/path

直接安装









========================================
|-- 提速安装：换BioConductor镜像
----------------------------------------
1.在中国大陆使用默认的bioconductor可能下载速度特别慢，可以使用中国科技大学、清华大学或者日本的镜像。

## 查看当前的安装源
biocinstallRepos()

## 用chooseBioCmirror()换BioConductor镜像
chooseBioCmirror()
setRepositories()



 
 

refer:
http://www.bioconductor.org/about/mirrors/
https://bioc.ism.ac.jp/
中科大(镜像好像坏了) http://mirrors.ustc.edu.cn/
清华大学bioconductor镜像：https://mirrors.tuna.tsinghua.edu.cn/

http://bioconductor.org/packages/3.3/bioc/manuals/BiocInstaller/man/BiocInstaller.pdf





######
# 过时或已不能访问:
######
2).[推荐]## The usage of biocLite() is also possible:
source("https://bioc.ism.ac.jp/biocLite.R")
biocLite("WGCNA")

3. 直接指定镜像
source("http://bioconductor.org/biocLite.R")
#指定一个离你最近的国内镜像
options(BioC_mirror="http://mirrors.ustc.edu.cn/bioc/")
biocLite("包名")








========================================
|-- 命令行安装：ggpubr 包安装编译时 “WARNING: ignoring environment value of R_HOME” 报错？去掉 src/Makevars 文件中 R_HOME 外的圆括号
----------------------------------------
安装包报错：@H3
最终目的: install.packages("ggpubr")

1. 缺少 cmake3
$ sudo yum install cmake3

> system("/usr/bin/cmake3 --version")
> install.packages("nloptr")



2. 因 WARNING: ignoring environment value of R_HOME 报错
system("echo $R_HOME")  #/opt/R/4.3.2/lib64/R
install.packages("minqa") #WARNING: ignoring environment value of R_HOME
报错: 如题

(1) 解释1 https://github.com/rstudio/renv/issues/417
This looks a little suspicious. Is it possible that you've set some environment variables to point to a separate (older?) R installation? What is the output of:

Sys.getenv("R_HOME")  in your session?

> Sys.getenv("R_HOME")
[1] "/opt/R/4.3.2/lib64/R"



(2) 我怀疑就是老外没写好包，导致编译不正常，那就尝试fix它
首先下载R包到本地:
$ cd /picb/jinlab/wangjl/others/shenwh/PTC/output/
$ wget https://mirrors.tuna.tsinghua.edu.cn/CRAN/src/contrib/minqa_1.2.7.tar.gz

解压缩
$ tar zxvf minqa_1.2.7.tar.gz
$ cd minqa

查问题关键词：
$ find . | xargs grep -in "R_home" --color=auto

找到问题文件：echo $(R_HOME) 确实不识别
而去掉圆括号正常：
$ echo $R_HOME
/opt/R/4.3.2/lib64/R

修改它: 就是删除R_HOME的圆括号：
$ vim src/Makevars
#PKG_LIBS = `$(R_HOME)/bin/Rscript -e "Rcpp:::LdFlags()"`  修改为：
PKG_LIBS = `$R_HOME/bin/Rscript -e "Rcpp:::LdFlags()"`


重新构建R包：
$ cd ..
$ R CMD build minqa
["/picb/jinlab/wangjl/R/x86_64-pc-linux-gnu-library/4.3","/opt/R/4.3.2/lib64/R/library"]

* checking for file ‘minqa/DESCRIPTION’ ... OK
* preparing ‘minqa’:
* checking DESCRIPTION meta-information ... OK
* cleaning src
* checking for LF line-endings in source and make files and shell scripts
* checking for empty or unneeded directories
* building ‘minqa_1.2.7.tar.gz’


在R中安装该包：
> install.packages("/picb/jinlab/wangjl/others/shenwh/PTC/output/minqa_1.2.7.tar.gz")
> packageVersion("minqa")
[1] ‘1.2.7’






3. lme4 包也同样编译报错(同上)，全命令行修改安装
> install.packages("lme4")
g++ -std=gnu++11 -shared -L/opt/R/4.3.2/lib64/R/lib -L/usr/local/lib64 -o lme4.so external.o glmFamily.o optimizer.o predModule.o respModule.o WARNING: ignoring environment value of R_HOME -L/opt/R/4.3.2/lib64/R/lib -lR

/bin/ld: cannot find WARNING:: No such file or directory
/bin/ld: cannot find ignoring: No such file or directory
/bin/ld: cannot find environment: No such file or directory
/bin/ld: cannot find value: No such file or directory
/bin/ld: cannot find of: No such file or directory
/bin/ld: cannot find R_HOME: No such file or directory
collect2: error: ld returned 1 exit status
make: *** [lme4.so] Error 1

下载
$ wget https://mirrors.tuna.tsinghua.edu.cn/CRAN/src/contrib/lme4_1.1-35.3.tar.gz
$ tar zxvf lme4_1.1-35.3.tar.gz

修改
$ vim lme4/src/Makevars
#PKG_LIBS = `$(R_HOME)/bin/Rscript --vanilla -e "Rcpp:::LdFlags()"` #去掉R_HOME外的圆括号，修改为：
PKG_LIBS = `$R_HOME/bin/Rscript --vanilla -e "Rcpp:::LdFlags()"`

重新构建
$ R CMD build lme4
	报错 rror: processing vignette 'lmer.Rnw' failed with diagnostics:
	there is no package called 'gamm4'
	
	似乎是循环依赖：
	> install.packages("gamm4")
	它又开始先安装 lme4，而该包还是报错

使用文件夹安装呢？可以！
$ R CMD INSTALL lme4

> packageVersion("lme4")
[1] ‘1.1.35.3’





4. 成功安装ggpubr包
> install.packages("ggpubr")

加载：
> packageVersion("ggpubr")
[1] ‘0.6.0’
> library("ggpubr")
Loading required package: ggplot2
>




10. Makevars 中圆括号什么意思？

$(R_HOME) 是函数调用： https://blog.csdn.net/evilswords/article/details/12349187

如 $(strip ) 名称：去空格函数——strip。

所以，我认为R包原作者们是写错了，应该去掉R_HOME外的圆括号，还原它为一个普通变量名。





ref:
Building and installing an R package https://kbroman.org/pkg_primer/pages/build.html
makefile 中常见变量及函数 https://blog.csdn.net/evilswords/article/details/12349187
发博客到 https://blog.csdn.net/wangjunliang/article/details/139396322





========================================
|-- 命令行安装难安装的R包 $ Rscript -e 'BiocManager::install("rhdf5")'
----------------------------------------
1. 最初安装 rhdf5 (v2.46.1) 极为困难
无意中一个提问角度，gpt 给了这个方案，亲测可用！
详情见 R/R003-grocer.txt

$ Rscript -e 'BiocManager::install("HDF5Array")' #1.30.1
$ Rscript -e 'BiocManager::install("GSVA")' #1.50.5
> devtools::install_github('dviraran/SingleR')







========================================
依赖C包/库的R包怎么无root安装? 以 monocle3 需要 libgdal.so.20 为例: LD_LIBRARY_PATH [centOS7.9系统]
----------------------------------------
https://cole-trapnell-lab.github.io/monocle3/
https://cole-trapnell-lab.github.io/monocle3/docs/installation/


1. 安装好 monocle3 后报错
> .libPaths( c(.libPaths(), "/home/zhoub/R/x86_64-pc-linux-gnu-library/4.2"))
> library(monocle3)
Error: package or namespace load failed for ‘monocle3’ in dyn.load(file, DLLpath = DLLpath, ...):
 unable to load shared object '/home/zhoub/R/x86_64-pc-linux-gnu-library/4.2/terra/libs/terra.so':
  libgdal.so.20: cannot open shared object file: No such file or directory


(2) 查找该文件的位置
$ locate libgdal.so.20
/data/jinwf/hou/softPackages/gdal/gdal-2.2.3/.libs/libgdal.so.20
/data/jinwf/hou/softPackages/gdal/gdal-2.2.3/.libs/libgdal.so.20.3.2
/data/jinwf/hou/softPackages/gdal/setup/lib/libgdal.so.20
/data/jinwf/hou/softPackages/gdal/setup/lib/libgdal.so.20.3.2



(3) 参考周波的文件
$ vim ~/.bashrc

if [ -d "/home/zhoub/local/gdal-2.4.2/lib" ] ; then
    LD_LIBRARY_PATH="/home/zhoub/local/gdal-2.4.2/lib:$LD_LIBRARY_PATH"
fi


$ ls -lth /home/zhoub/local/gdal-2.4.2/lib
total 396M
drwxr-xr-x. 2 zhoub zhoub   29 Jul  4 00:35 pkgconfig
drwxr-xr-x. 2 zhoub zhoub   10 Jul  4 00:35 gdalplugins
-rw-r--r--. 1 zhoub zhoub 283M Jul  4 00:35 libgdal.a
-rwxr-xr-x. 1 zhoub zhoub 1.1K Jul  4 00:35 libgdal.la
lrwxrwxrwx. 1 zhoub zhoub   17 Jul  4 00:35 libgdal.so -> libgdal.so.20.5.2
lrwxrwxrwx. 1 zhoub zhoub   17 Jul  4 00:35 libgdal.so.20 -> libgdal.so.20.5.2
-rwxr-xr-x. 1 zhoub zhoub 113M Jul  4 00:35 libgdal.so.20.5.2



(4) 修改 .bashrc文件
$ vim ~/.bashrc #添加一行
export LD_LIBRARY_PATH="/home/zhoub/local/gdal-2.4.2/lib:$LD_LIBRARY_PATH"




(5) 最后的解决
使用周波的编译库:
PATH="/home/zhoub/local/gdal-2.4.2/bin:$PATH"

Sys.setenv("LD_LIBRARY_PATH"= paste0(Sys.getenv("LD_LIBRARY_PATH"),":", "/home/zhoub/local/gdal-2.4.2/lib") )
Sys.getenv("LD_LIBRARY_PATH")

在shell R命令行可以载入，在Rstudio则报错。
> library(monocle3)
Error: package or namespace load failed for ‘monocle3’ in dyn.load(file, DLLpath = DLLpath, ...):
 unable to load shared object '/home/zhoub/R/x86_64-pc-linux-gnu-library/4.2/terra/libs/terra.so':
  libgdal.so.20: cannot open shared object file: No such file or directory
> dyn.load("/home/zhoub/R/x86_64-pc-linux-gnu-library/4.2/terra/libs/terra.so")
报错同上。

再次尝试
> dyn.load("/home/zhoub/local/gdal-2.4.2/lib/libgdal.so.20") #必要
> dyn.load("/home/zhoub/R/x86_64-pc-linux-gnu-library/4.2/terra/libs/terra.so") #可跳过
> library(monocle3)

Attaching package: ‘monocle3’

The following objects are masked from ‘package:Biobase’:

    exprs, fData, fData<-, pData, pData<-

> 正常载入包。



==> 如果还报错，使用 yum 安装:
proj.x86_64 : Cartographic projection software (PROJ.4)
proj-devel.x86_64 : Development files for PROJ.4

$ sudo yum install proj
$ sudo yum install proj-devel





(6) 尝试使用另一个干净的CentOS7.9系统编译的库 (本文 3.4)

先在一个同样版本的CentOS上编译出so文件。
$ ls -lth ~/local/gdal-2.4.4/lib/
total 454M
drwxr-xr-x. 2 wangjl wangjl   21 Jul  4 08:38 pkgconfig
drwxr-xr-x. 2 wangjl wangjl    6 Jul  4 08:38 gdalplugins
-rw-r--r--. 1 wangjl wangjl 327M Jul  4 08:38 libgdal.a
-rwxr-xr-x. 1 wangjl wangjl 1.1K Jul  4 08:38 libgdal.la
lrwxrwxrwx. 1 wangjl wangjl   17 Jul  4 08:38 libgdal.so -> libgdal.so.20.5.4
lrwxrwxrwx. 1 wangjl wangjl   17 Jul  4 08:38 libgdal.so.20 -> libgdal.so.20.5.4
-rwxr-xr-x. 1 wangjl wangjl 128M Jul  4 08:38 libgdal.so.20.5.4
拷贝过去
$ scp libgdal.so.20.5.4 wangjl@x.biomooc.com:/home/wangjl/local/gdal-2.4.4/


新建软链接
$ cd /home/wangjl/local/gdal-2.4.4/
$ ln -s libgdal.so.20.5.4 libgdal.so.20

重启R并加载包，失败。
Rstudio 菜单 session - restart session。
> library(monocle3)
Error: package or namespace load failed for ‘monocle3’ in dyn.load(file, DLLpath = DLLpath, ...):
 unable to load shared object '/home/zhoub/R/x86_64-pc-linux-gnu-library/4.2/terra/libs/terra.so':
  libgdal.so.20: cannot open shared object file: No such file or directory

尝试加载本地so文件
> dyn.load("/home/wangjl/local/gdal-2.4.4/libgdal.so.20") #必要
> library(monocle3) #成功载入。


换名字可以吗？
重启R。尝试加载so文件本身。
> library(monocle3)
Error: package or namespace load failed for ‘monocle3’ in dyn.load(file, DLLpath = DLLpath, ...):
 unable to load shared object '/home/zhoub/R/x86_64-pc-linux-gnu-library/4.2/terra/libs/terra.so':
  libgdal.so.20: cannot open shared object file: No such file or directory
> 
> dyn.load("/home/wangjl/local/gdal-2.4.4/libgdal.so.20.5.4") #必要
> library(monocle3) #也成功载入！
说明so的名字不重要。









2. 查看R查找 C lib 的顺序 (跳过，无效，可能是因为不仅仅要R知道，还要系统也知道这个路径)
> x=Sys.getenv()
> x[grep("lib", x)]
LD_LIBRARY_PATH         /opt/R/lib64/R/lib:/usr/local/lib64:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.332.b09-1.el7_9.x86_64/jre/lib/amd64/server
PATH                    /home/wangjl/data/software/subread-1.6.0-Linux-x86_64/bin:/home/wangjl/bin:/home/wangjl/.aspera/connect/bin:/home/wangjl/software/sratoolkit.2.10.9-centos_linux64/bin:/home/wangjl/software/soft_bin/:/home/wangjl/data/software/samtools:/home/wangjl/software/bowtie2-2.3.5.1-linux-x86_64:/home/wangjl/software/annovar:/home/wangjl/meme/bin:/home/wangjl/software/anaconda3/bin:/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/opt/R/bin:/home/wangjl/data/software/homer/.//bin/:/home/wangjl/software/ncbi-blast-2.10.1+/bin/:/home/wangjl/.local/bin:/home/wangjl/bin
QTDIR                   /usr/lib64/qt-3.3
QTINC                   /usr/lib64/qt-3.3/include
QTLIB                   /usr/lib64/qt-3.3/lib
R_DOC_DIR               /opt/R/lib64/R/doc
R_HOME                  /opt/R/lib64/R
R_INCLUDE_DIR           /opt/R/lib64/R/include
R_LIBS_SITE             /opt/R/lib64/R/site-library
R_LIBS_USER             /home/wangjl/R/x86_64-pc-linux-gnu-library/4.2
R_SHARE_DIR             /opt/R/lib64/R/share

重点看 LD_LIBRARY_PATH:
> Sys.getenv("LD_LIBRARY_PATH")
[1] "/opt/R/lib64/R/lib:/usr/local/lib64:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.332.b09-1.el7_9.x86_64/jre/lib/amd64/server"


添加进去刚找到的路径
> Sys.setenv("LD_LIBRARY_PATH"= paste0(Sys.getenv("LD_LIBRARY_PATH"),":", "/data/jinwf/hou/softPackages/gdal/setup/lib/") )
> Sys.getenv("LD_LIBRARY_PATH")
[1] "/opt/R/lib64/R/lib:/usr/local/lib64:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.332.b09-1.el7_9.x86_64/jre/lib/amd64/server:/data/jinwf/hou/softPackages/gdal/setup/lib/"
载入还是报错

换一个路径，最后一个字符不加斜线
> Sys.setenv("LD_LIBRARY_PATH"= paste0(Sys.getenv("LD_LIBRARY_PATH"),":", "/data/jinwf/hou/softPackages/gdal/gdal-2.2.3/.libs") )
载入还是报错


换一个路径，继续尝试
> Sys.setenv("LD_LIBRARY_PATH"= paste0(Sys.getenv("LD_LIBRARY_PATH"),":", "/home/zhoub/local/gdal-2.4.2/lib") )
载入还是报错







3. 自己编译安装 
下载gdal源码并解压
https://download.osgeo.org/gdal/
https://github.com/OSGeo/gdal
GDAL is an open source X/MIT licensed translator library for raster and vector geospatial data formats.
看来是图像栅格化的。


(1) 2.0.0 版本
$ wget http://download.osgeo.org/gdal/2.0.0/gdal-2.0.0.tar.gz
$ tar -xzvf gdal-2.0.0.tar.gz

编译源码。
$ cd gdal-2.0.0
## ./configure 不行，最后install会报错: cp: cannot create regular file '/usr/local/lib/#inst.300678#': Permission denied

$ mkdir ~/local
$ ./configure --prefix=$HOME/local/gdal-2.0.0/

$ make

安装。
$ make install



原因分析：gdalinfo程序找不到依赖的库，所以报错。
解决方案：将依赖的动态库和静态库添加到 LD_LIBRARY_PATH 环境变量中去。
https://cloud.tencent.com/developer/article/1386291

$ vim ~/.bashrc
添加：export LD_LIBRARY_PATH=$LD_LIBRARY_PATH：/usr/local/lib

export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/wangjl/local/gdal-2.0.0/lib


(2) 最新版本 3.5.1
$ wget https://download.osgeo.org/gdal/3.5.1/gdal-3.5.1rc2.tar.gz
$ tar -xzvf gdal-3.5.1rc2.tar.gz

$ cd gdal-3.5.1
$ ./configure --prefix=$HOME/local/gdal-3.5.1/
报错 configure: error: PROJ 6 symbols not found

$ make
$ make install


(3) 找个老版本 2.4.2
$ wget https://download.osgeo.org/gdal/2.4.2/gdal-2.4.2.tar.gz
$ tar -xzvf gdal-2.4.2.tar.gz
$ cd gdal-2.4.2
$ ./configure --prefix=$HOME/local/gdal-2.4.2/

$ make
报错:
/home/wangjl/software/gdal-2.4.2/.libs/libgdal.so: undefined reference to `EVP_MD_CTX_new'
/home/wangjl/software/gdal-2.4.2/.libs/libgdal.so: undefined reference to `EVP_MD_CTX_free'
collect2: error: ld returned 1 exit status

$ make install


## 尝试使用 cmake https://gdal.org/build_hints.html
$ mkdir build
$ cd build

$ cmake --version
cmake version 2.8.12.2

$ cmake .. #报错
$ cmake --build .
$ cmake --build . --target install


## 尝试使用 sh 文件
$ pwd
/home/wangjl/software/gdal-2.4.2

$ ./autogen.sh
+ aclocal -I ./m4
+ autoconf

$ bash autoconf
$ ./configure --prefix=$HOME/local/gdal-2.4.2/

$ make





(4) 再次尝试，依赖 proj 的版本
###1 下载
$ pwd
/home/wangjl/Downloads

proj-4.9.2.tar.gz(https://download.osgeo.org/proj/proj-4.9.2.tar.gz)
gdal2.4.4.tar.gz(http://download.osgeo.org/gdal/2.4.4/gdal-2.4.4.tar.gz)

###2 安装 proj 库
$ pwd
/home/wangjl/Downloads/

$ tar xvfz proj-4.9.2.tar.gz
$ cd ./proj-4.9.2
$ ./configure --prefix=$HOME/local/proj-4.9.2
$ make 
$ make install 

make[1]: Leaving directory `/home/wangjl/Downloads/proj-4.9.2'

检查
$ ls -lth ~/local/proj-4.9.2/
total 0
drwxrwxr-x. 3 wangjl wangjl 120 Jul  4 08:17 lib
drwxrwxr-x. 4 wangjl wangjl  29 Jul  4 08:17 share
drwxrwxr-x. 2 wangjl wangjl 113 Jul  4 08:17 include
drwxrwxr-x. 2 wangjl wangjl  88 Jul  4 08:17 bin


###3 安装 gdal 库
$ cd ..
$ tar xvfz gdal-2.4.4.tar.gz
$ cd gdal-2.4.4

$ ./configure --with-proj=$HOME/local/proj-4.9.2 --prefix=$HOME/local/gdal-2.4.4
## 原文说： --with-sfcgal=no设置不编译sfcgal，否则需要安装cgal，很麻烦。我没管它。

$ make #十分耗时 20:19-->20:38 #有人说需要20min，果然是;
$ make install
/home/wangjl/Downloads/gdal-2.4.4/install-sh -c -m 0644 gdal.pc /home/wangjl/local/gdal-2.4.4/lib/pkgconfig/gdal.pc

查看
$ ls -lth ~/local
total 0
drwxrwxr-x. 7 wangjl wangjl 67 Jul  4 08:38 gdal-2.4.4
drwxrwxr-x. 6 wangjl wangjl 56 Jul  4 08:17 proj-4.9.2

$ ls -lth ~/local/gdal-2.4.4/lib
total 454M
drwxr-xr-x. 2 wangjl wangjl   21 Jul  4 08:38 pkgconfig
drwxr-xr-x. 2 wangjl wangjl    6 Jul  4 08:38 gdalplugins
-rw-r--r--. 1 wangjl wangjl 327M Jul  4 08:38 libgdal.a
-rwxr-xr-x. 1 wangjl wangjl 1.1K Jul  4 08:38 libgdal.la
lrwxrwxrwx. 1 wangjl wangjl   17 Jul  4 08:38 libgdal.so -> libgdal.so.20.5.4
lrwxrwxrwx. 1 wangjl wangjl   17 Jul  4 08:38 libgdal.so.20 -> libgdal.so.20.5.4
-rwxr-xr-x. 1 wangjl wangjl 128M Jul  4 08:38 libgdal.so.20.5.4


make 又报错了: 明明在空白 CentOS7 下是可以安装的。
/home/wangjl/Downloads/gdal-2.4.4/.libs/libgdal.so: undefined reference to `EVP_MD_CTX_new'
/home/wangjl/Downloads/gdal-2.4.4/.libs/libgdal.so: undefined reference to `EVP_MD_CTX_free'
collect2: error: ld returned 1 exit status
$ make clean 
$ make -j4 # 尝试 -j4 参数，还是一样的报错

修改.bashrc 为原来的样子，source后重新make
$ make clean 
$ make



###4
$ vim ~/.bashrc #添加一行
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/wangjl/local/gdal-2.4.4/lib



算了，还是使用 docker 版的 ubuntu 安装吧。






ref:
LD_LIBRARY_PATH:
	http://www.360doc.com/content/21/0714/12/76149697_986500121.shtml






========================================
|-- 实例2: 在空白 CentOS7.9 的R中无 root 安装 TFBSTools 包 (gsl.so 是数值计算库)
----------------------------------------
总体思路: 
.bashrc 的只对新登录的bash有效。
先配置 .bashrc，再重新登录bash，输入R，开始安装R包。
然后在Rstudio里把库dyn.load()进去，然后再library()


1. 需要去确定这几个已经安装
Cannot find xml2-config
$ rpm -qa libxml2-devel
$ rpm -qa openssl-devel

如果没有安装，则安装它们
$ sudo yum install libxml2-devel
$ sudo yum install openssl-devel

怎么无 root 安装呢？


不想费劲了，直接:
$ sudo yum install gsl-devel








2. 开始半自动安装R包 TFBSTools
$ R

(1)可选: 设置国内镜像
> options("repos")
$repos
                                CRAN 
"https://mirrors.e-ducation.cn/CRAN"
> options(repos=structure(c(CRAN="https://mirrors.tuna.tsinghua.edu.cn/CRAN/")))

(2)尝试安装
> install.packages("BiocManager")
> BiocManager::install("TFBSTools")

安装失败
> library("TFBSTools")

> install.packages("httr")
> BiocManager::install("DirichletMultinomial")
# gsl/gsl_rng.h: No such file or directory



(3) 手工编译安装 gsl 动态共享库 install gsl lib without root
$ gcc --version  #centOS7.9 默认的gcc编译器
gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44)
Copyright (C) 2015 Free Software Foundation, Inc.


重装之前，删掉 TFMPvalue, DirichletMultinomial 包


编译安装
$ cd ~/soft/
$ wget http://mirrors.ustc.edu.cn/gnu/gsl/gsl-2.7.tar.gz
$ tar -xzvf gsl-2.7.tar.gz
$ cd gsl-2.7/
$ ./configure --prefix=/home/wangjl/.local/  #install in ./lib/
$ make
$ make install



提示：有几种找到ld的方法，要采用其中之一。
Libraries have been installed in:
   /home/wangjl/.local/lib

If you ever happen to want to link against installed libraries
in a given directory, LIBDIR, you must either use libtool, and
specify the full pathname of the library, or use the '-LLIBDIR'
flag during linking and do at least one of the following:
   - add LIBDIR to the 'LD_LIBRARY_PATH' environment variable
     during execution
   - add LIBDIR to the 'LD_RUN_PATH' environment variable
     during linking
   - use the '-Wl,-rpath -Wl,LIBDIR' linker flag
   - have your system administrator add LIBDIR to '/etc/ld.so.conf'

See any operating system documentation about shared libraries for
more information, such as the ld(1) and ld.so(8) manual pages.



检查so库文件
$ ls -ltha ~/.local/
total 8.0K
drwx------. 21 wangjl wangjl 4.0K Oct 10 21:49 ..
drwxrwxr-x.  3 wangjl wangjl  234 Oct 10 11:19 lib
drwx------. 19 wangjl wangjl 4.0K Oct 10 11:19 share
drwxrwxr-x.  2 wangjl wangjl   64 Oct 10 11:19 bin
drwx------.  6 wangjl wangjl   56 Oct 10 11:19 .
drwxrwxr-x.  3 wangjl wangjl   17 Oct 10 11:19 include

$ ls -lth /home/wangjl/.local/lib
total 38M
drwxrwxr-x. 2 wangjl wangjl   20 Oct 10 11:19 pkgconfig
-rw-r--r--. 1 wangjl wangjl  22M Oct 10 11:19 libgsl.a
-rwxr-xr-x. 1 wangjl wangjl  926 Oct 10 11:19 libgsl.la
lrwxrwxrwx. 1 wangjl wangjl   16 Oct 10 11:19 libgsl.so -> libgsl.so.25.1.0
lrwxrwxrwx. 1 wangjl wangjl   16 Oct 10 11:19 libgsl.so.25 -> libgsl.so.25.1.0




(4) 按照提示，设置 .bashrc 
$ vim ~/.bashrc #末尾添加一句
export LD_LIBRARY_PATH=/home/wangjl/.local/lib:$LD_LIBRARY_PATH
$ source ~/.bashrc


(5) 重新登陆一个 shell goto shell, exit and login shell session again
$ echo $LD_LIBRARY_PATH
确定刚才定义的库目录在这里。ensure the newly added lib is here


(6) 在shell中新开启一个CLI 版的R。 start a R session in shell CLI
$ R
> Sys.getenv("LD_LIBRARY_PATH")
[1] "/opt/R/4.2.0/lib64/R/lib:/usr/local/lib64:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.322.b06-1.el7_9.x86_64/jre/lib/amd64/server:/home/wangjl/.local/lib:"
注意到，最后一个是我们的库目录

> BiocManager::install("DirichletMultinomial")

继续安装R 包，并尝试载入
> BiocManager::install("TFBSTools")
> library("TFBSTools") #正常载入
> 






(7) 回到 rstudio 中
> Sys.getenv("LD_LIBRARY_PATH")
> Sys.setenv("LD_LIBRARY_PATH"= paste0(Sys.getenv("LD_LIBRARY_PATH"),":", "/home/wangjl/lib") ) #在R中添加是没用的，要在Rsession 开始前添加
> Sys.getenv("LD_LIBRARY_PATH") #这个库地址设置不生效，怎么办？https://github.com/rstudio/rstudio/issues/9003
> library("TFBSTools") #报错


不过，对于不能重启的 Rstudio server，还可以手动载入so文件:
> dyn.load("/home/wangjl/.local/lib/libgsl.so")
> dyn.load("/home/wangjl/.local/lib/libgslcblas.so")
> library("TFBSTools")
>



R session 执行，查看这几个动态链接库是否没有找到
> system("ldd /home/wangjl/.local/lib/libgsl.so")
> system("ldd /home/wangjl/.local/lib/libgslcblas.so")




2) 死抠这个线索: Rstudio 中只能识别这几个库，这几个库路径是在哪里设置的？ //todo
> Sys.getenv("LD_LIBRARY_PATH")
[1] "/opt/R/4.2.0/lib64/R/lib:/lib:/usr/local/lib64:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.322.b06-1.el7_9.x86_64/jre/lib/amd64/server"


$ git clone https://github.com/rstudio/rstudio.git
$ cd rstudio
$ find . | xargs grep -n "lib64" --color=auto 2>/dev/null
./docker/jenkins/Dockerfile.opensuse15:82:RUN update-alternatives --set java /usr/lib64/jvm/jre-1.8.0-openjdk/bin/java
./package/linux/rpm-script/postinst-desktop.sh.in:12:  if test -d /usr/lib64 || test -d /lib64
./package/linux/rpm-script/postinst-desktop.sh.in:14:    architecture_dir='lib64'
./package/linux/rpm-script/postinst-electron.sh.in:12:  if test -d /usr/lib64 || test -d /lib64
./package/linux/rpm-script/postinst-electron.sh.in:14:    architecture_dir='lib64'
./package/linux/rpm-script/postinst.sh.in:80:   for dir in /usr/lib64 /lib64 /usr/lib /lib
./src/cpp/core/libclang/LibClang.cpp:94:      "/usr/lib64/libclang.so",
./src/cpp/core/libclang/LibClang.cpp:95:      "/usr/lib64/llvm/libclang.so",
./src/cpp/core/libclang/LibClang.cpp:99:   for (const char* prefix : {"/usr/lib", "/usr/lib64"})
./src/cpp/core/r_util/RVersionsPosix.cpp:123:      rHomePaths.push_back(FilePath("/usr/lib64/R"));
./src/cpp/core/r_util/RVersionsPosix.cpp:125:      rHomePaths.push_back(FilePath("/usr/local/lib64/R"));
./src/cpp/core/r_util/RVersionsPosix.cpp:127:      rHomePaths.push_back(FilePath("/opt/local/lib64/R"));
./src/cpp/rstudio-tests.in:57:      /lib64/libSegFault.so
./src/cpp/session/SessionMain.cpp:1780: * /usr/local/lib64/R/





$ cd ../  #这个不知道搜到了啥
$ find . | grep -v "R-4.2.0/config.log" | xargs grep -n "/usr/local/lib64" --color=auto 2>/dev/null
./R-4.2.0/etc/Makeconf:70:LDFLAGS = -L/usr/local/lib64
./R-4.2.0/etc/ldpaths:3:if test -n "/usr/local/lib64"; then
./R-4.2.0/etc/ldpaths:4:: ${R_LD_LIBRARY_PATH=${R_HOME}/lib:/usr/local/lib64}
./R-4.2.0/config.site:161:## On some Linux 64-bit systems its default is -L/usr/local/lib64.
./R-4.2.0/doc/html/R-admin.html:900:<pre class="example">make install rhome=/usr/local/lib64/R-4.2.0
./R-4.2.0/doc/html/R-admin.html:916:<samp>/usr/local/lib64</samp>) if you intend to work with multiple versions of
./R-4.2.0/doc/html/R-admin.html:4199:&lsquo;<samp>-L/usr/local/lib64</samp>&rsquo; on most 64-bit Linux OSes) and
./R-4.2.0/doc/html/R-admin.html:4620:<pre class="example">LDFLAGS=&quot;-L/usr/local/lib64 -L/usr/local/lib&quot;
./R-4.2.0/doc/html/R-admin.html:4624:libraries in <samp>/usr/local/lib64</samp>.  To build a 32-bit version of R
./R-4.2.0/doc/html/R-admin.html:4755:LDFLAGS=&quot;-L$ICC_LIBS -L$IFC_LIBS -L/usr/local/lib64&quot;
./R-4.2.0/doc/NEWS.2:14144:	directories (and not at all in /usr/local/lib64) and so might
./R-4.2.0/doc/NEWS.2:14524:    o	LDFLAGS now defaults to -L/usr/local/lib64 on most Linux
./R-4.2.0/doc/NEWS.2:14529:	/usr/local/lib64/R on most 64-bit Linux OSes and /usr/local/lib/R
./R-4.2.0/doc/manual/R-exts.texi:16014:@file{/usr/local/lib} (@file{/usr/local/lib64} on some architectures),
./R-4.2.0/doc/manual/R-admin.texi:684:make install rhome=/usr/local/lib64/R-@value{VERSIONno}
./R-4.2.0/doc/manual/R-admin.texi:703:@file{/usr/local/lib64}) if you intend to work with multiple versions of
./R-4.2.0/doc/manual/R-admin.texi:4372:@samp{-L/usr/local/lib64} on most 64-bit Linux OSes) and
./R-4.2.0/doc/manual/R-admin.texi:4803:LDFLAGS="-L/usr/local/lib64 -L/usr/local/lib"
./R-4.2.0/doc/manual/R-admin.texi:4808:libraries in @file{/usr/local/lib64}.  To build a 32-bit version of @R{}
./R-4.2.0/doc/manual/R-admin.texi:4941:@c LDFLAGS="-L/usr/local/flang/lib -L/usr/local/lib64"
./R-4.2.0/doc/manual/R-admin.texi:4977:LDFLAGS="-L$ICC_LIBS -L$IFC_LIBS -L/usr/local/lib64"
./R-4.2.0/config.status:1070:S["R_LD_LIBRARY_PATH"]="/usr/local/lib64"
./R-4.2.0/config.status:1215:S["FCLIBS"]=" -L/usr/local/lib64 -L/usr/lib/gcc/x86_64-redhat-linux/4.8.5 -L/usr/lib/gcc/x86_64-redhat-linux/4.8.5/../../../../lib64 -L/lib/../lib64 -L/usr/lib/."\
./R-4.2.0/config.status:1267:S["LDFLAGS"]="-L/usr/local/lib64"
./R-4.2.0/Makeconf:50:LDFLAGS = -L/usr/local/lib64
./rstudio/src/cpp/core/r_util/RVersionsPosix.cpp:125:      rHomePaths.push_back(FilePath("/usr/local/lib64/R"));
./rstudio/src/cpp/session/SessionMain.cpp:1780: * /usr/local/lib64/R/

看样子就是这个文件
$ vim R-4.2.0/etc/ldpaths 

$ locate ldpaths
/home/wangjl/soft/R-4.2.0/etc/ldpaths
/home/wangjl/soft/R-4.2.0/etc/ldpaths.in
/opt/R/4.2.0/lib64/R/etc/ldpaths  #就是这个路径 <==== 修改后能否其作用？


该文件什么时候执行呢？
$ sudo reboot
$ echo $LD_LIBRARY_PATH
/home/wangjl/.local/lib:/home/wangjl/.local/lib:
$ sudo service rstudio-server restart

Rstudio 
ctrl+shift+F10 重启R session 
> Sys.getenv('LD_LIBRARY_PATH')
[1] "/opt/R/4.2.0/lib64/R/lib:/lib:/usr/local/lib64:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.322.b06-1.el7_9.x86_64/jre/lib/amd64/server"








(8) (需要root)有一个说法：是修改 /etc/rstudio/rserver.conf 文件
http://luoyulong.github.io/blog/2014/12/05/rstudio-server-dot-ld-library-path/

https://support.rstudio.com/hc/en-us/articles/200552316-Configuring-the-Server
You can add elements to the default LD_LIBRARY_PATH for R sessions (as determined by the R ldpaths script) by adding an rsession-ld-library-path entry to the server config file. This might be useful for ensuring that packages can locate external library dependencies that aren’t installed in the system standard library paths. For example: rsession-ld-library-path=/opt/local/lib:/opt/local/someapp/lib


$ sudo vim /etc/rstudio/rserver.conf
添加一行：
rsession-ld-library-path=/home/wangjl/.local/lib
$ sudo service rstudio-server restart
Rstudio 重启R session，可以了
> Sys.getenv("LD_LIBRARY_PATH")
[1] "/opt/R/4.2.0/lib64/R/lib:/home/wangjl/.local/lib:/lib:/usr/local/lib64:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.322.b06-1.el7_9.x86_64/jre/lib/amd64/server"
> # /home/wangjl/.local/lib
> library("TFBSTools")
> 正常载入



往前找之前的打印
> Sys.getenv("LD_LIBRARY_PATH")
[1] "/opt/R/4.2.0/lib64/R/lib:/lib:/usr/local/lib64:/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.322.b06-1.el7_9.x86_64/jre/lib/amd64/server"





==> 尝试另一个地方 
$ vim ~/.Renviron
rsession-ld-library-path=/home/wangjl/.local/lib
$ sudo service rstudio-server restart
不行，识别不了。










(9) 其他各种在Rstudio的尝试：都失败
1) 重启Rstudio
$ sudo service rstudio-server restart

in Rstudio 
重启R，依旧不能载入，找不到 libgsl.so.25
> library("TFBSTools")

2) 把路径写入.Renvrion配置文件，再重启Rstudio
$ vim ~/.Renviron #加一行
LD_LIBRARY_PATH=paste0(Sys.getenv("LD_LIBRARY_PATH"),":", "/home/wangjl/lib") #这个更离谱，这里直接把左侧当作字符串了，在环境中覆盖了=左侧的变量

$ sudo service rstudio-server restart

> Sys.getenv('LD_LIBRARY_PATH')
> library("TFBSTools")
结论：还是不行 .Renviron or .Rprofile won't work.


3)有人说写入 .bash_profile 中，也不行
$ vim ~/.bash_profile #末尾添加一句
export LD_LIBRARY_PATH=/home/wangjl/.local/lib:$LD_LIBRARY_PATH


4) 这个的评论也无效，Rstudio中安装不上
I am not an expert in this issue. This is going to sound strange but, the problem was solved for me when I re-installed the packages, through the Rstudio console.
The original problem for me was that Rstudio r console seemed to be unable to find the LD_LIBRARY_PATH libraries, even when I defined it in the session through Sys.setenv(...). This original problem did not arise when I would run R directly from terminal.


5) 或者在 Rstudio 中安装C库，安装失败。
# withr::with_makevars(c(PKG_LIBS="-L/home/wangjl/lib/"), install.packages("TFBSTools"), assignment="+=")
> withr::with_makevars(c(PKG_LIBS="-L/home/wangjl/lib/"), BiocManager::install("TFBSTools"), assignment="+=")
> library("TFBSTools")

> withr::with_makevars(c(PKG_LIBS="-L/home/wangjl/lib/"), BiocManager::install("TFBSTools", force = TRUE), assignment="+=")




Ref:
https://community.rstudio.com/t/specifying-ld-library-path-and-other-options-in-rserver-conf-in-rstudio-cloud/149166
https://github.com/rstudio/rstudio/issues/9003

该问题无解: https://github.com/rstudio/rstudio/issues/9832











========================================
与测序相关的conductor包：
----------------------------------------
 Sequencing (347)
	 ChIPSeq (61)
	 DNASeq (10)
	 ExomeSeq (6)
	 HiC (7)
	 MethylSeq (15)
	 Microbiome (9)
	 miRNA (9)
	 RiboSeq (4)
	 RIPSeq (2)
	 RNASeq (130)
	 TargetedResequencing (5)
	 WholeGenome (15)






========================================
|-- Bioconductor, SingleCellExperiment and scater
----------------------------------------
1.推荐新手和老手使用良好开发和维护的Bioconductor方法和类。
https://www.bioconductor.org/developers/how-to/commonMethodsAndClasses/


2.SingleCellExperiment (SCE)
是一个处理单细胞实验的S4类，包括专门针对每个细胞的存储和检索spike-in信息、降维、ize factors，以及常规对基因和文库的方法。

(1)实际上，可以用构造器创建该类的对象。

library(SingleCellExperiment)
counts <- matrix(rpois(100, lambda = 10), ncol=10, nrow=10)
rownames(counts) <- paste("gene", 1:10, sep = "")
colnames(counts) <- paste("cell", 1:10, sep = "")
sce <- SingleCellExperiment(
    assays = list(counts = counts),
    rowData = data.frame(gene_names = paste("gene_name", 1:10, sep = "")),
    colData = data.frame(cell_names = paste("cell_name", 1:10, sep = ""))
)
sce


(2)作者建议如下命名：
 - counts: Raw count data, e.g., number of reads or transcripts for a particular gene.
 - normcounts: Normalized values on the same scale as the original counts. For example, counts divided by cell-specific size factors that are centred at unity.
 - logcounts: Log-transformed counts or count-like values. In most cases, this will be defined as log-transformed normcounts, e.g., using log base 2 and a pseudo-count of 1.
 - cpm: Counts-per-million. This is the read count for each gene in each cell, divided by the library size of each cell in millions.
 - tpm: Transcripts-per-million. This is the number of transcripts for each gene in each cell, divided by the total number of transcripts in that cell (in millions).

从counts 转换为 normcounts ：
normcounts(sce) <- log2(counts(sce) + 1)
sce

查看
dim(normcounts(sce)) #维度
head(normcounts(sce)) #前几行



3. scater package-Single-cell analysis toolkit for gene expression data in R
(1)scater is a R package for single-cell RNA-seq analysis (McCarthy et al. 2017)
该包包含很多有用的方法，做质控、可视化、前处理。

http://bioconductor.org/packages/release/bioc/html/scater.html
A collection of tools for doing various analyses of single-cell RNA-seq gene expression data, with a focus on quality control.
包含很多scRNAseq数据分析方法，焦点是质控。

scater的特色功能是：
 - Automated computation of QC metrics 自动化QC特性。
 - Transcript quantification from read data with pseudo-alignment 转录定量。
 - Data format standardisation 数据格式标准化。
 - Rich visualizations for exploratory analysis 丰富可视化来探索分析。
 - Seamless integration into the Bioconductor universe 和Bioconductor宇宙无缝连接。
 - Simple normalisation methods 简单的归一化方法。

强烈建议所有scRNAseq分析都使用scater。

(2)scater可以对你的mapping and alignment之后的表达矩阵做质控、过滤、标准化。
老版本scater使用SCESet类，而新版本使用SingleCellExperiment 类。功能不变。如下图：
http://hemberg-lab.github.io/scRNA.seq.course/figures/scater_qc_workflow.png

前处理、质控：从raw RNAseq read到可以做下游分析的clean、tidy dataset，。








========================================
R操作mysql数据库
----------------------------------------

1. 把mysql连接信息写到文件中。
$ cat /home/wangjl/pylib/con_mysql.R
library(DBI)
library(RMySQL)
con<-dbConnect(MySQL(),user='root', password='123456',dbname='wang',host='y.biomooc.com',
               port=7070, DBMsencoding='utf8')
dbSendQuery(con,'SET NAMES utf8;') #读取防乱码
query<-dbSendQuery(con,'alter database wang character set utf8;') #写入防乱码
#
#query<-dbSendQuery(con,'select cid, cellType from cell_c1 where cellType="HeLa_sync"')
#data=fetch(query, n=-1);
#data




2. 把数据查询写成函数
#R语言的数据库链接
rm(con)
getDF_fromDB=function(sql){
  source('/home/wangjl/pylib/con_mysql.R')
  query<-dbSendQuery(con, sql );
  data=fetch(query, n=-1);
  #
  print(dim(data))
  print(head(data))
  return(data)
}



# 获取编码基因，和非编码基因
sql=paste0('select distinct gene_name,gene_type from feature_gene;');
geneNames=getDF_fromDB(sql)
# [1] 58692     2
#   gene_name      gene_type
# 1    TSPAN6 protein_coding
# 2      TNMD protein_coding
# 3      DPM1 protein_coding
# 4     SCYL3 protein_coding





========================================
|-- R通过ODBC连接数据库(win)
----------------------------------------
以下的实验环境是在windows7-64操作系统下进行
1、下载（mySQL-connector-odbc-5.3.7-win64.msi）
     下载地址：http://dev.mysql.com/downloads/connector/odbc (8.2 MB) 
2、安装Mysql的RODBC：mysql-connector-odbc-5.3.2-win64.msi
3、配置datasource

(1)找到C:\Windows\System32\odbcad32.exe
(2)左侧点击 添加 ，选择MySQL ODBC ANSI Driver/或 unicode，点击完成；
(3)填写表格，名字(填写mysqlodbc或自定义，下文R的odbcConnect第一个参数要用)建议用无空格的英文，描述随便写，填写mysql用户名和密码，选择数据库，点击OK。
(4)回到ODBC数据源管理器，选择mysqlodbc，点击确定。

4.R软件访问mysql数据库
(1)安装及加载RODBC
install.packages("RODBC")
library(RODBC)

(2) 与mysql建立连接
channel=odbcConnect("mysqlodbc", uid="root", pwd="")

（3）查询该数据库下都有哪些数据库表

> sqlTables(channel)
  TABLE_CAT TABLE_SCHEM   TABLE_NAME TABLE_TYPE REMARKS
1      test                       aa      TABLE        
2      test              first_table      TABLE        
3      test             second_table      TABLE        
4      test                 students      TABLE 
5      test                 orders      TABLE   

（4）查询某个表中的数据返回给数据框
> orders=sqlFetch(channel,"orders")
> orders
 order_id order_name order_unit order_quantity order_price order_note order_time
1 1  2500ml95%酒精  桶  17 12  NA 1464

（5）条件查询
orders2=sqlQuery(channel,"select order_name,order_price from orders order by order_id desc");

（6）将数据框中的数据保存到数据库表中
USArrests #这是R的默认内置数据，是一个数据框

数据框的首列没有列名，所以在保存之前需要指定列名
sqlSave(channel, USArrests, rownames = "state", addPK = TRUE)

cmd打开数据库查看test库，多了usarrests表，里面正是数据框中的内容。可见数据框能正确的保存到mysql数据库中去了

添加一条数据
rs3=sqlQuery(channel,"insert into usarrests(state,murder,assault,urbanpop,rape)values('noplace',0,0,0,0)");
发现数据已经在了。

（7）在R软件将刚才添加到mysql数据库中的表删除掉
sqlDrop(channel,"usarrests")

（8）关闭连接资源
odbcClose(channel)

（9）通过RODBC进行数据存取的主要函数
函数名字	函数描述
odbcConnect(dsn,uid="",pwd="")  #建立并打开连接
sqlFetch(channel,sqtable) #从数据库读取数据表，并返回一个数据框对象
sqlQuery(channel,query) #想数据库提交一个sql查询，并返回结果（'data.frame'格式）
sqlSave(channel,mydf,tablename=sqtable,append=FALSE) #将一个数据框写入或更新(append=True)到数据库
sqlDrop(channel,sqtable) #从数据库删除一个表
sqlClear(channel,sqltable) #删除表中内容
sqlTable(channel) #返回数据库中表的信息
sqlColumns(chanel,sqltable) #返回数据库表sqltable列的信息
close(channel) #关闭连接

操作步骤：
建立DSN
打开连接
数据操作
关闭连接 


实例1
#加载包
library(RODBC)

#创建连接
channel<-odbcConnect("BITEST",uid="dw",psw="dw")

#执行查询
org1<-sqlFetch(channel,'DIM.DIM_ORGANIZATION') #这是oracle数据库
org2<-sqlQuery(channel,"select * from DIM.DIM_ORGANIZATION")

#关闭连接
odbcClose(channel)

#使用数据
head(org1)
head(org2)



实例2 通过RODBC将数据写入oracle

library(RODBC)
channel<-odbcConnect("BITEST",uid="dw",psw="dw")
#创建数据，待写入对象
mydata<-sqlQuery(channel,'select * from DIM.DIM_ORGANIZATION')

#写入数据库，并读取结果
sqlSave(channel,mydata,"NEW_TABLE_NAME", append=FALSE)
mydata2=sqlQuery(channel,'select * from NEW_TABLE_NAME')

#更新数据库，并读取结果
sqlSave(channel,mydata,"NEW_TABLE_NAME", append=TRUE)
mydata3=sqlQuery(channel,'select * from NEW_TABLE_NAME')

#删除刚刚建立的数据表NEW_TABLE_NAME
sqlDrop(channel,"NEW_TABLE_NAME")
odbcClose(channel)

#查看执行结果
head(mydata,n=30)
head(mydata2,n=30)
head(mydata3,n=30)


refer:
http://wenku.baidu.com/link?url=PtNUOCT66CzajvN_uM_4FaCloQffW8HzaE1PMlOg3UqyXwpZNbT3DC1URy-tsLqQRIeW_DJhxBsS06QsY99OjKSq_BV7--vj1zWhtga7k1_
http://blog.csdn.net/hongweigg/article/details/49779943
http://www.dataguru.cn/thread-289411-1-1.html





========================================
|-- R通过RMySQL包操作mysql数据库(linux)
----------------------------------------
test: 2019.10
mysql on docker ubuntu1806;
Rstudio on centOS7


1.Rmysql库安装
注意: Rmysql库依赖DBI库

install.packages("DBI")
install.packages("RMySQL") 或 install.packages('RMySQL',type='source')

查看已安装的包：
.packages(all.available=TRUE)

至此安装完毕,如果中间过程还出问题,可能底层C++环境欠缺
参考:https://www.jianshu.com/p/d57355c57876






2.
另外R连接mysql会出现中文乱码变问号情况，查到COS上一个贴子，解决方案如下：
在MySQL的配置文件/etc/mysql/my.cnf中[client]标签下加default-character-set=utf8 

这个我试了，总是报错。我用的docker版的mysql，是这个原因吗？
后面避免读写中文乱码，使用的是sql语句。

library(DBI)
library(RMySQL)
con<-dbConnect(MySQL(),user='root', password='123456',dbname='wang',host='y.biomooc.com',
               port=7070, DBMsencoding='utf8')
dbSendQuery(con,'SET NAMES utf8;') #读取防中文乱码
query<-dbSendQuery(con,'alter database wang character set utf8;') #写入防中文乱码
#
query<-dbSendQuery(con,'select * from fruits;')
data=fetch(query);
data #获得数据框





3. 在R中使用RMySQL
library(DBI)
library(RMySQL)
#help(package="RMySQL") #查看说明文档

##连接数据库
con<-dbConnect(MySQL(),user='root', password='123456',dbname='wang',host='y.biomooc.com',port=7070, DBMsencoding='utf8')
## 连接linux本地的mysql不需要输入host，默认port=3306。

##关闭数据库
## dbDisconnect(con) 




(1)查询：dbSendQuery的使用 
dbSendQuery返回的MySQLResult类型，而dbGetQuery直接返回数据框data.frame

dbSendQuery(con,'SET NAMES utf8') #先执行这一句，防止中文显示乱码


#i) 用sql语句查询，获得数据框，直接获得查询结果 
dbGetQuery(con, "SELECT * FROM fruits limit 3")



#ii) 用sql语句查询，获得数据框，两步法获取查询结果
res <- dbSendQuery(con, "SELECT *FROM fruits")#获取前2条数据，n=-1时是获取所有数据  
data <- dbFetch(res, n=2) #再获取余下几条数据
data
data <- dbFetch(res, n=-1) #取余下所有数据
data

dbClearResult(res)#清除查询结果

#dbDisconnect(con)#断开连接  




#iii) 用R函数，读整个数据表  
tb=dbReadTable(con,"result")
tb
##   name subject score
## 1 张三    数学    90
## 2 张三    语文    50
## 3 张三    地理    40
## 4 李四    语文    55
## 5 李四    政治    45
## 6 王五    政治    30




(2)查看状态
> summary(con) #获取连接信息
<MySQLConnection:0,0>
  User:   root 
  Host:   y.biomooc.com 
  Dbname: wang 
  Connection type: y.biomooc.com via TCP/IP 

Results:
<MySQLResult:0,0,0>
  Statement: select * from cell_c1 limit 3; 
  Has completed? yes 
  Affected rows: -1 
  Rows fetched: 3 
NULL


dbGetInfo(con) #获取连接信息
dbListTables(con) #查看database下所有表格




ii) 防止中文乱码
mysql> show variables like "char%";
+------------ -------------+------------ ---------------+
| Variable_name            | Value                      |
+----------- --------------+------------- --------------+
| character_set_client     | utf8                       |
| character_set_connection | utf8                       |
| character_set_database   | latin1                     | #改为utf8写入才能避免R写入中文时乱码
| character_set_filesystem | binary                     |
| character_set_results    | utf8                       |
| character_set_server     | latin1                     |
| character_set_system     | utf8                       |
| character_sets_dir       | /usr/share/mysql/charsets/ |
+----------- --------------+---------- -----------------+
8 rows in set (0.01 sec)

#防止写入中文时乱码
dbSendQuery(con,'alter database wang character set utf8;') #数据库改为utf8，否则写入会中文乱码

#查询字符集
query<-dbSendQuery(con,'show variables like "char%";')
df=fetch(query) #返回值是数据框






(3)写数据库表: 创建新表，写入 
#dbWriteTable(conn, "tablename", data) #写表

#写表，把fruits写入水果数据表"fruits"
fruits <-data.frame(id=1:5,name=c("苹果","香蕉","梨子","玉米","西瓜"),price=c(8.8,4.98,7.8,6,2.1),status=c("无","打折","无","售罄","批发"))  
dbListTables(con)
dbWriteTable(con,"fruits",fruits,row.names=F, fileEncoding="utf-8")  #写入中文乱码！编码一致就正常了
dbListTables(con)


#使用sql查询
query<-dbSendQuery(con,'select * from fruits limit 3;')
data<-fetch(query)

#追加数据表，是否覆盖
#new_info <- data.frame(user_id=6:7,user_name=c("小明","小红"),score = c(82,74))
#dbWriteTable(conn,"student_info ",new_info, append=T,row.names=F) #追加数据
#dbWriteTable(conn," student_info ",testB,overwrite=T,row.names=F)#覆盖数据

new_info <- data.frame(id=6:7,name=c("水果1","水果2"),price = c(8.2,7.4),status=c("打折","批发"))
dbWriteTable(con,"fruits",new_info,append=T,row.names=F) #追加数据
dbWriteTable(con,"fruits",new_info,overwrite=T,row.names=F)#覆盖数据：以前的数据被清空，现在只有这个新增的数据了



(4)删除表
dbRemoveTable(con, "fruits")



(5)其他方法
summary(con) #连接信息

dbGetInfo(con)

dbListTables(con) #列出所有的表

dbExistsTable(con,'table_name')#是否存在表

dbListResults(con) #列出所有的结果

dbClearResult(res) #清除结果






附录：
1. SQL语句语句特点：先全局选择，再局部选择
Select * from sale where year=2010 and ...


2.where后面可以接很多，有比较运算符，算数运算符，逻辑运算符。
- 比较运算符号：=(等于，不是双引号)；!=（不等于）；>，<，>=，<=
- 算数运算符：*，/，+，-
- 逻辑运算符：&&(and,与)， ||（or，或） ，!（,not非）




refer:
https://blog.csdn.net/sinat_26917383/article/details/51601539




========================================
|-- R操作sqlite
----------------------------------------
1. sqlite的优点就是既有数据库的sql操作灵活性（和mysql很类似），又有文件的存放便捷性(不需要连接数据库等操作)。
缺点是只适用于小数据集。

(1) 实例1
# install.packages("RSQLite")
library(RSQLite)

#连接表，所有结果保存到一个文件中
db = dbConnect(SQLite(), dbname="~/web/docs/your-db.sqlite")

#之后和mysql操作一样了。

# 创建表
dbSendQuery(conn=db,
   "CREATE TABLE SSGB_obs
   (Date DATETIME,
   Station TEXT,
   Snowline TEXT,
   PRIMARY KEY (Date, Station))
")

# List tables in your database
dbListTables(db)
 
# List columns in a table
dbListFields(db, "SSGB_obs")


#导入一批csv文件到db表：雪线的数据
# List files
f = list.files("./csv/clean/")
# Read csvs
# Format for database
# Write to database
for (i in f){
  x = read.table(paste0("./csv/clean/", i), sep ="|", stringsAsFactors=F)
  for (j in names(x[-1])){
    Date = x[-1,1]
    Station = x[1,j]
    Snowline = x[-1,j]
    data = cbind.data.frame(Date,Station,Snowline)
    dbWriteTable(conn=db, name="SSGB_obs", data, append=T, row.names=F)
  }
}

# 读出数据，得到的是数据框
x = dbGetQuery(db, "
   SELECT * FROM SSGB_obs
")






(2) 实例2
library(RSQLite)
sqlite    <- dbDriver("SQLite")
con <- dbConnect(sqlite,"hg19_bioconductor.sqlite") # makes a new file

#写入数据到db
suppressMessages(library(org.Hs.eg.db))
kegg2ID=toTable(org.Hs.egPATH)
#[1] "gene_id" "path_id"
dbWriteTable(con,'keggID2geneID',kegg2ID,row.name=F,overwrite=T)

#读出db
x = dbGetQuery(con, "
   SELECT * FROM keggID2geneID
")
class(x) #[1] "data.frame"
head(x)

dbDisconnect(con) #关闭连接

# 查文件大小
system("ls -l hg19_bioconductor.sqlite", show=TRUE)
# -rw-r--r--. 1 wangjl jinwf 290816 Nov 23 21:19 hg19_bioconductor.sqlite














ref:
一个R语言package：https://cran.r-project.org/web/packages/RSQLite/RSQLite.pdf
参考：https://scottishsnow.wordpress.com/2014/08/14/writing-to-a-database-r-and-sqlite/
示例代码：http://faculty.washington.edu/kenrice/sisg-adv/exampleSQLite.R










========================================
dplyr包与Mysql数据库 //todo
----------------------------------------






========================================
计时器包: 记录执行某些语句的耗时
----------------------------------------

library(tictoc)
tic()

Sys.sleep(0.2)

toc()

#0.204 sec elapsed














========================================
----------------------------------------







========================================
----------------------------------------


========================================
----------------------------------------




========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------



