pkg-shiny

注意: 官网只有一个s (shiny)，那就不要写成2个s。





========================================
shiny 官方教程
----------------------------------------
官方教程分好几部分，其中入门教程和article部分是文字的。



1. 官方教程
https://shiny.rstudio.com/tutorial/
但是看这个教程要翻墙...学技术，各凭本事吧。

Part 1 - How to build a Shiny app
Introduction
R
App architecture
App template
Inputs and outputs
The server function
Sharing apps
Shinyapps.io
Shiny servers
Recap - Part 1

Part 2 - How to customize reactions
Introduction
Review of Part 1
Reactivity
Reactive values
Reactive functions
render*()
reactive()
isolate()
observeEvent()
eventReactive()
reactiveValues()
Recap - Part 2
Parting tips

Part 3 - How to customize appearance
Introduction
Review of Parts 1 and 2
HTML UI
Adding static content
Building layouts
Panels and tabsets
Prepackaged layouts
CSS
Recap - Part 3





2. tutorial: 共7节，书面教程，每个课程大概20分钟(要有web基础)，能学会基本的使用方法。
https://shiny.rstudio.com/tutorial/written-tutorial/lesson1/

Lesson 1 - Welcome to Shiny
Lesson 2 - Layout the user interface
Lesson 3 - Add control widgets
Lesson 4 - Display reactive output
Lesson 5 - Use R scripts and data
Lesson 6 - Use reactive expressions
Lesson 7 - Share your apps




3. articles 系列
https://shiny.rstudio.com/articles/




ref:
https://blog.csdn.net/RH_Wang/article/details/86318043




========================================
|-- 如何用shiny部署R语言交互式网页小程序？(第一课: Welcome to Shiny)
----------------------------------------
官方案例：http://shiny.rstudio.com/gallery/

1.安装
install.packages("shiny")


2.写代码
(1)看到网上大多给你扯ui.R+server.R，很少会提到global.R，笔者在自己实践的时候遇到的了global.R的使用问题，网上教程只能自己参悟了。

ui.R：搭框架，控件；
server.R：每个控件背后的算法代码；
global.R:server.R中，万一有很长的代码与调用很多其他packages就可以用global写一个函数集合，然后统一在server.R调用。

(2)在一个文件夹内写 ui.R 和 server.R。
格式如下：

# ui.R
library(shiny)
shinyUI(fluidPage(
	#
))
 
# server.R
library(shiny)
shinyServer(function(input, output) {
	#
})


(3)实例-界面：
# ui.R
library(shiny)

shinyUI(fluidPage(
  # Application title
  headerPanel("Hello Shiny!"),
  
  # 侧面控件 Sidebar with a slider input for number of observations
  sidebarPanel(
    #sliderInput是一个滑动的窗口。
    sliderInput("obs", 
                "Number of observations:", 
                min = 0, 
                max = 1000, 
                value = 500)
  ),
  
  # 右边 主控件(默认右边) Show a plot of the generated distribution
  mainPanel(
    plotOutput("distPlot")
  )

))


(4)实例-服务端：
# server.R
library(shiny)

shinyServer(function(input, output) {
  #数据来源都来自于ui.R，比如obs
  output$distPlot <- renderPlot({
    dist <- rnorm(input$obs)
    #server处理好的图才是返回给ui.R。譬如dist
    hist(dist)
  })
  
})



3.shiny的部署
runApp一下那个路径的文件夹就行了。

#
#####
#https://blog.csdn.net/sinat_26917383/article/details/53410370
library(shiny)
runApp("F://Temp/shiny")
## runApp("/home/wangjl/data/shinny/",host="0.0.0.0", port=5000) #还可以指定IP和端口
#


在win10上的运行
D:\Program Files\R\R-3.6.1\bin>Rscript F:\\Temp\\shiny\\run.R







4. 更多官方例子

runExample("01_hello")      # a histogram
runExample("02_text")       # tables and data frames
runExample("03_reactivity") # a reactive expression
runExample("04_mpg")        # global variables
runExample("05_sliders")    # slider bars
runExample("06_tabsets")    # tabbed panels
runExample("07_widgets")    # help text and submit buttons
runExample("08_html")       # Shiny app built from HTML
runExample("09_upload")     # file upload wizard
runExample("10_download")   # file download wizard
runExample("11_timer")      # an automated timer







refer
1. 中文教程：用R构建shiny应用程序：http://yanping.me/shiny-tutorial/#welcome
2. R powered web applications with Shiny (a tutorial and cheat sheet with 40 example apps) 
http://zevross.com/blog/2016/04/19/r-powered-web-applications-with-shiny-a-tutorial-and-cheat-sheet-with-40-example-apps/



========================================
shiny入门第2课: 界面 Layout the user interface
----------------------------------------
1.
https://shiny.rstudio.com/tutorial/written-tutorial/lesson2/

(1)基本结构
library(shiny)

# Define UI ----
ui <- fluidPage(
  
)

# Define server logic ----
server <- function(input, output) {
  
}

# Run the app ----
shinyApp(ui = ui, server = server)

以上是最基本的Shiny框架





(2) 布局
ui <- fluidPage(
  titlePanel("title panel"), #整个页面的标题

  sidebarLayout( #通常侧边栏有2个参数， sidebarPanel 和 mainPanel
    sidebarPanel("sidebar panel"),
    mainPanel("main panel")
  )
)




可以使用mainPanel参数改变侧边栏的位置:
ui <- fluidPage(
  titlePanel("title panel"),
  
  sidebarLayout(position = "right",
                sidebarPanel("sidebar panel"),
                mainPanel("main panel")
  )
)


可以使用 navbarPage 创建包含导航条的多个页面。
或者使用 fluidRow 和 column 来从 grid 系统构建布局。
更多布局参考 https://shiny.rstudio.com/articles/layout-guide.html
本节继续使用 sidebarLayout 布局。





(3) HTML 内容
可以在 *Panel 函数内添加内容。比如上文显示字符串。
其实还可以添加 html5 标签。
比如: 
headerPanel( h4("Hello Shiny! 001") ),

  mainPanel(
    h1("First level title"),
    plotOutput("distPlot"),
    hr(),
    h2("Second level title"),
    plotOutput("distPlot2"),
	a('find more here', href="http://baidu.com", target="_blank")
  )




# html属性可以作为函数参数传入
h6("Episode IV", align = "center")



# 格式化文字的输入
 mainPanel(
      p("p creates a paragraph of text."),
      p("A new p() command starts a new paragraph. Supply a style attribute to change the format of the entire paragraph.", style = "font-family: 'times'; font-si16pt"),
      strong("strong() makes bold text."),
      em("em() creates italicized (i.e, emphasized) text."),
      br(),
      code("code displays your text similar to computer code"),
      div("div creates segments of text with a similar style. This division of text is all blue because I passed the argument 'style = color:blue' to div", style = "color:blue"),
      br(),
      p("span does the same thing as div, but it works with",
        span("groups of words", style = "color:blue"),
        "that appear inside a paragraph.")
    )
# 代码
    pre("怎么多行？
code displays your text similar to computer code;
for(i in 1:10){
  print(i)
  }"
      ),
# 标签嵌套
     p("span does the same thing as div, but it works with",
        span("groups of words", style = "color:blue"),
        "that appear inside a paragraph."),
#




(4) 图片
img(src = "my_image.png", height = 72, width = 72)

图片放置到和 app.R 同一个文件夹下的 www 目录中。
Your file must be in a folder named www in the same directory as the app.R script.

比如
shiny/
|- ui.R
|- server.R 
|- www/ 可以放置任何静态文件，比如图片/css/js/txt/pdf等
	|- my_image.png
#


(5) 更多html标签
Customize your UI with HTML: https://shiny.rstudio.com/articles/html-tags.html
the Shiny HTML Tags Glossary: https://shiny.rstudio.com/articles/tag-glossary.html

> shiny::tags # 包含110个函数，对应着具体的html标签
> names(tags) #查看具体的标签


## 还可以用tags这个函数list来写html代码
tags$h1( "右侧大标题",  ),
hr(),
tags$ol(
	tags$li("First list item"), 
	tags$li("Second list item"), 
	tags$li("Third list item")
),




(6)如果感觉太繁琐，就想手工输入原始的raw html代码，则要使用HTML函数包裹:
tags$div(
  HTML("<strong>Raw HTML!</strong>")
)
## <div><strong>Raw HTML!</strong></div>


## 如果直接输入，会被当成字符串转义为实体并显示出来:
tags$div(
  "<strong>Raw HTML!</strong>"
)
## <div>&lt;strong&gt;Raw HTML!&lt;/strong&gt;</div> 






========================================
|-- 进一步的美化，自定义css
----------------------------------------

1.引入方式
tags$style(rel='stylesheet', href='style1.css')
tags$style(rel='stylesheet', href='styles/style2.css')

文件结构
app-1/
|- ui.R
|- server.R
|- www/
	|- style1.css
	|- style2.css
#




2. 使用html定义组件，可以添加行内css
mainPanel(
	HTML('<textarea id="ta" class="form-control shiny-text-output"',
		 'style="resize:none; height:200px;" readonly></textarea>'
	)
)






========================================
|-- 自定义js
----------------------------------------

1.如何引入js文件

shinyjs::run_js('document.getElementsByTagName("textarea")[0].setAttribute("wrap", "off");')

shinyUI(fluidPage(
  tags$script(src='my.js'),
	...
#
位置在 www/my.js




2.如何单击全选框内文字












========================================
shiny入门第3课: 控制组件 Add control widgets( 就是html的表单 form: inputbox, radio, checkbox,... )
----------------------------------------
用于用户各种输入。
1. 基础控件包括:
- 按钮: Action, Submit
- 单选框
- 复选框和复选框组
- 输入日期，日期范围
- 输入文件
- 帮助文字
- 数字输入框
- 下拉框
- slider: 单点拉条、2点拉条
- 文字输入

都有对应的函数，比如actionButton()创建提交按钮，sliderInput()创建滚动条。



2. 函数和对应的组件
function	widget
actionButton	Action Button
checkboxGroupInput	A group of check boxes
checkboxInput	A single check box
dateInput	A calendar to aid date selection
dateRangeInput	A pair of calendars for selecting a date range
fileInput	A file upload control wizard
helpText	Help text that can be added to an input form
numericInput	A field to enter numbers
radioButtons	A set of radio buttons
selectInput	A box with choices to select from
sliderInput	A slider bar
submitButton	A submit button
textInput	A field to enter text

textAreaInput 输入大量文本

部分组件是基于 Twitter Bootstrap project。




3. 添加方式
可以像上文添加html内容一样添加组件，放在ui对象的sidebarPanel 或 mainPanel 中。

每个组件都需要很多参数，其中前2个是一样的:
- 组件名字: 用户不可见，但是你可以使用它获取组件中的值。字符串类型。
- 标签:显示用。字符串类型。可以设置为空"".

一个名字是 action 标签是 Action 的按钮: actionButton("action", label = "Action")

其余的参数变化很大，由具体的html标签而决定，可以查询，比如 ?selectInput




4. 例子


单页面 app.R 
library(shiny)

# Define UI ----
ui <- fluidPage(
  titlePanel("Basic widgets"),
  
  ## 第一行
  fluidRow(
    column(3,
           h3("Buttons"),
           actionButton("action", "Action"),
           br(),
           br(), 
           submitButton("Submit")),
    
    column(3,
           h3("Single checkbox"),
           checkboxInput("checkbox", "Choice A", value = TRUE)),
    
    column(3, 
           checkboxGroupInput("checkGroup", 
                              h3("Checkbox group"), 
                              choices = list("Choice 1" = 1, 
                                             "Choice 2" = 2, 
                                             "Choice 3" = 3),
                              selected = 1)),
    
    column(3, 
           dateInput("date", 
                     h3("Date input"), 
                     value = "2020-07-11"))   
  ),
  hr(),



  # 第二行
  fluidRow(
    
    column(3,
           dateRangeInput("dates", h3("Date range"))),
    
    column(3,
           fileInput("file", h3("File input"))),
    
    column(3, 
           h3("Help text"),
           helpText("Note: help text isn't a true widget,", 
                    "but it provides an easy way to add text to",
                    "accompany other widgets.")),
    
    column(3, 
           numericInput("num", 
                        h3("Numeric input"), 
                        value = 1))   
  ),
  hr(),



  
  #第3行
  fluidRow(
    
    column(2,
           radioButtons("radio", h3("Radio buttons"),
                        choices = list("Choice 1" = 1, "Choice 2" = 2,
                                       "Choice 3" = 3),selected = 1)),
    
    column(2,
           selectInput("select", h3("Select box"), 
                       choices = list("Choice 1" = 1, "Choice 2" = 2,
                                      "Choice 3" = 3), selected = 1)),
    
    column(2, 
           sliderInput("slider1", h3("Sliders"),
                       min = 0, max = 100, value = 50),
           sliderInput("slider2", "",
                       min = 0, max = 100, value = c(25, 75))
    ),
    
    column(2, 
           textInput("text", h3("Text input"), 
                     placeholder  = "Enter text...")),
    column(3, 
           textAreaInput("text2", h3("Textarea input"), 
                     placeholder  = "Enter text...", rows  =10))    
  )
  
)




# Define server logic ----
server <- function(input, output) {
  
}



# Run the app ----
shinyApp(ui = ui, server = server)








========================================
|-- 页面布局: layout-guide
----------------------------------------
https://shiny.rstudio.com/articles/layout-guide.html




ref:
https://shiny.rstudio.com/reference/shiny/latest/textAreaInput.html
更多模板库: https://shiny.rstudio.com/gallery/widget-gallery.html








========================================
|-- tab panel
----------------------------------------

1. 主显区
# 右侧显示部分 Main panel for displaying outputs ----
mainPanel(

  # Output: Tabset w/ plot, summary, and table ----
  tabsetPanel(type = "tabs",
			  tabPanel("Plot", plotOutput("plot")),
			  tabPanel("Summary", verbatimTextOutput("summary")),
			  tabPanel("Table", tableOutput("table"))
  )
)
#



2.后台逻辑区
server <- function(input, output) {
  d <- reactive({ # 依赖单选框分布类型、滑动条n
    Sys.sleep(2) #假设这个是很耗时的步骤
    dist <- switch(input$dist,
                   norm = rnorm,
                   unif = runif,
                   lnorm = rlnorm,
                   exp = rexp,
                   rnorm)
    dist(input$n)
  })

  # 创建输出 Generate a plot of the data ----
  output$plot <- renderPlot({
    dist <- input$dist
    n <- input$n

    hist(d(), n=30,
         main = paste("r", dist, "(", n, ")", sep = ""),
         col = "#75AADB", border = "white")
  })

  # Generate a summary of the data ----
  output$summary <- renderPrint({
    summary(d())
  })

  # Generate an HTML table view of the data ----
  output$table <- renderTable({
    d()
  })
}







ref:
https://shiny.rstudio.com/articles/tabsets.html
https://shiny.rstudio.com/reference/shiny/1.0.2/tabPanel.html






========================================
|-- 怎么加前台进度条、异步
----------------------------------------
R运行太慢，超过10s用户会以为页面挂掉了，怎么在页面加一个进度条？



1. R的shiny网页里面添加进度条实现起来非常容易，withProgress/incProgress/setProgress
教程: https://shiny.rstudio.com/reference/shiny/latest/withProgress.html
更多例子: https://shiny.rstudio.com/gallery/progress-bar-example.html


withProgress(expr, min = 0, max = 1, value = min + (max - min) * 0.1,
  message = NULL, detail = NULL,
  style = getShinyOption("progress.style", default = "notification"),
  session = getDefaultReactiveDomain(), env = parent.frame(),
  quoted = FALSE)

setProgress(value = NULL, message = NULL, detail = NULL,
  session = getDefaultReactiveDomain())

incProgress(amount = 0.1, message = NULL, detail = NULL,
  session = getDefaultReactiveDomain())

#






2. 异步执行需要2个包: future, promises
Shiny async is implemented via integration with the future and promises packages. These two packages are used together:

R的异步: https://rstudio.github.io/promises/

Shiny 1.1.0: Scaling Shiny with async
https://blog.rstudio.com/2018/06/26/shiny-1-1-0/

(1)Use future to perform long-running operations in a worker process that runs in the background, leaving Shiny processes free to serve other users in the meantime. This yields much better responsiveness under load, and much more predictable latency.
使用 future 执行一个后台进程。
(2)Use promises to handle the result of each long-running background operation back in the Shiny process, where additional processing can occur, such as further data manipulation, or displaying to the user via a reactive output.
使用 promises 处理后台进程的结果。


原始写法:
server <- function(input, output, session) {
  r <- reactive({ #如果httr::GET(url)这里需要30s，则用户感觉R进程“暂停”30秒。
    httr::GET(url) %>%
      httr::content("parsed")
  })

  output$plot <- renderPlot({
    r() %>%
      ggplot(aes(speed, dist)) + geom_point()
  })
}



异步写法:
library(promises)
library(future)
plan(multisession)

server <- function(input, output, session) {
  r <- reactive({
    future(httr::GET(url)) %...>%
      httr::content("parsed")
  })
  
  output$plot <- renderPlot({
    r() %...>% {
      ggplot(., aes(speed, dist)) + geom_point()
    }
  })
}





异步最后一步匿名函数的写法:
# Code here runs in process A
future({
  # Code here runs in (child) process B
}) %...>% (function(result) {
  # Code here runs in process A
})







========================================
shiny入门第4课: 展示响应式输出 Display reactive output ( 各种 Output 对象 )
----------------------------------------
1. 响应式需要2步:
(1).ui中添加R对象
(2).告诉shiny的server函数怎么构建对象。如果对象依赖ui组件的值，则对象就是响应式的。




2.具体操作
(1) Add an R object to the UI
R对象变为ui输出的函数：
Output_function	/Creates
dataTableOutput	DataTable
htmlOutput	raw HTML
imageOutput	image
plotOutput	plot
tableOutput	table
textOutput	text
uiOutput	raw HTML
verbatimTextOutput	text

添加方式和添加html元素及组件一样，放到 sidebarPanel or mainPanel in the ui.

比如，使用 textOutput 添加文字输出:

  mainPanel( 
    textOutput("selected_var")
  )
#

注意: 每一个*Output 函数都有一个参数，一个字符串，是响应元素的名字。用户看不到，但是开发者接下来要用。



(2) Provide R code to build the object.
在ui中放置好，是告诉shinny在哪里显示。接着要构建该对象了，这一步在server函数中完成。

server函数构建一个名叫output的list样的对象，包含所有要更新R对象所用到的代码。每个R对象都要在list中有自己的条目。
list的名字要和ui中指定的一致。

server <- function(input, output) {
  output$selected_var <- renderText({ 
    "You have selected this"
  })
}

不用明确返回output。
每个 output 条目都要包含一个 shiny的 reder* 系列函数。这些函数捕获一个R表达式，然后做一些轻量级预处理。

render function	/ creates
renderDataTable	DataTable
renderImage	images (saved as a link to a source file)
renderPlot	plots
renderPrint	any printed output
renderTable	data frame, matrix, other table like structures
renderText	character strings
renderUI	a Shiny tag object or HTML

每个render*函数接收一个单参数，使用{}包裹的R表达式。表达式可以是简单的一行文本，也可以触发更多行的代码，就像很复杂的函数调用。

把 render* 当做一个缓冲代码。首次调用或改变参数时就执行一次。





3. 使用ui输入的值
input加上美元符号，后面是输入对象的名字，也就是第一个参数。







========================================
shiny入门第5课: 使用R脚本和数据 Use R scripts and data
----------------------------------------
目的：如何在shiny  app中载入data, R Scripts, and packages？


1. 读入数据
在app目录下创建 data/ 文件夹，里面放数据。
app-1/
	|- ui.R
	|- server.R
	|- data/
		|- xx.txt
		|- xx.rds
#

counties <- readRDS("census-app/data/counties.rds")
head(counties)

我测试的是
mainPanel( 
	h2("hist plot"),
	plotOutput("histDt") #前台
)

output$histDt=renderPlot({
	dt=read.table('data/xx.txt', header=T,row.names=1); #后台
	hist(dt[,1], n=10)
})






2. 文件路径
source() 和 readRDS中的路径，和shell / cmd路径不太一样。
server.R中执行命令时，路径起始于server.R所在的目录，也就是保存server.R的路径将变成shiny的工作目录。

可以把代码写到单独的文件中 fn1.R，然后在server.R中source该文件。

output$histDt=renderPlot({
	source('fn1.R')
})


但是fn1.R中一次只能画一个图，多个图则只显示最后一个
$ cat fn1.R
    dt=read.table('data/xx.txt', header=T,row.names=1);
    hist(dt[,1], n=10) 
    plot(dt[,1], dt[,2])
	#
    library('pheatmap')
    pheatmap(dt, scale='row') #除最后一个图，其他图就像不存在一样。
#





3. 执行

# 代码放置地点1
ui=fluidpage()
server=function(input, output){
	# 代码放置地点2
	output$map=renderPlot({
		# 代码放置地点3
	})
}

shinyApp(ui, server)

所有的代码都会执行，但是放置到不同的地方，能执行的次数是不一样的。
(1)第一次执行 runApp()时，所有代码都执行一遍，包括server函数。
(2)每次新用户访问时，shiny运行一次server函数，为每个用户建立不同的对象。
(3)当用户修改界面组件的值时，shiny依赖该变量的output列表就会运行一次。


启发:

(1)在server函数开始之前加载脚本、库、数据集，保证静态资源载入一次就够了。
(2)对于每个用户不同的部分，放到server函数内render*外。
比如 用户的session信息(详见下文章节)






========================================
|-- 用户的session信息
----------------------------------------
https://shiny.rstudio.com/articles/client-data.html


1. 实例 
(1) 前台部分
library(shiny)
shinyUI( fluidPage(
  headerPanel( "Census Vis. 004" ),
  
  # 侧面控件
  sidebarPanel(
	  mainPanel( 
		h2('Session info'),
		#pre( textOutput('clientdataText') )
		verbatimTextOutput("clientdataText")
	  )
))

(2) 后台部分
shinyServer(function(input, output, session) {
  cdata <- session$clientData

  # Values from cdata returned as text
  output$clientdataText <- renderText({
    cnames <- names(cdata)

    allvalues <- lapply(cnames, function(name) {
      paste(name, cdata[[name]], sep = " = ")
    })
    paste(allvalues, collapse = "\n")
  })
})



========================================
shiny入门第6课: 使用响应表达式 Use reactive expressions
----------------------------------------
目的: 想让用户更快的得到结果，但是如果你的app需要处理大量很慢的计算呢？
reactive expressions 可以指定那一部分需要更新，防止不需要的计算过程拉低app的响应速度。

创建 Create reactive expressions with reactive({ })
引用 Call reactive expressions with the name of the expression followed by parentheses ()


1. 单页面实例
注: data.txt 就是 mtcars 数据集保存得到的。
$ cat app.R 

library('shiny')

# Define UI ----
ui <- fluidPage(
	# 侧面控件
  sidebarPanel(
  	helpText("input sth."),
      sliderInput("range", "Range of interest",
                   min = 0, max = 100, value =c(0,100) )
  ),

    mainPanel( 
    	    h2("hist plot"),
    		plotOutput("histDt"),
    	)
)

# Define server logic ----
server <- function(input, output) {
	#reactive({})函数则自带缓存，除了第一次加载耗时外，之后都是用缓存数据(除非它依赖的input改变了)
	dataInput <- reactive({
		    # 假设获取数据很慢，需要访问网络
			Sys.sleep(3)
			x=read.table('data.txt', header=T, row.names=1)
			return(x)
		})

	output$histDt=renderPlot({
		# 假设获取数据很慢，需要访问网络
		#Sys.sleep(3)
		#x=read.table('data.txt', header=T, row.names=1) #每次用户更改页面值，都需要等待加载数据。
		x=dataInput()
		#

		arr=input$range
		len=rnorm( mean(arr) )
		#
		library(pheatmap)
		pheatmap(x, scale='row', main=length(len) )
		#hist(x, main=length(l))
    })
}

# Run the app ----
shinyApp(ui = ui, server = server)

#







========================================
shiny入门第7课: 分享应用 Share your apps
----------------------------------------
shiny app可以分享为R脚本，或者作为一个web page发布。但无法封装为无需server的离线web。
前者需要用户知道怎么运行R shiny，可以在本地运行。
后者则只需要一个浏览器即可查看和使用。


1. 作为脚本发布，发布到github等网络上
shiny提供了三个函数来运行在线shiny脚本: runUrl, runGitHub, and runGist.

(1) 压缩为zip文件后，放到自己的网站上
library(shiny)
runUrl( "<the weblink>")


(2) 如果没有网站，脚本放到了github，则
runGitHub( "<your repository name>", "<your user name>")

例:
runGitHub( "shiny_GO", "DawnEve", host='0.0.0.0', port=9993)



(3) runGist("<gist number>")
比如 runGist("eb3470beb1c0252bd0289cbc89bcf36f")




2. Share as a web page
可以使用自己的vps，安装R环境，安装shinny包来提供shinny web服务。
如果没有自己的vps，则RStudio提供了三种方案。
	shinyapps.io 
	Shiny Server (需要自己的服务器)
	RStudio Connect (商用带支持)
#





========================================
监视数据的变化: 观察者 shiny observe and observeEvent
----------------------------------------
https://shiny.rstudio.com/reference/shiny/latest/observe.html
observes和reactive expressions 一样，可以读取响应值和调用响应表达式，并在依赖更新后重新执行。
但是和reactive expressions不一样的地方是，它不能产生结果、用于其他reactive expressions的输入。所以通常用来输入和输出。

另一个不同是执行策略。reactive expressions是懒加载，依赖值改变后并不立刻执行，直到它被调用才更新。不过不被调用，则不更新。而observers 则是依赖跟新后立刻主动更新。

observe ({
 #subset someDataframe which I need in the observeEvent() 
 observeEvent(input$Numbers, {
	#if not NULL, do something with subsetted dataframe
 })
})



subset <- reactive({
 # Do your sub-setting here 
 if(!is.null(input$Numbers)){
	#Do something else
 } 
 # return (your_subset)
})





========================================
shiny 的优化 //todo
----------------------------------------
基于shiny-server+docker的部署、维护与发布 https://zhuanlan.zhihu.com/p/53844404

基于shiny的前后端优化 https://zhuanlan.zhihu.com/p/55367267










========================================
R htmlWidgets: 依赖 D3.js + SVG 实现(>IE9)
----------------------------------------
https://bookdown.org/rdpeng/RProgDA/htmlwidgets.html

1. 定义
R绘图生成html文件，富JavaScript，可鼠标交互，出现在Rstudio的Viewer面板上的图。
可嵌入到Shiny app中。



2. 组件
(1) 概述
https://www.htmlwidgets.org/
Bring the best of JavaScript data visualization to R

leaflet: Mapping
dygraphs: Time series
plotly: A variety of plots, including maps
rbokeh: A variety of plots, including maps
networkD3: Network data
d3heatmap: Heatmaps
DT: Data tables
DiagrammeR: Diagrams and flowcharts

其中，leaflet 和 plotly 包最常用。

(2) 示例
Just a line or two of R code can be used to create interactive visualizations. See the featured widgets in the showcase and browse over 50 available widgets in the gallery.

- https://www.htmlwidgets.org/showcase_leaflet.html
- https://gallery.htmlwidgets.org/




3. 实现方式
(1) 依赖D3.js: Data-Driven Documents（数据驱动文档）
If you are interested in learning all the details about the JavaScript on which these htmlWidgets are built, you may find the short book Getting Started with D3 by Mike Dewar interesting.

- https://d3js.org/
- https://d3js.org/getting-started
- https://github.com/d3


(2) 搜了一下入门书：
- 先读的《Getting Started with D3》，整了半天看不明白。后来读了Scott Murray的《Interactive Data Visualization》,一下子搞懂了。
- https://github.com/mikedewar/getting_started_with_d3
- 还推荐那个introduction to desiging with d3这本


(3) 搬运js可视化库到R的方法
If you find a JavaScript visualization library and would like to create bindings to R, you can create your own package for a new htmlWidget.

There is advice on creating your own widget for R available at:
https://www.htmlwidgets.org/develop_intro.html


========================================
----------------------------------------


========================================
----------------------------------------






========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------






========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------

