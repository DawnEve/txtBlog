pkg-shiny

注意: 官网只有一个s (shiny)，那就不要写成2个s。

Plumber
OpenCPU 
httpuv

RPC: Rstudio 



========================================
shiny 官方教程
----------------------------------------
官方教程分好几部分，其中入门教程和article部分是文字的。



1. 官方教程
https://shiny.rstudio.com/tutorial/
但是看这个教程要翻墙...学技术，各凭本事吧。

Part 1 - How to build a Shiny app
Introduction
R
App architecture
App template
Inputs and outputs
The server function
Sharing apps
Shinyapps.io
Shiny servers
Recap - Part 1

Part 2 - How to customize reactions
Introduction
Review of Part 1
Reactivity
Reactive values
Reactive functions
render*()
reactive()
isolate()
observeEvent()
eventReactive()
reactiveValues()
Recap - Part 2
Parting tips

Part 3 - How to customize appearance
Introduction
Review of Parts 1 and 2
HTML UI
Adding static content
Building layouts
Panels and tabsets
Prepackaged layouts
CSS
Recap - Part 3





2. tutorial: 共7节，书面教程，每个课程大概20分钟(要有web基础)，能学会基本的使用方法。
https://shiny.rstudio.com/tutorial/written-tutorial/lesson1/

Lesson 1 - Welcome to Shiny
Lesson 2 - Layout the user interface
Lesson 3 - Add control widgets
Lesson 4 - Display reactive output
Lesson 5 - Use R scripts and data
Lesson 6 - Use reactive expressions
Lesson 7 - Share your apps




3. articles 系列
https://shiny.rstudio.com/articles/




ref:
https://blog.csdn.net/RH_Wang/article/details/86318043




========================================
|-- 如何用shiny部署R语言交互式网页小程序？(第一课: Welcome to Shiny)
----------------------------------------
官方案例：http://shiny.rstudio.com/gallery/

1.安装
install.packages("shiny")


2.写代码
(1)看到网上大多给你扯ui.R+server.R，很少会提到global.R，笔者在自己实践的时候遇到的了global.R的使用问题，网上教程只能自己参悟了。

ui.R：搭框架，控件；
server.R：每个控件背后的算法代码；
global.R:server.R中，万一有很长的代码与调用很多其他packages就可以用global写一个函数集合，然后统一在server.R调用。

(2)在一个文件夹内写 ui.R 和 server.R。
格式如下：

# ui.R
library(shiny)
shinyUI(fluidPage(
	#
))
 
# server.R
library(shiny)
shinyServer(function(input, output) {
	#
})


(3)实例-界面：
# ui.R
library(shiny)

shinyUI(fluidPage(
  # Application title
  headerPanel("Hello Shiny!"),
  
  # 侧面控件 Sidebar with a slider input for number of observations
  sidebarPanel(
    #sliderInput是一个滑动的窗口。
    sliderInput("obs", 
                "Number of observations:", 
                min = 0, 
                max = 1000, 
                value = 500)
  ),
  
  # 右边 主控件(默认右边) Show a plot of the generated distribution
  mainPanel(
    plotOutput("distPlot")
  )

))


(4)实例-服务端：
# server.R
library(shiny)

shinyServer(function(input, output) {
  #数据来源都来自于ui.R，比如obs
  output$distPlot <- renderPlot({
    dist <- rnorm(input$obs)
    #server处理好的图才是返回给ui.R。譬如dist
    hist(dist)
  })
  
})



3.shiny的部署
runApp一下那个路径的文件夹就行了。

#
#####
#https://blog.csdn.net/sinat_26917383/article/details/53410370
library(shiny)
runApp("F://Temp/shiny")
## runApp("/home/wangjl/data/shinny/",host="0.0.0.0", port=5000) #还可以指定IP和端口
#


在win10上的运行
D:\Program Files\R\R-3.6.1\bin>Rscript F:\\Temp\\shiny\\run.R







4. 更多官方例子

runExample("01_hello")      # a histogram
runExample("02_text")       # tables and data frames
runExample("03_reactivity") # a reactive expression
runExample("04_mpg")        # global variables
runExample("05_sliders")    # slider bars
runExample("06_tabsets")    # tabbed panels
runExample("07_widgets")    # help text and submit buttons
runExample("08_html")       # Shiny app built from HTML
runExample("09_upload")     # file upload wizard
runExample("10_download")   # file download wizard
runExample("11_timer")      # an automated timer







refer
1. 中文教程：用R构建shiny应用程序：http://yanping.me/shiny-tutorial/#welcome
2. R powered web applications with Shiny (a tutorial and cheat sheet with 40 example apps) 
http://zevross.com/blog/2016/04/19/r-powered-web-applications-with-shiny-a-tutorial-and-cheat-sheet-with-40-example-apps/



========================================
shiny入门第2课: 界面 Layout the user interface
----------------------------------------
1.
https://shiny.rstudio.com/tutorial/written-tutorial/lesson2/

(1)基本结构
library(shiny)

# Define UI ----
ui <- fluidPage(
  
)

# Define server logic ----
server <- function(input, output) {
  
}

# Run the app ----
shinyApp(ui = ui, server = server)

以上是最基本的Shiny框架





(2) 布局
ui <- fluidPage(
  titlePanel("title panel"), #整个页面的标题

  sidebarLayout( #通常侧边栏有2个参数， sidebarPanel 和 mainPanel
    sidebarPanel("sidebar panel"),
    mainPanel("main panel")
  )
)




可以使用mainPanel参数改变侧边栏的位置:
ui <- fluidPage(
  titlePanel("title panel"),
  
  sidebarLayout(position = "right",
                sidebarPanel("sidebar panel"),
                mainPanel("main panel")
  )
)


可以使用 navbarPage 创建包含导航条的多个页面。
或者使用 fluidRow 和 column 来从 grid 系统构建布局。
更多布局参考 https://shiny.rstudio.com/articles/layout-guide.html
本节继续使用 sidebarLayout 布局。





(3) HTML 内容
可以在 *Panel 函数内添加内容。比如上文显示字符串。
其实还可以添加 html5 标签。
比如: 
headerPanel( h4("Hello Shiny! 001") ),

  mainPanel(
    h1("First level title"),
    plotOutput("distPlot"),
    hr(),
    h2("Second level title"),
    plotOutput("distPlot2"),
	a('find more here', href="http://baidu.com", target="_blank")
  )




# html属性可以作为函数参数传入
h6("Episode IV", align = "center")



# 格式化文字的输入
 mainPanel(
      p("p creates a paragraph of text."),
      p("A new p() command starts a new paragraph. Supply a style attribute to change the format of the entire paragraph.", style = "font-family: 'times'; font-si16pt"),
      strong("strong() makes bold text."),
      em("em() creates italicized (i.e, emphasized) text."),
      br(),
      code("code displays your text similar to computer code"),
      div("div creates segments of text with a similar style. This division of text is all blue because I passed the argument 'style = color:blue' to div", style = "color:blue"),
      br(),
      p("span does the same thing as div, but it works with",
        span("groups of words", style = "color:blue"),
        "that appear inside a paragraph.")
    )
# 代码
    pre("怎么多行？
code displays your text similar to computer code;
for(i in 1:10){
  print(i)
  }"
      ),
# 标签嵌套
     p("span does the same thing as div, but it works with",
        span("groups of words", style = "color:blue"),
        "that appear inside a paragraph."),
#




(4) 图片
img(src = "my_image.png", height = 72, width = 72)

图片放置到和 app.R 同一个文件夹下的 www 目录中。
Your file must be in a folder named www in the same directory as the app.R script.

比如
shiny/
|- ui.R
|- server.R 
|- www/ 可以放置任何静态文件，比如图片/css/js/txt/pdf等
	|- my_image.png
#


(5) 更多html标签
Customize your UI with HTML: https://shiny.rstudio.com/articles/html-tags.html
the Shiny HTML Tags Glossary: https://shiny.rstudio.com/articles/tag-glossary.html

> shiny::tags # 包含110个函数，对应着具体的html标签
> names(tags) #查看具体的标签


## 还可以用tags这个函数list来写html代码
tags$h1( "右侧大标题",  ),
hr(),
tags$ol(
	tags$li("First list item"), 
	tags$li("Second list item"), 
	tags$li("Third list item")
),




(6)如果感觉太繁琐，就想手工输入原始的raw html代码，则要使用HTML函数包裹:
tags$div(
  HTML("<strong>Raw HTML!</strong>")
)
## <div><strong>Raw HTML!</strong></div>


## 如果直接输入，会被当成字符串转义为实体并显示出来:
tags$div(
  "<strong>Raw HTML!</strong>"
)
## <div>&lt;strong&gt;Raw HTML!&lt;/strong&gt;</div> 






========================================
|-- 进一步的美化，自定义css
----------------------------------------

1.引入方式
tags$style(rel='stylesheet', href='style1.css')
tags$style(rel='stylesheet', href='styles/style2.css')

文件结构
app-1/
|- ui.R
|- server.R
|- www/
	|- style1.css
	|- style2.css
#




2. 使用html定义组件，可以添加行内css
mainPanel(
	HTML('<textarea id="ta" class="form-control shiny-text-output"',
		 'style="resize:none; height:200px;" readonly></textarea>'
	)
)






========================================
|-- 自定义js
----------------------------------------

1.如何引入js文件

shinyjs::run_js('document.getElementsByTagName("textarea")[0].setAttribute("wrap", "off");')

shinyUI(fluidPage(
  tags$script(src='my.js'),
	...
#
位置在 www/my.js




2.如何单击全选框内文字












========================================
shiny入门第3课: 控制组件 Add control widgets( 就是html的表单 form: inputbox, radio, checkbox,... )
----------------------------------------
用于用户各种输入。
1. 基础控件包括:
- 按钮: Action, Submit
- 单选框
- 复选框和复选框组
- 输入日期，日期范围
- 输入文件
- 帮助文字
- 数字输入框
- 下拉框
- slider: 单点拉条、2点拉条
- 文字输入

都有对应的函数，比如actionButton()创建提交按钮，sliderInput()创建滚动条。



2. 函数和对应的组件
function	widget
actionButton	Action Button
checkboxGroupInput	A group of check boxes
checkboxInput	A single check box
dateInput	A calendar to aid date selection
dateRangeInput	A pair of calendars for selecting a date range
fileInput	A file upload control wizard
helpText	Help text that can be added to an input form
numericInput	A field to enter numbers
radioButtons	A set of radio buttons
selectInput	A box with choices to select from
sliderInput	A slider bar
submitButton	A submit button
textInput	A field to enter text

textAreaInput 输入大量文本

部分组件是基于 Twitter Bootstrap project。




3. 添加方式
可以像上文添加html内容一样添加组件，放在ui对象的sidebarPanel 或 mainPanel 中。

每个组件都需要很多参数，其中前2个是一样的:
- 组件名字: 用户不可见，但是你可以使用它获取组件中的值。字符串类型。
- 标签:显示用。字符串类型。可以设置为空"".

一个名字是 action 标签是 Action 的按钮: actionButton("action", label = "Action")

其余的参数变化很大，由具体的html标签而决定，可以查询，比如 ?selectInput




4. 例子


单页面 app.R 
library(shiny)

# Define UI ----
ui <- fluidPage(
  titlePanel("Basic widgets"),
  
  ## 第一行
  fluidRow(
    column(3,
           h3("Buttons"),
           actionButton("action", "Action"),
           br(),
           br(), 
           submitButton("Submit")),
    
    column(3,
           h3("Single checkbox"),
           checkboxInput("checkbox", "Choice A", value = TRUE)),
    
    column(3, 
           checkboxGroupInput("checkGroup", 
                              h3("Checkbox group"), 
                              choices = list("Choice 1" = 1, 
                                             "Choice 2" = 2, 
                                             "Choice 3" = 3),
                              selected = 1)),
    
    column(3, 
           dateInput("date", 
                     h3("Date input"), 
                     value = "2020-07-11"))   
  ),
  hr(),



  # 第二行
  fluidRow(
    
    column(3,
           dateRangeInput("dates", h3("Date range"))),
    
    column(3,
           fileInput("file", h3("File input"))),
    
    column(3, 
           h3("Help text"),
           helpText("Note: help text isn't a true widget,", 
                    "but it provides an easy way to add text to",
                    "accompany other widgets.")),
    
    column(3, 
           numericInput("num", 
                        h3("Numeric input"), 
                        value = 1))   
  ),
  hr(),



  
  #第3行
  fluidRow(
    
    column(2,
           radioButtons("radio", h3("Radio buttons"),
                        choices = list("Choice 1" = 1, "Choice 2" = 2,
                                       "Choice 3" = 3),selected = 1)),
    
    column(2,
           selectInput("select", h3("Select box"), 
                       choices = list("Choice 1" = 1, "Choice 2" = 2,
                                      "Choice 3" = 3), selected = 1)),
    
    column(2, 
           sliderInput("slider1", h3("Sliders"),
                       min = 0, max = 100, value = 50),
           sliderInput("slider2", "",
                       min = 0, max = 100, value = c(25, 75))
    ),
    
    column(2, 
           textInput("text", h3("Text input"), 
                     placeholder  = "Enter text...")),
    column(3, 
           textAreaInput("text2", h3("Textarea input"), 
                     placeholder  = "Enter text...", rows  =10))    
  )
  
)




# Define server logic ----
server <- function(input, output) {
  
}



# Run the app ----
shinyApp(ui = ui, server = server)








========================================
|-- 页面布局: layout-guide
----------------------------------------
https://shiny.rstudio.com/articles/layout-guide.html




ref:
https://shiny.rstudio.com/reference/shiny/latest/textAreaInput.html
更多模板库: https://shiny.rstudio.com/gallery/widget-gallery.html








========================================
|-- tab panel
----------------------------------------

1. 主显区
# 右侧显示部分 Main panel for displaying outputs ----
mainPanel(

  # Output: Tabset w/ plot, summary, and table ----
  tabsetPanel(type = "tabs",
			  tabPanel("Plot", plotOutput("plot")),
			  tabPanel("Summary", verbatimTextOutput("summary")),
			  tabPanel("Table", tableOutput("table"))
  )
)
#



2.后台逻辑区
server <- function(input, output) {
  d <- reactive({ # 依赖单选框分布类型、滑动条n
    Sys.sleep(2) #假设这个是很耗时的步骤
    dist <- switch(input$dist,
                   norm = rnorm,
                   unif = runif,
                   lnorm = rlnorm,
                   exp = rexp,
                   rnorm)
    dist(input$n)
  })

  # 创建输出 Generate a plot of the data ----
  output$plot <- renderPlot({
    dist <- input$dist
    n <- input$n

    hist(d(), n=30,
         main = paste("r", dist, "(", n, ")", sep = ""),
         col = "#75AADB", border = "white")
  })

  # Generate a summary of the data ----
  output$summary <- renderPrint({
    summary(d())
  })

  # Generate an HTML table view of the data ----
  output$table <- renderTable({
    d()
  })
}







ref:
https://shiny.rstudio.com/articles/tabsets.html
https://shiny.rstudio.com/reference/shiny/1.0.2/tabPanel.html






========================================
|-- 怎么加前台进度条、异步
----------------------------------------
R运行太慢，超过10s用户会以为页面挂掉了，怎么在页面加一个进度条？



1. R的shiny网页里面添加进度条实现起来非常容易，withProgress/incProgress/setProgress
教程: https://shiny.rstudio.com/reference/shiny/latest/withProgress.html
更多例子: https://shiny.rstudio.com/gallery/progress-bar-example.html


withProgress(expr, min = 0, max = 1, value = min + (max - min) * 0.1,
  message = NULL, detail = NULL,
  style = getShinyOption("progress.style", default = "notification"),
  session = getDefaultReactiveDomain(), env = parent.frame(),
  quoted = FALSE)

setProgress(value = NULL, message = NULL, detail = NULL,
  session = getDefaultReactiveDomain())

incProgress(amount = 0.1, message = NULL, detail = NULL,
  session = getDefaultReactiveDomain())

#






2. 异步执行需要2个包: future, promises
Shiny async is implemented via integration with the future and promises packages. These two packages are used together:

R的异步: https://rstudio.github.io/promises/

Shiny 1.1.0: Scaling Shiny with async
https://blog.rstudio.com/2018/06/26/shiny-1-1-0/

(1)Use future to perform long-running operations in a worker process that runs in the background, leaving Shiny processes free to serve other users in the meantime. This yields much better responsiveness under load, and much more predictable latency.
使用 future 执行一个后台进程。
(2)Use promises to handle the result of each long-running background operation back in the Shiny process, where additional processing can occur, such as further data manipulation, or displaying to the user via a reactive output.
使用 promises 处理后台进程的结果。


原始写法:
server <- function(input, output, session) {
  r <- reactive({ #如果httr::GET(url)这里需要30s，则用户感觉R进程“暂停”30秒。
    httr::GET(url) %>%
      httr::content("parsed")
  })

  output$plot <- renderPlot({
    r() %>%
      ggplot(aes(speed, dist)) + geom_point()
  })
}



异步写法:
library(promises)
library(future)
plan(multisession)

server <- function(input, output, session) {
  r <- reactive({
    future(httr::GET(url)) %...>%
      httr::content("parsed")
  })
  
  output$plot <- renderPlot({
    r() %...>% {
      ggplot(., aes(speed, dist)) + geom_point()
    }
  })
}





异步最后一步匿名函数的写法:
# Code here runs in process A
future({
  # Code here runs in (child) process B
}) %...>% (function(result) {
  # Code here runs in process A
})







========================================
shiny入门第4课: 展示响应式输出 Display reactive output ( 各种 Output 对象 )
----------------------------------------
1. 响应式需要2步:
(1).ui中添加R对象
(2).告诉shiny的server函数怎么构建对象。如果对象依赖ui组件的值，则对象就是响应式的。




2.具体操作
(1) Add an R object to the UI
R对象变为ui输出的函数：
Output_function	/Creates
dataTableOutput	DataTable
htmlOutput	raw HTML
imageOutput	image
plotOutput	plot
tableOutput	table
textOutput	text
uiOutput	raw HTML
verbatimTextOutput	text

添加方式和添加html元素及组件一样，放到 sidebarPanel or mainPanel in the ui.

比如，使用 textOutput 添加文字输出:

  mainPanel( 
    textOutput("selected_var")
  )
#

注意: 每一个*Output 函数都有一个参数，一个字符串，是响应元素的名字。用户看不到，但是开发者接下来要用。



(2) Provide R code to build the object.
在ui中放置好，是告诉shinny在哪里显示。接着要构建该对象了，这一步在server函数中完成。

server函数构建一个名叫output的list样的对象，包含所有要更新R对象所用到的代码。每个R对象都要在list中有自己的条目。
list的名字要和ui中指定的一致。

server <- function(input, output) {
  output$selected_var <- renderText({ 
    "You have selected this"
  })
}

不用明确返回output。
每个 output 条目都要包含一个 shiny的 reder* 系列函数。这些函数捕获一个R表达式，然后做一些轻量级预处理。

render function	/ creates
renderDataTable	DataTable
renderImage	images (saved as a link to a source file)
renderPlot	plots
renderPrint	any printed output
renderTable	data frame, matrix, other table like structures
renderText	character strings
renderUI	a Shiny tag object or HTML

每个render*函数接收一个单参数，使用{}包裹的R表达式。表达式可以是简单的一行文本，也可以触发更多行的代码，就像很复杂的函数调用。

把 render* 当做一个缓冲代码。首次调用或改变参数时就执行一次。





3. 使用ui输入的值
input加上美元符号，后面是输入对象的名字，也就是第一个参数。







========================================
shiny入门第5课: 使用R脚本和数据 Use R scripts and data
----------------------------------------
目的：如何在shiny  app中载入data, R Scripts, and packages？


1. 读入数据
在app目录下创建 data/ 文件夹，里面放数据。
app-1/
	|- ui.R
	|- server.R
	|- data/
		|- xx.txt
		|- xx.rds
#

counties <- readRDS("census-app/data/counties.rds")
head(counties)

我测试的是
mainPanel( 
	h2("hist plot"),
	plotOutput("histDt") #前台
)

output$histDt=renderPlot({
	dt=read.table('data/xx.txt', header=T,row.names=1); #后台
	hist(dt[,1], n=10)
})






2. 文件路径
source() 和 readRDS中的路径，和shell / cmd路径不太一样。
server.R中执行命令时，路径起始于server.R所在的目录，也就是保存server.R的路径将变成shiny的工作目录。

可以把代码写到单独的文件中 fn1.R，然后在server.R中source该文件。

output$histDt=renderPlot({
	source('fn1.R')
})


但是fn1.R中一次只能画一个图，多个图则只显示最后一个
$ cat fn1.R
    dt=read.table('data/xx.txt', header=T,row.names=1);
    hist(dt[,1], n=10) 
    plot(dt[,1], dt[,2])
	#
    library('pheatmap')
    pheatmap(dt, scale='row') #除最后一个图，其他图就像不存在一样。
#





3. 执行

# 代码放置地点1
ui=fluidpage()
server=function(input, output){
	# 代码放置地点2
	output$map=renderPlot({
		# 代码放置地点3
	})
}

shinyApp(ui, server)

所有的代码都会执行，但是放置到不同的地方，能执行的次数是不一样的。
(1)第一次执行 runApp()时，所有代码都执行一遍，包括server函数。
(2)每次新用户访问时，shiny运行一次server函数，为每个用户建立不同的对象。
(3)当用户修改界面组件的值时，shiny依赖该变量的output列表就会运行一次。


启发:

(1)在server函数开始之前加载脚本、库、数据集，保证静态资源载入一次就够了。
(2)对于每个用户不同的部分，放到server函数内render*外。
比如 用户的session信息(详见下文章节)






========================================
|-- 用户的session信息
----------------------------------------
https://shiny.rstudio.com/articles/client-data.html


1. 实例 
(1) 前台部分
library(shiny)
shinyUI( fluidPage(
  headerPanel( "Census Vis. 004" ),
  
  # 侧面控件
  sidebarPanel(
	  mainPanel( 
		h2('Session info'),
		#pre( textOutput('clientdataText') )
		verbatimTextOutput("clientdataText")
	  )
))

(2) 后台部分
shinyServer(function(input, output, session) {
  cdata <- session$clientData

  # Values from cdata returned as text
  output$clientdataText <- renderText({
    cnames <- names(cdata)

    allvalues <- lapply(cnames, function(name) {
      paste(name, cdata[[name]], sep = " = ")
    })
    paste(allvalues, collapse = "\n")
  })
})



========================================
shiny入门第6课: 使用响应表达式 Use reactive expressions
----------------------------------------
目的: 想让用户更快的得到结果，但是如果你的app需要处理大量很慢的计算呢？
reactive expressions 可以指定那一部分需要更新，防止不需要的计算过程拉低app的响应速度。

创建 Create reactive expressions with reactive({ })
引用 Call reactive expressions with the name of the expression followed by parentheses ()


1. 单页面实例
注: data.txt 就是 mtcars 数据集保存得到的。
$ cat app.R 

library('shiny')

# Define UI ----
ui <- fluidPage(
	# 侧面控件
  sidebarPanel(
  	helpText("input sth."),
      sliderInput("range", "Range of interest",
                   min = 0, max = 100, value =c(0,100) )
  ),

    mainPanel( 
    	    h2("hist plot"),
    		plotOutput("histDt"),
    	)
)

# Define server logic ----
server <- function(input, output) {
	#reactive({})函数则自带缓存，除了第一次加载耗时外，之后都是用缓存数据(除非它依赖的input改变了)
	dataInput <- reactive({
		    # 假设获取数据很慢，需要访问网络
			Sys.sleep(3)
			x=read.table('data.txt', header=T, row.names=1)
			return(x)
		})

	output$histDt=renderPlot({
		# 假设获取数据很慢，需要访问网络
		#Sys.sleep(3)
		#x=read.table('data.txt', header=T, row.names=1) #每次用户更改页面值，都需要等待加载数据。
		x=dataInput()
		#

		arr=input$range
		len=rnorm( mean(arr) )
		#
		library(pheatmap)
		pheatmap(x, scale='row', main=length(len) )
		#hist(x, main=length(l))
    })
}

# Run the app ----
shinyApp(ui = ui, server = server)

#







========================================
shiny入门第7课: 分享应用 Share your apps
----------------------------------------
shiny app可以分享为R脚本，或者作为一个web page发布。但无法封装为无需server的离线web。
前者需要用户知道怎么运行R shiny，可以在本地运行。
后者则只需要一个浏览器即可查看和使用。


1. 作为脚本发布，发布到github等网络上
shiny提供了三个函数来运行在线shiny脚本: runUrl, runGitHub, and runGist.

(1) 压缩为zip文件后，放到自己的网站上
library(shiny)
runUrl( "<the weblink>")


(2) 如果没有网站，脚本放到了github，则
runGitHub( "<your repository name>", "<your user name>")

例:
runGitHub( "shiny_GO", "DawnEve", host='0.0.0.0', port=9993)



(3) runGist("<gist number>")
比如 runGist("eb3470beb1c0252bd0289cbc89bcf36f")




2. Share as a web page
可以使用自己的vps，安装R环境，安装shinny包来提供shinny web服务。
如果没有自己的vps，则RStudio提供了三种方案。
	shinyapps.io 
	Shiny Server (需要自己的服务器)
	RStudio Connect (商用带支持)
#





========================================
监视数据的变化: 观察者 shiny observe and observeEvent
----------------------------------------
https://shiny.rstudio.com/reference/shiny/latest/observe.html
observes和reactive expressions 一样，可以读取响应值和调用响应表达式，并在依赖更新后重新执行。
但是和reactive expressions不一样的地方是，它不能产生结果、用于其他reactive expressions的输入。所以通常用来输入和输出。

另一个不同是执行策略。reactive expressions是懒加载，依赖值改变后并不立刻执行，直到它被调用才更新。不过不被调用，则不更新。而observers 则是依赖跟新后立刻主动更新。

observe ({
 #subset someDataframe which I need in the observeEvent() 
 observeEvent(input$Numbers, {
	#if not NULL, do something with subsetted dataframe
 })
})



subset <- reactive({
 # Do your sub-setting here 
 if(!is.null(input$Numbers)){
	#Do something else
 } 
 # return (your_subset)
})





========================================
shiny 的优化 //todo
----------------------------------------
基于shiny-server+docker的部署、维护与发布 https://zhuanlan.zhihu.com/p/53844404

基于shiny的前后端优化 https://zhuanlan.zhihu.com/p/55367267
























========================================
*** 无状态的 web API 接口 ***
----------------------------------------




========================================
|-- R工程化 Rest API 之 plumber 包: Turn your R code into a web API
----------------------------------------

1. 描述
https://docs.rstudio.com/resources/plumber/
https://www.rplumber.io/
https://github.com/rstudio/plumber


Plumber allows you to create a web API by merely decorating your existing R source code with roxygen2-like comments. Take a look at an example.





2. 安装测试
(1) 安装R包 plumber
> install.packages("plumber", repos = "https://mirrors.sustech.edu.cn/CRAN")

> BiocManager::install("plumber")
报错
ERROR: dependency ‘sodium’ is not available for package ‘plumber’
* removing ‘/home/wangjl/R/x86_64-pc-linux-gnu-library/4.1/plumber’


(a) For Ubuntu
> install.packages("sodium")
又报错
Configuration failed because libsodium was not found. Try installing:
 * deb: libsodium-dev (Debian, Ubuntu, etc)
 * rpm: libsodium-devel (Fedora, EPEL)
 * csw: libsodium_dev (Solaris)
 * brew: libsodium (OSX)
If libsodium is already installed, check that 'pkg-config' is in your
PATH and PKG_CONFIG_PATH contains a libsodium.pc file. If pkg-config
is unavailable you can set INCLUDE_DIR and LIB_DIR manually via:
R CMD INSTALL --configure-vars='INCLUDE_DIR=... LIB_DIR=...'


$ sudo apt install libsodium-dev

> system("which pkg-config")
/usr/bin/pkg-config
> system("pkg-config --list-all | grep sodium")
libsodium                      libsodium - A modern and easy-to-use crypto library

> BiocManager::install("plumber")






(b) For: CentOS7.9
## sudo amazon-linux-extras install epel
$ sudo yum install libsodium-devel

$ rpm -qa | grep libsodium
libsodium-devel-1.0.18-1.el7.x86_64
libsodium-1.0.18-1.el7.x86_64

$ which pkg-config
/usr/bin/pkg-config

$ pkg-config --list-all | grep sodium
libsodium                 libsodium - A modern and easy-to-use crypto library


还是同样报错：sodium
	> install.packages('plumber', repos='https://mirror.lzu.edu.cn/CRAN/')
	> install.packages("sodium")
原因似乎是找不到 pkg-config 这个程序：
	> system("which pkg-config")
	> 
	> system("pkg-config --list-all | grep sodium")
	sh: 1: pkg-config: not found

最后发现：R是ubuntu docker镜像，回到(a)方法安装：apt后，重启Rstudio服务，就可以正常安装 plumber 了。
	$ apt install pkgconf # ubuntu 没执行这一句，竟然也载入R包了







(2) 测试文件
函数前的注释可以是 #* 或 #' 开头。

$ cat backup/plumber2.R
# plumber.R

#* Echo back the input
#* @param msg The message to echo
#* @get /echo
function(msg="") {
  list(msg = paste0("The message is: '", msg, "'"))
}


#* Plot a histogram
#* @serializer png
#* @get /plot
function() {
  rand <- rnorm(100)
  hist(rand)
}


#* Return the sum of two numbers
#* @param a The first number to add
#* @param b The second number to add
#* @post /sum
function(a, b) {
  as.numeric(a) + as.numeric(b)
}





(3) 浏览器测试，Rstudio内打开后台
library(plumber)

# 'plumber.R' is the location of the file shown above
pr("backup/plumber2.R") %>%
  pr_run(port=8001)


# 启动方式2
pr2 <- plumber::plumb("plumber.R")
pr2$run()

# 我们事后查一下pr是什么数据类型，原来是R6类
> class(pr2)
[1] "Plumber"  "Hookable" "R6"


会弹出浏览器页面，在该页面内能测试 API。


打开新的浏览器
http://127.0.0.1:8001/echo?msg=good
	显示信息 {"msg":["The message is: 'good'"]}

http://127.0.0.1:8001/plot
	显示一个柱状图

http://127.0.0.1:8001/sum?a=1&b=3
	{"error":"405 - Method Not Allowed"} #只接收 post 方法，无法处理 get 请求。



对于 post:
$ curl -X POST "http://y.biomooc.com:8787/p/9c12f043/sum?a=10&b=120" -H "accept: */*" -d "" #貌似乱码
$ curl -X POST "http://127.0.0.1:8001/sum?a=10&b=120" -H "accept: */*" -d ""
	返回: [130]





(4) 测试2：使用命令行启动后台
$ cd /data/wangjl/rmarkdown_demo/bookdown-demo-main

a) 进入shell R 执行
$ R 
> library(plumber)
> pr("backup/plumber2.R") %>% pr_run(port=8001) #因为我的8000已经在用了，只能换一个其他的端口号。
Running plumber API at http://127.0.0.1:8001
Running swagger Docs at http://127.0.0.1:8001/__docs__/

# 默认只能使用 127.0.0.1 访问，怎么指定 IP 呢?

#!/usr/bin/env Rscript
library(plumber)
pr("myfile.R") %>%
  pr_run(port=8001, host="0.0.0.0")


> pr("backup/plumber2.R") %>% pr_run(port=8001, host="0.0.0.0")
Running plumber API at http://0.0.0.0:8001
Running swagger Docs at http://127.0.0.1:8001/__docs__/


另一组函数: plumb(file = NULL, dir = ".")
> library(plumber)
> r <- plumb("api.R")
> r$run(port = 8001, swagger = TRUE)


b) 从命令行 Rscript 直接执行
$ cat startServer.R
#!/usr/bin/env Rscript
library(plumber)
pr("plumber.demo.R") %>%
  pr_run(port=8001, host="0.0.0.0")

$ Rscript startServer.R
Running plumber API at http://0.0.0.0:8001
Running swagger Docs at http://127.0.0.1:8001/__docs__/







(5) 使用命令行 curl 访问
$ curl "http://localhost:8001/echo"
 {"msg":["The message is: ''"]}
$ curl "http://localhost:8001/echo?msg=hello"
 {"msg":["The message is: 'hello'"]}

参数其实就是字符串参数
$ curl --data "a=4&b=3" "http://localhost:8001/sum"
[7]

或者按JSON传递参数
$ curl -H "Content-Type: application/json" --data '{"a":4, "b":5}' http://localhost:8001/sum
 [9]




(6) 如何允许 CORS 访问？
https://github.com/rstudio/plumber/issues/66

只要在R文件前加上这个函数即可允许个CORS: 

#' @filter cors
cors <- function(req, res) {
  message("hi, this is R API file....")

  res$setHeader("Access-Control-Allow-Origin", "*")

  if (req$REQUEST_METHOD == "OPTIONS") {
    res$setHeader("Access-Control-Allow-Methods","*")
    res$setHeader("Access-Control-Allow-Headers", req$HTTP_ACCESS_CONTROL_REQUEST_HEADERS)
    res$status <- 200
    return(list())
  } else {
    plumber::forward()
  }

}


如果某个API不允许 CORS，则可在其前面的注释中添加一行:
#* @preempt cors

则该API就不能 CORS 访问了。










3. 部署一个简单的逻辑回归模型

(1) 逻辑回归模型调用的例子
#例子需要处理成二分类
all.data <- iris[iris$Species != 'setosa', ]
 
#分训练测试
set.seed(1234)
ind <- sample(2, nrow(all.data), replace = TRUE, prob = c(0.7, 0.3))
traindata <- all.data[ind == 1, ]
testdata <- all.data[ind == 2, ]

#训练模型
fit <- glm(Species ~ ., family = binomial(link = 'logit'), data = traindata)

#保存模型
save(fit, file = "fit.RData")


################
> fit
Call:  glm(formula = Species ~ ., family = binomial(link = "logit"), 
    data = traindata)

Coefficients:
 (Intercept)  Sepal.Length   Sepal.Width  Petal.Length   Petal.Width  
     -42.875        -1.542        -5.889         8.357        16.986  

Degrees of Freedom: 77 Total (i.e. Null);  73 Residual
Null Deviance:	    108.1 
Residual Deviance: 10.85 	AIC: 20.85
################




(2) backup/plumber.R 如下
#' Echo the parameter that was sent in
#' @param msg The message to echo back.
#' @get /predict
function(v1, v2, v3, v4){
  predict(fit, type = 'response', newdata = data.frame(
	Sepal.Length = as.numeric(v1), 
	Sepal.Width = as.numeric(v2), 
	Petal.Length = as.numeric(v3), 
	Petal.Width = as.numeric(v4))
)}



(3) 脚本调用或在命令行输入
load("fit.RData") #载入 fit 这个变量
pr2 <- plumber::plumb("backup/plumber.R")
pr2$run(host = "0.0.0.0", port = 8001)


输出:
Running plumber API at http://0.0.0.0:8001
Running swagger Docs at http://127.0.0.1:8001/__docs__/


host为0.0.0.0表示其他机器可以通过该机器在局域网的ip地址调用，port指定一个端口。
接口启动后在浏览器输入 http://127.0.0.1:8001/predict?v1=6&v2=2&v3=6&v4=1
返回结果：[0.9616]



如果需要返回没有中括号包裹的json，在plumber.R对应的函数上方加第二行参数：
#' Echo the parameter that was sent in
#' @serializer unboxedJSON
#' @param msg The message to echo back.
#' @get /predict

这时启动服务并访问，返回的是纯数字，没有前后的方括号: 0.9616










4. 更多用法与示例

(1) 同时支持post和get访问
 
library(plumber)
#* @apiTitle Simple API

#* Echo provided text
#* @param text The text to be echoed in the response
#* @param number A number to be echoed in the response
#* @get /echo2
#* @post /echo2
function(req, text = "", number = 0) {
  list(
    message_echo = paste("The text is:", text),
    number_echo = paste("The number is:", number),
    raw_body = req$postBody
  )
}

访问:http://localhost:3582/echo2?text=book&number=123
返回: {"message_echo":["The text is: book"],"number_echo":["The number is: 123"],"raw_body":[""]}

post访问: $ curl -X POST "http://localhost:3582/echo2" -H "accept: */*" -d "text=book&number=123"
返回: {"message_echo":["The text is: book"],"number_echo":["The number is: 123"],"raw_body":["text=book&number=123"]}

传入json呢：$ curl --data '{"text":"book", "number":125, "other_param":"something else"}' "localhost:3582/echo2"
返回：{"message_echo":["The text is: "],"number_echo":["The number is: 0"],"raw_body":["{\"text\":\"book\", \"number\":\"125\", \"other_param\":\"something else\"}"]}
有问题：text和number参数都识别错误！==>要指定数据类型是 json:
传入json呢：$ curl -H "Content-Type: application/json" --data '{"text":"book", "number":125, "other_param":"something else"}' "localhost:3582/echo2"
返回：{"message_echo":["The text is: book"],"number_echo":["The number is: 125"],"raw_body":["{\"text\":\"book\", \"number\":125, \"other_param\":\"something else\"}"]}







(2) docker 中部署

1) 获取镜像
$ docker pull rstudio/plumber

$ docker images
REPOSITORY                      TAG                       IMAGE ID       CREATED         SIZE
rstudio/plumber                 latest                    db1d9cf1264d   3 years ago     1.19GB


2) 启动容器
$ docker run --rm -p 8001:8000 rstudio/plumber
which is the same as: 默认运行的文件：
$ docker run --rm -p 8001:8000 rstudio/plumber \
  /usr/local/lib/R/site-library/plumber/plumber/04-mean-sum/plumber.R
参数解释：
	-rm 停止后清除
	-p 8001:8000 端口映射

=> 运行当前目录下的 api.R文件：
$ docker run --rm -p 8001:8000 -v `pwd`/api.R:/plumber.R rstudio/plumber /plumber.R
实例：
$ docker run --rm -p 8001:8001 \
	-v `pwd`/plumber.demo.R:/plumber.demo.R \
	-v `pwd`/startServer.R:/plumber.R \
	rstudio/plumber \
	/plumber.R
第二个要引用第一个脚本：
$ cat startServer.R
#!/usr/bin/env Rscript
library(plumber)
pr("plumber.demo.R") %>%
  pr_run(port=8001, host="0.0.0.0")
todo: 能写到一个文件吗？

3) debug模式: 通常是少了一个包或文件
$ docker run -it --rm --entrypoint /bin/bash rstudio/plumber
$ R
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
> packageVersion("plumber")
[1] ‘1.0.0’






(3) 开机启动服务
1) 确保安装了R依赖包
$ R -e 'install.packages("plumber", repos = "https://cran.rstudio.com/")'

2) 创建服务配置文件
$ sudo vim /etc/systemd/system/plumber-api.service
[Unit]
Description=Plumber API
# After=postgresql
# (or mariadb, mysql, etc if you use a DB with Plumber, otherwise leave this commented)

[Service]
ExecStart=/usr/bin/Rscript -e "library(plumber); pr('/your-dir/your-api-script.R') %>% pr_run(port=8080, host='0.0.0.0')"
Restart=on-abnormal
WorkingDirectory=/your-dir/

[Install]
WantedBy=multi-user.target

3) 激活服务并启动服务
$ sudo systemctl enable plumber-api  # automatically start the service when the server boots
$ sudo systemctl start plumber-api   # start the service right now

检查服务是否启动：
$ systemctl | grep running 
能看到: plumber-api.service \ loaded active \running \Plumber API.












100. 更多使用方法

(1) plumber似乎有很严重的中文编码问题?
在Ubuntu上好像没问题，source文件的时候加上encoding="UTF-8"

(2) 用shiny吧?
场景不一样哈，已经是模型要和后端java对接的场景了啊。shiny-server 是探索阶段。







ref:
官网：https://www.rplumber.io/
Cheat Sheet: https://github.com/rstudio/cheatsheets/blob/main/plumber.pdf
https://rviews.rstudio.com/2018/07/23/rest-apis-and-plumber/
https://posit.co/blog/rstudio-1-2-preview-plumber-integration/

docker 中部署: https://www.rplumber.io/articles/hosting.html#rstudio-connect-1

支持4种http协议(GET/POST/PUT/DELETE): https://geek-docs.com/r-language/r-tutorials/g_building-rest-api-using-r-programming.html#google_vignette
https://zhuanlan.zhihu.com/p/50987545












========================================
|-- 使用 PM2 管理 plumber 进程
----------------------------------------
https://www.rplumber.io/articles/hosting.html

1. 新建文件
$ cat startServer.R
#!/usr/bin/env Rscript
library(plumber)

pr("plumber.demo.R") %>%
  pr_run(port=8001, host="0.0.0.0")


2. 赋予执行权限：
$ chmod 755 startServer.R
$ ls -lth startServer.R 
-rwxr-xr-x 1 wangjl wangjl 102 Mar  2 19:39 startServer.R


3. 执行
(1) 单进程测试
$ ./startServer.R
浏览器可见图形: http://127.0.0.1:8001/plot

(2) 多进程测试
要指定解析程序 --interpreter="Rscript"
$ pm2 start --interpreter="Rscript" startServer.R -i 4  #这个 -i 参数不起作用
[PM2] Starting /data/wangjl/rmarkdown_demo/bookdown-demo-main/backup/startServer.R in fork_mode (4 instances)
[PM2] Done.
┌────┬────────────────┬─────────────┬─────────┬─────────┬──────────┬────────┬──────┬───────────┬──────────┬──────────┬──────────┬──────────┐
│ id │ name           │ namespace   │ version │ mode    │ pid      │ uptime │ ↺    │ status    │ cpu      │ mem      │ user     │ watching │
├────┼────────────────┼─────────────┼─────────┼─────────┼──────────┼────────┼──────┼───────────┼──────────┼──────────┼──────────┼──────────┤
│ 0  │ startServer    │ default     │ N/A     │ fork    │ 591872   │ 0s     │ 0    │ online    │ 0%       │ 20.7mb   │ wangjl   │ disabled │
│ 1  │ startServer    │ default     │ N/A     │ fork    │ 591874   │ 0s     │ 0    │ online    │ 0%       │ 14.9mb   │ wangjl   │ disabled │
│ 2  │ startServer    │ default     │ N/A     │ fork    │ 591881   │ 0s     │ 0    │ online    │ 0%       │ 13.1mb   │ wangjl   │ disabled │
│ 3  │ startServer    │ default     │ N/A     │ fork    │ 591886   │ 0s     │ 0    │ online    │ 0%       │ 4.2mb    │ wangjl   │ disabled │
└────┴────────────────┴─────────────┴─────────┴─────────┴──────────┴────────┴──────┴───────────┴──────────┴──────────┴──────────┴──────────┘

浏览器访问可见图形 http://127.0.0.1:8001/plot
	$ pm2 list 可见到1-3都是报错的
	$ pm2 logs 可见报错原因：端口已用
		3|startSer | createTcpServer: address already in use
		3|startSer | Error in initialize(...) : Failed to create server
	所以，实际上带端口的还是只能单线程跑，不过可能会中断自动重启？

文档：http://127.0.0.1:8001/__docs__/

	$ pm2 monit 查看系统资源监控


注意：
- 防止服务文件偶然被删，最好单独新建文件夹，比如/usr/local/plumber/
- 尝试 Ctrl-c 是否服务停止。//?不懂



4. 删除
$ pm2 delete all #删除全部 pm2 管理的项目，文件还在。



更多 pm2 请参考专题 js/node003.txt




========================================
|-- OpenCPU: OpenCPU system for embedded scientific computation and reproducible research[安装失败]
----------------------------------------

1. 特点
https://www.opencpu.org/
https://github.com/opencpu/opencpu


(1) An API for Embedded Scientific Computing
https://www.opencpu.org/api.html

OpenCPU is a system for embedded scientific computing and reproducible research. The OpenCPU server provides a reliable and interoperable HTTP API for data analysis based on R. You can either use the public servers or host your own.

(2) Seamless R and JavaScript Integration
https://www.opencpu.org/jslib.html

The OpenCPU JavaScript client library provides the most seamless integration of R and JavaScript available today. Enjoy simple RPC and data I/O through standard Ajax techniques. Check for yourself by trying the jsfiddle examples.

(3) Less is more

No need to learn crazy widgets or obscure framworks. The OpenCPU API is a clean and simple interface to R, nothing more nothing less. It is compatible with any language or framework that speaks HTTP.

(4) Statistical Apps
https://www.opencpu.org/apps.html

OpenCPU uses standard R packaging to develop, ship and deploy web applications. Several open source example apps are available from Github. Any app can be used on the public server or locally within an R session.

Rmd 实例: https://rwebapps.ocpu.io/markdownapp/www/


(5) Concurrency by design
The OpenCPU API is concurrent by design. Your applications will naturally support parallel computing and asynchronous requests without introducing any additional complexity.


(6) Easy Installation, Configuration
https://www.opencpu.org/download.html

Installing your own OpenCPU server is super easy and only takes a few minutes. The cloud server supports continuous integration and is highly configurable to fit your every need.


(7) Reliable, Secure and Scalable
The cloud server builds on AppArmor to enforce security, and Nginx for caching and load balancing. All profiles and configurations can easily be customized. Our public servers have been steadily online for over a year without any problems.


(8) Business Friendly Licensing
All parts of OpenCPU are released under the Apache2 license. The software can be used, modified and redistributed for both for open source and proprietary projects in academia, industry or elsewhere.




2. 安装 
https://www.opencpu.org/download.html

$ sudo apt install libprotobuf-dev

> install.packages("protolite")

> install.packages("opencpu")

各种依赖，安装失败 。。。。





========================================
|-- jug: A Simple Web Framework for R [7年不更新，念旧失修，安装失败]
----------------------------------------
1. 简介
http://bart6114.github.io/jug/index.html

依赖 httpuv 包。

It focuses on maximizing the ease with wich you can create web APIs for your R code. 



2. 安装

# devtools::install_github("Bart6114/jug")

> install.packages("jug")
package ‘jug’ is not available for this version of R

安装不上。
看源码上次更新时间，7年前，确实年久失修
https://github.com/Bart6114/jug-crud-example


这个是和Rstudio产品最接近的一个，可惜没有继续开发。






========================================
|-- httpuv: HTTP and WebSocket Server Library (低层http包)
----------------------------------------

1. 简介 
https://cran.r-project.org/web/packages/httpuv/index.html
https://github.com/rstudio/httpuv

httpuv provides low-level socket and protocol support for handling HTTP and WebSocket requests directly from within R. It uses a multithreaded architecture, where I/O is handled on one thread, and the R callbacks are handled on another.

Provides low-level socket and protocol support for handling HTTP and WebSocket requests directly from within R. It is primarily intended as a building block for other packages, rather than making it particularly easy to create complete web applications using httpuv alone. httpuv is built on top of the libuv and http-parser C libraries, both of which were developed by Joyent, Inc. 
(See LICENSE file for libuv and http-parser license information.)

libuv(Cross-platform asynchronous I/O): https://github.com/libuv/libuv
http-parser(http request/response parser for c): https://github.com/nodejs/http-parser




2. 测试 

(1) 安装
# install from CRAN
install.packages("httpuv")


(2) 测试
访问后，返回系统时间和访问路径

library(httpuv)
s <- startServer(host = "0.0.0.0", port = 8001,
  app = list(
    call = function(req) {
      body <- paste0("Time: ", Sys.time(), "<br>Path requested: ", req$PATH_INFO)
      list(
        status = 200L,
        headers = list('Content-Type' = 'text/html'),
        body = body
      )
    }
  )
)


# 测试:
访问 http://127.0.0.1:8001/book
返回:
Time: 2022-04-25 20:01:37
Path requested: /book



查看该类
> str(s)
Classes 'WebServer', 'Server', 'R6' <WebServer>
  Inherits from: <Server>
  Public:
    getHost: function () 
    getPort: function () 
    getStaticPathOptions: function () 
    getStaticPaths: function () 
    initialize: function (host, port, app, quiet = FALSE) 
    isRunning: function () 
    removeStaticPath: function (path) 
    setStaticPath: function (..., .list = NULL) 
    setStaticPathOption: function (..., .list = NULL) 
    stop: function () 
  Private:
    appWrapper: AppWrapper, R6
    handle: 139954797679144
    host: 0.0.0.0
    port: 8001
    running: TRUE



# 关闭服务器
> s$stop()

Or, to stop all running httpuv servers:
> stopAllServers()





(3) 设置静态路径 staticPaths 

dir.create("www")

s <- startServer("0.0.0.0", 8001,
  app = list(
    staticPaths = list("/" = "www/")
  )
)

> writeLines(c("<pre>", "hello", "world"), "www/index.html")

默认，如果/下有index.html则会自动加载。
http://127.0.0.1:8001/
显示:
hello
world





(4) WebSocket server //todo

# 启动服务断端
s <- startServer("127.0.0.1", 8001,
  list(
    onWSOpen = function(ws) {
      # The ws object is a WebSocket object
      cat("Server connection opened.\n")

      ws$onMessage(function(binary, message) {
        cat("Server received message:", message, "\n")
        ws$send(message)
      })
      ws$onClose(function() {
        cat("Server connection closed.\n")
      })
    }
  )
)


# 客户端 https://github.com/rstudio/websocket
ws <- websocket::WebSocket$new("ws://127.0.0.1:8080/")
ws$onMessage(function(event) {
  cat("Client received message:", event$data, "\n")
})

# Wait for a moment before running next line
ws$send("hello world")

# Close client
ws$close()








========================================
基于 RPC(Remote Procedure Call, 远程过程调用) 概念的实现 (分布式系统) //todo
----------------------------------------
1.RPC
(1) 最早在Rstudio Server 的F12信息中看到RPC这个名词的
	Request URL: http://172.18.5.193:8888/rpc/set_client_state
	Request Method: POST
	Status Code: 200 OK
	Remote Address: 172.18.5.193:8888
	Referrer Policy: strict-origin-when-cross-origin


(2) RPC是远程过程调用（Remote Procedure Call）的缩写形式。

rpc（Remote Procedure Call）是远程过程调用，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。

RPC协议假定某些传输协议的存在，如TCP或UDP，为通信程序之间携带信息数据。在OSI网络通信模型中，RPC跨越了传输层和应用层。RPC使得开发包括网络分布式多程序在内的应用程序更加容易。

RPC采用客户机/服务器模式。请求程序就是一个客户机，而服务提供程序就是一个服务器。首先，客户机调用进程发送一个有进程参数的调用信息到服务进程，然后等待应答信息。


(3) rpc的网络交互大致流程(三步)

client向server发送request后开始等待。
server收到、处理、回复client。
client收到response做出反应。

简单代码demo如下：

// 1. client侧
write(netfd, req_buf, req_size);
... // wait response
read(netfd, res_buf, res_size);

// 2. server侧
read(netfd, req_buf, req_size);
... // 执行函数逻辑、业务逻辑等
write(netfd, res_buf, res_size);
上述demo是操作系统级别比较原生的写法，对开发人员不太友好，比如无法对协议字段约束、没有较好的容错处理、缺乏便捷的序列化/反序列化方式、难以映射Call ID等问题。

为了进一步降低rpc服务的开发门槛、提高rpc代码的质量等，大佬们对rpc的生命周期进行抽象、建模以及标准化，设计了各种各样的rpc框架。



(4) 为什么使用 RPC 而不是使用 http?

RPC 是一个完整的远程调用方案，它通常包括通信协议和序列化协议。
	其中 通信协议 包括http协议(gRPC 使用 http2)、自定义报文的tcp协议(如 dubbo)
	序列化协议包含基于文本编码的xml、json，基于二进制编码的 protobuf、hessian 等。

而http只是一个通信协议，不是一个完整的远程调用方案。















2. RPC 框架

https://www.bilibili.com/video/BV1JF411M7Wf?spm_id_from=333.337.search-card.all.click
https://www.bilibili.com/video/BV12v411L7xL?spm_id_from=333.337.search-card.all.click
https://www.bilibili.com/video/BV1qT4y1a7Es?spm_id_from=333.337.search-card.all.click 手写RPC通讯框架



(1) 百度的RPC框架

https://github.com/apache/incubator-brpc


(2) Rstudio 使用了什么 RPC 框架?
https://github.com/rstudio/rstudio
按T，搜索 rpc，发现使用的是 java 和 c++ 构成的。











ref: https://zhuanlan.zhihu.com/p/447355716







========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------






========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------






========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------

