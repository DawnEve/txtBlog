JavaScript教程 快速入门

廖雪峰 https://www.liaoxuefeng.com/wiki/1022910821149312



1.很酷的东西不一定复杂，不一定有用。
2.调试时一个很艰难的事情，因为js错误很多时候不报告，而且还默默地运行着；
另外即便报错，如果是php动态生成的，行数也是错误的。




========================================
第1章 js初步和调试，大纲
----------------------------------------
1.js能干什么？
js目前有统一三端的趋势:前端、后端、移动端。

- js可以直接在浏览器中运行，显示、动画、计算等
- 后端处理数据逻辑。
- 移动端结合facebook最新的项目：react native可以做出web/iOS/Android通用的应用。

js是目前唯一能运行于浏览器端的语言，你喜欢或者怨恨，都得学！

由于JavaScript的标准——ECMAScript在不断发展，最新版ECMAScript 6标准（简称ES6）已经在2015年6月正式发布了。
不过，JavaScript的核心语法并没有多大变化。我们的教程会先讲JavaScript最核心的用法，然后，针对ES6讲解新增特性。



2.模态窗口：alert窗口就是；
你不处理就不能继续。


3.js核心、Dom、Bom共3大部分；
兼容性越来越弱。



4. 大纲
数据类型
	数据陷阱和本质
	8种判定方式
	奇特的NaN
	数值千分位
	{ } + { }背后的玄机

运算符
	一元运算符的诡异现象
	位运算符的妙用
	Delete语法的本质
	加法在计算机中是如何运算的？
	0.1 + 0.2 ≠0.3 的完全推导


对象
	普通属性/排序属性/隐藏类
	属性访问控制
	8种姿势访问原型
	属性遍历大”血“拼
	隐式转换内部机理和注意事项
	JSON和toJSON
	深度克隆可没那么简单

函数
	暂时性死区等重要概念
	name, length，caller等被遗忘
	的“英雄”
	this的绑定规则
	神奇的call.call, call.call.call
	科里化和反科里化
	函数副作用和高阶函数
	动态解析和执行函数
	链式调用的本质
	手写call的十大知识点

网络请求
	xhr和fetch的各自的优缺点
	后悔药：网络请求的取消
	同源策略和跨域请求不烦恼
	手写网络请求库
	超大文件上传
	sendBeacon揭秘
	高效的加载网络资源
	资源加载器的设计
	WebSocket和SSE

ES6
	Decorator和装饰器模式
	基于装饰器优雅的捕获异常
	Proxy和代理模式
	基于proxy的不可变对象





========================================
|-- js的运行方式
----------------------------------------
三种：
1.行内<body onload='someFunction()'>

2.script标签中：
 <script>
    alert('Hello, world');
  </script>
3.外部js文件：
<script src="/public/js/abc.js"></script>



========================================
|-- js编辑、运行与调试、注释、strict模式
----------------------------------------
1.编辑器推荐
Sublime Text
免费，但不注册会不定时弹出提示框。

Notepad++
免费



2.如何运行JavaScript
直接双击html文件即可运行。
但由于浏览器的安全限制，以file://开头的地址无法执行如联网等JavaScript代码，最终，你还是需要架设一个Web服务器，然后以http://开头的地址来正常执行所有JavaScript代码。

3.调试
使用console.log()代替alert()的好处是可以避免弹出烦人的对话框。

推荐用chrome浏览器调试。打开含有js的页面后，点击键盘上的F12健即可看到控制台，可以研究一下控制台的输出，以及意义。控制台对学习和调试js代码帮助巨大！

chrome按F12，选择console，就进入了控制台。
尝试控制台输入：
a=123;
console.log(a);
回车后显示的值就是变量的内容。


4.注释2种
//单行注释

/*这是
多行
注释*/



5.strict模式
JavaScript在设计之初，为了方便初学者学习，并不强制要求用var申明变量。这个设计错误带来了严重的后果：如果一个变量没有通过var申明就被使用，那么该变量就自动被申明为全局变量：
i = 10; // i现在是全局变量

在同一个页面的不同的JavaScript文件中，如果都不用var申明，恰好都使用了变量i，将造成变量i互相影响，产生难以调试的错误结果。

使用var申明的变量则不是全局变量，它的范围被限制在该变量被申明的函数体内（函数的概念将稍后讲解），同名变量在不同的函数体内互不冲突。

为了修补JavaScript这一严重设计缺陷，ECMA在后续规范中推出了strict模式，在strict模式下运行的JavaScript代码，强制通过var申明变量，未使用var申明变量就使用的，将导致运行错误。

启用strict模式的方法是在JavaScript代码的第一行写上：

'use strict';
这是一个字符串，不支持strict模式的浏览器会把它当做一个字符串语句执行，支持strict模式的浏览器将开启strict模式运行JavaScript。

来测试一下你的浏览器是否能支持strict模式：

'use strict';
// 如果浏览器支持strict模式，
// 下面的代码将报ReferenceError错误:
abc = 'Hello, world';
console.log(abc);




========================================
第2章 js基本语法（时间戳）、变量名与数据类型
----------------------------------------
1.数组
	arr=[];//初始化
	arr[0]=0;//赋值
	arr.length;//数组长度
2.时间
	var today=new Date();
	//Tue Nov 24 2015 16:41:42 GMT+0800 (中国标准时间)
	
	//获取小时
	var h=today.getHours();//16
	
	//获得时间戳
	new Date().getTime() #1594989697450
	

# 格式化时间显示
var d = new Date('Thu May 12 2016 08:00:00 GMT+0800 (中国标准时间)');  
youWant=d.getFullYear() + '-' + (d.getMonth() + 1) + '-' + d.getDate() + ' ' + d.getHours() + ':' + d.getMinutes() + ':' + d.getSeconds();  
//yyyy-MM-dd hh:mm:ss  
"2016-5-12 8:0:0"


3.只有全局变量和函数体局部变量；
	只要首次出现不加var的都是全局变量：按照原型链上溯，最后添加到window对象上，就成全局变量了。


4. 变量命名
- 变量前要加var ，否则是全局变量！
var x = 1, y = 2;




========================================
|-- 数据类型与变量(基本类型和对象类型系统)
----------------------------------------
在很多书中都提到了javascript的变量类型，每本书都有不同的划分标准，如果按照typeof和instanceof的返回值来区分，可以把javascript的变量类型分为两套类型系统：基本类型和对象类型衍生出来的对象类型系统。

基本类型包括：undefined，number，boolean，string，object，function，他们之前通过typeof的返回值来区分。

第二套对象类型系统是由第一套系统衍生发展而来的，例如前面提到的Array，还有Null，Number，Boolean等等，对象类型可以通过instanceof来判断。

那么对象类型中的Number和基本类型中的number又是什么关系呢？他们又是什么区别呢？
答案就是，他们是映射关系，即下例：

var a = new Number(123);
console.log(a.valueOf()===123);//true
var b = new String(123);
console.log(b.valueOf()===123);//false
console.log(b.valueOf()==='123');//true
obj.valueOf()返回的是该对象的原始值。




1.数据类型包括
数字	Number
字符串	string
布尔值
对象等

2.运算符
逻辑运算符：或||	且&&	非!

其中有很多例外：//todo
- ==和===的区别?
- 如何判断NaN?
- null和undefined如何判断？


3.数组
推荐使用字面量定义：arr=[1,2,3];
	arr[3]=4;
引用(下标从0开始)：arr[0] //1;



4.对象
JavaScript的对象是一组由键-值组成的无序集合，例如：
var person = {
    name: 'Bob',
    age: 20,
    tags: ['js', 'web', 'mobile'],
    city: 'Beijing',
    hasCar: true,
    zipcode: null
};
获取和设置属性使用对象变量.属性名的方式：
person.name//'Bob'
或者person['name']//'Bob'


对象的键值对中，值也可以是函数。
var Man={
	name:'Tom',
	say: function(){
		return this.name;
	}
}
Man.say(); //"Tom"



5.动态语言变量可以随便赋值

在JavaScript中，使用等号=对变量进行赋值。可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，但是要注意只能用var申明一次，例如：

var a = 123; // a的值是整数123
a = 'ABC'; // a变为字符串


6.strict模式
启用strict模式的方法是在JavaScript代码的第一行写上：
'use strict';
这是一个字符串，不支持strict模式的浏览器会把它当做一个字符串语句执行，支持strict模式的浏览器将开启strict模式运行JavaScript。


'use strict';
// 如果浏览器支持strict模式，
// 下面的代码将报ReferenceError错误:
abc = 'Hello, world';
alert(abc);

运行代码，如果浏览器报错，请修复后再运行。如果浏览器不报错，说明你的浏览器太古老了，需要尽快升级。
不用var申明的变量会被视为全局变量，为了避免这一缺陷，所有的JavaScript代码都应该使用strict模式。我们在后面编写的JavaScript代码将全部采用strict模式。






========================================
|-- 运算符
----------------------------------------

https://www.runoob.com/jsref/jsref-operators.html


JavaScript 算术运算符
	%	余数	10%3 //1
	整除? 
var dev=function(x, y){ 
	rs=(x - x%y)/y; 
	return(rs); 
}
dev(10, 3)	//3


用于字符串的 + 运算符
	"a_"+"b"







========================================
字符串
----------------------------------------
字符串常用方法：
toUpperCase()把一个字符串全部变为大写：'I am Here'.toUpperCase();// "I AM HERE"
toLowerCase()把一个字符串全部变为小写：'I am Here'.toLowerCase();// "i am here"
indexOf()会搜索指定字符串出现的位置：'I am Here'.indexOf('am');//2
substring()返回指定索引区间的子串：
	'I am Here'.substring(3,5);// 从索引3开始到5（不包括5），返回 "m "
	'I am Here'.substring(5,3);//是一样的 "m "
	'I am Here'.substring(3);//从索引3开始到结束，返回"m Here"
substr(n,m)返回指定索引n开始的m个子串：'I am Here'.substr(3,3);//从索引3开始的3个字符"m H"
'I am Here'.charAt(0); //"I"，注意这个charAt()只能用来访问，不能设置。





========================================
|-- 去掉字符串首尾空格
----------------------------------------
函数形式：
function trim(str){ //删除左右两端的空格
	return str.replace(/(^\s*)|(\s*$)/g, "");
}
function ltrim(str){ //删除左边的空格
	return str.replace(/(^\s*)/g,"");
}
function rtrim(str){ //删除右边的空格
	return str.replace(/(\s*$)/g,"");
}


方法形式：
String.prototype.trim=function(){
	return this.replace(/(^\s*)|(\s*$)/g, "");
}
String.prototype.ltrim=function(){
	return this.replace(/(^\s*)/g,"");
}
String.prototype.rtrim=function(){
	return this.replace(/(\s*$)/g,"");
}
from: http://blog.sina.com.cn/s/blog_4934a04a0100kmqr.html




========================================
|-- js 时间戳 变 时间日期
----------------------------------------

//将时间戳转换成正常时间格式
function timestampToTime(timestamp) {
	var date = new Date(timestamp * 1000);//时间戳为10位需*1000，时间戳为13位的话不需乘1000
	var Y = date.getFullYear() + '-';
	var M = (date.getMonth()+1 < 10 ? '0'+(date.getMonth()+1) : date.getMonth()+1) + '-';
	var D = date.getDate() + ' ';
	var h = date.getHours() + ':';
	var m = date.getMinutes() + ':';
	var s = date.getSeconds();
	return Y+M+D+h+m+s;
}

// 一般的10位时间戳的单位是秒
timestampToTime(1590235384) // "2020-05-23 20:3:4"






========================================
正则表达式: RegExp 对象
----------------------------------------
正则表达式用于对字符串模式匹配及检索替换，是对字符串执行模式匹配的强大工具。

https://www.runoob.com/jsref/jsref-obj-regexp.html
https://www.cnblogs.com/libinqq/archive/2008/07/31/1257699.html


1. 基本知识

(1)修饰符	描述
i	执行对大小写不敏感的匹配。
g	执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。
m	执行多行匹配。

例子:
/abc/i 表示忽略大小写
/abc/g 表示全局匹配



(2) 数量词
量词	描述
n+	匹配任何包含至少一个 n 的字符串。
n*	匹配任何包含零个或多个 n 的字符串。
n?	匹配任何包含零个或一个 n 的字符串。








2. 正则表达式通常用于两个字符串方法 : search() 和 replace()。

(1)
//过滤掉html标签和空格
function  filter(text) {
	var reg = /<[^<>]+>/g;//1、全局匹配g肯定忘记写,2、<>标签中不能包含标签实现过滤HTML标签
	text = text.replace(reg, '');//替换HTML标签
	text = text.replace(/&nbsp;/ig, '');//替换HTML空格
	return text;
};




(2) 正则拆分

# 按照空格拆分单词
a1='a fox jumped through a box'
a1.split(/\s+/) //(6) ["a", "fox", "jumped", "through", "a", "box"]
a1.split(/\s+/).length //6 统计单词数量











========================================
数组 Array
----------------------------------------
数组越界不会报错，设置和访问的时候注意是否越界。

常用方法：
1. indexOf()与字符串方法类似，来搜索一个指定的元素的位置：
	var arr = [10, 20, '30', 'xyz'];
	arr.indexOf(10); // 元素10的索引为0
	arr.indexOf('30'); // 元素'30'的索引为2
	
2. slice()对应String的substring()，截取Array的部分元素，然后返回一个新的Array：
	注意到slice()的起止参数包括开始索引，不包括结束索引。
	
	var arr = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];
	arr.slice(0, 3); // 从索引0开始，到索引3结束，但不包括索引3: ['A', 'B', 'C']
	arr.slice(3); // 从索引3开始到结束: ['D', 'E', 'F', 'G']
	
	- 如果不给slice()传递任何参数，它就会从头到尾截取所有元素。利用这一点，我们可以很容易地复制一个Array：

		var arr = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];
		var aCopy = arr.slice();
		aCopy; // ['A', 'B', 'C', 'D', 'E', 'F', 'G']
		aCopy === arr; // false
	
3. sort()可以对当前Array进行排序，它会直接修改当前Array的元素位置，直接调用时，按照默认顺序排序：

	var arr = ['B', 'C', 'A'];
	arr.sort();
	arr; // ['A', 'B', 'C']
	用函数可以自定义排序。
	
4. reverse()把整个Array的元素给掉个个，也就是反转：

	var arr = ['one', 'two', 'three'];
	arr.reverse(); 
	arr; // ['three', 'two', 'one']

5. splice()方法是修改Array的“万能方法”，它可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素：

	var arr = ['Microsoft', 'Apple', 'Yahoo', 'AOL', 'Excite', 'Oracle'];
	// 从索引2开始删除3个元素,然后再添加两个元素:
	arr.splice(2, 3, 'Google', 'Facebook'); // 返回删除的元素 ['Yahoo', 'AOL', 'Excite']
	arr; // ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']
	// 只删除,不添加:
	arr.splice(2, 2); // ['Google', 'Facebook']
	arr; // ['Microsoft', 'Apple', 'Oracle']
	// 只添加,不删除:
	arr.splice(2, 0, 'Google', 'Facebook'); // 返回[],因为没有删除任何元素
	arr; // ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']

6. concat()方法把当前的Array和另一个Array连接起来，并返回一个新的Array：

	var arr = ['A', 'B', 'C'];
	var added = arr.concat([1, 2, 3]);
	added; // ['A', 'B', 'C', 1, 2, 3]
	arr; // ['A', 'B', 'C']

	- 原数组没有被修改！
	- concat可以接收任意元素或数组，并拆分数组合并到调用该方法的数组中。
		var arr = ['A', 'B', 'C'];
		arr.concat(1, 2, [3, 4]); // ['A', 'B', 'C', 1, 2, 3, 4]

7. join()方法是一个非常实用的方法，它把当前Array的每个元素都用指定的字符串连接起来，然后返回连接后的字符串：

	var arr=["A", "B", "C", "D", "E", "F", "G"]
	arr.join('-'); //返回 "A-B-C-D-E-F-G"
	arr; //["A", "B", "C", "D", "E", "F", "G"]

8. push和pop
	push()向Array的末尾添加若干元素，pop()则把Array的最后一个元素删除掉：
	
	var arr = [1, 2];
	arr.push('A', 'B'); // 返回Array新的长度: 4
	arr; // [1, 2, 'A', 'B']
	arr.pop(); // pop()返回'B'
	arr; // [1, 2, 'A']
	arr.pop(); arr.pop(); arr.pop(); // 连续pop 3次
	arr; // []
	arr.pop(); // 空数组继续pop不会报错，而是返回undefined
	arr; // []
	
9. unshift和shift
	如果要往Array的头部添加若干元素，使用unshift()方法，shift()方法则把Array的第一个元素删掉：
	
	var arr = [1, 2];
	arr.unshift('A', 'B'); // 返回Array新的长度: 4
	arr; // ['A', 'B', 1, 2]
	arr.shift(); // 'A'
	arr; // ['B', 1, 2]
	arr.shift(); arr.shift(); arr.shift(); // 连续shift 3次
	arr; // []
	arr.shift(); // 空数组继续shift不会报错，而是返回undefined
	arr; // []
	
	
	
	
10. 多维数组
就是字面量[]的嵌套。
	var arr = [[1, 2, 3], [400, 500, 600], '-'];
	arr[0][0]; //1
	arr[1][1]; //500






========================================
对象 Object
----------------------------------------
JavaScript的对象是一种无序的集合数据类型，它由若干键值对组成。
类似与其他语言的hash结构，关联数组等。
js中的对象用于描述现实世界中的某个对象。
定义方法：
var xiaoming = {
    name: '小明',
    birth: 1990,
    school: 'No.1 Middle School',
    height: 1.70,
    weight: 65,
    score: null
};

继续修改或定义：
xiaoming.birth=1991;//可以用点号定义 对象.属性，但是关键字除外
xiaoming['name']='xiaoming';//也可以用 对象['属性']

引用方式也是2种：
	对象.属性
	对象['属性']
	xiaoming.school;// "No.1 Middle School"
	
如果访问一个不存在的属性会返回什么呢？JavaScript规定，访问不存在的属性不报错，而是返回undefined：
	xiaoming.mother;// undefined

	
删除属性：
	delete xiaoming.age; //返回true。删除age属性
	xiaoming.age;  //undefined
	delete xiaoming.age; //还是返回true。 删除一个不存在的school属性也不会报错
	
如果我们要检测xiaoming是否拥有某一属性，可以用in操作符：
	'height' in xiaoming //true
	'age' in xiaoming	//false

不过要小心，如果in判断一个属性存在，这个属性不一定是xiaoming的，它可能是xiaoming继承得到的：
	'toString' in xiaoming; // true
因为toString定义在object对象中，而所有对象最终都会在原型链上指向object，所以xiaoming也拥有toString属性。

要判断一个属性是否是xiaoming自身拥有的，而不是继承得到的，可以用hasOwnProperty()方法：
var xiaoming = {
    name: '小明'
};
xiaoming.hasOwnProperty('name'); // true
xiaoming.hasOwnProperty('toString'); // false





========================================
第3章 js控制结构-分支：if...else结构
----------------------------------------
1. JavaScript使用if () { ... } else { ... }来进行条件判断。
	var age = 20;
	if (age >= 18) { // 如果age >= 18为true，则执行if语句块
		alert('adult');
	} else { // 否则执行else语句块
		alert('teenager');
	}
	
其中else语句是可选的。如果语句块只包含一条语句，那么可以省略{}：

	var age = 20;
	if (age >= 18)
		alert('adult');
	else
		alert('teenager');

省略{}的危险之处在于，如果后来想添加一些语句，却忘了写{}，就改变了if...else...的语义，例如：

var age = 20;
if (age >= 18)
    alert('adult');
else
    console.log('age < 18'); // 添加一行日志
    alert('teenager'); // <- 这行语句已经不在else的控制范围了

我们建议永远都要写上{}。

2. 多行条件判断
	var age = 3;
	if (age >= 18) {
		alert('adult');
	} else if (age >= 6) {
		alert('teenager');
	} else {
		alert('kid');
	}

3. 布尔值的自动转换
如果条件不是布尔值怎么办？
var s = '123';
if (s.length) { // 条件计算结果为3
    alert('我执行了。');
}
JavaScript把null、undefined、0、NaN和空字符串''视为false，其他值一概视为true，因此上述代码条件判断的结果是true。




========================================
|-- 控制结构-分支:switch...case
----------------------------------------
1.用法示例：
var day=new Date().getDay();
switch (day){
	case 0:
	  x="Today it's Sunday";
	  break;
	case 1:
	  x="Today it's Monday";
	  break;
	case 2:
	  x="Today it's Tuesday";
	  break;
	case 3:
	  x="Today it's Wednesday";
	  break;
	case 4:
	  x="Today it's Thursday";
	  break;
	case 5:
	  x="Today it's Friday";
	  break;
	case 6:
	  x="Today it's Saturday";
	  break;
}

注意要加break;


2. default 关键词

var day=new Date().getDay();
switch (day){
	case 6:
	  x="Today it's Saturday";
	  break;
	case 0:
	  x="Today it's Sunday";
	  break;
	default:
	  x="Looking forward to the Weekend";
}

========================================
|-- 控制结构-循环
----------------------------------------
1. for循环最常用
	var x = 0;
	var i;
	for (i=1; i<=100; i++) {
		x = x + i;
	}
	x; // 5050


for循环最常用的地方是利用索引来遍历数组：
	var arr = ['Apple', 'Google', 'Microsoft'];
	var i, x;
	for (i=0; i<arr.length; i++) {
		x = arr[i];
		console.log(x);
	}

2. for ... in
for循环的一个变体是for ... in循环，它可以把一个对象的所有属性依次循环出来：
	var o = {
		name: 'Jack',
		age: 20,
		city: 'Beijing'
	};
	for (var key in o) {
		alert(key); // 'name', 'age', 'city'
	}


要过滤掉对象继承的属性，用hasOwnProperty()来实现：
	var o = {
		name: 'Jack',
		age: 20,
		city: 'Beijing'
	};
	for (var key in o) {
		if (o.hasOwnProperty(key)) {
			alert(key); // 'name', 'age', 'city'
		}
	}

由于Array也是对象，而它的每个元素的索引被视为对象的属性，因此，for ... in循环可以直接循环出Array的索引：
	var a = ['A', 'B', 'C'];
	for (var i in a) {
		alert(i); // '0', '1', '2'
		alert(a[i]); // 'A', 'B', 'C'
	}
请注意，for ... in对Array的循环得到的是String而不是Number。

3.while循环只有一个判断条件，条件满足，就不断循环，条件不满足时则退出循环。比如我们要计算100以内所有奇数之和，可以用while循环实现：
	var x = 0;
	var n = 99;
	while (n > 0) {
		x = x + n;
		n = n - 2;
	}
	x; // 2500
	
在循环内部变量n不断自减，直到变为-1时，不再满足while条件，循环退出。

4. do ... while
它和while循环的唯一区别在于，不是在每次循环开始的时候判断条件，而是在每次循环完成的时候判断条件：	

var n = 0;
do {
    n = n + 1;
} while (n < 100);
n; // 100
用do { ... } while()循环要小心，循环体会至少执行1次，而for和while循环则可能一次都不执行。


小结

循环是让计算机做重复任务的有效的方法，有些时候，如果代码写得有问题，会让程序陷入“死循环”，也就是永远循环下去。JavaScript的死循环会让浏览器无法正常显示或执行当前页面的逻辑，有的浏览器会直接挂掉，有的浏览器会在一段时间后提示你强行终止JavaScript的执行，因此，要特别注意死循环的问题。

在编写循环代码时，务必小心编写初始条件和判断条件，尤其是边界值。特别注意i < 100和i <= 100是不同的判断逻辑。










========================================
第4章 js函数 (原型链、闭包；原型、模拟类OOP) 很难！
----------------------------------------
很难！原型链、闭包；模拟类

function aa(){}
var aa=function(){}



========================================
第5章 js事件处理
----------------------------------------
1.事件都是加到具体对象上
	oDiv.onclick=function(){}

2.onload事件，onunload事件
<body onload='alert("hello");' onbeforeunload='alert("bye bye");'>

3.鼠标事件  
	onmouseover:鼠标移进
	onmouseout:移出操作

4.表单事件
	onsubmit:表单提交之前，可做数据验证







========================================
第6章 js的内置对象Dom和Bom
----------------------------------------
1.alert:弹出警告等信息；
2.prompt:输入框,第一个参数是提示语句，第二个是默认值；
3.confirm:确认框,很有用：你确认要删除吗？

4.this的意义：当前对象本身，但是有很多意外解释//todo
5.with(document){write('some text');}
6.new: 创建新对象，new的时候发生了什么？

7.window
	- 当前窗口
	- 新开窗口
	- 通过本地窗口控制新开的窗口
	不过现在不常用了，因为被流氓网站用烂了。

8.location:当前地址栏的url
9.history:历史记录。用例：history.goback();
10.cookie的增删改查。



========================================
|-- 产生动画的2个函数
----------------------------------------
setTimeOut('',1000)
setInterval('',2000)



========================================
第7章 js的趣味
----------------------------------------
1.学习方法：看API、看书、做练习

趣味代码：
	- 黑客帝国
	- 鼠标跟随
	- 找相同图片
	- 漂浮的云
	- 打字效果
	- 石头剪刀布
	- 星球大战

读书进步快：都英文书
	- 看目录
	- 看例子代码
推荐的书
	- javascript programmer's reference
	- professional javascript for web developers





2.有用的内容：usefull文件夹
要做成简单的效果，满足要求并简练是最好的效果。
	-[1]ok 下拉换头像usefull->userPic.html
	-[2] 2/3级联动列表：onchange事件
	-[3] 侧边滑动式菜单:onouseover滑动出来
	-[4] 抽屉式菜单
	-[5]ok 日历效果。插件式，点击获取oop_part->calender->calender.html
		5.1梅花雨日历控件：demo失败，不能用。
	-[6] 
	模拟alert的弹出层：httphttp://www.cnblogs.com/NNUF/archive/2012/04/26/2471120.html
	延迟加载的原理：
	http://www.daxueit.com/article/3777.html
	http://www.cnblogs.com/NNUF/archive/2012/06/25/2561570.html
	
	
	
	-[7] 判断：是否为数字，是否为字符，是否为邮箱
	-[8] 树结构 treeview.js，接口简单，写着困难。






========================================
第8章 js表单验证，与ajax
----------------------------------------

0. 获取表达值的2种方法
var a=document.getElementById("user").value;    //方法１ 根据id获取
	//  user  是指：<input id='user'  name="user1" type="text" onblur="ff()"> 中的ID ~~id='user'  
var a=document.form.user1.value;　　//方法２ 根据name获取
	//  form 是指表单的名字  user1是指元素的名字即 name= ... 
#



1.常规的是判断并弹出提示；

2.更有好的方式是避免弹窗，在末尾显示<span>红色提示文字</span>；
		获得obj，在innerHTML中加入文字提示；
3.ajax

下面是一个纯js的ajax函数，及使用实例

/*封装的ajax函数
* v0.1 https://www.cnblogs.com/wang-zhang/p/9883654.html
* v0.2 添加了json类型自动转换
*/
function ajax(options){
    //创建一个ajax对象
    var xhr = new XMLHttpRequest() || new ActiveXObject("Microsoft,XMLHTTP");
    //数据的处理 {a:1,b:2} a=1&b=2;
    var str = "";
    for(var key in options.data){
        str+="&"+key+"="+options.data[key];
    }
    str = str.slice(1)
    if(options.method == "get"){
        var url = options.url+"?"+str;
        xhr.open("get",url);
        xhr.send();
    }else if(options.method == "post"){
        xhr.open("post",options.url);
        xhr.setRequestHeader("content-type","application/x-www-form-urlencoded");
        xhr.send(str)
    }
    //监听
    xhr.onreadystatechange = function(){
        //当请求成功的时候
        if(xhr.readyState == 4 && xhr.status == 200){
            var text = xhr.responseText;
			if(options.type=="json"){
				text=JSON.parse(text);
			}
            //将请求的数据传递给成功回调函数
            options.success&&options.success(text)
        }else if(xhr.status != 200){
            //当失败的时候将服务器的状态传递给失败的回调函数
            options.error&&options.error(xhr.status);
        }
    }
}
/*
ajax({
    method:"get/post",
    url:"请求的地址",
    data:{},
    success:function(text){
        console.log(text)
    },
	error: function(num){
		//
	},
	type: "json/text"
})
*/






========================================
第9章 js类库
----------------------------------------
1. jQ版的 ajax的使用

<html>
<head>
<script src="http://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.8.0.js"></script>
</head>

<body>
<div id="myDiv"><h2>Let AJAX change this text</h2></div>
<button id="b01" type="button">Change Content</button>

<script>
$(document).ready(function(){
    $("#b01").click(function(){
        $.ajax({
            url:"get.txt?time="+new Date().getTime(),
            async:true,
            success: function(data){
                $("#myDiv").html(data);
            }
        });
    });
});
</script>

</body>
</html>





2. get请求
$(document).ready(function(){
	$("#b01").click(function(){
		$.get("get2.php?name=George", function(data, status){
			console.log("Data: " + data + "<br>Status: " + status);
			if(status=="success"){
				$("#myDiv").html(data)
			}else{
				$("#myDiv").html(status)
			}
		})
	});
});





3. post请求
$(document).ready(function(){
	$("#b01").click(function(){
		$.post("post3.php", 
		{
			name:"Donald Duck",
			city:"Duckburg"
		},
		function(data, status){
			console.log("Data: " + data + "\nStatus: " + status);
			if(status=="success"){
				$("#myDiv").html(data)
			}else{
				$("#myDiv").html(status)
			}
		})
	});
});







========================================
第10章 js后台框架
----------------------------------------
1.不要求漂亮，要求清晰、好用；



========================================
第11章 调试与控制台console
----------------------------------------
chrome F12能调出控制台，选择Console标签，你就获得了一个js运行环境。

1. 控制台输出
var a=100
console.log(a)




2. 带格式的输出：前面使用%c 开头，后面定义css即可
console.log('%c box', 'color:red; font-size:50px;') 
输出带红色的字体




3. 不同格式的输出
console.log('%cThis is %ca box', 'color:blue', 'color:red; font-size:50px;') 
前面的This is是小字体蓝色，后面的a box是大字体红色;




4. 如果是一个颜色数组，想为每个元素添加自己作为背景颜色呢？
难点是数组不定长度。需要用到apply函数。

var colorSet=["#96c83a",  "#007bbb",  "#eb771f",  "#0e2b52",  "#ecaa21",  "#487433",  "#5ab7b2",  "#004e49",  "#b21d81",  "#64203e"]
var bgcolor=('background:'+colorSet.join('; |background:') ).split(' |');
console.log.apply(null, ['%c "'+colorSet.join('", %c "')].concat(bgcolor) )

// 每个颜色都有自己作为背景色
//"#96c83a",  "#007bbb",  "#eb771f",  "#0e2b52",  "#ecaa21",  "#487433",  "#5ab7b2",  "#004e49",  "#b21d81",  "#64203e



========================================
|-- js 本地存储: localStorage
----------------------------------------
1. 简介
localStorage会可以将第一次请求的数据直接存储到本地，这个相当于一个5M大小的针对于前端页面的数据库
　 ——注意：在IE8以上的IE版本才支持localStorage这个属性。localStorage属于永久性存储，如果存储内容多的话会消耗内存空间，会导致页面变卡。



2. localStorage - 没有时间限制的数据存储 
(1) 注意：存入的数据只能以字符串形式存入。
var arr=[1,2,3];
localStorage.setItem("temp",arr); //存入 参数： 1.调用的值 2.所要存入的数据 
console.log(localStorage.getItem("temp"));//输出 "1,2,3"


(2) 清空localStorage
localStorage.clear();

(3) 删除键值对
localStorage.removeItem("arr")　　



3. 提供转JOSN数据方法：

//JSON对象转JSON字符串
var obj = {"a": 1,"b": 2};
obj = JSON.stringify(obj); //转化为JSON字符串
localStorage.setItem("temp2", obj);

//JSON字符串转JSON对象
JSON.parse(localStorage.getItem("temp2")); //{a: 1, b: 2}




4. 在谷歌浏览器查看 localStorage 
F12打开控制台，选择 Application 标签，点击左边的Local Storage即可看到。
是Key-Value结构。





========================================
在JS中操作JSON
----------------------------------------
1.创建JSON对象
var json = {"name1":"value1","name2":"value2" , "name3":[1,"str",true]};
var json2 = [{"name1":"value1"},{"name2":"value2"}];


2.JSON对象转换为JSON字符串
JSON.stringify(JSON对象)


3.JSON字符串转换为JSON对象
JSON.parse(JSON字符串)


========================================
|-- string 转 json 报错: "JS eval json unexpected token :"
----------------------------------------

1. 使用 eval(stringA) 时

有时会出现json明明通过语法检查却在JS中eval时依旧出错的情况

于是就十分尴尬，怎么办…
这是由于json由{}包围导致的，解决方法由两种:

(1) 在json最外层加上[]，使json变成一个列表，eval绝对不会报错
(2) 在json最外面加上()，这是在JS端加的，而不是在后端PHP, json=eval("("+json+")");,这个方法可以避免大多数语法错误

据说 eval 不安全，尽量不用。





2. 使用 JSON.parse(stringA) 时

json 字符串 跟 javascript的对象和数组并没有什么区别。

但是有一点需要注意的是，JSON中对象的key值是必须要有引号的（js对象的key是不需要引号的，虽然也能兼容带引号的写法）。

那么，再来看下JSON.parse的用法：

JSON.parse(text[, reviver])
其中：
text:必需， 一个有效的 JSON 字符串；
reviver: 可选，一个转换结果的函数， 将为对象的每个成员调用此函数。



如上，JSON.parse()函数接收的是有效的JSON字符串，如这样：

//正确用法示例
var jsonStr = '{"name":"jsonStr", "type":"str"}'
var jsonObj = JSON.parse(jsonStr)
//输出 {name: "jsonStr", type: "str"}
那么，普通js对象格式的字符串呢？

//错误用法示例
var objStr = '{name:"objStr", type:"str"}'
var jsonObj = JSON.parse(objStr)
//SyntaxError: Unexpected token n in JSON at position 1

由于JSON.parse()接收了无效的JSON字符串，导致报错。




这时候就只能用 eval 了
eval("("+objStr+")") //{name: "objStr", type: "str"}





ref:
https://blog.csdn.net/twxwjh/article/details/109696374





========================================
----------------------------------------

========================================
----------------------------------------



========================================
----------------------------------------

========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------

########################################
first added: 2016-1-4
modify at: 2019-6-8
modify at: 2023-6-14
########################################
