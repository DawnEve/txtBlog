
node.JS学习 实战篇

当前node版本：v4.2.4 LTS(npm 3.5.3)

视频：
node+mongodb 建站攻略（一期）http://www.imooc.com/learn/75
node建站攻略(二期)——网站升级：http://www.imooc.com/learn/197
	http://www.imooc.com/video/8838
	
基础要求：有初步的nodeJS基础，有bootstrap前端框架使用经验。熟悉mongoDB。


课程须知
本课程针对从事前端开发 2～3 年，前端知识结构良好，对基础的nodejs/express等相关后端知识有所了解，但缺乏实际项目经验的中级前端工程师。

老师告诉你能学到什么？
1、express后台框架的深入使用 
2、mongodb中关联文档的设计与查询 
3、jade模板引擎的深入使用 
4、前后端数据传递与视图展现的流程 
5、借助会话与cookie进行用户识别和持久化 
6、如何利用表单做图片的上传 
7、测试框架mocha的安装及测试用例编写

经典问题：http://www.imooc.com/qadetail/24742




========================================
生成报告 | nodeJS 使用实战: 基于 node 的 GibBook 构建电子书 (2022.7.25)
----------------------------------------
https://blog.csdn.net/wangjunliang/article/details/126000902

GitBook 是一个基于 Node.js 的命令行工具，可使用 Github/Git 和 Markdown 来制作精美的电子书，GitBook 并非关于 Git 的教程。

使用GitBook制作电子书，必备两个文件：README.md和SUMMARY.md

gitbook 的基本用法非常简单，基本上就只有两步：

使用 gitbook init 初始化书籍目录，可以根据你的目录文件 SUMMARY.md 生成文件目录。
使用 gitbook build 编译书籍为静态网页，默认在 _book/。
使用 gitbook serve 本地构建并运行服务,默认访问 http://localhost:4000 实时预览.


作品展：
阿里Java规范: https://www.mapull.com/gitbook/fexa/
GitBook 帮助: https://www.mapull.com/gitbook/comscore/




1. 开静态http服务
方便预览效果

$ pwd
/data/wangjl/test

$ mkdir GitBook
$ cd /data/wangjl/test/GitBook/
$ python3 -m http.server 8002




2. 直接使用别人的 docker 镜像
https://hub.docker.com/r/billryan/gitbook/

$ docker pull billryan/gitbook

$ cd /data/wangjl/test/GitBook

# init
docker run --rm -v "$PWD:/gitbook" -p 4000:4000 billryan/gitbook gitbook init
# serve
docker run --rm -v "$PWD:/gitbook" -p 4000:4000 billryan/gitbook gitbook serve
# build
docker run --rm -v "$PWD:/gitbook" -p 4000:4000 billryan/gitbook gitbook build



查版本号
$ docker run --rm -v "$PWD:/gitbook" -p 4000:4000 billryan/gitbook gitbook serve
root@03ba3625ff6f:/gitbook# node --version
v5.12.0
root@03ba3625ff6f:/gitbook# npm --version
3.8.6
root@03ba3625ff6f:/gitbook# gitbook --version
CLI version: 2.3.0
GitBook version: 3.2.3






3. 使用环境 docker 自己组装一个(探索，可用的直接看4)
$ docker pull node

(1) 下载
$ docker run -it node bash
root@98db2ad165a3:/# node --version
v17.3.0


(2) 启动容器
命名，文件映射
$ docker run -it -d --name gitbook0 -v /data/wangjl/test/GitBook:/home/tom/GitBook node bash

$ docker exec -it gitbook0 bash
root@5b6aa4b0f56d:/# npm --version
8.3.0
root@5b6aa4b0f56d:/# node --version
v17.3.0



(3) 安装 bookdown
# npm install gitbook-cli -g

版本不对，可能是 https://github.com/GitbookIO/gitbook 四年没有开发了。
# gitbook --version
CLI version: 2.3.2
Installing GitBook 3.2.3
/usr/local/lib/node_modules/gitbook-cli/node_modules/npm/node_modules/graceful-fs/polyfills.js:287
      if (cb) cb.apply(this, arguments)
                 ^

TypeError: cb.apply is not a function
    at /usr/local/lib/node_modules/gitbook-cli/node_modules/npm/node_modules/graceful-fs/polyfills.js:287:18
    at FSReqCallback.oncomplete (node:fs:199:5)


$ docker stop gitbook
$ docker rm gitbook
$ docker rmi node



(4) 查 bookdown 的版本号
# gitbook ls-remote
Available GitBook Versions:

     4.0.0-alpha.6, 4.0.0-alpha.5, 4.0.0-alpha.4, 4.0.0-alpha.3, 4.0.0-alpha.2, 4.0.0-alpha.1, 3.2.3, 3.2.2, 3.2.1, 3.2.0, 3.2.0-pre.1, 3.2.0-pre.0, 3.1.1, 3.1.0, 3.0.3, 3.0.2, 3.0.1, 3.0.0, 3.0.0-pre.15, 3.0.0-pre.14, 3.0.0-pre.13, 3.0.0-pre.12, 3.0.0-pre.11, 3.0.0-pre.10, 3.0.0-pre.9, 3.0.0-pre.8, 3.0.0-pre.7, 3.0.0-pre.6, 3.0.0-pre.5, 3.0.0-pre.4, 3.0.0-pre.3, 3.0.0-pre.2, 3.0.0-pre.1, 2.6.9, 2.6.8, 2.6.7, 2.6.6, 2.6.5, 2.6.4, 2.6.3, 2.6.2, 2.6.1, 2.6.0, 2.5.2, 2.5.1, 2.5.0, 2.5.0-beta.7, 2.5.0-beta.6, 2.5.0-beta.5, 2.5.0-beta.4, 2.5.0-beta.3, 2.5.0-beta.2, 2.5.0-beta.1, 2.4.3, 2.4.2, 2.4.1, 2.4.0, 2.3.3, 2.3.2, 2.3.1, 2.3.0, 2.2.0, 2.1.0, 2.0.4, 2.0.3, 2.0.2, 2.0.1, 2.0.0, 2.0.0-beta.5, 2.0.0-beta.4, 2.0.0-beta.3, 2.0.0-beta.2, 2.0.0-beta.1, 2.0.0-alpha.9, 2.0.0-alpha.8, 2.0.0-alpha.7, 2.0.0-alpha.6, 2.0.0-alpha.5, 2.0.0-alpha.4, 2.0.0-alpha.3, 2.0.0-alpha.2, 2.0.0-alpha.1

Tags:

     latest : 2.6.9
     pre : 4.0.0-alpha.6


if(0){
卸载新版本:
# gitbook uninstall 3.2.3
GitBook 3.2.3 has been uninstalled.
## 安装老版本:
# gitbook fetch 3.0.0
GitBook 3.0.0 has been installed
## 还是报错
# gitbook init
Error loading version latest: SyntaxError: Unexpected token [
    at exports.runInThisContext (vm.js:53:16)
    at Module._compile (module.js:413:25)
...
}



(5) 修改 node 的版本
保持 gitbook 最新版 3.2.3，调整node版本号。

npm cache clean -f
npm install -g n
n 12.22.3
## n stable
## ln -sf /usr/local/n/versions/node/8.0.0/bin/node /usr/bin/node


测试其他版本
# n 6.0.0
# gitbook --version
CLI version: 2.3.2
GitBook version: 3.2.3


# gitbook init
warn: no summary file in this book 
info: create README.md 
info: create SUMMARY.md 
info: initialization is finished 

# gitbook build

经过测试，node 13.12.0 是最后一个支持的 gitbook 3.2.3 的版本
# n 13.12.0 
# gitbook init








4. 使用版本 node 13.12.0
https://blog.51cto.com/u_15127599/3304424

下载镜像
$ docker pull node:13.12.0

启动容器
$ docker run -it -d --name gitbook -p 8895:8001 -v /data/wangjl/test/GitBook:/home/tom/GitBook node:13.12.0 bash
	

进入容器
$ docker exec -it gitbook bash
root@628ad6f6f632:/# node --version
v13.12.0
root@628ad6f6f632:/# npm --version
6.14.4


安装app
# npm install gitbook-cli -g

查看app版本号
# gitbook --version
CLI version: 2.3.2
Installing GitBook 3.2.3
GitBook version: 3.2.3

构建书
# cd /home/tom/GitBook/
初始化
# gitbook init
info: create SUMMARY.md 
info: initialization is finished

编辑书
# cat >> README.md 
this is a test
# header1  
## header2
```
var a=3;
```
^C

构建
# gitbook build

gitbook build [当前路径] [输出路径]
gitbook build ./ doc # 默认打包输出到当前路径下面的 doc 文件夹中

可用从浏览器预览了，通过宿主机开启的http服务。
gitbook serve 默认使用 4000 端口访问。



(2) 添加用户
$ id #宿主机查询自己的uid
uid=1001(wangjl) gid=1001(wangjl) groups=1001(wangjl),1004(docker) 
容器内添加相同uid的用户:
# useradd -s /bin/bash -d /home/tom  -m tom -u 1001
# passwd tom
# chown -R tom:tom /home/tom
# su tom
$ cd ~/GitBook   #now /home/tom/GitBook

此时，可以在宿主机编辑 md 文件了。

(3) 提交为新镜像
$ docker ps
CONTAINER ID   IMAGE                   COMMAND                  CREATED          STATUS          PORTS                                         NAMES
2d938d0f926a   node:13.12.0            "docker-entrypoint.s."   11 minutes ago   Up 11 minutes   0.0.0.0:8895->8001/tcp, :::8895->8001/tcp     gitbook

$ docker commit 2d93 dawneve/gitbook:3.2.3

$ docker images
REPOSITORY                   TAG        IMAGE ID       CREATED         SIZE
dawneve/gitbook              3.2.3      2bd76651845a   7 seconds ago   1.18GB
node                         13.12.0    c31fbeb964cc   2 years ago     943MB
billryan/gitbook             latest     e26d874c0165   4 years ago     1.34GB


发送到远端仓库
$ docker push dawneve/gitbook:3.2.3

检查: https://hub.docker.com/u/dawneve



(4) 优势劣势分析？
虽然体积小了一点，但是无法当主机命令使用，只能进入环境内部执行命令。

不确定怎么实现:
	获取当前用户 uid? 貌似不可实现。
		目前需要手动修改所有者才能编辑: $ sudo chown -R wangjl * 
		貌似可以通过 Dockerfile 二次构建!
	在容器内部把文件执行地址改动到 /gitbook 目录，并执行初始化等命令?
		WORKDIR /docs  https://github.com/humangeo/gitbook-docker/blob/develop/Dockerfile
		ENTRYPOINT ["gitbook"]
		



算了，还是使用别人构建的docker镜像吧: billryan/gitbook
$ docker run --rm -v "$PWD:/gitbook" -p 4000:4000 billryan/gitbook gitbook init
Dockerfile: https://github.com/billryan/docker-gitbook/blob/master/Dockerfile



(5) How to use this image: gitbook?
$ docker pull dawneve/gitbook:3.2.3
$ docker images
dawneve/gitbook              3.2.3      2bd76651845a   24 hours ago    1.18GB

启动容器，容器内默认使用 4000 端口。可选项--rm，停止就删除。
$ docker run -it -d --name gitbook2 --rm -p 8896:4000 -v /data/wangjl/test/GitBook:/home/tom/GitBook dawneve/gitbook:3.2.3 bash
$ docker exec -it gitbook2 bash
# cd /home/tom/GitBook/


查询宿主机的uid
$ id #check your uid on host
uid=1001(wangjl) gid=1001(wangjl) groups=1001(wangjl),1004(docker) 

修改容器内用户的uid
Change the uid of user tom in containner to your id on the host, shown above.
# usermod -u 1001 tom

修改文件的权限
# chown -R tom *


开始启动web服务
# gitbook serve
Serving book on http://localhost:4000

这时，可以在宿主机上修改内容并查看效果。
等一切满意，就可以执行生成命令了。
# gitbook build




===> 如果是代码生成的md文件，想生成html文件，还可以尝试一次性构建:
$ docker run --rm -v "$PWD:/home/tom/GitBook" -p 4000:4000 dawneve/gitbook:3.2.3 bash -c "cd /home/tom/GitBook && gitbook build && usermod -u `id -u $USER` tom && chown -R tom _book"
主要的过程:
	* 开启容器，进入文件夹
	* 构建 
	* 修改容器用户tom的uid为当前宿主机用户的uid
	* 修改文件夹_book 的所有者为当前用户，忽视分组。


小结: gitbook cli 这个系统很适合作为 测序分析的报告。












5. 文件格式要求
优秀作品: https://algorithm.yuanbin.me/zh-hans/

(1) 创建目录文件 SUMMARY.md
参考: https://github.com/billryan/blog/blob/master/SUMMARY.md?plain=1
https://blog.csdn.net/qq_28077405/article/details/121038446

* [Chapter1](chapter1/README.md)
  * [Section1.1](chapter1/section1.1.md)
  * [Section1.2](chapter1/section1.2.md)
* [Chapter2](chapter2/README.md)
  * [Section2.1](chapter2/section2.1.md)
  * [Section2.2](chapter2/section2.2.md)


我的版本:
$ vim SUMMARY.md
* [简介](README.md)

-----
* [1 QC](chapter1/ReadMe.md)
	* [file size](chapter1/01_filesize.md)
	* [FastQC](chapter1/02_fastQC.md)

-----
* [2 Mapping](chapter2/ReadMe.md)
    * [QC](chapter2/01.md)
    * [Coverage](chapter2/02.md)
    * [mapping](chapter2/03.md)

(2) 基于目录文件初始化出目录结构
$ docker run --rm -v "$PWD:/gitbook" -p 4000:4000 billryan/gitbook gitbook init
$ sudo chown -R wangjl *

(3) 编辑这些md文件
https://my.oschina.net/snowdreams1006/blog/3031933?hmsr=kaifa_aladdin

怎么插入图片?
$ R -e 'png("a1.png", width=72*4, height=72*5);plot(c(1)); dev.off()'
$ R -e 'png("a2.png", width=72*4, height=72*5);plot(1:10, col="red", type="o"); dev.off()'
$ mkdir chapter1/images
$ mv a2.png chapter1/images/

编辑文字
$ vim README.md
# 简介

# code and figure in main

```
png("a1.png", width=72*4, height=72*5);
plot(c(1)); 
dev.off()
```

![xx](a1.png)

编辑文字
$ vim chapter1/ReadMe.md
# figure2
![xx](images/a2.png)


(4) 构建
$ docker run --rm -v "$PWD:/gitbook" -p 4000:4000 billryan/gitbook gitbook build








6. 配置文件 book.json
https://www.jianshu.com/p/4b78e48b9359
https://github.com/GitbookIO/gitbook/blob/master/docs/config.md

$ touch book.json
编辑内容:
{
    "title": "GitBook简明教程",
    "author": "Tom",
    "description": "GitBook的安装，gitbook-editor的安装及简单使用",
    "language": "zh-hans",
    "gitbook": "3.2.3",
    "styles": {
        "website": "./styles/website.css",
        "ebook": "./styles/ebook.css",
        "pdf": "./styles/pdf.css",
        "mobi": "./styles/mobi.css",
        "epub": "./styles/epub.css"
   },
    "structure": {
        "readme": "README.md"
    },
    "links": {
        "sidebar": {
            "GitBook简明教程": "https://www.chengweiyang.cn/gitbook/",
            "算法笔记": "https://algorithm.yuanbin.me/zh-hans/"
        }
    },
    "plugins": [
        "-sharing",
        "splitter",
        "expandable-chapters-small",
        "anchors",
        "github",
        "github-buttons",
        "donate",
        "sharing-plus",
        "anchor-navigation-ex",
        "favicon",
        "code"
    ],
    "pluginsConfig": {
       "code": {
            "copyButtons": false
          },
        "github": {
            "url": "https://github.com/JackYang3567"
        },
        "github-buttons": {
            "buttons": [{
                "user": "JackYang",
                "repo": "glory",
                "type": "star",
                "size": "small",
                "count": true
                }
            ]
        },
        "donate": {
              
                    "wechat": "./src/img/微信打赏二维码.jpg",
                    "alipay": "./src/img/支付宝打赏二维码.jpg",
                    "title": "",
                    "button": "赞赏",
                    "alipayText": "支付宝打赏",
                    "wechatText": "微信打赏" 
           },
        "sharing": {
            "douban": false,
            "facebook": false,
            "google": false,
            "hatenaBookmark": false,
            "instapaper": false,
            "line": false,
            "linkedin": false,
            "messenger": false,
            "pocket": false,
            "qq": false,
            "qzone": false,
            "stumbleupon": false,
            "twitter": false,
            "viber": false,
            "vk": false,
            "weibo": false,
            "whatsapp": false,
            "all": [
                "google", "facebook", "weibo", "twitter",
                "qq", "qzone", "linkedin", "pocket"
            ]
        },
        "anchor-navigation-ex": {
            "showLevel": false
        },
        "favicon":{
            "shortcut": "./src/img/favicon.jpg",
            "bookmark": "./src/img/favicon.jpg",
            "appleTouch": "./src/img/apple-touch-icon.jpg",
            "appleTouchMore": {
                "120x120": "./src/img/apple-touch-icon.jpg",
                "180x180": "./src/img/apple-touch-icon.jpg"
            }
        }
    } 
}


(2) 插件
https://www.bbsmax.com/A/mo5kkXN35w/

gitbook 默认自带5个插件,分别是:
	highlight 语法高亮插件
	search 搜索插件
	sharing 分享插件
	font-settings 字体设置插件
	livereload 热加载插件

示例:
"plugins": [
    "github",
    "pageview-count",
    "mermaid-gb3",
    "-lunr",
    "-search",
    "search-plus",
    "splitter",
    "-sharing",
    "sharing-plus",
    "expandable-chapters-small",
    "anchor-navigation-ex",
    "edit-link",
    "copy-code-button",
    "chart",
    "favicon-plus",
    "donate"
]


ref:
https://my.oschina.net/snowdreams1006/blog/3031933?hmsr=kaifa_aladdin
https://colobu.com/2014/10/09/gitbook-quickstart/
https://www.mapull.com/gitbook/comscore/
gitbook 开始商业化，已经放弃命令行工具开发了 https://www.zhihu.com/question/271881476/answer/372414329





========================================
制作文档 | docsify 预览 markdown 文档(不能生成静态站)
----------------------------------------
https://docsify.js.org/#/?id=docsify
https://blog.csdn.net/wangjunliang/article/details/126008444

docsify 是一个markdown文档预览利器，它不生成html文件，避免了对代码库的“污染”。

特别适合做技术文档的wiki笔记。方便积累和查找。
官网 https://docsify.js.org/
为了方便调用，不污染全局环境，包装成了Docker镜像。



1. 尝试

下载镜像
$ docker pull node

开启容器
$ mkdir ../docsify && cd ../docsify/
$ docker run -it -d --name docsify -p 8003:3000 -v /data/wangjl/test/docsify:/home/tom/docsify node bash
$ docker exec -it docsify bash
root@ce05b2382081:/# node --version
v17.3.0
root@ce05b2382081:/# npm --version
8.3.0


安装app
# npm install docsify-cli -g
太慢，使用国内源
# npm install docsify-cli -g --registry=https://registry.npm.taobao.org
# docsify --version

docsify-cli version:
  4.4.4

# npm install -g cnpm --registry=https://registry.npm.taobao.org #没测试


初始化
# cd /home/tom/docsify/
# docsify init docs #也可以使用 docsify init .
检查
# ls -ltha docs/
total 16K
drwxr-xr-x 2 root root 4.0K Jul 25 07:37 .
drwxrwxr-x 3 1001 1001 4.0K Jul 25 07:37 ..
-rw-r--r-- 1 root root  604 Jul 25 07:37 index.html #入口文件
-rw-r--r-- 1 root root   34 Jul 25 07:34 README.md #会做为主页内容渲染
-rw-r--r-- 1 root root    0 Jul 25 07:34 .nojekyll #用于阻止 GitHub Pages 会忽略掉下划线开头的文件


开启本地预览：
# docsify serve docs
暂停 ctrl+C，接下来修改权限，方便修改。


(2) 添加用户
$ id #宿主机查询自己的uid
uid=1001(wangjl) gid=1001(wangjl) groups=1001(wangjl),1004(docker) 
容器内添加相同uid的用户:
# useradd -s /bin/bash -d /home/tom  -m tom -u 1001
# passwd tom
# chown -R tom:tom /home/tom

# docsify serve docs
此时，可以在宿主机编辑 md 文件了。





2. 文档格式
(1) 多个页面 guide.md
-| 
./ 
-| README.md 
-| guide.md 
-| zh-cn/ 
-| README.md 
-| guide.md

./README.md => http://domain.com 
./guide.md => http://domain.com/#/guide 
./zh-cn/README.md => http://domain.com/#/zh-cn/ 
./zh-cn/guide.md => http://domain.com/#/zh-cn/guide


http://192.168.2.120:8003/#/guide.md


(2) 侧边栏怎么自动生成？
<script> window.$docsify = { loadSidebar: true } </script> 

_sidebar.md文件，内容格式如下：

* [home1](home1)
* [home2](home2)
* [bar](bar/)
* [bar/a](bar/a)
* [README](README)
	* [guide](guide)


如果只在根目录有一个_sidebar.md文件，那么所有页面都将使用这个一个配置，也就是所有页面的侧边栏都一样。

如果一个子目录中有_sidebar.md文件，那么这个子目录下的所有页面将使用这个文件的侧边栏。

_sidebar.md的加载逻辑是从每层目录下获取文件，如果当前目录不存在该文件则回退到上一级目录。例如当前路径为/zh-cn/more-pages则从/zh-cn/_sidebar.md获取文件，如果不存在则从/_sidebar.md获取。



显示页面目录(当前页面的标题)
<script>
  window.$docsify = {
    loadSidebar: true,
    subMaxLevel: 3
  }
</script>




3. 导航链接
如果导航的链接少，则可以直接在index.html文件直接定义导航栏，要注意链接要以#/开头：

<body>
  <nav>
    <a href="#/">项目</a>
    <a href="#/home1">home1</a>
    <a href="#/bar/a">bar/a</a>
  </nav>
</body>



(2) 通过配置文件定义导航栏
首先需要在index.html文件中的window.$docsify添加loadNavbar: true,选项：

<script>
  window.$docsify = {
    loadNavbar: true
  }
</script>


接着在项目根目录创建_navbar.md文件，内容格式如下：

* [home1](home1)
* [home2](home2)
* [bar](bar/)
* [bar/a](bar/a)
* 帮助
	* [README](README)
	* [guide](guide)


(3) 导航栏嵌套
如果导航内容过多，可以写成嵌套的列表，会被渲染成下拉列表的形式：

* 根目录
	* [home1](home1)
	* [home2](home2)
	* [guide](guide)
* bar目录
	* [bar](bar/)
	* [a文件](bar/a)
	* [b文件](bar/b)
* foo目录
	* [one](foo/one)



4. 封面
docsify默认是没有封面的，默认有个首页./README.md。 通过设置coverpage参数，可以开启渲染封面的功能。

首先需要在index.html文件中的window.$docsify添加coverpage: true选项：

<script>
  window.$docsify = {
    coverpage: true
  }
</script>


接着在项目根目录创建_coverpage.md文件，内容格式如下：

![logo](_media/icon.svg)
# 我的文档网站
## 个人文档网站
> 一个神奇的文档网站生成巩固
* Simple and lightweight (~12kb gzipped)
* Multiple themes
* Not build static html files

[GitHub](https://github.com/docsifyjs/docsify/)
[Get Started](/quick-start)



5. 本地化资源
更改htmlcss和js为本地文件链接，即可解决无外网状况下一直loading……的问题。
$ vim index.html
<link rel="stylesheet" href="static/vue.css">

<script src="static/docsify.min.js"></script>


下载: https://github.com/Vonng/ddia/tree/master/js




5. 优缺点分析
不能生成静态站点。






6. 提交为新镜像
$ docker ps
CONTAINER ID   IMAGE                   COMMAND                  CREATED             STATUS             PORTS                                         NAMES
a0a96ab4205e   node                    "docker-entrypoint.s."   About an hour ago   Up About an hour   0.0.0.0:8003->3000/tcp, :::8003->3000/tcp     docsify

$ docker commit a0a96 dawneve/docsify:4.4.4

$ docker images
REPOSITORY                   TAG        IMAGE ID       CREATED         SIZE
dawneve/docsify              4.4.4      ca066bdbcb14   5 seconds ago   1.02GB

发送到远端仓库
$ docker push dawneve/docsify:4.4.4
检查:
https://hub.docker.com/u/dawneve






7. 使用镜像 on Y station: learn Cpp

(1) Start the environment in Docker

```
$ docker pull dawneve/docsify:4.4.4

$ docker run -it -d --name docsify -p 8003:3000 -v /home/wangjl/data/project/learnCpp:/home/docsify/learnCpp dawneve/docsify:4.4.4 bash
$ docker exec -it docsify bash

Init the docs
# cd /home/docsify/learnCpp
# docsify init docs
yes.

Start the server on port 3000:
# docsify serve docs

Browser on host:
http://192.168.2.120:8003/#/
```

(2) add new user in containner

```
$ id #check your uid on host
uid=1001(wangjl) gid=1001(wangjl) groups=1001(wangjl),1004(docker) 

Change the uid of user tom in containner to your id on the host, shown above.
# usermod -u 1001 tom

if(0){
I added user when making this image:
# useradd -s /bin/bash -d /home/docsify  -m docsify -u 1001
# passwd docsify
# chown -R docsify /home/docsify
}

Change owner of these files in the containner
# chown -R tom *

Then we can edit md files on the host with VIM or other text editer like vsCode through ssh.

Start the server on port 3000/ host 8003
# docsify serve docs
```


(3) editing while view

侧边栏
```
$ cd docs/
$ vim index.html
<script> window.$docsify = { loadSidebar: true } </script> 

$ vim _sidebar.md
* [Chapter 0 Preface](A0/1_readme.md)
* [Chapter 1 Basics](A1/1_readme.md)
* [Chapter 2 Class](A2/1_readme.md)
```


记录地址: https://github.com/DawnEve/learnCpp



ref:
https://zhuanlan.zhihu.com/p/67266483
https://github.com/qufei1993/Nodejs-Roadmap
https://itx-man.github.io/2020/05/19/docsify/

https://zhuanlan.zhihu.com/p/466397022 忽视副标题
https://jingping-ye.github.io/docsify-docs-zh/#/ 中文文档






========================================
进程管理 | PM2 是开源的基于 Nodejs 的应用进程管理器，包括守护进程，监控，日志的一整套完整的功能
----------------------------------------
1. PM2 是啥？

http://pm2.io/
https://pm2.keymetrics.io/

PM2是常用的node进程管理工具，它可以提供node.js应用管理，如自动重载、性能监控、负载均衡等。同类工具有Supervisor、Forever等。

PM2 是一款非常优秀的 Node 进程管理工具，它有着丰富的特性：能够充分利用多核 CPU且能够负载均衡、能够帮助应用在崩溃后、指定时间(cluster model)和超出最大内存限制等情况下实现自动重启。



(2) 主要特性
	内建负载均衡（使用node cluster集群模块，可以使用服务器上的所有cpu）
	后台运行（node app.js 这种命令是直接在前台运行的，不稳定，很容易断）
	0秒停机重载（应该是上线升级的时候 不需要停机）
	停止不稳定的进程（避免无限循环）
	控制台检测





2. 安装
(1) 安装
sudo apt-get update
sudo apt-get install nodejs npm

$ node --version #之前安装过了
v14.16.1

$ npm install pm2 -g

查看版本：
$ pm2 --version
5.3.1


如果报错：
If you find errors like SSL Error: CERT_UNTRUSTED while using npm command, you can bypass the ssl error using:
	$ npm config set strict-ssl false
or set the registry URL from https:// to http://:
	$ npm config set registry="http://registry.npmjs.org/"


(2) 更新 $ pm2 updated
$ pm2 save # 记得保存进程状态
$ npm install pm2 -g
$ pm2 update






3. 常用命令
(1)启动程序: 
	pm2 start app.js
	pm2 start index.js

	设置别名:
	pm2 start app.js --name demo

	Load Balance 4 instances of api.js: 负载均衡4个实例
	$ pm2 start api.js -i 4


参数说明：
	--watch：监听应用目录的变化，一旦发生变化，自动重启。如果要精确监听、不见听的目录，最好通过配置文件。
	-i --instances：启用多少个实例，可用于负载均衡。如果-i 0或者-i max，则根据当前机器核数确定实例数目。
	--ignore-watch：排除监听的目录/文件，可以是特定的文件名，也可以是正则。比如--ignore-watch="test node_modules "some scripts""
	-n --name：应用的名称。查看应用信息的时候可以用到。
	-o --output <path>：标准输出日志文件的路径。
	-e --error <path>：错误输出日志文件的路径。
	--interpreter <interpreter>：the interpreter pm2 should use for executing app (bash, python...)。比如你用的coffee script来编写应用。

内存使用超过上限自动重启
	如果想要你的应用，在超过使用内存上限后自动重启，那么可以加上--max-memory-restart参数。（有对应的配置项）
	pm2 start big-array.js --max-memory-restart 20M

监听代码变化/自动重启
	pm2 start app.js --watch


(2)显示所有进程状态
	pm2 list

查看每个应用占用情况
	pm2 monit

基于web的仪表盘: 需要账号，可能GFW打不开
	$ pm2 plus

(3)停止程序:
	pm2 stop [AppName]
	pm2 stop [ID]
	pm2 stop all  #关闭所有的进程


重新启动：
	pm2 restart all
	
	pm2 reload all  #重新启动所有进程，始终保持至少一个进程在运行
	pm2 reload app.js #


删除程序：则 pm2 不在管理这些程序
	pm2 delete [AppName]
	pm2 delete [ID]
	pm2 delete all


查看日志：
	pm2 logs
	pm2 logs [Name] 
	pm2 logs [ID]


显示应用程序所有信息
	pm2 show [Name]
	pm2 show [ID]
	
	pm2 describe app_name|app_id


生成示例配置文件
	pm2 ecosystem
	或
	pm2 init






ref:
https://blog.csdn.net/sunyctf/article/details/130655852
https://blog.csdn.net/lemon_TT/article/details/130018781


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------



anatomy	英[əˈnætəmi] 美[əˈnætəmi]
n.	解剖，分解，分析; （详细的） 剖析; （生物体的） 解剖结构; 骨骼;

