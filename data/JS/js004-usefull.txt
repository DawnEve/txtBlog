好用的js代码片段





========================================
好用的手写js代码汇总
----------------------------------------

死磕 36 个 JS 手写题（搞懂后，提升真的大）
https://juejin.cn/post/6946022649768181774#heading-45






========================================
隐藏网页中的所有图片
----------------------------------------
var imgs = document.getElementsByTagName("img");//所有的图片集合
for(var i=0;i<imgs.length;i++){
	imgs[i].setAttribute('style','display:none');//第一张隐藏
	//imgs[imgs.length-17].setAttribute('display','none');//倒数第17张隐藏
}








========================================
对于ul.li按照其中的span标签内的值排序
----------------------------------------
### html 微信文章列表。 ul.li中第一个span是日期，第二个span是阅读数。
<ul>
<li><span>2019-06-26 09:16:36</span> <span title='阅读数'>[15]</span> <a target='_blank' href='https://mp.weixin.qq.com/s?__biz=MzI0NDcxNzc5Mg==&mid=2247486638&idx=1&sn=b7189e05a0332ba5a23b5492c15912ac&chksm=e958cd21de2f4437e7b072a55eacb285b6ae430c78e892f2ea96b83bdb9fdb64b30c7368358f#rd'>economist | Child-safe internet: Kids aren't alright</a></li>
<li><span>2019-06-25 06:00:00</span> <span title='阅读数'>[23]</span> <a target='_blank' href='https://mp.weixin.qq.com/s?__biz=MzI0NDcxNzc5Mg==&mid=2247486633&idx=1&sn=59c2b9d629a6b469ab6a727017e2b7b5&chksm=e958cd26de2f4430cf9f351232ee8db890904a15e7b59419bf95a765770b516fc5e45111f97f#rd'>science|What big ideas will shape U.S. science over the next ...</a></li>
</ul>


### js code
function sortByRead(){
	var oUl=document.getElementsByTagName('ul')[0];
	var aList = oUl.getElementsByTagName("li");
	var aSpan;
	
	var arr = [];
	var len = aList.length;

	for(var i=0;i<len;i++){
		aSpan =aList[i].getElementsByTagName("span");
		strs=aSpan[1].innerHTML
		//
		aList[i].id=strs.substr(1,strs.length-2)
		arr.push(aList[i]);
	};

	arr.sort(function(a,b){
		return b.id - a.id;
	});
	//console.log(arr);

	oUl.innerHTML=""
	for(i=0;i<len;i++){
		oUl.append(arr[i])
	}
};

sortByRead();



========================================
通过js下载csv文件(用js把TCGA的json数据输出成csv格式)
----------------------------------------
<html>
<head></head>

<body>
<script>
//来自TCGA的XHR截获的示例数据
CD33=[{"uniqueSampleKey":"VENHQS0zQy1BQUFVLTAxOmJyY2FfdGNnYQ","uniquePatientKey":"VENHQS0zQy1BQUFVOmJyY2FfdGNnYQ","entrezGeneId":945,"molecularProfileId":"brca_tcga_rna_seq_v2_mrna","sampleId":"TCGA-3C-AAAU-01","patientId":"TCGA-3C-AAAU","studyId":"brca_tcga","value":26.1941},{"uniqueSampleKey":"VENHQS0zQy1BQUxJLTAxOmJyY2FfdGNnYQ","uniquePatientKey":"VENHQS0zQy1BQUxJOmJyY2FfdGNnYQ","entrezGeneId":945,"molecularProfileId":"brca_tcga_rna_seq_v2_mrna","sampleId":"TCGA-3C-AALI-01","patientId":"TCGA-3C-AALI","studyId":"brca_tcga","value":73.9532}]

CSF1=[{"uniqueSampleKey":"VENHQS0zQy1BQUFVLTAxOmJyY2FfdGNnYQ","uniquePatientKey":"VENHQS0zQy1BQUFVOmJyY2FfdGNnYQ","entrezGeneId":1435,"molecularProfileId":"brca_tcga_rna_seq_v2_mrna","sampleId":"TCGA-3C-AAAU-01","patientId":"TCGA-3C-AAAU","studyId":"brca_tcga","value":395.6683},{"uniqueSampleKey":"VENHQS0zQy1BQUxJLTAxOmJyY2FfdGNnYQ","uniquePatientKey":"VENHQS0zQy1BQUxJOmJyY2FfdGNnYQ","entrezGeneId":1435,"molecularProfileId":"brca_tcga_rna_seq_v2_mrna","sampleId":"TCGA-3C-AALI-01","patientId":"TCGA-3C-AALI","studyId":"brca_tcga","value":491.5715}]

//console.log(CD33.length, CSF1.length)

//稍作整理
var bb={}; 

for(i=0;i < CD33.length;i+=1){
	//bb.push( aa[i].value )
	if(CD33[i].patientId==CSF1[i].patientId)
		bb[CD33[i].patientId]=[CD33[i].value,CSF1[i].value,]
}


//导出为CSV
function exportCsv(obj){	 
	 var str=[]
	 str.push(['patientId','CD33','CSF1'].join(",") + "\n");//关键句式
	 
	 for(i in obj){
		tmp=obj[i]
		str.push([i,tmp[0],tmp[1]].join(",") + "\n");
	 }
	 
	 //编码字符串，添加下载链接
	 var uri = 'data:text/csv;charset=utf-8,' + encodeURIComponent(str.join(""));  
	 var downloadLink = document.createElement("a");
	 downloadLink.href = uri;
	 downloadLink.download = "export2.csv"; 
	 document.body.appendChild(downloadLink);
	 downloadLink.click();
	 document.body.removeChild(downloadLink); 
}
//执行函数
exportCsv(bb)
</script>

<h1>Download CSV via JS</h1>
接下来就可以用R来分析CSV数据了。
</body>
</html>



========================================
快速构建dom的js工具函数 createElement(tag, json, innerHTML)
----------------------------------------

/** 返回创建的dom元素
* 只有第一个参数是必须的。
* 其余2个参数可选。
*/
function createElement(tag, json, innerHTML){
	var json=json||{};
	var dom=document.createElement(tag);
	
	if(json!=undefined){
		for(var key in json){
			dom.setAttribute(key,json[key]);
		}
	}
	
	if(innerHTML!=undefined){
		dom.innerHTML=innerHTML;
	}
	return dom;
}




========================================
颜色格式及转换( hex, rgb, hsl )
----------------------------------------
官方颜色: https://www.w3schools.com/colors/colors_picker.asp



1. 颜色格式简介
https://www.codeproject.com/Articles/19045/Manipulating-colors-in-NET-Part-1#rgb2

比如红色
color: #ff0000; #hex
color: rgb(255,0,0); #rgb
color: hsl(0,100%, 50%); #hsl



grad2.addColorStop( 0, 'hsla(340, 80%, 50%, 1)' );
grad2.addColorStop( 1, 'hsla(340, 0%, 0%, 0)' );
ctx.globalCompositeOperation = 'color';
ctx.fillStyle = grad2;
ctx.fillRect( 0, 0, w, h );



2. 颜色格式转换
转换包: https://www.w3schools.com/lib/w3color.js


/**(1)
 * hex 颜色值转换为 rgb.
 */
function hex2rgb(hex){
	hex=hex.substring(1); //去掉最前面的#号
	// 必须6位
	if(hex.length!=6){
		return false;
	}
	var r=parseInt("0x"+hex.substring(0,2) )
	var g=parseInt("0x"+hex.substring(2,4) )
	var b=parseInt("0x"+hex.substring(4,6) )
	//
	return [r,g,b];
}



/**(2)
 * RGB 颜色值转换为 HSL.
 * 转换公式参考自 http://en.wikipedia.org/wiki/HSL_color_space.
 * r, g, 和 b 需要在 [0, 255] 范围内
 * 返回的 h在[0,360之间], s, 和 l 在 [0, 1] 之间(后面需要加%)
 *
 * @param   Number  r       红色色值
 * @param   Number  g       绿色色值
 * @param   Number  b       蓝色色值
 * @return  Array           HSL各值数组
 */
function rgb2hsl(r, g, b) {
    r /= 255, g /= 255, b /= 255;
    var max = Math.max(r, g, b), min = Math.min(r, g, b);
    var h, s, l = (max + min) / 2;

    if (max == min){ 
        h = s = 0; // achromatic
    } else {
        var d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        switch(max) {
            case r: h = (g - b) / d + (g < b ? 6 : 0); break;
            case g: h = (b - r) / d + 2; break;
            case b: h = (r - g) / d + 4; break;
        }
        h /= 6;
    }
    return [h*360, s, l];
}
/*
H指Hue(色调)。 0(或360)表示红色，120表示绿色，240表示蓝色，当然可取其他数值来确定其它颜色；
S指Saturation(饱和度)。 取值为0%到100%之间的值；
L指Lightness(亮度)。 取值为0%到100%之间的值；
*/


/**(3)
*/
function hex2hsl(hex){
	var rgb=hex2rgb(hex);
	return rgb2hsl(rgb[0], rgb[1], rgb[2])
}



/**(4) 
* input: h:[0,360], s,l : [0, 1]
* output: rgb array, [0,255]
* ref: https://www.rapidtables.com/convert/color/hsl-to-rgb.html
*/
function hsl2rgb(hsl){
	var h=hsl[0], s=hsl[1], l=hsl[2];
	var c=(1-Math.abs(2*l -1))*s;
	var x=c*(1- Math.abs( (h/60) % 2 -1 ) );
	var m=l-c/2;
	var r=0, g=0, b=0;
	if(h<60){r=c;g=x;
	}else if(h<120){r=x;g=c;
	}else if(h<180){    g=c;b=x;
	}else if(h<240){    g=x;b=c;
	}else if(h<300){r=x;    b=c;
	}else if(h<360){r=c;    b=x;
	}else{return false;}
	
	return([(r+m)*255, (g+m)*255, (b+m)*255])
}
//hsl2rgb([0,1,0.5]) # [255, 0, 0]
//hsl2rgb([120,1,0.5]) #[0, 255, 0]
//hsl2rgb([240,1,0.5]) #[0,0,255]


/**(5)
* input: rgb array [0,255]: [255,0,0]
* ouput: #FF0000
* ref: https://www.cnblogs.com/gossip/p/6058158.html
*/
function rgb2hex(rgb){
	var r=rgb[0], g=rgb[1], b=rgb[2]; 
	var hex = "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
	return(hex)
}



/**(6)
* input: [120, 1, 0.5]
* ouput: #00FF00
*/
function hsl2hex(hsl){
	var rgb=hsl2rgb(hsl);
	return(rgb2hex(rgb));
}



//另一种实现方式
//https://www.icode9.com/content-1-456728.html
/**
* input [h,s,l]，其中h[0,360], s和l[0,1]
* output: [r,g,b] [0,255]
*/
function hsl2rgb_(hsl){
	var h=hsl[0]/360, s=hsl[1], l=hsl[2];
	var r, g, b;

	if(s == 0){
		r = g = b = l; // achromatic
	}else{
		var hue2rgb = function hue2rgb(p, q, t){
			if(t < 0) t += 1;
			if(t > 1) t -= 1;
			if(t < 1/6) return p + (q - p) * 6 * t;
			if(t < 1/2) return q;
			if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;
			return p;
		}

		var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
		var p = 2 * l - q;
		r = hue2rgb(p, q, h + 1/3);
		g = hue2rgb(p, q, h);
		b = hue2rgb(p, q, h - 1/3);
	}

	return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
}





========================================
|-- 通过坐标计算角度、通过角度位置计算HSL值
----------------------------------------
// 位置x,y, 圆形cx,cy;
var getHSLbyCoord=function(x,y,cx,cy,R){
	var dist=_sq(x-cx,y-cy);
	// get angle
	var angle=Math.asin( (y-cy)/dist); //1
	if( x-cx >=0){ if(angle<0){angle += 2*Math.PI} }//4
	if( x-cx <0){ angle=Math.PI-angle;} //3, 2
	// get hsl
	var h=angle/Math.PI*180;
	var l=dist/R;
	var s=1; //------------------ 手动设定，或通过url传入
	var getS=getSettings('s');
	if(getS!=null && getS>=0 && getS<=1){ s=getS; }
	return [h,s,l];
}




========================================
|-- 案例: 基于canvas的色轮颜色选择器
----------------------------------------
1.
色轮1: 
https://www.script-tutorials.com/demos/315/index.html
https://www.script-tutorials.com/demos/315/index2.html #index1-5
实现原理: 载入图片
核心代码: https://www.script-tutorials.com/demos/315/js/script.js


色轮2: 类似PS方块取色
http://www.100sucai.com/demos.php?id=1542246848

色轮3: http://www.100sucai.com/demos.php?id=1522493163





2. 我的设计
(1) 计算的始终是 hsl(本例中几乎不用rgb)，而显示用的是hex
(2) 显示一个大圆圈，转一圈360度对应hsl的hue，从圆心到外边框对应lightness(0=黑色，1=白色) 
再加一个拖动条，对应s的0=黑色到1=饱和色;
(3) 再加一个外围色环，可以根据输入框需要的颜色，等分色环，获得颜色。



3. 代码实现第一版

<meta charset="utf-8">

<h1>Inner to outer: lightness 0(black) to 1(white)</h1>

<style>
input[type='range']{
	width:400px;
}

canvas {cursor: crosshair;}
#cur {
    width: 3px;
    height: 3px;
    outline: 2px solid #535353;
    margin-left: -1px;
    margin-top: -1px;
    position: absolute;
}
</style>


Saturation: 0<input type="range" value=1 min=0 max=1 step=0.01 id='hsl_s'>1. Current:<span id='hsl_s_value'>1</span>
<br>
colorNumber: 2<input type="range" value=5 min=2 max=20 step=1 id='colorNumber'>20. Current:<span id='colorNumber_value'>5</span>
<br>


<canvas id="canvas2" width="600" height="100" style="border:1px dashed #ccc;"></canvas>
<br>
<canvas id="canvas1" width="450" height="450" style="border:1px dashed #ccc;"></canvas>
<br>
<textarea style="width:600px; height:50px;" id="colors"></textarea>

<em id="cur"></em>

<script>
function $2(s){return document.getElementById(s);}
var cur = $2('cur');

var Settings={'colorNumber':5, 's':1}
function getSettings(key){
	if(key in Settings){
		return Settings[key]
	}
	return null;
}

// light
$2('hsl_s').onmousemove=$2('hsl_s').onchange=function(){
	$2('hsl_s_value').innerHTML=this.value;
	Settings['s']=this.value-0;
	refreshColorWheel()
}
// colorNumber
$2('colorNumber').onmousemove=$2('colorNumber').onchange=function(){
	$2('colorNumber_value').innerHTML=this.value;
	Settings['colorNumber']=this.value-0;
}



//初始化画布
var DIM=600;
var canvas=document.getElementById('canvas1');
var ctx = canvas.getContext('2d');
canvas.width=DIM;canvas.height=DIM;
drawColorWheel(ctx)
//
var canvas2=document.getElementById('canvas2');
var ctx2 = canvas2.getContext('2d');

	// tool 1: 方框填充
	var showColors=function(ctx, colors, initHeight, text="", width=50, deltaH=0, height=20){
		var nPerRow=Math.floor(600/width)
		for(var i=0; i<colors.length; i++ ){
			var x=(i%nPerRow)*width
			var y=Math.floor(i/nPerRow)*(20+deltaH)+initHeight;
			ctx.fillStyle=colors[i]; 
			ctx.fillRect(x,y,width,height);
		}
		ctx.fillStyle='black';
		ctx.fillText(text, x+width+5,y+15)
	}
	// tool 2: 圆形填充
	var showColors2=function(ctx, colors, initHeight, text="", width=50, deltaH=0, height=20){
		var nPerRow=Math.floor(600/width), r=width;
		for(var i=0; i<colors.length; i++ ){
			var x=(i%nPerRow)*width
			var y=Math.floor(i/nPerRow)*(height+deltaH)+initHeight;
			ctx.beginPath(); ctx.arc(x+r/2, y+r/2, r/2*0.95, 0, Math.PI*2); ctx.closePath();
			ctx.fillStyle=colors[i]; ctx.fill();
		}
		ctx.fillStyle='black';
		ctx.fillText(text, x+width+5,y+15+r/8)
	}
	/**(4) 
	* input: h:[0,360], s,l : [0, 1]
	* output: rgb array, [0,255]
	* ref: https://www.rapidtables.com/convert/color/hsl-to-rgb.html
	*/
	function hsl2rgb(hsl){
		var h=hsl[0], s=hsl[1], l=hsl[2];
		var c=(1-Math.abs(2*l -1))*s;
		var x=c*(1- Math.abs( (h/60) % 2 -1 ) );
		var m=l-c/2;
		var r=0, g=0, b=0;
		if(h<60){r=c;g=x;
		}else if(h<120){r=x;g=c;
		}else if(h<180){    g=c;b=x;
		}else if(h<240){    g=x;b=c;
		}else if(h<300){r=x;    b=c;
		}else if(h<360){r=c;    b=x;
		}else{return false;}
		
		return([(r+m)*255, (g+m)*255, (b+m)*255])
	}
	//hsl2rgb([0,1,0.5]) # [255, 0, 0]


	// tools
	function _sq(x,y){return Math.sqrt(x**2+y**2);}
	
	// get angle [0, 2*PI]
	function getAngle(x,y, cx,cy){
		var dist=_sq(x-cx,y-cy);
		var angle=Math.asin( (y-cy)/dist); //1
		if( x-cx >=0){ if(angle<0){angle += 2*Math.PI} }//4
		if( x-cx <0){ angle=Math.PI-angle;} //3, 2
		return angle;
	}
	// 位置x,y, 圆形cx,cy;
	function getHSLbyCoord(x,y,cx,cy,R){
		// get angle
		var angle=getAngle(x,y, cx,cy)
		// get hsl
		var h=angle/Math.PI*180;
		//
		var s=1; //------------------ 手动设定，或通过url传入
		var getS=getSettings('s'); 
		if(getS!=null && getS>=0 && getS<=1){ s=getS; }
		//
		var dist=_sq(x-cx,y-cy);
		var l=dist/R;
		return [h,s,l];
	}

//method5: HSL 色环
// const DIM=1024 时效果最好;
function drawColorWheel(ctx){
	//1.创建imageData
	var canvas=ctx.canvas;
	var imgData=ctx.createImageData(canvas.width, canvas.height);
	
	//填充点
	for (var y=0;y<imgData.height;y++){
		for (var x=0;x<imgData.width;x++){
			var rgb=[255,255,255];
			// to rgb;
			var R=DIM/2; // 圆心(DIM/2, DIM/2)
			var dist=_sq(x-R,y-R);
			if(dist<=R){ 
				var hsl=getHSLbyCoord(x,y, R,R, R);
				rgb=hsl2rgb( hsl ); 
			}
			//console.log(x,y, "hsl(",h,s,l,"); rgb(", rgb ,')')
			//填充
			var p=y*imgData.width+x; //点的位置	
			imgData.data[4*p+0]=rgb[0];
			imgData.data[4*p+1]=rgb[1];
			imgData.data[4*p+2]=rgb[2];
			imgData.data[4*p+3]=255;
		}
	}
	
	//3.填充画布
	ctx.putImageData(imgData,0,0, 0,0, canvas.width, canvas.height);
}

//
function refreshColorWheel(){
	console.log('refresh...')
	drawColorWheel(ctx)
	return null;
}

// 单击事件
ctx.canvas.addEventListener('click', function(e){ clicked(e) });
ctx.canvas.addEventListener('mousedown', function(e){
	document.onmousemove = function(e) {
		clicked(e);	
	}
	document.onmouseup = function() {
		document.onmouseup = document.onmousemove = null;
	}
});

function clicked(e) {
	var ctx=this;
	var canvas=ctx.canvas;
    var ePos = {
        x: e.offsetX || e.layerX,
        y: e.offsetY || e.layerY
    }
	//console.log(ePos, e.offsetY)
	
    var rgbaStr = getRgbaAtPoint(ePos)
	//鼠标单击位置添加小方块
	cur.style.left = ePos.x+canvas.getBoundingClientRect().left + 'px';
    cur.style.top = ePos.y+canvas.getBoundingClientRect().top + 'px';
    cur.style.outlineColor = (rgbaStr[0] > 256 / 2 || rgbaStr[1] > 256 / 2 || rgbaStr[2] > 256 / 2) ? '#000' : '#fff';
	//获取颜色，并显示到右侧
	ctx2.fillStyle="white";
	ctx2.fillRect(0,0, ctx2.canvas.width, ctx2.canvas.height)
    var color=rgb2hex( rgbaStr.slice(0, 3).join() ); //输出颜色
	//showColors(ctx2, [color], 5, 'Current color', 40)
	//
	var R=DIM/2;
	var colors=getColors(ePos.x,ePos.y, R,R,R);
	//outColor(colors, 120);
	//var showColors=function(ctx, colors, initHeight, text="", width=50, deltaH=0, height=20){
	showColors2(ctx2, colors, 5, '', 40, 20, height=20)
	$2('colors').innerHTML='"'+colors.join('",')+'"'
	console.log(colors)
}

// 根据位置获取指定数量的颜色array，同一个色环上
function getColors(x,y, cx,cy, R){
	var colorNumber=getSettings('colorNumber');
	var binwidth=Math.PI*2/colorNumber;
	var angleInit=getAngle(x,y, cx,cy);
	var dist=_sq(x-cx,y-cy);
	var colors=[ rgb2hex(getRgbaAtPoint({x:x, y:y}))]
	for(var i=1; i<colorNumber; i++){
		var angle=angleInit+binwidth*i;
		var x=R+dist*Math.cos(angle);
		var y=R+dist*Math.sin(angle);
		var color=getRgbaAtPoint({x: x, y:y});
		colors.push( rgb2hex(color) );
	}
	
	return colors;
}

//获取鼠标处的颜色
function getRgbaAtPoint(pos) {
    var imgData = ctx.getImageData(pos.x, pos.y, 1, 1);
    var p = imgData.data;
    //return [ p[0], p[1], p[2], (p[3] / 255).toFixed(2) ];
    return [ p[0], p[1], p[2] ];
}
// rgb2hex('255,0,0') //"ff0000"
function rgb2hex(rgb) {
    var aRgb = rgb instanceof Array ? rgb : (rgb.split(',') || [0, 0, 0]);
    var temp;
    var hex=[
        (temp = Number(aRgb[0]).toString(16)).length == 1 ? ('0' +  temp) : temp,
        (temp = Number(aRgb[1]).toString(16)).length == 1 ? ('0' +  temp) : temp,
        (temp = Number(aRgb[2]).toString(16)).length == 1 ? ('0' +  temp) : temp,
    ].join('');
	return '#'+hex;
}
</script>









========================================
|-- 对hex颜色按照hsl的l排序
----------------------------------------
before
<div class="c1"></div>
<br />
ordered
<div class="c1"></div>
<style>
/*
<img src="https://picsum.photos/300/500?random=1" />
<img src="https://picsum.photos/300/500?random=2" />
*/

.c1{ clear: both;}
.c1 p{width:20px; height:50px;  display: inline-block;}
</style>


<script>
//https://blog.csdn.net/qq_36538012/article/details/80171734
function rnd( seed ){
    seed = ( seed * 9301 + 49297 ) % 233280; //为何使用这三个数?
    return seed / ( 233280.0 );
};

function rand(number){
    today = new Date(); 
    seed = today.getTime();
    return Math.ceil( rnd( seed ) * number );
};

myNum=(rand(5));



// https://blog.csdn.net/qq_36571778/article/details/80763243


/**
 * hex 颜色值转换为 rgb.
 */
function hex2rgb(hex){
	hex=hex.substring(1);
	// 必须6位
	if(hex.length!=6){
		return false;
	}
	var r=parseInt("0x"+hex.substring(0,2) )
	var g=parseInt("0x"+hex.substring(2,4) )
	var b=parseInt("0x"+hex.substring(4,6) )
	//
	return [r,g,b];
}

/**
 * RGB 颜色值转换为 HSL.
 * 转换公式参考自 http://en.wikipedia.org/wiki/HSL_color_space.
 * r, g, 和 b 需要在 [0, 255] 范围内
 * 返回的 h, s, 和 l 在 [0, 1] 之间
 *
 * @param   Number  r       红色色值
 * @param   Number  g       绿色色值
 * @param   Number  b       蓝色色值
 * @return  Array           HSL各值数组
 */
function rgb2hsl(r, g, b) {
    r /= 255, g /= 255, b /= 255;
    var max = Math.max(r, g, b), min = Math.min(r, g, b);
    var h, s, l = (max + min) / 2;

    if (max == min){ 
        h = s = 0; // achromatic
    } else {
        var d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        switch(max) {
            case r: h = (g - b) / d + (g < b ? 6 : 0); break;
            case g: h = (b - r) / d + 2; break;
            case b: h = (r - g) / d + 4; break;
        }
        h /= 6;
    }
    return [h, s, l];
}
/*
H指Hue(色调)。 0(或360)表示红色，120表示绿色，240表示蓝色，当然可取其他数值来确定其它颜色；
S指Saturation(饱和度)。 取值为0%到100%之间的值；
L指Lightness(亮度)。 取值为0%到100%之间的值；
*/

function hex2hsl(hex){
	var rgb=hex2rgb(hex);
	//console.log(rgb)
	return rgb2hsl(rgb[0], rgb[1], rgb[2])
}

/**
* input: h:[0,360], s,l : [0, 1]
* output: rgb array, [0,255]
*/
function hsl2rgb(hsl){
	var h=hsl[0], s=hsl[1], l=hsl[2];
	var c=(1-Math.abs(2*l -1))*s;
	var x=c*(1- Math.abs( (h/60) % 2 -1 ) );
	var m=l-c/2;
	var r=0, g=0, b=0;
	if(h<60){r=c;g=x;
	}else if(h<120){r=x;g=c;
	}else if(h<180){    g=c;b=x;
	}else if(h<240){    g=x;b=c;
	}else if(h<300){r=x;    b=c;
	}else if(h<360){r=c;    b=x;
	}else{return false;}
	
	return([(r+m)*255, (g+m)*255, (b+m)*255])
}
//hsl2rgb([0,1,0.5]) # [255, 0, 0]
//hsl2rgb([120,1,0.5]) #[0, 255, 0]
//hsl2rgb([240,1,0.5]) #[0,0,255]



/**
* input: rgb array [0,255]: [255,0,0]
* ouput: #FF0000
*/
function rgb2hex(rgb){
	var r=rgb[0], g=rgb[1], b=rgb[2];
	var hex = "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
	return(hex)
}

/**
* input: [120, 1, 0.5]
* ouput: #00ff00
*/
function hsl2hex(hsl){
	var rgb=hsl2rgb(hsl);
	return(rgb2hex(rgb));
}



window.onload=function(){
	//产生颜色
	var n=40, a_hex=[];
	//var a_hex=['#6c1717', '#b50b0b', '#ff0000', '#ff4c4c', '#ff9999', '#6c4e17', '#b5790b', '#ffa500', '#ffc04c', '#ffdb99', '#a52a2a', '#4f6c17', '#7bb50b', '#a8ff00', '#dcff99', '#0bb50b', '#00ff00', '#99ff99', '#17a16d', '#12e193', '#a0f4d4', '#0b610b', '#008000', '#4caa4c', '#99d599', '#0b0bb5', '#0000ff', '#4c4cff', '#9999ff', '#0d75f8', '#559efa', '#0bb5b5', '#00ffff', '#99ffff', '#b50bb5', '#ff00ff', '#ff4cff', '#ff99ff', '#800080', '#aa4caa', '#d599d5', '#730bb5', '#9c00ff', '#ba4cff'];  n=a_hex.length;
	var colors=[]
	for(var i=0; i<n; i++){
		// get hex color
		//var hex='#'+Math.random().toString(16).substring(2,8)
		var hex='#'+Math.random().toString(16).substr(14-8, 6)
		if(hex.length!=7){ console.log(hex)}
		a_hex.push(hex)
		//hex to hsl, in dict
		var hex=a_hex[i]
		var hsl=hex2hsl(hex)
		colors.push( [hex].concat( hsl ) )
	}
	wjl=hsl
	// 排序前的颜色
	var oP=document.getElementsByClassName('c1')[0];
	for(var i=0;i<n;i++){
		// dom
		var oDiv=document.createElement('p')
		oDiv.setAttribute('style', 'background:'+a_hex[i])
		oP.append(oDiv)
	}
	//["#2afcdc", 0, 0.5555555555555556, 0.10588235294117647]
	//console.log(a_hex)
	//console.log(colors)
	
	// 颜色排序，根据hsl
	colors.sort(function(a,b){
		//return Math.abs(a[3]-b[3])
		if(a[3]-b[3]!=0)
			return( a[3]-b[3] )
		if(a[2]-b[2]!=0)
			return(a[2]-b[2])
		if(a[1]-b[1]!=0)
			return(a[1]-b[1])
		return 0;
	})
	
	
	// 排序后的颜色
	var oP2=document.getElementsByClassName('c1')[1];
	for(var i=0;i<n;i++){
		// dom
		var oDiv=document.createElement('p')
		oDiv.setAttribute('style', 'background:'+colors[i][0])
		oP2.append(oDiv)
	}
	//
}
</script>



========================================
基于 ascii 码算术运算的简单加密 (ascii码可打印字符为[33, 126] )
----------------------------------------
1. 总设计: 力求相对保密和简捷，为保存个人密码而设计。

(1) ascii码表：参考 English/en101-code.txt

基本的 ASCII 字符集共有 128 个字符，其中有 95 个可打印字符，包括常用的字母、数字、标点符号等，另外还有 33 个控制字符。
标准 ASCII 码使用 7 个二进位对字符进行编码，对应的 ISO 标准为 ISO646 标准。

在ASCII码中，第32~126号(共95个)是可打印字符，也就是在显示器上输出能够看得见的。

33-47 标签符号, 
48-57 阿拉伯数字
58-64 标点符号
65-90 A-Z
91-96 标点符号
97-122 a-z
123-126 标点符号


(2) 加密原理: 实现核心算法，以及加密参数。
把密码通过ascill码对应转为数字，用减号分割，记录到纸上: 33-55-83@M1 表示有3个字符，使用的M1算法。
忘了再使用解密代码获取原始结果。
程序和记录纸不同时出现。

比如 
加密:
encrypt(`*#06#`, 'M1') //输出加密后的 33-55-83@M1 可以抄写到纸上

解密:
decipher('33-55-83@M1') //输出原始密码

(3) 用js实现，并且加密算法的代码托管到私有仓库。






2. 基本实现方式

//string2ascii
function string2ascii(str){
	var num=[];
	for(var i=0;i<str.length;i++){
		num.push(str.charCodeAt(i))
	}
	//return(num.join('-') )
	return(num)
}
//string2ascii('*#06#') 
//[42, 35, 48, 54, 35]


//ascii2string
function ascii2string(arr){
	var string=[]
	for(var i=0;i<arr.length;i++){
		string.push( String.fromCharCode(arr[i]) )
	}
	return(string.join('') )
}
ascii2string( [42, 35, 48, 54, 35] ) //"*#06#"




/********************
* 核心加密算法: 配套2个，可逆变换
* base就是不加密，仅做ascii码转换
* 以后需要写的就是这些具体的加密实现了
* 加密: input numberArr, output: numberArr
* 解码: input numberArr, output numberArr
********************/


/********************* base begin ********************/
//原理: 就是转为ascii码数字
function base(numberArr){
	return(numberArr)
}
//base([42, 35, 48, 54, 35])
//(5) [42, 35, 48, 54, 35]


//解密算法名字，是加密后加Reverse。
function baseReverse(numberArr){
	return(numberArr)
}
//baseReverse([42, 35, 48, 54, 35])
//(5) [42, 35, 48, 54, 35]
/********************* base end ********************/





// 通用加密外壳
function encrypt(originString, method){
	var method=method||"base"
	var arr=string2ascii(originString);
	var encryArr=eval(method)(arr)
	return(encryArr.join('-') +"@"+method)
}
//encrypt('*#06#', 'base')
//"42-35-48-54-35@base"


// 通用解密外壳
function decipher(paperStr){
	var arr=paperStr.split('@');
	var method=arr[1]
	var origin = eval(method+'Reverse')( arr[0].split('-') )
	return( ascii2string(origin) )
}
decipher("42-35-48-54-35@base")  //"*#06#"




/********************* P1 begin ********************/
//原理: 使用ascii码可打印字符[33,126]，每个数字加1，超过上限了循环使用这些数字
function P1(numberArr){
	var rs=[]
	for(i in numberArr){
		var num=numberArr[i]+1
		//if(num<33) num = 127- (33-num);
		if(num>126)	num = num-126+32;
		rs.push(num)
	}
	return(rs)
}
//P1([36, 33, 50, 125, 126])
//   [37, 34, 51, 126, 33]


//解密算法名字，是加密后加Reverse。
function P1Reverse(numberArr){
	var rs=[]
	for(i in numberArr){
		var num=numberArr[i]-1
		if(num<33) num = 127- (33-num);
		//if(num>126)	num = num-126+32;
		rs.push(num)
	}
	return(rs)
}
//P1Reverse([37, 34, 51, 126, 33])
//          [36, 33, 50, 125, 126]
/********************* P1 end ********************/

// test
encrypt('#~1|}', 'P1') //"36-33-50-125-126@P1"
decipher("36-33-50-125-126@P1") //"#~1|}"






========================================
日常小工具 / 函数
----------------------------------------



========================================
|-- JavaScript复制内容到剪贴板
----------------------------------------


// 目标: 文本复制到剪切板
// https://blog.csdn.net/weixin_46558787/article/details/126020300
// https://blog.csdn.net/IICOOM/article/details/124183673
function copy2clipboard(text){
	//1. 新的拷贝到剪切板方法，很简练；只是可能不支持。
	if( navigator.clipboard) {
		navigator.clipboard.writeText(text).then(function(){
			console.log("Async: copy to clipboard: Success")
		}, function(err){
			console.log("Async: could not copy text:", err)
		})
	}else{
	//2. 之前的拷贝到剪切板方法，很繁琐: 
	// input 或 textarea 控制才支持，需要先 select(), 再执行 Copy 命令
		//1. 临时控件
		var input=document.createElement("input");
		document.body.appendChild(input);
		//2. 拷贝到临时控件
		input.setAttribute('value', text);
		//input.value=text; 
		//3. 执行拷贝到剪切板
		input.select(); 
		document.execCommand("Copy");
		//4. 移除控件
		document.body.removeChild(input);
	}
}





========================================
|-- 空页面控制台执行的 倒计时工具，单位秒
----------------------------------------
1. 简化版
function Timer(total){
	var total=total || 10, s=total;
	var obj=document.getElementsByTagName("body")[0];
	var timer=setInterval(function(){
		var	html="<style>h1{color:#eee; font-size:100px; text-align: center;} span{color:#000} .red{color:red;}</style>";
		html+="<h1 id='box'>Seconds: <br><span>"+ (s--) +"</span>/"+ total+"</h1>";
		obj.innerHTML=html;
		if(s<0){ 
			clearInterval(timer);
			var warn=document.createElement("p");
			warn.setAttribute("class", "red");
			warn.innerHTML="Time is up!";
			box.append(warn);
		};
	}, 1000)
}

Timer(10*60) //10min


2. 添加播放音乐功能

(1) 学习示例
https://www.cnblogs.com/justSmile2/p/10088148.html

<script language="javascript" type="text/javascript">
function autoPlay() {
	var myAuto = document.getElementById('myaudio');
	myAuto.play();
}
function closePlay() {
	var myAuto = document.getElementById('myaudio');
	myAuto.pause();
	myAuto.load();
}
</script>

<audio src="123.mp3" id="myaudio" controls="controls" loop="false" hidden="true"></audio>
<input type="button" onclick="autoPlay()" value="播放" />
<input type="button" onclick="closePlay()" value="关闭" />




(2) 加入播放音乐
不能空页面播放，只能网页播放。


<meta charset="utf8">
<script language="javascript" type="text/javascript">

function Timer(total){
	var total=total || 10, s=total;
	var html=document.getElementsByTagName("html")[0];
	var div=document.createElement("div");
	html.append(div);

	var audio=document.createElement("audio");
	var music="http://y.biomooc.com:8000/file/audio/HarryPotter1-7StephenFry/Harry%20Potter%203/fry_3_15.mp3";
	audio.setAttribute("src", music);
	audio.setAttribute("hidden", "true");
	audio.setAttribute("autoplay", "true");
	html.append(audio);
	
	var btn=document.createElement("input");
	btn.setAttribute("type","button");
	btn.setAttribute("value","开始");
	btn.onclick=function(){
		audio.pause();
		//audio.load();
		var timer=setInterval(function(){
			var	text="<style>h1{color:#eee; font-size:100px; text-align: center;} span{color:#000} .red{color:red;}</style>";
			text+=" <meta name='referrer' content='strict-origin-when-cross-origin' />  <h1 id='box'>Seconds: <br><span>"+ (s--) +"</span>/"+ total+"</h1>";
			div.innerHTML=text;
			if(s<0){ 
				clearInterval(timer);
				var warn=document.createElement("p");
				warn.setAttribute("class", "red");
				warn.innerHTML="Time is up!";
				box.append(warn);
				
				//添加音乐
				audio.play();
			};
		}, 1000)
	}
	html.append(btn);
}

Timer(2) //2s
Timer(10*60) //10min

</script>





ref:
https://blog.csdn.net/weixin_39076203/article/details/106156916





========================================
|-- 原生JS写 toggleClass 方法
----------------------------------------
function hasClass(obj, cls) {
	return obj.className.match(new RegExp('(\\s|^)' + cls + '(\\s|$)'));
}

function addClass(obj, cls) {
	if (!this.hasClass(obj, cls)) obj.className += " " + cls;
}

function removeClass(obj, cls) {
	if (hasClass(obj, cls)) {
		var reg = new RegExp('(\\s|^)' + cls + '(\\s|$)');
		obj.className = obj.className.replace(reg, ' ');
	}
}

function toggleClass(obj,cls){
	if(hasClass(obj,cls)){
		removeClass(obj, cls);
	}else{
		addClass(obj, cls);
	}
}



========================================
|-- 提取当前网页中的标题 h1-h6 作 导航框，支持拖拽、隐藏、单击定位、高亮当前导航标题
----------------------------------------
1. 概要

(1) 思路
提取标题：提取页面中的所有标题元素（如 <h1>, <h2>, <h3> 等）。
生成目录导航：生成一个目录导航框，并将提取的标题添加到目录导航中。
实现隐藏、显示功能：实现目录导航框的隐藏和显示功能。
实现拖拽功能：使目录导航框可以拖拽。
实现跳转和高亮：点击导航项时跳转到对应的标题，并高亮显示当前标题。

(2) 函数功能
封装成对象：将所有功能封装到 TocNavigator 对象中，只占用一个全局变量。
init 方法：初始化对象，提取标题、生成目录、添加事件监听器。
generateToc 方法：生成目录，添加点击事件以实现滚动和高亮。
addEventListeners 方法：添加显示/隐藏按钮的点击事件和拖拽事件。
toggleToc 方法：切换目录导航框的显示状态，并调整位置使其显示在按钮左侧。
startDrag 方法：开始拖动，记录鼠标偏移量并添加移动和释放事件监听器。
onMouseMove 方法：拖动过程中更新按钮和目录导航框的位置。
onMouseUp 方法：结束拖动，移除移动和释放事件监听器。



2. 原生js实现
(1) 代码演示
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        /* 基本样式 */
        body {
            font-family: Arial, sans-serif;
        }

p{height:500px;}
    </style>
</head>
<body>
    <h1>标题1</h1>
    <p>内容...</p>
    <h2>标题1.1</h2>
    <p>内容...</p>
    <h3>标题1.1.1</h3>
    <p>内容...</p>
    <h2>标题1.2</h2>
    <p>内容...</p>
    <h1>标题2</h1>
    <p>内容...</p>
    <h2>标题2.1</h2>
    <p>内容...</p>
    <h3>标题2.1.1</h3>
    <p>内容...</p>

    <script>
const TocNavigator = {
	styles:'#toc{position:fixed;top:20px;right:50px;width:250px;background-color:#f9f9f9;border:1px solid#ccc;border-radius:8px;box-shadow:0 2px 10px rgba(0,0,0,0.1);padding:10px;z-index:1000;display:none;right: 50px;max-height: 80vh;overflow-y: auto;}#toc h2{margin-top:0}#toc ul{list-style:none;padding-left:0px}#toc li{margin:5px 0;cursor:pointer}#toc li.active{font-weight:bold;color:#007bff}#toc-toggle{position:fixed;top:20px;right:0;width:30px;height:30px;background-color:#007bff;color:#fff;border:none;border-radius:15px;cursor:pointer;z-index:1001}.toc-level-1{font-weight:bold;padding-left:0}.toc-level-2 :nth-child(2){padding-left:10px}.toc-level-3 :nth-child(2){padding-left:20px}.toc-level-1:after{content:"H1";color:#efefef}.toc-level-2:after{content:"H2";color:#efefef}.toc-level-3:after{content:"H3";color:#efefef}.toc-level-1:hover:after,.toc-level-2:hover:after,.toc-level-3:hover:after{color:#eaa}',
	/*返回创建的dom元素；参数1必须*/
	createElement(tag, json, innerHTML){
		var json=json||{};
		var dom=document.createElement(tag);
		
		if(json!=undefined){
			for(var key in json){
				dom.setAttribute(key,json[key]);
			}
		}
		
		if(innerHTML!=undefined){
			dom.innerHTML=innerHTML;
		}
		return dom;
	},
	
	init() {
		/* 创建元素
			<button id="toc-toggle">☰</button>
			<div id="toc">
				<h2>目录</h2>
				<ul id="toc-list"></ul>
			</div>
		*/
		var oFrag=document.createDocumentFragment();
		var oButton=this.createElement("button", {"id":"toc-toggle"}, "☰");
		var oDiv=this.createElement("div", {"id":"toc"});
		var oH2=this.createElement("h2", {}, "目录"); oDiv.append(oH2);
		var oUl=this.createElement("ul", {'id':'toc-list'}); oDiv.append(oUl);
		oFrag.append(oButton); oFrag.append(oDiv);
		//style
		var oStyle=this.createElement("style", {}, this.styles);
		oFrag.append(oStyle);
		
		
		//获取标题元素
		this.headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6');
		
		this.tocList = oUl;
		this.tocToggle = oButton;
		this.toc = oDiv;
		
		this.isDragging = false;
		this.offsetX = 0;
		this.offsetY = 0;

		this.generateToc();
		this.addEventListeners();
		
		//window.scrollBy(1, 1); //主动触发滚动，否则没有高亮
		document.body.append(oFrag);
	},
	
	trim(str){
		return str.replace(/(^\s*)|(\s*$)/g, "");
	},

	generateToc() {
		var counter=0;
		
		this.headings.forEach((heading, index) => {
			if(this.trim(heading.textContent)!=""){
				// 更新计数器
				counter++;
				
				const li = document.createElement('li');
				li.append(this.createElement("span",{"style":"color:#ddd; margin:0 5px;"}, counter))
				li.append(this.createElement("span",{}, heading.textContent))
				//li.textContent = `${counter} ${heading.textContent}`;
				li.dataset.targetId = `heading-${index}`;
				heading.id = `heading-${index}`;

				// 根据标题级别添加不同的类名
				if (heading.tagName === 'H1') {
					li.classList.add('toc-level-1');
				} else if (heading.tagName === 'H2') {
					li.classList.add('toc-level-2');
				} else if (heading.tagName === 'H3') {
					li.classList.add('toc-level-3');
				}

				li.addEventListener('click', () => {
					document.getElementById(li.dataset.targetId).scrollIntoView({ behavior: 'smooth' });
					document.querySelectorAll('#toc li').forEach(el => el.classList.remove('active'));
					li.classList.add('active');
				});

				this.tocList.appendChild(li);
			}
			
		});
	},

	addEventListeners() {
		this.tocToggle.addEventListener('click', this.toggleToc.bind(this));
		this.tocToggle.addEventListener('mousedown', this.startDrag.bind(this));
	},

	toggleToc() {
		if (this.toc.style.display === 'block') {
			this.toc.style.display = 'none';
			const toggleRect = this.tocToggle.getBoundingClientRect();
			this.toc.style.top = `${toggleRect.top}px`;
			this.toc.style.right = `${window.innerWidth - toggleRect.left + 10}px`; // 显示在按钮左侧
		} else {
			this.toc.style.display = 'block';
		}
	},

	startDrag(e) {
		//console.log("start to drag", e);
		this.isDragging = true;
		this.offsetX = e.clientX - this.tocToggle.getBoundingClientRect().left;
		this.offsetY = e.clientY - this.tocToggle.getBoundingClientRect().top;
		document.addEventListener('mousemove', this.onMouseMove.bind(this));
		document.addEventListener('mouseup', this.onMouseUp.bind(this));
	},

	onMouseMove(e) {
		if (this.isDragging) {
			this.tocToggle.style.left = `${e.clientX - this.offsetX}px`;
			this.tocToggle.style.top = `${e.clientY - this.offsetY}px`;
			/*调整toc位置与按钮同步*/
			this.toc.style.left = `${e.clientX - this.offsetX - this.toc.offsetWidth - 10}px`;
			this.toc.style.top = `${e.clientY - this.offsetY}px`;
		}
	},

	onMouseUp() {
		this.isDragging = false;
		document.removeEventListener('mousemove', this.onMouseMove.bind(this));
		document.removeEventListener('mouseup', this.onMouseUp.bind(this));
	}
};

document.addEventListener('DOMContentLoaded', () => TocNavigator.init());
    </script>
</body>
</html>


(2) 使用方法
对于网页，按F12，在控制台console输入对象 TocNavigator 的定义，然后执行
> TocNavigator.init()

=> 该功能放到web: http://tool.dawneve.cc/JavaScript/TocNavigator_js.html


========================================
----------------------------------------

========================================
----------------------------------------

========================================
----------------------------------------






========================================
----------------------------------------


========================================
----------------------------------------

========================================
----------------------------------------

========================================
----------------------------------------


========================================
----------------------------------------

========================================
----------------------------------------

========================================
----------------------------------------

