js201-ES5ES6

ES6 入门教程 https://es6.ruanyifeng.com/
	https://www.runoob.com/w3cnote/es6-reflect-proxy.html

ES2015 https://babeljs.io/docs/en/learn


ES更多新版本: https://www.jianshu.com/p/e17a5d67f43c




========================================
Promise 对象: new Promise(function(resolve, reject){})
----------------------------------------
1.详情看repo: github.com/dawneve/jsLecture
其中的ajax/ 部分


(2)例子参考：https://github.com/DawnEve/jsLecture/blob/master/ajax/002/02_Promise.html

var log=console.log;
var p1 = new Promise(function(fn1, fn2){
	var timeOut=Math.random()*2;
	log('set timeout to: ' + timeOut + ' seconds.');
	
	setTimeout(function(){
		if(timeOut<1){
			log("ok")
			fn1("200 OK");
		}else{
			log("time out!")
			fn2("404 timeout:"+timeOut+" seconds")
		}
	
	}, timeOut*1000)
});

var p2=p1.then(function(result){
	log("成功:"+result)
})

var p3=p2.catch(function(result){
	log("失败:"+result)
})





========================================
|-- async/await
----------------------------------------
JavaScript 的 async/await 实现，也离不开 Promise。

1. async 加上函数定义前面，表示这是一个异步函数，返回 Promise 对象。

async function testAsync() {
    return "hello async";
}

const result = testAsync();
console.log(result);
// Promise {<fulfilled>: "hello async"}



result.then(v => {
    console.log(v);    // 输出 hello async
});
//hello async








2.  await 可以用于等待一个 async 函数的返回值

- 如果它等到的不是一个 Promise 对象，那 await 表达式的运算结果就是它等到的东西。
- 如果它等到的是一个 Promise 对象，await 就忙起来了，它会阻塞后面的代码，等着 Promise 对象 resolve，然后得到 resolve 的值，作为 await 表达式的运算结果。
- await 阻塞的只是当前路径，并不阻塞其它路径的代码。不然异步就没意义了。


遇到await会阻塞后面的代码，先执行async外面的同步代码，同步代码执行完，再回到async内部，继续执行await后面的代码。



(1) 用 setTimeout 模拟耗时的异步操作，先来看看不用 async/await 会怎么写
function takeLongTime() {
    return new Promise(resolve => {
        setTimeout(() => resolve("long_time_value"), 1000);
    });
}

takeLongTime().then(v => {
    console.log("got", v);
});

//got long_time_value




(2) 改用 async/await 呢
function takeLongTime() {
    return new Promise(resolve => {
        setTimeout(() => resolve("long_time_value"), 1000);
    });
}

async function test() {
    const v = await takeLongTime();
    console.log(v);
}

test(); //long_time_value






3. async/await 的优势在于处理 then 链

/**
 * 传入参数 n，表示这个函数执行的时间（毫秒）
 * 执行的结果是 n + 200，这个值将用于下一步骤
 */
function takeLongTime(n) {
    return new Promise(resolve => {
        setTimeout(() => resolve(n + 200), n);
    });
}

function step1(n) {
    console.log(`step1 with ${n}`);
    return takeLongTime(n);
}

function step2(n) {
    console.log(`step2 with ${n}`);
    return takeLongTime(n);
}

function step3(n) {
    console.log(`step3 with ${n}`);
    return takeLongTime(n);
}


(1) 现在用 Promise 方式来实现这三个步骤的处理

function doIt() {
    console.time("doIt");
    const time1 = 300;
    step1(time1)
        .then(time2 => step2(time2))
        .then(time3 => step3(time3))
        .then(result => {
            console.log(`result is ${result}`);
            console.timeEnd("doIt");
        });
}

doIt();


输出:
step1 with 300
undefined
step2 with 500
step3 with 700
result is 900
doIt: 1502.784912109375 ms



(2) 如果用 async/await 来实现呢，会是这样

async function doIt() {
    console.time("doIt");
    const time1 = 300;
    const time2 = await step1(time1);
    const time3 = await step2(time2);
    const result = await step3(time3);
    console.log(`result is ${result}`);
    console.timeEnd("doIt");
}

doIt();

输出: 
step1 with 300
Promise {<pending>}
step2 with 500
step3 with 700
result is 900
doIt: 1504.751953125 ms

结果和之前的 Promise 实现是一样的，但是这个代码看起来是不是清晰得多，几乎跟同步代码一样




(3) 如果每一步的结果都需要上一步的值怎么办？
原文有。
//todo ref1



(4) Promise还可以reject，怎么办？

//todo ref2






ref:
[1]. https://segmentfault.com/a/1190000007535316
[2]. http://www.ruanyifeng.com/blog/2015/05/async.html





========================================
var V.S. let const
----------------------------------------
之前只有var，后来的let和const

作用域不同： var 函数作用域；let、const 块作用域
var 在变量声明之前访问提示 undefined，let 则直接提示 ReferenceError
	ReferenceError、TypeError：引用错误和类型错误区别
	作用域区别：ReferenceError在作用域中找不到；TypeError在作用域中找到了但是做了它不可能做的事情

var let 的使用场景
	var 全局作用域 + 函数作用域
	let 块作用域(es6)



1. let是为了提供块级作用域。之前只能闭包实现。

<ul>
	<li>1</li>
	<li>2</li>
	<li>3</li>
	<li>4</li>
</ul>

<script>
window.onload = function(){
    var aLi = document.getElementsByTagName('li');
    for (let i=0;i<aLi.length;i++){
        aLi[i].onclick = function(){
            alert(i);
        }
    };     
}
</script>





2. 作用域是局部的
<script>
var log=console.log;
for(let i=0; i<5; i++){ //使用let则出for就不存在该变量了
	log(i)
}
log(i)
</script>





========================================
箭头函数 ()=>
----------------------------------------

ES6标准新增了一种新的函数：Arrow Function（箭头函数）。

1. 示例：1个参数时
x => x * x

上面的箭头函数相当于：

function (x) {
    return x * x;
}



2. 其他参数

// 两个参数:
(x, y) => x * x + y * y

// 无参数:
() => 3.14

// 可变参数:
(x, y, ...rest) => {
    var i, sum = x + y;
    for (i=0; i<rest.length; i++) {
        sum += rest[i];
    }
    return sum;
}



3. 好处：箭头函数完全修复了this的指向，this总是指向词法作用域，也就是外层调用者obj：

var obj = {
    birth: 1990,
    getAge: function () {
        var b = this.birth; // 1990
        var fn = () => new Date().getFullYear() - this.birth; // this指向obj对象
        return fn();
    }
};

obj.getAge(); // 25

如果使用箭头函数，以前的那种hack写法：
var that = this;
就不再需要了。



(2)
由于this在箭头函数中已经按照词法作用域绑定了，所以，用call()或者apply()调用箭头函数时，无法对this进行绑定，即传入的第一个参数被忽略：

var obj = {
    birth: 1990,
    getAge: function (year) {
        var b = this.birth; // 1990
        var fn = (y) => y - this.birth; // this.birth仍是1990
        return fn.call({birth:2000}, year);
    }
};
obj.getAge(2015); // 25



ref: https://www.liaoxuefeng.com/wiki/1022910821149312/1031549578462080


========================================
虚拟DOM: Virtual DOM
----------------------------------------
目前最流行的两大前端框架，React和Vue，都不约而同的借助Virtual DOM技术提高页面的渲染效率。
下文中，Virtual DOM 简称vd。


1. 本质上来说，VD只是一个简单的JS对象，并且最少包含tag、props和children三个属性。

不同的框架对这三个属性的命名会有点差别，但表达的意思是一致的。它们分别是标签名（tag）、属性（props）和子元素对象（children）。下面是一个典型的VD对象例子：

{
    tag: "div",
    props: {},
    children: [
        "Hello World", 
        {
            tag: "ul",
            props: {},
            children: [{
                tag: "li",
                props: {
                    id: 1,
                    class: "li-1"
                },
                children: ["第", 1]
            }]
        }
    ]
}

VD跟dom对象有一一对应的关系，上面的VD是由以下的HTML生成的

<div>
    Hello World
    <ul>
        <li id="1" class="li-1">
            第1
        </li>
    </ul>
</div>

一个dom对象，比如li，由tag(li), props({id: 1, class: "li-1"})和children(["第", 1])三个属性来描述。



2.为什么需要VD

VD 最大的特点是将页面的状态抽象为 JS 对象的形式，配合不同的渲染工具，使跨平台渲染成为可能。如 React 就借助 VD 实现了服务端渲染、浏览器渲染和移动端渲染等功能。

此外，在进行页面更新的时候，借助VD，DOM 元素的改变可以在内存中进行比较，再结合框架的事务机制将多次比较的结果合并后一次性更新到页面，从而有效地减少页面渲染的次数，提高渲染效率。

页面的呈现会分以下3个阶段：
	JS计算
	生成渲染树
	绘制页面

通过VD的比较，我们可以将多个操作合并成一个批量的操作，从而减少dom重排的次数，进而缩短了生成渲染树和绘制所花的时间。至于如何基于VD更有效率的更新dom，是一个很有趣的话题，日后有机会将另写一篇文章介绍。



3. 如何实现VD与真实DOM的映射

我们先从如何生成VD说起。借助JSX编译器，可以将文件中的HTML转化成函数的形式，然后再利用这个函数生成VD。看下面这个例子：

function render() {
    return (
        <div>
            Hello World
            <ul>
                <li id="1" class="li-1">
                    第1
                </li>
            </ul>
        </div>
    );
}

这个函数经过JSX编译后，会输出下面的内容：

function render() {
    return h(
        'div',
        null,
        'Hello World',
        h(
            'ul',
            null,
            h(
                'li',
                { id: '1', 'class': 'li-1' },
                '\u7B2C1'
            )
        )
    );
}



这里的h是一个函数，可以起任意的名字。这个名字通过babel进行配置：

// .babelrc文件
{
  "plugins": [
    ["transform-react-jsx", {
      "pragma": "h"    // 这里可配置任意的名称
    }]
  ]
}

接下来，我们只需要定义h函数，就能构造出VD

function flatten(arr) {
    return [].concat.apply([], arr);
}

function h(tag, props, ...children) {
    return {
        tag, 
        props: props || {}, 
        children: flatten(children) || []
    };
}


h函数会传入三个或以上的参数，前两个参数一个是标签名，一个是属性对象，从第三个参数开始的其它参数都是children。children元素有可能是数组的形式，需要将数组解构一层。比如：

function render() {
    return (
        <ul>
            <li>0</li>
            {
                [1, 2, 3].map( i => (
                    <li>{i}</li>
					                ))
            }
        </ul>
    );
}

// JSX编译后
function render() {
    return h(
        'ul',
        null,
        h(
            'li',
            null,
            '0'
        ),
        /*
         * 需要将下面这个数组解构出来再放到children数组中
         */
        [1, 2, 3].map(i => h(
            'li',
            null,
            i
        ))
    );
}
继续之前的例子。执行h函数后，最终会得到如下的VD对象：

{
    tag: "div",
    props: {},
    children: [
        "Hello World", 
        {
            tag: "ul",
            props: {},
            children: [{
                tag: "li",
                props: {
                    id: 1,
                    class: "li-1"
                },
                children: ["第", 1]
            }]
        }
    ]
}
下一步，通过遍历VD对象，生成真实的dom

// 创建dom元素
function createElement(vdom) {
    // 如果vdom是字符串或者数字类型，则创建文本节点，比如“Hello World”
    if (typeof vdom === 'string' || typeof vdom === 'number') {
        return doc.createTextNode(vdom);
    }

    const {tag, props, children} = vdom;

    // 1. 创建元素
    const element = doc.createElement(tag);

    // 2. 属性赋值
    setProps(element, props);

    // 3. 创建子元素
    // appendChild在执行的时候，会检查当前的this是不是dom对象，因此要bind一下
    children.map(createElement)
            .forEach(element.appendChild.bind(element));

    return element;
}

// 属性赋值
function setProps(element, props) {
    for (let key in props) {
        element.setAttribute(key, props[key]);
    }
}


createElement函数执行完后，dom元素就创建完并展示到页面上了（页面比较丑，不要介意...）。
					


总结

本文介绍了VD的基本概念，并讲解了如何利用JSX编译HTML标签，然后生成VD，进而创建真实dom的过程。下一篇文章将会实现一个简单的VD Diff算法，找出2个VD的差异并将更新的元素映射到dom中去：你不知道的Virtual DOM（二）：Virtual Dom的更新







ref:
https://segmentfault.com/a/1190000016129036




========================================
ES6 export和import模块：浏览器原生支持啦
----------------------------------------
1. 测试需要3个文件

(1)几个提供函数的文件 bar.js 
export default function bar() {
  alert("I am bar from bar.js")
}


(2)入口js文件 index.js 
import bar from './bar.js';
bar();


(3)首页 index.html，要注意引入js时刻要加上type="module" 属性，否则报错。

<meta http-equiv=Content-Type content="text/html;charset=utf-8">

learn webpack 4<br>
https://webpack.js.org/<br>
<h3>F12</h3>

<pre>
    在浏览器加载html文件时，需要在script 标签中加入type="module"属性。
</pre>

<script type="module" src="./index.js"></script>




2. 两种形式的区别

(1) 如果 export 不加 default时: import时需要加大括号。
定义 ./api/repositories.js
var log=console.log;
export function add(x,y){ log(x+y);  return x+y }

调用
import { add } from './api/repositories.js'
add(2,4)


花括号内还可以使用别名:
import { add as add2 } from './api/repositories.js'
add2(2,4)



(2) 如果 export default: import时不需要大括号。
定义 ./api/repositories.js
var log=console.log;
export default function minus(x,y){ log(x-y);  return x-y }


调用 
import minus from './api/repositories.js'
minus(2,4)

export default 命令用于指定模块的默认输出。
显然，一个模块只能有一个默认输出，因此一个文件中 export default 只能使用一次。
引用时不用花括号。



(3) 默认输出的引用，import _ from "./xx.js"
定义 ./api/repositories.js
var log=console.log;

function mutiply(x,y){ log(x*y);  return x*y }
function divide(x,y){ log(x/y);  return x/y }

export default{
    mutiply, divide,
}


调用 
import _ from './api/repositories.js'
_.divide(12,3)





ref:
https://blog.csdn.net/liuguiqian1/article/details/82712659



========================================
reduce() 函数的用法
----------------------------------------
array.reduce(function(total, currentValue, currentIndex, arr), initialValue)

定义和用法
reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。
reduce() 可以作为一个高阶函数，用于函数的 compose。


注意: reduce() 对于空数组是不会执行回调函数的。


var numbers = [65, 44, 12, 4];
 
function getSum(total, num) {
	console.log(total, num, total + num)
    return total + num;
}

numbers.reduce(getSum);
输出:
65 44 109
109 12 121
121 4 125
125




========================================
依赖注入 DI(dependency injection)
----------------------------------------

DI的全称是Dependency Injection，中文称之为依赖注入。它与控制反转(IoC)的含义相同，只不过这两个称呼是从两个角度描述的同一个概念。









========================================
Proxy 代理对象， Reflect 反射对象
----------------------------------------
1. Proxy 是一个包含另一个对象或函数并允许你对其进行拦截的对象。

我们是这样使用它的：new Proxy(target, handler)


例子1:
const target = {
  message1: "hello",
  message2: "everyone"
};

const handler1 = {};

const proxy1 = new Proxy(target, handler1);

//Because the handler is empty, this proxy behaves just like the original target:
console.log(proxy1.message1); // hello
console.log(proxy1.message2); // everyone


// 
const handler2 = {
  get: function(target, prop, receiver) {
	//可以在这里拦截
	console.log('target=', target) // 靶，也就是要被操作的原始数据，
	console.log('prop=', prop)     // 代理要查询的数据的key
	console.log('receiver=', receiver) //接收者就是代理的内容
	
    return "world "+target[prop];
  }
};

const proxy2 = new Proxy(target, handler2);
console.log(proxy2.message1); // world hello
console.log(proxy2.message2); // world everyone
输出:
// target= {message1: "hello", message2: "everyone"}
// prop= message2
// receiver= Proxy {message1: "hello", message2: "everyone"}
// "world"


// 改动原始值，则代理的是一个引用，返回值也是最新的
target.message1="hi2"
proxy2.message1
输出:
// target= {message1: "hi2", message2: "everyone"}
// prop= message1
// receiver= Proxy {message1: "hi2", message2: "everyone"}
// "world hi2"








例子2: 
const dinner = {
  meal: 'tacos'
}

const handler = {
  get(target, prop) {
	console.log('intercepted!')
    return target[prop]
  }
}

const proxy = new Proxy(dinner, handler)
console.log(proxy.meal)

// intercepted!
// tacos










2. Reflect 反射对象
Reflect对象与Proxy对象一样，也是 ES6 为了操作对象而提供的新 API。

对于JS中的reflect，我们就可以理解为：有这么一个全局对象，上面直接挂载了对象的某些特殊方法，这些方法可以通过Reflect.apply这种形式来使用，当然所有方法都是可以在 Object 的原型链中找到的。是不是相当简单。


常见的方法
Reflect.apply
Reflect.construct
Reflect.defineProperty
Reflect.deleteProperty
Reflect.enumerate // 废弃的
Reflect.get
Reflect.getOwnPropertyDescriptor
Reflect.getPrototypeOf
Reflect.has
Reflect.isExtensible
Reflect.ownKeys
Reflect.preventExtensions
Reflect.set
Reflect.setPrototypeOf


Reflect 对象的设计目的有这样几个。

（1） 将 Object 对象的一些明显属于语言内部的方法（比如 Object.defineProperty ），放到 Reflect 对象上。现阶段，某些方法同时在 Object 和 Reflect 对象上部署，未来的新方法将只部署在 Reflect 对象上。也就是说，从 Reflect 对象上可以拿到语言内部的方法。

（2）修改某些 Object 方法的返回结果，让其变得更合理。比如，Object.defineProperty(obj, name, desc) 在无法定义属性时，会抛出一个错误，定义成功时返回修改后的对象。而 Reflect.defineProperty(obj, name, desc) 在定义属性成功时返回 true ，失败时返回 false。












ref:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy
https://blog.csdn.net/weixin_43974265/article/details/113726002



========================================
Object.defineProperty(obj, prop, desc)
----------------------------------------
1. 示例
let Person = {}
Object.defineProperty(Person, 'name', {
   value: 'jack',
   writable: true // 是否可以改变
})

Person.name  //"jack"
Person.name ='Tom'
Person.name //"Tom"



2. 对象常量

结合writable: false 和 configurable: false 就可以创建一个真正的常量属性（不可修改，不可重新定义或者删除）






========================================
h5中 window.history.pushState() 与 popstate 事件: 无刷新改变当前url
----------------------------------------
window.history.pushState(null, routes[this.href], this.href)


1. pushState和replaceState是一个HTML5的新接口，他们的作用非常大，可以做到改变网址却不需要刷新页面，这个特性后来用到了单页面应用中比如：vue-router，react-router-dom里面，咱们就先看看它的原理和使用案例吧。


(1) pushState说明

pushState方法接受三个参数，依次为：
- state：一个与指定网址相关的状态对象，popstate事件触发时，该对象会传入回调函数。如果不需要这个对象，此处可以填null。

- title：新页面的标题，但是所有浏览器目前都忽略这个值，因此这里可以填null。

- url：新的网址，必须与当前页面处在同一个域。浏览器的地址栏将显示这个网址。

最常用的方法：
window.history.pushState(null,null,'download?id=1');

完整使用：
var oState= {title: '下载' };
window.history.pushState(oState, '下载', 'download?id=1');

特点：
pushState()可以创建历史，可以配合popstate事件，可以使用history.go(-1)返回到上一个页面。
比如：
window.addEventListener('popstate', function(evt){
	var state = evt.state;document.title= state.title; 
}, false);





(2) replaceState和pushState原理一样使用也一样：

最常用的方法：
window.history.replaceState(null,null,'download?id=1');

完整使用：
var oState= {title: '下载' };
window.history.replaceState(oState, '下载', 'download?id=1');

特点：replaceState不会加入到历史记录里面，用history.go(-1)会跳过当前页面相当于是history.go(-2)。




2. popstate 事件 

只有在做出浏览器动作时，才会触发popstate事件，如用户点击浏览器的回退按钮（或者在Javascript代码中调用history.back()或者history.forward()方法）



window.addEventListener('popstate', (event) => {
  console.log("location: " + document.location + ", state: " + JSON.stringify(event.state));
});
history.pushState({page: 1}, "title 1", "?page=1");
history.pushState({page: 2}, "title 2", "?page=2");
history.replaceState({page: 3}, "title 3", "?page=3");
history.back(); // Logs "location: http://example.com/example.html?page=1, state: {"page":1}"
history.back(); // Logs "location: http://example.com/example.html, state: null
history.go(2);  // Logs "location: http://example.com/example.html?page=3, state: {"page":3}



ref:
https://developer.mozilla.org/zh-CN/docs/Web/API/Window/popstate_event




========================================
js数组中的find(), findIndex(), filter(), forEach(), some(), every(), map(), reduce()方法的详解和应用实例
----------------------------------------

1. find()与findIndex()

find()方法，用于找出第一个符合条件的数组成员。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为true的成员，然后返回该成员。如果没有符合条件的成员，则返回undefined。

[1, 2, 5, -1, 9].find((v) => v < 0)
//找出数组中第一个小于 0 的成员
// -1

find()方法的回调函数可以接受三个参数，依次为当前的值、当前的位置和原数组。


findIndex()方法的用法与find()方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。

[1, 2, 5, -1, 9].findIndex((n) => n < 0)
//返回符合条件的值的位置（索引）
// 3





ref:
https://www.cnblogs.com/sgs123/archive/2019/04/29/10790973.html








========================================
ES6 模板文字（template literals）
----------------------------------------
反单引号：键盘左上角esc下方的按键

模板文字是一种允许您插入变量、表达式、函数调用等内容到字符串中的方法，使用${}将这些内容包裹起来，使其成为字符串的一部分。例如：

const name="Tom"
const greeting=`Hello, ${name}!`
console.log(greeting) //Hello, Tom!


更多示例：
`${toggleRect.top}px`;
tocToggle.style.left = `${e.clientX - offsetX}px`;




========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------

