写自己的框架 dawnJS

充分吸收借鉴先进经验。

后台框架：基于 iframe 


========================================
dawnJS 简介
----------------------------------------
为了适应开发的需求，也是为了学习js，我开工造轮子：dawnJS。
有了这个需求，就需要明确一下方向，不过，这些在1.0之前都会变。1.0之后开始把api逐步稳定下来，并应用到该博客上。


宗旨
- 足够支撑该博客
- 兼容IE8, IE9, chrome, 移动端UC等。
- 好用、一致、可预测的api
- 模块化常用封装
- 充分借鉴现有经典js库，包括但不限于jQuery/underscore/mooltools/protoype/Dojo/YUI/...
- 封装顺序






========================================
|-- 司徒正美《javascript框架设计》 
----------------------------------------

在JavaScript领域，所谓的大部头莫过于《JavaScript权威指南》等。厚达千页，许多细节都涉及了。




(1)第一版2014 https://www.cnblogs.com/rubylouvre/p/3658441.html

再回来说我的书，前端的知识点是非常庞杂的。但知识只有串起来，形成知识树才是你自己的。现在市面上的书，基本上抄来抄去，还是依照老旧的方法教人，一开始总是历史回顾，然后是各种数据类型介绍，然后是语法（条件分支，循环分支）什么的，最后再来几个“真实案例”。这对于90%半路出家的前端来说，未免太闷了。而且前端不单单是javascript， javascript只是水泥， 或者说储如化学分子这东西，而我们工作是为了构建一整座大厦！只有肉眼看到的物理级别的东西才是主角。它们就是本书的重点， DOM与BOM。 javascript通过特性侦测或传参等，进入不同的分支，来解决前端臭名昭著的兼容性问题。本书介绍了大量这样的黑魔法，如何知道当前浏览器是支持这个事件呢？ 为何在这里要劫持this呢？ 怎么样让选择器引擎跑得更快。于是这一个个疑问，便化解成本书所介绍的知识点，什么AMD加载器， 选择器引擎，批量生成一堆元素节点……

所有前端框架面对的问题都是一样，不同的是解决手段的高下程度。于是Prototype死了，jQuery火了。 angular爆发了， jQuery沉寂了！本书的章节就是按照编写一个多文件框架的顺序来写。最开始肯定是种子模块，定义框架的名字与版本号，与一些最核心的方法，还有加载器。然后通过加载器，添加一些常用的工具模块，对javascript语言进行扩张与修复。之后是数据缓存什么的，再之后是主菜，各种DOM问题， 节点啊， 样式啊， 事件啊， 动画啊……最后是MVVM，当前最强大的前端解决方案。通过引入双向绑定与分层架构，完全脱离DOM进行前端开发。

阅读顺序，原则上没什么要求，但第2章、第6章、第14章、第16章是非常有挑战性的，大家可以延后阅读。如果基础不太好，可以先从第3章看起，跳过我说的那些比较难的章节。本书已经很把写一个前端框架所需要掌握的知识点与细节全部挖掘出来了，剩下的就是靠你们的造化。总之，尽快形成自己的知识树，才能独档一面。

// 各章的页数
// prelude 11 seed 17 module 14  lang 38  detect 10  class 33  selector 43
// node 55 data 17 css 34 attr 32 event 55 async  34 io 28 fx 40 plugin 13 mvvm 42

书名 javascript框架设计（400多页）

序章

第1节 框架与库
第2节 javascript年代划分
第3节 javascript框架分类
第4节 javascript框架的主要功能

第1章 种子模块
第1节 命名空间
第2节 对象扩展
第3节 数组化
第4节 类型的判定
第5节 domReady
第6节 无冲突处理

第2章 模块加载系统
第1节 AMD规范
第2节 加载器所在路径的探知
第3节 require方法
第4节 define方法

第3章 语言模块
第1节 字符串的扩展与修复
第2节 数组的扩展与修复
第3节 数值的扩展与修复
第4节 函数的扩展与修复
第5节 日期的扩展与修复


第4章 浏览器嗅探与特征侦测
第1节 判定浏览器
第2节 事件的支持侦测
第3节 样式的支持侦测
第4节 jQuery一些常用特征的含义

第5章 类工厂
第1节 javascript对类的支撑
第2节  各种类工厂的实现
第2.1节 P.js
第2.2节 JS.Class
第2.3节 simple-inheritance
第2.4节 def.js
第3节 es5属性描述符对OO库的冲击

第6章 选择器引擎
第1节 浏览器内置的寻找元素的方法
第2节 getElementsBySelector
第3节 选择器引擎涉及的知识点
第4节 选择器引擎涉及的通用函数
第4.1节 isXML
第4.2节 contains
第4.3节 节点排序与去重
第4.4节 切割器
第4.5节 属性选择器对于空白字符的匹配策略
第4.6节 子元素过滤伪类的分解与匹配
第5节  Sizzle引擎

第7章 节点模块
第1节 节点的创建
第2节 节点的插入
第3节 节点的复制
第4节 节点的移除
第5节 innerHTML, innerText与outerHTML的处理
第6节 一些奇葩的元素节点
第6.1节 iframe
第6.2节 object
第6.3节 video

第8章 数据缓存系统
第1节 jQuery的第1代缓存系统
第2节 jQuery的第2代缓存系统
第3节 mass Framework的第1代数据缓存系统
第4节 mass Framework的第2代数据缓存系统
第5节 mass Framework的第3代数据缓存系统

第9章 样式模块
第1节 主体结构
第2节 样式名的修正
第3节   个别样式的特殊处理
第3.1节 透明度
第3.2节 user-select
第3.3节 backgroundPosition
第3.4节 z-index
第3.5节 盒子模型
第3.6节 元素的尺寸
第3.7节 元素的显示隐藏
第3.8节 元素的坐标 
第4节   元素的滚动条的坐标

第10章 属性模块
第1节 如何区分固有属性与自定义属性
第2节 如何判定浏览器是否区分固有属性与自定义属性
第3节 IE的属性系统的三次演变
第4节 className的操作
第5节 Prototype.js的属性系统
第6节 jQuery的属性系统
第7节 mass Framework的属性系统

第11章 事件系统
第1节  onXXX绑定方式的缺陷
第2节  attachEvent的缺陷
第3节  addEventListener的缺陷
第4节  Dean Edward 的addEvent.js源码分析
第5节  jquery1.8.2的事件模块概览
第6节  jQuery.event.add的源码解读
第7节  jQuery.event.remove的源码解读
第8节  jQuery.event.dispatch的源码解读
第9节  jQuery.event.trigger的源码解读
第10节 jQuery对事件对象的修复
第11节 滚轮事件的修复
第12节 mouseenter与mouseleave事件的修复
第13节 focusin与focusout事件的修复
第14节 旧式IE下submit的事件代理的实现
第15节 oninput事件的兼容性处理


第12章 异步处理
第1节 setTimeout与setInterval
第2节 Mochikit Deferred
第3节 JSDeferred
第4节 jQuery Deferred
第5节 javascript异步处理的前景

第13章 数据交互模块
第1节 AJAX概览
第2节 优雅地取得XMLHttpRequest 对象
第3节 XMLHttpRequest 对象的事件绑定与状态维护
第4节 发送请求与数据
第5节 接收数据
第6节 上传文件
第7节 一个完整的AJAX实现

第14章 动画引擎
第1节 动画的原理
第2节 缓动公式
第3节 API的设计
第4节 mass Framework基于JS的动画引擎
第5节 requestAnimationFrame
第6节 CSS3 transition
第7节 CSS3 animation
第8节 mass Framework基于CSS 的动画引擎

第15章  插件化
第1节 jQuery的插件的一般写法
第2节 jQuery ui对内部类的操作
第3节 jQuery easyui的智能加载与个别化制定
第4节 更直接地操作UI实例

第16 章 MVVM
第1节　当前主流MVVM框架介绍
第2节  属性变化的监听
第3节  ViewModel
第4节  绑定
第5节  监控数组与子模板
结语





(2)第二版2017 https://book.douban.com/subject/27133542/

因为从2015年起，JavaScript就加速添加新特征、新语法、新功能，框架也变得越来越庞大，越来越复杂，因为对应的行业需求总是比我们的框架更复杂。是我们的框架适应现实，不是我们的框架无端变得如此“不可理喻”，学习门槛越来越高，要读懂已有框架的难度系数越来越陡峭。




本书全面讲解了JavaScript框架设计及相关的知识，主要内容包括种子模块、语言模块、浏览器嗅探与特征侦测、类工厂、选择器引擎、节点模块、数据缓存模块、样式模块、属性模块、PC端和移动端的事件系统、jQuery的事件系统、异步模型、数据交互模块、动画引擎、MVVM、前端模板（静态模板）、MVVM的动态模板、性能墙与复杂墙、组件、jQuery时代的组件方案、avalon2的组件方案、react的组件方案等。 

本书适合前端设计人员、JavaScript开发者、移动UI设计者、程序员和项目经理阅读，也可作为相关专业学习用书和培训学校教材。

第1章　种子模块	1
1．1　模块化	1
1．2　功能介绍	2
1．3　对象扩展	3
1．4　数组化	5
1．5　类型的判定	8
1．5．1　type	12
1．5．2　isPlainObject	13
1．5．3　isWindow	14
1．5．4　isNumeric	15
1．5．5　isArrayLike	16
1．6　domReady	17
1．7　无冲突处理	20
1．8　总结	20
第2章　语言模块	21
2．1　字符串的扩展与修复	22
2．1．1　repeat	24
2．1．2　byteLen	26
2．1．3　pad	30
2．1．4　quote	32
2．1．5　trim与空白	33
2．2　数组的扩展与修复	37
2．3　数值的扩展与修复	45
2．4　函数的扩展与修复	48
2．5　日期的扩展与修复	53
第3章　浏览器嗅探与特征侦测	57
3．1　浏览器判定	58
3．2　document．all趣闻	61
3．3　事件的支持侦测	62
3．4　样式的支持侦测	65
3．5　jQuery一些常用特征的含义	65
第4章　类工厂	68
4．1　JavaScript对类的支撑	68
4．2　各种类工厂的实现	73
4．2．1　相当精巧的库—P．js	74
4．2．2　JS．Class	76
4．2．3　simple-inheritance	78
4．2．4　体现JavaScript灵活性的库—def．js	81
4．3　进击的属性描述符	85
4．4　真类降临	93
第5章　选择器引擎	102
5．1　浏览器内置的寻找元素的方法	103
5．2　getElementsBySelector	105
5．3　选择器引擎涉及的知识点	108
5．3．1　关系选择器	109
5．3．2　伪类	111
5．3．3　其他概念	113
5．4　选择器引擎涉及的通用函数	114
5．4．1　isXML	114
5．4．2　contains	115
5．4．3　节点排序与去重	117
5．4．4　切割器	121
5．4．5　属性选择器对于空白字符的匹配策略	123
5．4．6　子元素过滤伪类的分解与匹配	125
5．5　Sizzle引擎	127
5．6　总结	135
第6章　节点模块	136
6．1　节点的创建	136
6．2　节点的插入	142
6．3　节点的复制	144
6．4　节点的移除	148
6．5　节点的移除回调实现	151
6．5．1　Mutation Observer	152
6．5．2　更多候选方案	153
6．6　innerHTML、innerText、outerHTML、outerText的兼容处理	157
6．7　模板容器元素	161
6．8　iframe元素	162
6．9　总结	165
第7章　数据缓存模块	166
7．1　jQuery的第1代缓存系统	166
7．2　jQuery的第2代缓存系统	172
7．3　jQuery的第3代缓存系统	175
7．4　有容量限制的缓存系统	176
7．5　本地存储系统	178
7．6　总结	184
第8章　样式模块	185
8．1　主体架构	186
8．2　样式名的修正	189
8．3　个别样式的特殊处理	190
8．3．1　opacity	190
8．3．2　user-select	192
8．3．3　background-position	192
8．3．4　z-index	193
8．3．5　盒子模型	194
8．3．6　元素的尺寸	195
8．3．7　元素的显隐	201
8．3．8　元素的坐标	203
8．4　元素的滚动条的坐标	209
8．5　总结	210
第9章　属性模块	211
9．1　元素节点的属性	212
9．2　如何区分固有属性与自定义属性	214
9．3　如何判定浏览器是否区分固有属性与自定义属性	216
9．4　IE的属性系统的3次演变	217
9．5　className的操作	218
9．6　Prototype．js的属性系统	221
9．7　jQuery的属性系统	226
9．8　avalon的属性系统	229
9．9　value的操作	232
9．10　总结	235
第10章　PC端的事件系统	236
10．1　原生API简介	238
10．2　on×××绑定方式的缺陷	239
10．3　attachEvent的缺陷	239
10．4　addEventListener的缺陷	241
10．5　handleEvent与
EventListenerOptions	242
10．6　Dean Edward大神的addEvent．js源码分析	243
10．7　jQuery的事件系统	246
10．8　avalon2的事件系统	248
10．9　总结	254
第11章　移动端的事件系统	255
11．1　touch系事件	256
11．2　gesture系事件	258
11．3　tap系事件	259
11．4　press系事件	268
11．5　swipe系事件	271
11．6　pinch系事件	273
11．7　拖放系事件	276
11．8　rotate系事件	279
11．9　总结	282


第12章　异步模型	283
12．1　setTimeout与setInterval	284
12．2　Promise诞生前的世界	287
12．2．1　回调函数callbacks	287
12．2．2　观察者模式observers	287
12．2．3　事件机制listeners	289
12．3　JSDeferred里程碑	289
12．4　jQuery Deferred宣教者	299
12．5　es6 Promise第一个标准模型	303
12．5．1 构造函数：Promise ( executor )	308
12．5．2 Promise．resolve/reject	309
12．5．3 Promise．all/race	309
12．5．4 Promise#then/catch	310
12．5．5 Promise#resolve/reject	310
12．5．6 Promsie#notify	311
12．5．7 nextTick	312
12．6　es6生成器过渡者	314
12．6．1 关键字yield	315
12．6．2 yield*和yield的区别	316
12．6．3 异常处理	317
12．7　es7 async/await终极方案	319
12．8 总结	321

第13章　数据交互模块	323
13．1　Ajax概览	323
13．2　优雅地取得XMLHttpRequest 对象	324
13．3　XMLHttpRequest对象的事件绑定与状态维护	326
13．4　发送请求与数据	328
13．5　接收数据	330
13．6　上传文件	333
13．7　jQuery．ajax	335
13．8　fetch，下一代Ajax	340

第14章　动画引擎	344
14．1　动画的原理	344
14．2　缓动公式	347
14．3　jQuery．animate	349
14．4　mass Framework基于JavaScript的动画引擎	350
14．5　requestAnimationFrame	358
14．6　CSS3 transition	364
14．7　CSS3 animation	368
14．8　mass Framework基于CSS的动画引擎	370

第15章　MVVM	378
15．1　前端模板（静态模板）	378
15．2　MVVM的动态模板	388
15．2．1　求值函数	390
15．2．2　刷新函数	395
15．3　ViewModel	399
15．3．1　Proxy	400
15．3．2　Reflect	401
15．3．3　avalon的ViewModel设计	403
15．3．4　angular的ViewModel设计	407
15．4　React与虚拟DOM	412
15．4．1　React的diff算法	415
15．4．2　React的多端渲染	417
15．5　性能墙与复杂墙	417

第16章　组件	422
16．1　jQuery时代的组件方案	422
16．2　avalon2的组件方案	427
16．2．1　组件容器	429
16．2．2　配置对象	430
16．2．3　slot机制	430
16．2．4　soleSlot机制	431
16．2．5　生命周期	432
16．3　React的组件方案	433
16．3．1　React组件的各种定义方式	433
16．3．2　React组件的生命周期	439
16．3．3　React组件间通信	441
16．3．4　React组件的分类	445
16．4　前端路由	446
16．4．1 storage	447
16．4．2 mmHistory	448
16．4．3 mmRouter	454
彩蛋	458




========================================
模块模式的实现与扩展
----------------------------------------
js使用闭包实现了变量的私有。

// 模块模式基础实现
var module1 = (function(){
	var _privateNum;
	var _privateGet=function(){
		return _privateNum;
	};
	var _privateSet=function(num){
		_privateNum=num; 
	};
	var increase=function(num){
		var num = num || 1;
		_privateNum += num; 
	}
	return {
		get:_privateGet,
		set:_privateSet,
		increase:increase
	}
}());

module1.set(2);
module1.get();//2
module1.increase(100)
module1.get();//102



========================================
|-- 模块化实现的3种方式
----------------------------------------

最近几年，JavaScript得到飞速发展，一些框架越来越大，已经不像过去那样全部写进一个JS文件中。但拆到多个JS文件时，就要决定哪个是入口文件，哪个是次要文件，而这些次要文件也不可能按1、2、3、4的顺序组织起来，可能1依赖于2、3，3依赖于4、5，每个文件的顶部都像其他语言那样声明其依赖，最后在结束时说明如何暴露出那些变量或方法给外部使用。

　　就算你的框架只有几千行，在开发时将它们按功能拆分为10多个文件，维护起来也非常方便。加之Node.js的盛行，ES2016许多语法不断被浏览器支持，我们更应该拥抱模块化。

　　本书所介绍的所有模块，都以Node.js提倡的CommonJS方式组织起来。

　　时下流行3种定义模块的规范：AMD、CommonJS与ES6 module。它们都被webpack所支持。
- 以AMD定义JS模块通过RequireJS能直接运行于浏览器；
- CommonJS则需要browserfy等Node.js打包后才能运行于浏览器；
- ES6 module在我写书时，还没有浏览器支持，需要webpack、rollup等Node.js工具打包才能运行于浏览器。





========================================
用户访问统计系统(还差得很远，有待完善...)
----------------------------------------
<a href="https://github.com/cdnjs/cdnjs" target="_blank" onclick="_hmt.push(['_trackEvent', 'footer', 'click', 'footer-github.com'])">cdnjs</a>



1. 基础版本： 记录了访问记录。还没有统计功能。
需要一个js，一个php。
js文件中引入php要用绝对url，否则访问不到。
php要允许跨域，否则会报错被屏蔽。
php把请求用户信息记录到文件。后期可以改为数据库。


(1)需要跟踪的页面，引入js文件即可:
<script src="http://applybio.com/track/dawnTrack.js?time="+new Date().getTime()></script>


(2) dawnTrack.js
/*
引入方式:
//<script src="http://m.biomooc.com/dawnTrack.js?time="+new Date().getTime()></script>
//<script src="http://applybio.com/track/dawnTrack.js?time="+new Date().getTime()></script>

v0.1 基本可用
*/
function dawnTrack(source){
	var xmlhttp=new XMLHttpRequest(); //1.获取对象
	//2.绑定回调函数
	xmlhttp.onreadystatechange=function(){
		if (xmlhttp.readyState==4 && xmlhttp.status==200){
			//console.log(xmlhttp.responseText)
			//document.getElementById("text").innerHTML=xmlhttp.responseText;
		}
	}
	//3.设定访问的url
	//http://applybio.com/track/dawnTrack.php?source=http://ielts.biomooc.com/reading/index2.html&time=1577358456750
	xmlhttp.open("GET","http://applybio.com/track/dawnTrack.php?source="+source+"&time="+new Date().getTime(),true);
	//4.发送请求
	xmlhttp.send();
}

dawnTrack( window.location )



(3) dawnTrack.php
<?php
/*
v0.1 基本可用
v0.2 能跨域
*/

//1.允许跨域
header('Server: suctom-server',true);
//header('HTTP/1.1 200 OK');
header('Server: WJL_track_server/0.1');
header('Email: jimmymall@163.com');
//header('Content-Type:text/html;charset=UTF-8');//html文件类型,UTF-8类型
header("Access-Control-Allow-Origin: *");


/*2. tools: function and classes*/
########## ip
//https://www.cnblogs.com/binaryworms/articles/1947032.html
function GetIP(){
	if(!empty($_SERVER["HTTP_CLIENT_IP"])){
	  $cip = $_SERVER["HTTP_CLIENT_IP"];
	}
	elseif(!empty($_SERVER["HTTP_X_FORWARDED_FOR"])){
	  $cip = $_SERVER["HTTP_X_FORWARDED_FOR"];
	}
	elseif(!empty($_SERVER["REMOTE_ADDR"])){
	  $cip = $_SERVER["REMOTE_ADDR"];
	}
	else{
	  $cip = "无法获取！";
	}
	return $cip;
}
$ip= GetIP();



########## url
//获取完整的url
$url= 'http://'.$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'];
//获取网址参数
$para= $_SERVER["QUERY_STRING"]; #id=1


//显示访问用户的浏览器信息
$agent=$_SERVER['HTTP_USER_AGENT'];


/*####### working begin #######*/
// 解析并生成信息
//$msg="open from: ". $ip.' '. date("Y/m/d H:m:s").' '. $url .' '. $para;
//$msg='{IP:"'. $ip.'", serverDate:"'. date("Y/m/d H:m:s").'", para:"'. $para.'"},';
$n="\n";
$msg="=========";
$msg .= '===========\n{IP:"'. $ip.'", '.$n.
	'serverDate:"'. date("Y/m/d H:m:s").'", '.$n.
	'para: "'. $para.'", '.$n.
	'agent:"'.$agent.'"},\n---------';
$msg .= "-----------\n";


// 文件名
#$date = date("Ymd");
$date = date("Ym");
#
$dir = './tmp';
is_dir($dir) OR mkdir($dir, 0777, true); // 如果文件夹不存在，将以递归方式创建该文件夹
#
$file_name = 'tmp/'.$date.'.txt';

//记录信息
$wordfile_handler = fopen($file_name, "a");
fwrite($wordfile_handler, $msg."\n");
fclose($wordfile_handler);

echo "Hello, php";




(3).记录的文件
类似这种年月文件名
http://applybio.com/track/tmp/201912.txt

能按照IP和agent区别人了。
能看到是否是4G。



zhangqi
{IP:"117.136.40.221", 
serverDate:"2019/12/26 19:12:17", 
para: "source=http://ielts.biomooc.com/reading/dawnReader.html?text=http://ielts.biomooc.com/reading/2020/1/1.txt&time=1577359099112", 
agent:"Mozilla/5.0 (iPhone; CPU iPhone OS 13_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 MicroMessenger/7.0.9(0x17000929) NetType/4G Language/en"},


wang xuefei
{IP:"116.7.234.243", 
serverDate:"2019/12/26 19:12:27", 
para: "source=http://ielts.biomooc.com/reading/index2.html&time=1577359168844", 
agent:"Mozilla/5.0 (iPhone; CPU iPhone OS 12_1_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/16D57 MicroMessenger/7.0.8(0x17000820) NetType/WIFI Language/en"},

{IP:"116.7.234.243", 
serverDate:"2019/12/26 19:12:42", 
para: "source=http://ielts.biomooc.com/reading/dawnReader.html?text=http://ielts.biomooc.com/reading/2019/12/7.txt&time=1577359123763", 
agent:"Mozilla/5.0 (iPhone; CPU iPhone OS 12_1_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/16D57 MicroMessenger/7.0.8(0x17000820) NetType/WIFI Language/en"},



Me:
{IP:"116.7.234.243", 
serverDate:"2019/12/26 19:12:50", 
para: "source=http://ielts.biomooc.com/reading/dawnReader.html?text=http://ielts.biomooc.com/reading/2019/12/24.txt&time=1577359311849", 
agent:"Mozilla/5.0 (Linux; Android 5.1.1; vivo X7Plus Build/LMY47V) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/39.0.0.0 Mobile Safari/537.36 MMWEBID/9595 MicroMessenger/7.0.6.1460(0x27000634) Process/tools NetType/WIFI Language/zh_CN"},


浏览器访问:
{IP:"116.7.234.241", 
serverDate:"2019/12/26 19:12:07", 
para: "source=http://ielts.biomooc.com/reading/index2.html&time=1577361788546", 
agent:"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36"},







========================================
iframe 特性
----------------------------------------
更多demo见: jsLecture/iframe







========================================
|-- 当鼠标嵌入iframe时，防止父页面滚动 
----------------------------------------
1. 弹出层后，希望背景固定不动

(1) 直接使用不行
$('body').bind('mousewheel DOMMouseScroll', onWheel);

function onWheel (e){
    if (e.target === iframe)
        e.preventDefault();
    console.log(e);
}

可能的原因，是 不同 window 不能正常传递事件的信号？


(2) 需要换一个思路：直接使用scroll事件而不是mousewheel/ DOMMouseScroll1.

当用户将鼠标移到上面时iframe,我设置了一个标志true,当他将鼠标移开时,我将其设置为false.

然后,当用户尝试滚动,但鼠标箭头在iframe内时,我阻止父窗口滚动.但是,遗憾的是,您无法使用常规e.preventDefault()方法阻止窗口滚动,因此我们仍需要另一种解决方法,强制窗口精确滚动到之前已经存在的X和Y位置.

(function(w) {
    var s = { insideIframe: false } 

    $(iframe).mouseenter(function() {
        s.insideIframe = true;
        s.scrollX = w.scrollX;
        s.scrollY = w.scrollY;
    }).mouseleave(function() {
        s.insideIframe = false;
    });

    $(document).scroll(function() {
        if (s.insideIframe)
            w.scrollTo(s.scrollX, s.scrollY);
    });
})(window);

创建一个立即执行的函数来防止s在全局范围内定义变量.



ref: https://qa.1r1g.com/sf/ask/2251567251/






========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------





========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------

