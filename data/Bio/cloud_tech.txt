cloud_tech



国内提供生物信息公有云的厂商还是有多个，比如说聚道科技、基云惠康、华大BGI online等。


生信云是云计算市场中必不可少且增长速度最快的部分之一，是云计算行业最具实际应用价值的方向之一：承担人类疾病数据的存储、数据挖掘和知识转化。





========================================
生信云平台技术的实现和难点
----------------------------------------
生信分析云平台产品开发 - 6 生信分析pipeline批量运行与过程控制
	http://api.shengxin.ren/article/832

生信分析云平台产品开发 - 1简单需求分析及技术实现
	https://shengxin.ren/article/799

生信分析云平台开发
	https://www.zhihu.com/column/c_1160914412436779008


生物信息公有云的困境
	https://www.cn-healthcare.com/articlewm/20191106/content-1074937.html










========================================
低代码平台：plotly.com:  基于python 的 dash
----------------------------------------
1. 
https://plotly.com/






========================================
整体框架： 若依开源框架 (开源协议：MIT)
----------------------------------------
http://www.ruoyi.vip/
https://blog.csdn.net/weixin_45433031/article/details/122971685


文档: http://doc.ruoyi.vip/ruoyi/
代码:
	https://github.com/yangzongzhuan/RuoYi
	https://gitee.com/y_project/RuoYi


前端: Vue,ElementUI
后端: Spring Boot、Spring Security、Redis & Jwt



文档地址：
	http://doc.ruoyi.vip

这套系统简单易学，上手容易，界面简洁美观，
而且这个框架有前后端不分离、分离和微服务三个版本，
	其中前后不分离的，一个工程代码即可解决，非常适合新手练习。
	也有很多公司采用该框架开发产品，比较适合轻量级开发。

	前后端分离版本：视频: https://www.bilibili.com/video/BV1HT4y1d7oA?p=1












========================================
|-- 前端框架采用 Hplus(又名 H+) (MIT协议)
----------------------------------------
https://gitee.com/hplus_admin/hplus




========================================
低代码平台：无远
----------------------------------------
https://wuyuan.io/?bd_vid=7774382360994023698









========================================
其他项目：基于 Java的前后端项目
----------------------------------------
1.分布式医疗云平台项目
	https://www.bilibili.com/video/BV1D5411D7G9/








========================================
国内外案例、技术分析
----------------------------------------
1. 美国圣述德儿童医院 St. Jude Cloud （共享超过5000例儿童癌症全基因组、6000例外显子、1500例RNA-seq数据)，
DOI: 10.1158/1538-7445.AM2018-922


2. 上海欧易生物单细胞生物信息分析
https://www.zhihu.com/people/hs3434
目前在做生信云平台的生信分析工具研发，请问后续应该往什么方向努力比较有钱景？前端UI设计，后端数据库，还是平台基础设施？或者都要懂？




========================================
|-- Firmiana: 蛋白质分析云平台 (nature, 2017)
----------------------------------------
https://www.nature.com/articles/nbt.3825#author-information


========================================
|-- 百迈客私有云
----------------------------------------
https://it.sohu.com/a/653593516_120055884



========================================
|-- 诺禾致源 人WGS/WES/TRS云平台
----------------------------------------
https://www.bilibili.com/video/BV1bP411J7P7/











========================================
|-- hiplot by openbiox
----------------------------------------
1. paper
Hiplot (ORG): a comprehensive and easy-to-use web service for boosting the publication-ready biomedical data visualization. Briefings in bioinformatics. 2022. https://doi.org/10.1093/bib/bbac261

https://github.com/hiplot/plugins-open
https://hiplot.org/




2. 网站介绍

(1) 我们为大家提供了三种可选方式来向 Hiplot 网站贡献新的插件：
1）只需要实现可视化核心程序/函数，然后通过网站反馈功能向我们提交该程序/函数的公共/私有访问链接即可；
2）基于标准的JSON文件和核心脚本开发插件文件（https://hiplot.org/docs/zh/development-guides/）；
3）使用本地运行/开发库中的 HiSub 程序，用于解析带有注释的结构化 R 脚本生成插件文件。

基于我们提供的基础库，所有绘图插件的核心功能均可以在本地完成独立开发和调试。而网站的用户 UI 接口则可以使用我们提供的在线预览工具 https://hiplot.org/developer/plugin-preview 在线调试和渲染 UI 组件。

// 本地运行 Hiplot 开源插件
hicli -i data.txt -c data.json -t helloword -m basic -e -s -o hwtest/helloword



(2) 网站工具类型及其组件Hiplot 网站工具主要分为三种：
	Vue.js 前端 + R/其他后端程序 （可以使用 hctl 调用）
	Shiny 应用
	纯前端应用（不依赖后台程序）
对应的实现：
	第一种：火山图, 气泡图, 箱式图
	第二种：UCSCXenaShiny, Gene ID Convertor, SMART
	第三种：sra-explorer, clipboard2markdown, online-encode-decode



(3) Meta JSON 格式说明
大部分 Hiplot 网站工具插件均需要提供 Meta JSON 文件，方便用户对工具进行检索、分类和查询元信息。文件格式如下代码库所示。其中 name、intro、src、href、meta 为必须字段，分别表示工具插件的名字、一句话简介、封面图、网站访问路径（不能重复）、其他元信息。该文件可以被自动渲染为卡片和右侧文档信息。


其他元信息（meta）包括：score、author、email、issues、citation、releaseDate、updateDate 等字段，分别表示该工具的评分、作者、邮箱、问题反馈页面、引用信息、发布日期、更新日期。
{
    "name": {
      "zh_cn": "Sigflow",
      "en": "Sigflow"
    },
    "intro": {
      "zh_cn": "突变 Signature 分析",
      "en": "Mutation Signature Analysis."
    },
    "src": "https://s1.imagehub.cc/images/2020/08/31/3-a6RT9P-tuya.jpg",
    "href": "/advance/sigflow",
    "tag": ["vue", "mutation"],
    "meta": {
      "score": 5,
      "author": "Hiplot Team | Shixiang Wang",
      "email": "wangshx@shanghaitech.edu.cn",
      "issues": "https://github.com/ShixiangWang/sigminer.workflow",
      "citation": "Sigflow: an automated and comprehensive pipeline for cancer genome mutational signature analysis. Shixiang Wang, Ziyu Tao, Tao Wu, Xue-Song Liu. bioRxiv 2020.08.12.247528; doi: https://doi.org/10.1101/2020.08.12.247528",
      "releaseDate": "2020-08-05",
      "updateDate": "2020-08-05"
    }
  }



(4) Data JSON 格式说明

该文件仅在开发 Vue.js 前端 + R/其他后端程序时需要，且可以直接作为hctl命令行程序的输入参数。示例格式如下所示。

# 面积图
{
  "module": "basic",
  "tool": "area",
  "params": {
    "textarea": { "datTable": "" },
    "config": {
      "general": {
        "cmd": "",
        "imageExportType": ["jpeg", "pdf"],
        "size": {
          "width": 4,
          "height": 2.5
        },
        "theme": "theme_bw",
        "palette": "lancet",
        "title": "",
        "alpha": 1
      }
    }
  },
  "exampleData": {
    "config": {
      "general": {
        "title": "Area Plot"
      }
    },
    "textarea": {
      "datTable": "group\txaxis.value\tyaxis.value\nGroup1\t1900\t26\nGroup1\t1901\t27\nGroup1\t1902\t10\nGroup1\t1903\t16\nGroup1\t1904\t19\nGroup1\t1905\t18\nGroup1\t1906\t30\nGroup1\t1907\t27\nGroup1\t1908\t23\nGroup1\t1909\t8\nGroup2\t1900\t10\nGroup2\t1901\t10\nGroup2\t1902\t8\nGroup2\t1903\t6\nGroup2\t1904\t9\nGroup2\t1905\t7\nGroup2\t1906\t10\nGroup2\t1907\t6\nGroup2\t1908\t5\nGroup2\t1909\t3\nGroup3\t1900\t20\nGroup3\t1901\t14\nGroup3\t1902\t14\nGroup3\t1903\t14\nGroup3\t1904\t17\nGroup3\t1905\t17\nGroup3\t1906\t10\nGroup3\t1907\t19\nGroup3\t1908\t11\nGroup3\t1909\t18"
    }
  }
}


每一个 Data JSON 文件均需包含以下四个字段：
	module (模块名：basic/advance)
	tool (工具名：area/heatmap......)
	params (绘图参数)：包含 textarea 和 config
	exampleData (示例数据)


textarea 与网站的数据表格对应，凡是需要使用数据表格的网站工具，均需包含 textarea 字段。
而 config 则为其他绘图参数（其中通用参数字段 general 为必须）：
	data（数据参数）：用于数据输入，存放文件和非表格类字符串类型数据。当输入为文件，且存在与 textarea 保持同名，则可以支持表格和文件输入的模式切换。
	dataArg（数据列选择）：用于选择数据表指定列，如火山图中的 Symbol、P.Value、logFc。
	general (通用参数)：cmd 用于后续开发编程接口、imageExportType 设置图片导出类型、size 控制导出图片的大小、theme 为 ggplot2 主题、palette 为离散型颜色主题、paletteCont 为连续型颜色主题、title 标题名。
	extra（附加参数）：所有非通用参数均在此字段设置。

textarea、data、dataArg 以及 extra 字段需要配合 UI JSON 格式文件才可以发挥作用。更复杂的 Data JSON 格式文件如以下所示。

Data JSON 示例：热图
	略: https://zhuanlan.zhihu.com/p/512211723




(5) UI JSON 格式说明
UI JSON 文件主要用于自动渲染 Vue.js 应用前端。主要包括以下三个字段：
	data
	dataArg
	extra


https://vuetifyjs.com/en/components/autocompletes/





3. 部分基础库代码说明
Hiplot 的后台绘图脚本默认使用 R 完成。其代码主要分为数据处理和配置、绘图、导出三个区块。Hiplot 已默认完成数据导入

一些通用函数：
	return_hiplot_palette_color 和 return_hiplot_palette 返回 ggplot2 绘图颜色主题
	choose_ggplot_theme 设置 ggplot2 主题
	export_single 导出图片

conf 变量为 Data JSON 中 config 字段解析后的结果，可以通过 conf$extra 获取其附加参数。

opt$outputFilePrefix 为导出的目录+前缀，如/path/output/s.12323，则生成的 PDF 文件路径为 /path/output/s.12323.pdf。通过 dirname(opt$outputFilePrefix) 可以得到结果输出目录。

在该目录内可以生成任意数量的 PNG、PDF、HTML、tif 文件，以及一个 XLSX 表格文件，相关文件的下载路径将被作为结果发送至用户。

对于一些输出结果较多的工具，可以在该目录下新建一个 output 目录作为结果输出路径，并将其中额外结果打包至一个 gzip 文件中供用户下载，如 /path/s.12323.tar.gz。

如果是其他命令行脚本（Python/Bash 等），可以通过以下模板完成执行 (通过conf可以获取输入参数)，其中conf$data可包含任意个输入的文件，通过parse_file_link(conf$data$[your_file_id]$link)函数即可获取对应的输入文件路径。





========================================
不同编程语言 互相调用的方式
----------------------------------------
1. 有三种
https://pubmed.ncbi.nlm.nih.gov/31278684/

we compare the three principal approaches for sharing software between different programming languages: 
  by remote procedure call (RPC), 
  by sharing a local "call stack," 
  and by calling program to programs.


(1) RPC
RPC provides a language-independent protocol over a network interface; 

examples are 
  SOAP 
  and Rserve. 


(2) "call stack"

The local call stack provides a between-language mapping, not over the network interface but directly in computer memory; 

examples are 
  R bindings, 
  RPy, 
  and languages sharing the Java virtual machine stack. 


(3)
This functionality provides strategies for sharing of software between Bio* projects, which can be exploited more often.


2. 展示跨语言案例：序列翻译
Here, we present cross-language examples for sequence translation and measure throughput of the different options. 

We compare calling into R through native R, RSOAP, Rserve, and RPy interfaces, with the performance of native BioPerl, Biopython, BioJava, and BioRuby implementations and with call stack bindings to BioJava and the European Molecular Biology Open Software Suite (EMBOSS).

结果：
In general, call stack approaches outperform native Bio* implementations, and these, in turn, outperform "RPC"-based approaches. 

To test and compare strategies, we provide a downloadable Docker container with all examples, tools, and libraries included.






========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



