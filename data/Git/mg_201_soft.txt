mg_201_soft

笼统的软件研发管理，尽量不关联具体技术。
有时候和人员管理分类是两可的。



========================================
怎么提高软件研发质量和效率 (2014-05-25 13:05:18)
----------------------------------------

以下是国内研发团队普遍常见问题，大家说说各个岗位怎么提高质量和效率吧。
一、产品设计
1、业务需求不会解构洞察，客户提什么就做什么，业务需求和软件功能要求混在一起
2、不会建立业务模型和产品模型，客户提什么就做什么
3、不会理性需求排级，不做数据度量论证/也没有数据可度量/也不知道度量哪些合理数据，客户谁权力大谁态度恶劣谁叫的声大，就先满足谁的需求
4、不会增量设计，只会撕开个口子强塞进去
5、场景不会分离，各种场景混合在一起
6、不考虑非功能性系统需求

二、项目管理
1、团队成员属于各自部门，成员受部门经理和项目经理双重领导
2、项目团队不坐在一起，测试坐在测试部、开发坐在开发部
3、不理解方案，不知道最佳方案，不知道如何合理评估工时，出了异常问题不知道如何做正确决策才算正确合理
4、不会资源管理、排产管理
5、推动力、协调调度、沟通说服能力不足
6、不知道如何正确开日立会、日立会的目的和重点是什么
7、不知道怎么做合适的项目报告

三、开发
1、不接触客户，不理解需求，不理解功能为啥要这样设计
2、开发期才介入项目
3、代码不会按场景分离
4、不会代码设计，流程和细节都在一个函数，功能多复杂代码就多复杂
5、不会进行接口设计、函数输入输出参数设计、异常日志报告与记录、返回值设计
6、不会面向对象编程，业务逻辑怎样就怎么写代码
7、不会单元测试

四、测试
1、不接触客户，不理解需求，不理解功能为啥要这样设计
2、测试期才介入项目
3、不会技术，阅读不懂专业测试工具产生的专业报告，不会自己开发或定制专业测试工具，也看不懂代码，也不会跟踪查询代码执行和数据变化

五、交付
没有灰度上线框架与工具
研发团队既负责研发，又负责实施上线/数据处理，又负责日常客户使用过程中的突发问题处理

六、运维
没有应用软件运维团队，只有基础设施运维团队
没有专业运维监控报警工具，基础设施运维团队自己不会开发软件


========================================
怎么入门编程？ 
----------------------------------------

2015-11-30 v1
2021-7-18 v2 update

1.多敲代码是关键，看视频或书的时候不要找源码，自己敲出来。

2.打字速度：慢了肯定不行，一开始就要学习盲打，到最后打字速度要至少和思考的速度一致。

3.一定不要感叹难！简单的东西不值钱，相信大家都懂。我们学习一个东西，不是因为它难，而是因为它强大。

4.花多少时间？时间的投入是必要条件。精通一个东西需要投入至少一万个小时的有效时间。意味着每天投入10个小时需要连续3年。否则总会磕磕碰碰，似懂非懂。建议学习的时候只打开必须的软件，关掉QQ、360等无关的东西，如果你一会看看电影，一会看看空间，一会看新闻，请自觉减掉这些时间。学习确实很枯燥，随时有一条路你可以选择，就是放弃。达到一千小时基本就入门了。

5.什么是入门？入门不是一个时间概念，是指你有一定的自学能力了。
自学能力是指对整体有一定的理解，熟练常用用法，很多高级概念不精通，但已经基本熟悉或知道名词概念了，摆脱了一问三不知的境地。
这个阶段可以通过自身努力，寻找资源，有自己的学习方式，能做到逐步提高。

6.我是否有自学能力？这个很难判断，但是可以通过历史判断未来。问自己四个问题：
	1).你有没有成功自学一门技术，并达到很高的水准？如超过了80%的圈内人。这个是决定性的。
	2).每当与别人的判断不一致时，你的胜率是多少？
	3).你擅长独立思考并总结出适合自己的方法吗？
	4).你坚持做一件事，有没有超过两年时间？
怎么入门编程？ 图略。
 
	自学方法本身也是一个自我修正调整的过程。

7.什么是好的学习习惯？每天如何平衡做项目和探索新知识的时间？如何关注新知识？代码如何管理分享和协作？学着后面忘着前面怎么办？……对知识的管理是技术人员毕生的事业。
	- 能用自己的语言叙述出来，并且让不懂的人搞懂，才算真的懂。
	- 很久不用的技术能快速（当初学习时1%的时间）找回感觉，只能靠笔记，当然是电子笔记，比如博客。


8.我是否只看我关心的一个技术就行了？我的理解是在精力足够的情况下，能多学一点是一点。它会扩充你的视野，到后期加快你的学习速度。前段和后端是藕断丝连的，数据库也是贯穿始终的。到复杂场景的时候，数据局结构、算法也是不可避免的。大项目中设计模式也是必不可少的。非常规需求中离散数学也是需要重修的。团队协作和管理肯定也会是个坎……越学越感觉自己的无知是正常的。

9.怎么入门编程？
入门看视频，提高看书籍，飘升做项目。
老练研开源，高手读外文，大牛讲低调~

10.怎么找视频？
百度。很多东西都是靠搜索出来的。
商业机构的资源也不错，就看你怎么得到了。
推荐网站：慕课网。网易云课堂。百度贴吧中贴出来的百度云视频链接。达内。传智播客。


11.怎么找书？
百度贴吧中贴出来的百度云pdf书链接。新浪微盘。
牛人们的博客也是一大资源：百度搜索话题、iteye、csdn、博客园、简书、微信搜索(公众号)、GitHub、。

12.怎么找项目？
这个给钱就做。不给钱在开始阶段可以练练手。
注意一定要留一手，免得代码交付了却收不到钱。

13.怎么找开源？
开源中国，github等都有。看能力和时间找着做。

14.我不会外文可以吗？
因为最先进的东西总是英文，翻译过来的都晚好几年了。不过我们使用的一般都是稳定版本，大多数人不需要太追新。也就是不会英语当码农妥妥的，但走不远。不过，大多数人都走不远。

15.为什么讲低调？
我也不懂，还没到这个层次。不过，我猜测他们一般不写带代码了，整天画画设计图，管理一下项目进展，制定一下标准specs，参加会议讲话什么的，基本不再对具体代码做评论了，所以在小白看来是低调了。

16.遇到瓶颈了，怎么提高？
基础不牢，地动山摇。
温故而知新。
刻意练习的程度决定着能达到的高度。刻意练习，就是找到自己的薄弱环节，专门大量练习，这个过程很痛苦，但最有效。

17.你感觉这个世界对新手很不友好？
那就对了，有人不停地问你拼音和英语字母（不是英语，是英语字母）的书写和发音，你烦不烦？
等你入门了再看看当时你问的问题，你想想你会回答多少？
所以，感谢愿意回答你傻瓜问题的人。你骂人家，人家收你钱了吗？
那新手应该怎么办？
没见过冰岛语，就想用冰岛语写文章?!磨刀不误砍柴工。
买本书，从第一页看起。按部就班，是最快的学习方法。

18.我现在学晚吗？
种一棵树最好的时间是十年前，其次是现在。

19. 我感觉学不会？
所谓的尽力，就是为了做成一件事而相尽办法，不择手段。
自己衡量，感觉真的已经尽力，还是啥都不会，那就放弃吧。
毕竟每个人天资不同，即便是程序员圈内，地球上能写操作系统的人也不多。但是大家也都有擅长或熟练的方向。



建议：
程序员整天给别人写软件，给自己写的软件不多：
- 学习git的使用，记录自己的代码。
- 学习linux的使用，命令行才是写代码最常用的格式。
- 学习一个重量级（如eclipse）一个轻量级的文本编辑器（如notepad++、sublime等）。


微软的知识体系自成一家，建议看微软的msdn。

一个生信manual网站：https://www.plob.org/article/258.html





========================================
视频教程的录制与制作的流程，方法，经验(宁皓网: 王皓)
----------------------------------------
作者：王皓
发布于：2013-01-28 15:13
更新于：2015-02-02 22:03

关于视频教程的录制，编辑，与制作。这些东西耗费了我很大的功夫，一点点问题都要很久才能解决，现在想起来，当初的问题，有点可笑。有朋友建议我做个视频教程的教程，目前来看还没有这个打算，不过我想写出来跟大伙分享一下。阶段性的，这个阶段我只有这个程度，还有很多问题没有解决，如果发现有更好的方法，我会继续写出来与大家分享。

宁皓网所用的视频教程制作设备
宁皓网的视频教程制作流程

这只是我用的流程，你可以按自己的喜好来决定，或者优化。

1. 定课程的主题

每套教程我都希望可以帮大家解决一个系列的问题，这套教程应该有一个大的主题。课程的主题大部分我都是在应用中定下来的，所以有朋友推荐我写一个全年课程的大纲，我实在写不出来，因为我也不知道下一个课程是什么主题。 ：）

我希望能让宁皓网的课程模块化，就是每个课程可以独立，又相互有点联系，让大家可以根据自己的需求，来重新组织观看的课程。

每个课程我会细分成很多小节，分节的好处是，方便大伙以后返回查阅，在看完每个视频的时候，人们会有一个完成一个任务的感觉。每个小节的课程大概在 5 分钟左右，要尽量让视频更短，而不是更长。我觉得每个课程理想的时长应该跟电影差不多，一般的电影 90 分钟左右，大片 140 分钟左右，也可以是电视剧的长度，每个课程 40 分钟左右。

2. 把想要讲的写出来

我会把要录的课程先写出来，在写的过程中，可以思考怎么说才能让大家更明白，每一个小节的重点是什么，需不需要在这里介绍一个新的概念，在哪里提出来，怎么样解释，是直接在这小节里解释，然后放在后面解释 ... 反正你会想到很多

写出来，即使你很了解自己要讲的东西。就是因为你太了解这些东西，有时会忘了看你课程的人，一个小小的专业术语，会让我想半天，它到底是什么意思，所以，能用白话整明白，就不要说专业术语。

这一步用到的软件，Windows 上我会用微软的 onenote ，Mac 上我会用 Evernote 。

3. 视频的录制

宁皓网的视频教程基本上只是录电脑屏幕，当然，更好的方法是，屏幕与真人一起录，你可以把它们剪接在一起，或者，个别视频录真人。我觉得真人录像是比电脑屏幕更吸引人的，更能引起大家的注意。具体用什么方法，看个人喜好。目前我们只录电脑屏幕是因为录人的要求更高一些，我想以后会努力改善，争取在课程的开头录个真人的介绍。

这一步用到的软件，Windows 上用 Camtasia Studio，Mac 上使用 Audition + Screenflow 。

4. 视频的编辑

宁皓网的编辑流程是，( 1 ）先整体大概编辑一次，这一次去掉视频里不需要的部分，比如录错的地方，长的间隔。( 2 ) 编辑视频的声音，先导出视频里的音频，然后使用 Audition 编辑它们，比如去掉噪声或者任何你不想要的声音。( 3 ) 详细编辑与添加效果。导入编辑好的声音到视频，然后仔细再编辑一遍，这一步要进一步去掉不需要的部分，为视频添加素材或效果，比如提示的文字 ...

5. 视频的压缩

视频的压缩是非常重要的，你可让视频适合在网上播放，还要考虑在各种设备上的播放。一般来说，视频的编码格式可以使用 h.264，也叫 AVC ，音频的编码格式可以使用 AAC 。不要用视频的扩展名来判断视频与音频的编码，比如 .mp4 不代表它就是正确的编码格式。

这一步用到的软件，现在我会使用 handbrake ，图形图面，操作方便。你也可以考虑用 MeGUI ，他们都是开源软件。

6. 视频的字幕

字幕是非常重要的东西，不仅仅是为了能让大家更清楚的知道视频里说的是啥，而重要的是，你要知道，不是所有人的听力都很好，我们要考虑听力不好的朋友，所以字幕有更重要的意义。

录制视频的硬件设备

电脑：PC 或 Mac ，根据自己的喜好，我觉得最好是一台笔记本，移动方便，还有分辨率也正合适，宁皓网从去年 10 月开始用 Mac 录制视频（ 2011 款 MacBookPro ）。没有特别的理由，只是个人喜好而已。

麦克风：我建议一定要搞一只差不多的麦克风，它可以用很多年，如果预算不够，至少也要弄一只普通的电容麦克风。我们开始用的是 isk bm 800 ，价格是几百块。后来换成了 森海塞尔 MK4 ，我在淘宝上买的，价格 2500 块左右。如果有预算，可以买更好的麦克风。

麦克风的收音方式有区别，比如有全指向的收音方式，还有心型指向的收音方式，建议买心型指向的麦克风，它只对一面的声音敏感。

除了麦克风，还有一些附属的东西，麦克风支架还有麦克风防震架，这些大概有一千块就够了。

声卡：你可以选择一块 USB 的声卡，方便一些。我用的是 M-AUDIO Mobilepre，不足一千，目前来看应该是够用了。

耳机：有钱可以买一个专业的监听耳机，价格会贵一些，我觉得两千左右应该能弄个差不多的，我用的比较简单，20块钱一个的普通耳机。呵呵。监听耳机的接口跟普通耳机不一样，会大一些，我弄了个普通耳机转监听耳机的接头，然后插在我的 USB 声卡上，这样，在录音的时候，我会实时在耳机里听到我在说什么，也就是你可以监听正在录制的声音，这很重要。

录像设备：我推荐可以用单反相机录像，当然它不能完全代替专业的摄像机，但是单反相机的价格优势还是要考虑的，还有画质也会不错，镜头也可以更换。宁皓网现在用的是 Canon 600D ，大概 4000 块左右，再加上一个廉价的 50 mm 的镜头，600 块左右。如果有钱，可以换成全画幅的单反相机，我们也在考虑换 Canon 5D Mark3，不过全画幅单反的镜头也贵一些，一般在一两万左右。所以配上两只镜头，加起来需要 5万左右吧。

录制视频的相关软件

Camatasia Studio
用在 Windows 和 Mac 平台上的录屏幕与编辑软件，Windows 版 299 美金，Mac 版 99 美金

ScreenFlow
用在 Mac 系统上的录屏幕与编辑软件，99 美金。

Adobe Audition
声音编辑软件，支持 Windows 和 Mac 平台，349 美金。

Handbrake
视频压缩软件，开源免费。

总结

抱歉文章写的有点凌乱，很多细节也没办法都写出来，这也只是现阶段的一点小小的经验，还有很多需要不断学习有优化，我希望可以陆续跟大家一起分享，一起为用户贡献更好的课程。发布你的教程可以考虑使用 Drupal 或者 WordPress ，他们都能胜任，你可以参考宁皓网的相关教程为自己创建一个网站。


http://ninghao.net/blog/690

========================================
好的文案会引发人们的联想
----------------------------------------
看这段流传很广的广告文案：
　　“你写PPT时，阿拉斯加的鳕鱼正跃出水面，你看报表时，梅里雪山的金丝猴刚好爬上树尖。你挤进地铁时，西藏的山鹰一直盘旋云端。”

对比下面另外一个版本：
　　“你写PPT时，别人在旅行；你看报表时，别人在旅行；你挤地铁时，别人在旅行。”

表达同样的意思，第一段话让人动容，第二段话让人瞌睡。这是为什么呢？因为大脑中，处理画面的皮质区域非常庞大，我们可以非常轻松地处理大量的场景视觉信息。



========================================
鸡汤和毒鸡汤：朴素的道理，洞悉本质；激发动力
----------------------------------------

################
## ref: https://github.com/wjay88/knowledge-structure

1、谁也不是天生什么都会！！！ 所以不要怕，大胆做，大家都是第一次做人！！
不会可以学，刻意练习，就学会了。

2、所有的事，你不做，别人就会去做。
谁做都是做，为何不是我做。
做出来大家都差不多的。70分，80分都是及格的。

3、 不积跬步，无以至千里;不积小流，无以成江海。
泰山不让土壤，故能成其大；河海不择细流，故能就其深；王者不却众庶，故能明其德。

4、要么做教授，要么有自己的公司。

5、有一个方法快速开始一项新技能的学习：
S1：直入主题：
	去CSDN上，直接搜这个技术文章
		比如：Mask R-CNN
S2：资料收集：
	连续将所有素材全部点开，罗列。
S3：最投缘的：
	试读全部的开头，看看哪个最适合自己阅读。
S4：从零笔记：
	从那篇开始，做好入门笔记整理。
S4：博采众长：
	逐渐深入完善知识体系。集大成者。

6、越是不负责任，越是不计后果，越容易成功。



################





========================================
至亲爱的自己
----------------------------------------
亲爱的自己，从今天起为了自己骄傲的活着吧，好好爱自己，没有人会心疼你。

亲爱的自己，不要太在意一些人太在乎一些事，顺其自然以最佳心态面对，因为这世界就是这么不公平往往在最在乎的事物面前我们最没有价值。

亲爱的自己，永远不要为难自己，比如不吃饭、哭泣、自闭、抑郁，这些都是傻瓜才做的事。

亲爱的自己，学会聪明一点，不要老是问周围的人一些很白痴的问题，那真的很无聊。

亲爱的自己，如果不开心了就找个角落或者在被子里哭一下，你不需要别人同情可怜，哭过之后一样可以开心生活。

亲爱的自己，学会控制自己的情绪，谁都不欠你，所以你没有道理跟别人随便发脾气，耍性子。

亲爱的自己，你可以失望但不能绝望，你要始终相信，明天是新的一天，一切都重新开始！

亲爱的自己，你不要老是想依赖别人，更不能奢望别人在你需要的时候第一时间站出来，毕竟你们谁都不是谁的谁。

亲爱的自己，永远不要轻易对别人许下承诺，许下的承诺就是欠下的债！

亲爱的自己，这个世界只有回不去的而没有什么是过不去的。

亲爱的自己，别人对你好，你要加倍对别人好，别人对你不好，你还是应该对别人好，因为那说明你还不够好。

亲爱的自己，不管现实有多惨不忍睹你都要固执的相信这只是黎明前短暂的黑暗而已。

亲爱的自己，不要抓住回忆不放，断了线的风筝，只能让它飞，放过它，更是放过自己。

亲爱的自己，全世界只有一个你，就算没有人懂得欣赏，你也要好好爱自己，做最真实的自己。

亲爱的自己，好好对待陪在你身边的那些人，因为爱情可能只是暂时的但友情是一辈子的。

亲爱的自己，你必须找到除了爱情之外，能够使你用双脚坚强站在大地上的东西。

亲爱的自己，记得要常常仰望天空，记住仰望天空的时候也要看看脚下。

亲爱的自己，相信你的直觉，不要招惹别人，也不要让别人来招惹你。

亲爱的自己，永远不要跟别人搞暧昧，你玩不起！

亲爱的自己，不要太低调了，有时要强悍一点，被欺负的时候，一定要讨回来！但是一定不要记恨，小人之见随他们去好了，怜悯会使你高贵。

亲爱的自己， 要快乐、要开朗、要坚韧、要温暖，这和性格无关。

亲爱的自己，要自信甚至是自恋一点，时刻提醒自己我值得拥有最好的一切。

人生只有走出来的美丽，没有等出来的辉煌。

在人生的道路上，即使一切都失去了，只要一息尚存，你就没有丝毫理由绝望。因为失去的一切，又可能在新的层次上复得。

自暴自弃便是命运的奴隶，自强不息是生命的天使；我不想用别人的汗水浇灌自己的心灵，我愿意用别人的棉袄，来温暖自己的躯体。我只想堂堂正正的做人，我只愿光明磊落做事，该记得的我不会遗忘，该遗忘的我不会存放。

没有一劳永逸的开始；也没有无法拯救的结束。人生中，你需要把握的是:该开始的，要义无反顾地开始；该结束的，就干净利落地结束。

再伟大的巨人也有他渺小的瞬间，再渺小的凡人也有他伟大的时刻。

生命的奖赏远在旅途终点，而非起点附近。我不知道要走多少步才能达到目标，踏上第一千步的时候，仍然可能遭到失败。但我不会因此放弃，我会坚持不懈，直至成功！

不要认为只要付出就一定会有回报，这是错误的。学会有效地工作，这是经营自己强项的重要课程。

世间万事，不可求其绝顶完 美。留一分不足，可得无限完美。物满则溢，强求必反。埋首努力之外，一切听其自然，届时自有机遇。

一花凋零荒芜不了整个春天，一次挫折也荒废不了整个人生。

你改变不了环境，但可以改变自己；你改变不了事实，但可以改变态度；你改变不了过去，但可以改变现在；你不能控制别人，但可以掌握自己；你不能预知明天，但可以把握今天；你不能样样顺利，但可以事事尽心；你不能选择容貌，但可以展现笑容。


世上无难事,只怕有心人，心之所愿，无事不成！

我们，可能，无法，改变什么。

但，我们，能做到，让更多的人，看到！



https://blog.csdn.net/q476355021/article/details/18840967






========================================
我的编程能力是怎样突飞猛进的
----------------------------------------
阶段一：啥也不会，抄代码都运行不起来，学会了百度+google，学会了舔着逼脸去求大神。

阶段二：学会天坛看教学视频，得瑟能写一些页面，停留在CURD阶段，顶多培训毕业水平，疑难杂症无能为力。

阶段三：开始了解底层，看书研究底层，原来发现全是数据结构算法、操作系统、网络底层，开始沉迷研究底层技术，用优雅的设计。

阶段四：知道一些底层，开始跟别人喷技术的优雅性，忽略了我们技术是为了业务带来收益。

阶段五：能灵活判断业务的情况，给出合理的技术架构。

总之，突飞猛进的时候是自己会实践用起来，同时在项目环境中碰到问题，研究底层最终解决疑难杂症，随着经历无数个疑难杂症的积累，也就是这时候。



ref:
https://www.jianshu.com/p/e6fda80c55dc
https://www.zhihu.com/question/356351510





========================================
学会新技术的5个层次，你到第几级了？
----------------------------------------
1. 从新手 到 掌握的五个级别
Dreyfus Model for Skill Acquisition: From Novice to Expert

Novice
Advanced Beginner
Competence
Proficiency
Expertise


https://learnrepeatacademy.com/dreyfus-model/




2. 怎么晋级呢？
记住 remember
理解 understand

应用 apply
分析 analize
评估 evaluate
创造 create


简化为三步:
学习 
应用 
回顾 最重要！







========================================
为什么专家不再关心技术细节?
----------------------------------------

如果一直关心技术细节，你永远是一个孤立节点，在任何维度的组织中都是最底层，就算 24 小时不睡觉，也最多算两个人力资源。想要突破一天 24 小时的限制，就要花时间让别人认同你的设计，并朝着一个方向努力，你的节点才能上移，但随之而来的是承担更多风险，比如分配给别人的任务给弄砸了，为公司带来了不良影响，那么负责人就要背锅。




ref:
https://github.com/ascoders/weekly/blob/master/商业思考/103.精读《为什么专家不再关心技术细节》.md

========================================
learn C the hard way(笨方法学C语言)
----------------------------------------

手动输入所有代码。不要复制粘贴！
正确地输入所有代码，也包括注释。
运行代码并保证产生相同的输出。
如果出现了bug则修正它。
做附加题时，如果你做不出某道题，马上跳过。
在寻求帮助之前首先试着自己弄懂。





========================================
完美是优秀的敌人：先完成再优化
----------------------------------------

1.
上级有任务，就先完成，然后再优化。
完成好于完美。


2. 方向大致正确，团队充满活力。
无法保证方向绝对正确，所以要先大致确定方向，然后边做边优化方向。记住不忘初心！


3.【书摘】知道何时止步
https://www.jianshu.com/p/aff67f876ab2
摘自《程序员修炼之道》

在某些方面，编程就像是绘画。你从空白的画布和某些基本原材料开始，通过知识、艺术和技艺的结合去确定用前者做些什么。你勾画出全景，绘制背景，然后填入各种细节。你不时后退一步，用批判的眼光观察你的作品。常常，你会扔掉画布，重新再来。

但艺术家们会告诉你，如果不懂得应何时止步，所有的辛苦劳作就会遭到毁坏。如果你一层又一层、细节复细节地叠加，绘画就会迷失在绘制之中。

不要因为过度修饰和过于求精而毁损完好的程序。继续前进，让你的代码凭着自己的质量站立一会儿。它也许不完美，但不用担心：它不可能完美。








========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------
