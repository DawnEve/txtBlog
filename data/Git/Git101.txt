git使用详解 


github的其他域名
https://github.com.cnpmjs.org/


========================================
安装 git
----------------------------------------
1. windows可以双击安装，一路默认即可。

2. centOS 自带的太古老，怎么更新呢？

$ git version
git version 1.8.3.1


(1) 下载与解压
https://mirrors.edge.kernel.org/pub/software/scm/git/

$ wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.31.1.tar.xz 
$ tar -xvJf git-2.31.1.tar.xz

(2) 安装到自己目录下 ~/bin/
$ cd git-2.31.1/

README.md 说安装方法看 INSTALL

$ make
$ make install


make时很多报错:
/home/wangjl/software/anaconda3/lib/libcurl.so: undefined reference to `OpenSSL_version_num@OPENSSL_1_1_0'
又是



(3) 再次尝试 
$ ./configure --prefix=/home/wangjl/






2. 另一个较低的版本
(1) 安装

$ wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.9.0.tar.gz
$ tar -zxvf git-2.9.0.tar.gz

$ cd git-2.9.0
## ./configure --prefix=/usr/local
$ ./configure --prefix=/home/wangjl/

$ make
$ sudo make install

$ git version
git version 1.8.3.1 #这个版本没有颜色，使用时很费眼。
看来新安装的优先级不高，直接设置别名吧。


(2) 设置别名
$ whereis git
git: /usr/bin/git /usr/include/git2.h /home/wangjl/bin/git /usr/share/man/man1/git.1.gz

$ vim ~/.bashrc
## 末尾添加
alias git=/home/wangjl/bin/git

$ source ~/.bashrc
$ git version
git version 2.9.0 #这个版本至少有颜色了，比较好用。







========================================
版本控制面临的挑战: Git Flow
----------------------------------------

1. 我们面对版本管理的时候，有非常大得挑战，我们都知道大家工作在同一个仓库上，那么彼此的代码协作必然带来很多问题和挑战，如下：

1 如何开始一个Feature的开发，而不影响别的Feature？
2 由于很容易创建新分支，分支多了如何管理，时间久了，如何知道每个分支是干什么的？
3 哪些分支已经合并回了主干？
4 如何进行Release的管理？开始一个Release的时候如何冻结Feature, 如何在Prepare Release的时候，开发人员可以继续开发新的功能？
5 线上代码出Bug了，如何快速修复？而且修复的代码要包含到开发人员的分支以及下一个Release?

大部分开发人员现在使用Git就只是用三个甚至两个分支，一个是Master, 一个是Develop, 还有一个是基于Develop打得各种分支。这个在小项目规模的时候还勉强可以支撑，因为很多人做项目就只有一个Release, 但是人员一多，而且项目周期一长就会出现各种问题。




2. Git Flow常用的分支

Production 分支(master)
也就是我们经常使用的Master分支，这个分支最近发布到生产环境的代码，最近发布的Release， 这个分支只能从其他分支合并，不能在这个分支直接修改

Develop 分支(dev)
这个分支是我们是我们的主开发分支，包含所有要发布到下一个Release的代码，这个主要合并与其他分支，比如Feature分支

Feature 分支
这个分支主要是用来开发一个新的功能，一旦开发完成，我们合并回Develop分支进入下一个Release

Release分支
当你需要一个发布一个新Release的时候，我们基于Develop分支创建一个Release分支，完成Release后，我们合并到Master和Develop分支

Hotfix分支
当我们在Production发现新的Bug时候，我们需要创建一个Hotfix, 完成Hotfix后，我们合并回Master和Develop分支，所以Hotfix的改动会进入下一个Release





3. Git Flow如何工作
(1)初始分支
所有在Master分支上的Commit应该Tag

(2)Feature 分支: 分支名 feature/*
Feature分支做完后，必须合并回Develop分支, 合并完分支后一般会删点这个Feature分支，但是我们也可以保留


(3)Release分支: 分支名 release/*
Release分支基于Develop分支创建，打完Release分之后，我们可以在这个Release分支上测试，修改Bug等。同时，其它开发人员可以基于开发新的Feature (记住：一旦打了Release分支之后不要从Develop分支上合并新的改动到Release分支)

发布Release分支时，合并Release到Master和Develop， 同时在Master分支上打个Tag记住Release版本号，然后可以删除Release分支了。


(4)维护分支 Hotfix: 分支名 hotfix/*

hotfix分支基于Master分支创建，开发完后需要合并回Master和Develop分支，同时在Master上打一个tag




4. Git Flow代码示例

(1) 创建develop分支
git branch develop
git push -u origin develop

(2) 开始新Feature开发
git checkout -b some-feature develop
# Optionally, push branch to origin:
git push -u origin some-feature    

# 做一些改动    
git status
git add some-file
git commit    

(3) 完成Feature
git pull origin develop
git checkout develop
git merge --no-ff some-feature
git push origin develop

git branch -d some-feature #删除分支

# If you pushed branch to origin:
git push origin --delete some-feature


(4) 开始Relase

git checkout -b release-0.1.0 develop

# Optional: Bump version number, commit
# Prepare release, commit


(5) 完成Release

git checkout master
git merge --no-ff release-0.1.0
git push

git checkout develop
git merge --no-ff release-0.1.0
git push

git branch -d release-0.1.0 #删除分支

# If you pushed branch to origin:
git push origin --delete release-0.1.0   


git tag -a v0.1.0 master
git push --tags


(6) 开始Hotfix

git checkout -b hotfix-0.1.1 master    


(7) 完成Hotfix

git checkout master
git merge --no-ff hotfix-0.1.1
git push


git checkout develop
git merge --no-ff hotfix-0.1.1
git push

git branch -d hotfix-0.1.1

git tag -a v0.1.1 master
git push --tags




5. Git flow工具
实际上，当你理解了上面的流程后，你完全不用使用工具，但是实际上我们大部分人很多命令就是记不住呀，流程就是记不住呀，肿么办呢？

总有聪明的人创造好的工具给大家用, 那就是Git flow script.

(1) SourceTree 
当你用Git-flow初始化后，基本上你只需要点击git flow菜单选择start feature, release或者hotfix, 做完后再次选择git flow菜单，点击Done Action. 我勒个去，我实在想不到还有比这更简单的了。

手册：http://danielkummer.github.io/git-flow-cheatsheet/

目前SourceTree支持Mac, Windows, Linux.
这么好的工具请问多少钱呢？ 免费!!!!

Git有很多图形界面工具，这里我们推荐SourceTree，它是由Atlassian开发的免费Git图形界面工具，可以操作任何Git库。
下载 https://www.sourcetreeapp.com/


ref: https://www.cnblogs.com/sky-heaven/p/14387659.html




========================================
Git GUI 中文乱码怎么办？
----------------------------------------
现在git bash设置
$ git config --global gui.encoding utf-8

重新打开 Git GUI 即可。





========================================
一.git文件状态变化
----------------------------------------	
  Untracked            UnModified            Modified            Staged
     |                     |                    |                  |   
     |---Add the file -------------- ------------- --------------->|  
     |                     |                    |                  |      
     |                     |---Edit the file--->|                  |      
     |                     |                    |                  |      
     |                     |                    |--Stage the file->|      
     |                     |                    |                  |      
     |<--Remove the file---|                    |                  |      
     |                     |                    |                  |      
     |                     |<--------- ----------- -------Commit---|      
     |                     |                    |                  |  

  状态说明：
            Untracked: 刚新加的文件，还没有纳入git管理范围
           UnModified: 已经committed的文件
             Modified: 已经committed的文件，通过vi等修改后，就变成Modified
               Staged: git add 后的文件

  状态转换:
      Untracked->Staged: 通过git add 来完成
   UnModified->Modified: 修改文件内容来完成，比如vi命令
       Modified->Staged: 通过git add 来完成
  UnModified->Untracked: 通过git rm 来完成    
     Staged->UnModified: 通过git commit 来完成
                                      
		
# 工作区、暂存区





========================================
|-- 查看提交记录 git log
----------------------------------------

基础命令 
git log 


限制显示3条
git log -n 3


只用一行显示(一行时，不显示作者和日期)
git log --oneline

图形化显示
git log --graph 


图形化、一行简略显示
git log --graph --decorate --oneline


显示所有分支
git log --graph --decorate --oneline --simplify-by-decoration --all
参数解释:
--decorate： 标记会让git log显示每个commit的引用
--oneline： 一行显示
--simplify-by-decoration：只显示被branch或tag引用的commit
--all: 所有分支



========================================
二.正常流程
----------------------------------------
  2.1 git clone 从远程拉一个工程下来  
    #git clone git@github.com:sotrip/gittest.git	     
    Cloning into 'gittest'...
    warning: You appear to have cloned an empty repository.
    Checking connectivity... done. 
  
  2.2 增加一个文件
    #vi 1.txt  里面内容如下:
    the first line
  
  2.3 git status 查看状态
    #git status
    On branch master            //表示我们目前在master分支上
    
    Initial commit
    
    Untracked files:            //有哪些文件是Untracked状态，有1.txt
      (use "git add ..." to include in what will be committed)
    
    	1.txt
    
    nothing added to commit but untracked files present (use "git add" to track)
  
  
  2.4 git add 把文件从Untracked-->Staged
    #git add 1.txt  成功后，没有输出
    #git status     再次查看
    On branch master
    
    Initial commit
    
    Changes to be committed:       //表示1.txt已经是staged了，可以被提交了
      (use "git rm --cached ..." to unstage)  //如果不想提交了，可以用git rm --cached 1.txt
    
    	new file:   1.txt
  
  
  2.5 git rm --cached  文件已经是staged了，但想要退回原来的状态 
    #git rm --cached 1.txt
    rm '1.txt'
    
    #git status       再来看又回来2.3这一步了
    On branch master
    
    Initial commit
    
    Untracked files:
      (use "git add ..." to include in what will be committed)
    
    	1.txt
    
    #git add 1.txt  我们还是再加上
    #git status
    On branch master
    
    Initial commit
    
    Changes to be committed:     //1.txt 又改为staged状态 准备提交
      (use "git rm --cached ..." to unstage)
    
    	new file:   1.txt

  
  2.6 git commit 提交
    #git commit -m "first commit"          //-m后面是我们这一次提交的注释
    [master (root-commit) e6b0e7d] first commit
     1 file changed, 1 insertion(+)
     create mode 100644 1.txt
   
   
  2.7 git push 把master分支的内容提交到远端
    #git push origin master
    Warning: Permanently added the RSA host key for IP address '*.*.*.*' to the list of known hosts.
    Counting objects: 3, done.
    Writing objects: 100% (3/3), 214 bytes | 0 bytes/s, done.
    Total 3 (delta 0), reused 0 (delta 0)
    To git@github.com:sotrip/gittest.git
     * [new branch]      master -> master 




========================================
|-- git 开发简单流程
----------------------------------------
1.主干master稳定

2.切出feature分支br1, br2
3.br1，br2独立前进：commit
4.master合稳定功能，前进： master-second-commit

5.br1合入master代码：rebase方式
6.br2合入master代码：merge

7.br1，br2前进：commit
8.br1, br2稳定准备合入master
9.master merge br1/br2
10.功能完毕，回到第2步骤循环往复，不断迭代bug

https://blog.csdn.net/zhuge1127/article/details/82494783




========================================
三.git diff 查看变化
----------------------------------------
1.
  命令概括
    #git diff           查看 Modified的文件，做了哪些修改
    #git diff --staged  查看 Staged的文件，做了哪些修改
  
  
  操作实例
    #vi 1.txt    在后面增加一行,变成如下
    the first line
    the second line
    
    #git status    
    On branch master
    Your branch is up-to-date with 'origin/master'.
    Changes not staged for commit:       //这个表示1.txt已经变为Modified了，not staged
      (use "git add ..." to update what will be committed)
      (use "git checkout -- ..." to discard changes in working directory)
    
    	modified:   1.txt
    
    no changes added to commit (use "git add" and/or "git commit -a")
    
    #git diff      查看Modified的文件，修改了哪些地方
    diff --git a/1.txt b/1.txt
    index 137b7fd..067030b 100644
    --- a/1.txt
    +++ b/1.txt
    @@ -1 +1,2 @@
     the first line
    +the second line
    
    #git add 1.txt       //把1.txt加入到staged中
    #git status
    On branch master
    Your branch is up-to-date with 'origin/master'.
    Changes to be committed:
      (use "git reset HEAD ..." to unstage)
    
    	modified:   1.txt
    	
    #git diff  这个时候不会输出任何东西，因为没有Modified的文件了	
    #git diff --staged    //查看staged的文件和上一次commit有哪些修改
    diff --git a/1.txt b/1.txt
    index 137b7fd..067030b 100644
    --- a/1.txt
    +++ b/1.txt
    @@ -1 +1,2 @@
     the first line
    +the second line
#





========================================
|-- 查看某个文件和某个历史版的变化，项目整体回到某历史版本并测试，再回现在
----------------------------------------
(1)使用git log -n 20 查看历史版本的commit号
commit 6be3b26be318bfef7d5745b83ffd1d72d3b08757
Author: jimmy <JimmyMall@live.com>
Date:   Fri Aug 16 16:38:40 2019 +0800

    v0.0.7-5 txt页面默认是纸质书背景

commit fb4d271705dc96c752a13b21b131c05dbb0e8a12
Author: jimmy <JimmyMall@live.com>
Date:   Fri Aug 16 14:39:58 2019 +0800

    v0.0.7-4 fix bug: txt.js 目录单击时锚点错了一行，已经微调.
根据comment注释，锁定范围，就是版本号v0.0.7-4了(记录commit fb4d2717)。


(2) 查看static/js/txt.js 和这两个版本号的变化。
$ git diff fb4d  static/js/txt.js


(3) 回到这个版本，运行并查看效果
1)先查看当前版本，方便尝试效果后再穿越回来
$ git log -n 3
commit 571bb36413864e9fb0dbb185a3bf90b6a434444f (HEAD -> bug, origin/master, master)
Author: jimmy <JimmyMall@live.com>
Date:   Mon Aug 19 13:59:48 2019 +0800

    v0.0.7-8 增加左下角目录，能响应滚动
2) 回到过去
$ git reset --hard fb4d
这时项目所有文件已经回到过去提交点了，可以运行测试了。
这个提交点已经有bug了！
可能是浏览器行为变了，没办法，老老实实改代码吧。
3) 回到现在
$ git reset --hard 571bb36413864e





========================================
|-- 忽略某些文件 .gitignore 文件
----------------------------------------

1. 不记录，就写在这个文件中
*.fq
*.fastq




2. 只记录某类文件呢？
.gitignore只记录特定的后缀名
如何写.gitignore只包含指定的文件扩展名

# .gitignore
# 首先忽略所有的文件
*

# 但是不忽略目录
!*/

# 忽略一些指定的目录名
backup/

# 不忽略下面指定的文件类型
!*.c++
!*.cc
!*.cp
!*.cpp
!*.cxx






ref: 
https://www.cnblogs.com/longchang/p/12310783.html




========================================
四.回滚还没有commit的文件
----------------------------------------
  命令概括
    #git reset HEAD 1.txt    //文件已经Staged的了，用这个来回滚到Modified状态，但是内容不会回滚
    #git checkout 1.txt      //如果文件是Modified，不想做修改了，恢复原样，使用这个
    #git reset HEAD 后面什么都不跟，则上一次add的全部撤销。你的修改不影响，就像你没有做过上一次git add一样。
  
  操作实例
    #git status
    On branch master
    Your branch is up-to-date with 'origin/master'.
    Changes to be committed:
      (use "git reset HEAD ..." to unstage)
    
    	modified:   1.txt
    	
    	
    #git diff --staged
    diff --git a/1.txt b/1.txt
    index 137b7fd..067030b 100644
    --- a/1.txt
    +++ b/1.txt
    @@ -1 +1,2 @@
     the first line
    +the second line	
    
    #git reset HEAD 1.txt        //把1.txt 的状态由Staged变为Staged， 但是1.txt的内容不会变
    Unstaged changes after reset:
    M	1.txt
    
    #git status
    On branch master
    Your branch is up-to-date with 'origin/master'.
    Changes not staged for commit:            //可以看出1.txt 由Staged变为Modified
      (use "git add ..." to update what will be committed)
      (use "git checkout -- ..." to discard changes in working directory)
    
    	modified:   1.txt
    
    no changes added to commit (use "git add" and/or "git commit -a")
    
    #cat 1.txt            //查看内容，发现 1.txt的内容并没有回滚
    the first line
    the second line
    
    
    #git checkout 1.txt   //回滚
    #git status
    On branch master
    Your branch is up-to-date with 'origin/master'.
    nothing to commit, working directory clean
    
    #cat 1.txt           //内容已经回滚
    the first line



========================================
|-- 丢弃还没有 add 的修改
----------------------------------------

$ git checkout -- ReadMe.txt
注意中间的两个减号不能省略。




ref:
git 撤销，放弃本地修改: https://www.cnblogs.com/qufanblog/p/7606105.html




========================================
五.撤销(git reset[回到过去某个提交])和回滚(git revert[反做后生成新提交])某个提交的比较
----------------------------------------
1.git reset的作用是修改HEAD的位置，即将HEAD指向的位置改变为之前存在的某个版本，则之后的版本就不存在了。
适用场景： 如果想恢复到之前某个提交的版本，且那个版本之后提交的版本我们都不要了


使用“git reset --hard 目标版本号”命令将版本回退：
$ git reset --hard fb4d
$ git log #查看版本信息，此时本地的HEAD已经指向之前的版本
$ git push -f #强制提交更改。
#此时如果用“git push”会报错，因为我们本地库HEAD指向的版本比远程库的要旧。





2.git revert是用于“反做”某一个版本，以达到撤销该版本的修改的目的。比如，我们commit了三个版本（版本一、版本二、 版本三），突然发现版本二不行（如：有bug），想要撤销版本二，但又不想影响撤销版本三的提交，就可以用 git revert 命令来反做版本二，生成新的版本四，这个版本四里会保留版本三的东西，但撤销了版本二的东西。

适用场景： 如果我们想撤销之前的某一版本，但是又想保留该目标版本后面的版本，记录下这整个版本变动流程，就可以用这种方法。

$ git log # 查看版本号
$ git revert -n 版本号 #反做
#注意： 这里可能会出现冲突，那么需要手动修改冲突的文件。而且要git add 文件名。
$ git commit -m 版本名 #提交
$ git log #查看本地的版本信息，可见多生成了一个新的版本。老版本都还在。
$ git push #提交


  命令概括
    #git revert HEAD         //回滚上一次提交
    #git revert HEAD^        //回滚上上次提交
    #git revert #commit no#  //回滚某一次提交
  
  
  操作实例
    增加了2.txt 并提交了，现在想回滚
    #vi 2.txt  在里面增加内容
    #git add 2.txt    把文件由Untracked 变为 Staged
    #git commit -m "2.txt commit"  提交
    
    #git log   查看提交日志
    commit 710c5e84bd02e5d041b537b8732b9e80fee257a1    //这个是我们2.txt的提交
    Author: jingbo 
    Date:   Thu Apr 7 22:10:00 2016 +0800
    
        2.txt commit
    
    commit e6b0e7d844154d5473a37baed2ef56807dca16b3
    Author: jingbo 
    Date:   Wed Apr 6 22:42:44 2016 +0800
    
        first commit
        
    #git revert 710c5e84bd02e5d041b537b8732b9e80fee257a1  //回滚提交
    [master d3ab103] Revert "2.txt commit"
     1 file changed, 1 deletion(-)
     delete mode 100644 2.txt    
 


========================================
|-- git reset --hard 和 git reset --soft区别
----------------------------------------

有时候，进行了错误的提交，但是还没有push到远程分支，想要撤销本次提交，可以使用git reset –-soft/hard命令。

1、二者区别：
$ git reset –-soft：回退到某个版本，只回退了commit的信息，不会恢复到index file一级。如果还要提交，直接commit即可；
可见commit取消了，代码更改并没有取消。


$ git reset -–hard：彻底回退到某个版本，本地的源码也会变为上一个版本的内容，撤销的commit中所包含的更改被冲掉；
注意：上述命令执行成功之后，会彻底返回到回退前的版本状态，新发生的变更将会丢失。对于部分发生了变更，但是变更部分的文件夹存在未提交的文件可能导致目录非空而删除失败，此时需要自行处置。









========================================
六.分支操作(查看、创建、推送、比较、合并、拉取、删除)
----------------------------------------
  6.1 查看分支
    #git branch    //查看目前有哪些分支
    * master       //只有一个分支,"*"表示当前是在master分支上
  
  
  6.2 创建分支
    #git branch first-branch  //打出第一个分支，名字是first-branch
    #git branch
      first-branch   //分支已经有了
    * master         //"*"表示当前是在master分支上
    
    #git checkout first-branch
    Switched to branch 'first-branch'
    
    #git branch
    * first-branch    //已经成功切换到自己打的分支上了
      master
  
  
  6.3 分支上增加内容
    #vi 2.txt
    #cat 2.txt         //增加的内容如下
    edit in first-branch
    
    
    #git add 2.txt
    #git commit -m "2.txt commit in first-branch"      //在分支上提交
    [first-branch 9abd8f2] 2.txt commit in first-branch
     1 file changed, 2 insertions(+)
     create mode 100644 2.txt
  
  
  6.4 推送分支到远程 
    #git push origin first-branch
    Counting objects: 7, done.
    Delta compression using up to 4 threads.
    Compressing objects: 100% (5/5), done.
    Writing objects: 100% (7/7), 692 bytes | 0 bytes/s, done.
    Total 7 (delta 0), reused 0 (delta 0)
    To git@github.com:sotrip/gittest.git
     * [new branch]      first-branch -> first-branch
  
  
  6.5 两个分支进行比较
    #git diff master first-branch    //比较master与first-branch
    diff --git a/2.txt b/2.txt
    new file mode 100644
    index 0000000..b09edf1
    --- /dev/null
    +++ b/2.txt              //表示first-branch上多了一个2.txt
    @@ -0,0 +1,2 @@
    +edit in first-branch
    +
  
  6.6 分支合并到master上
    #git checkout master
    #git merge first-branch    //把first-branch的内容合并到master上
		推荐加上 --no-ff参数，能保留分支信息

###
https://segmentfault.com/q/1010000002477106
git merge --no-ff 可以保存你之前的分支历史。能够更好的查看 merge历史，以及branch 状态。
git merge 则不会显示 feature，只保留单条分支记录。
###

    Updating d3ab103..9abd8f2
    Fast-forward
     2.txt | 2 ++
     1 file changed, 2 insertions(+)
     create mode 100644 2.txt
     
    #ls
    1.txt	2.txt
    
    #cat 2.txt
    edit in first-branch
    
    
    #git log
    commit 9abd8f2d8fe7c08ca246464552dae25397694582
    Author: jingbo 
    Date:   Thu Apr 7 22:26:26 2016 +0800
    
        2.txt commit in first-branch         //在first-branch上提交的内容也显示在日志中
    
    ...
   
   
  6.7 从远程拉一个分支
    有两个办法，第一种是
    #git fecth origin 
    #git checkout first-branch
    Branch first-branch set up to track remote branch first-branch from origin.
    Switched to a new branch 'first-branch'
    
    第二个办法
    #git checkout -t origin/first-branch
    Branch first-branch set up to track remote branch first-branch from origin.
    Switched to a new branch 'first-branch'
#


实例: git clone后在master分支上，但是远程还有一个dev分支，可以一起拉下来:
Administrator@wangjl-PC MINGW64 /e/c1_br_analysis_code (master)
$ git checkout -b dev origin/dev
Switched to a new branch 'dev'
Branch 'dev' set up to track remote branch 'dev' from 'origin'.

Administrator@wangjl-PC MINGW64 /e/c1_br_analysis_code (dev) #已经自动切换为dev分支





6.8 删除分支
(1)删除一个已被终止的分支
如果需要删除的分支不是当前正在打开的分支，使用branch -d直接删除
git branch -d <branch_name>

(2)删除一个正打开的分支
如果我们在试图删除一个分支时自己还没转移到另外的分支上，Git就会给出一个警告，并拒绝该删除操作。
如果坚持要删除该分支的话，就需要在命令中使用-D选项。
git branch -D <branch_name>

(3)恢复被删除的分支
Git会自行负责分支的管理，所以当我们删除一个分支时，Git只是删除了指向相关提交的指针，但该提交对象依然会留在版本库中。
因此，如果我们知道删除分支时的散列值，就可以将某个删除的分支恢复过来。在已知提交的散列值的情况下恢复某个分支：
git branch <branch_name> <hash_val>






========================================
|-- 合并分支: git merge 和 git rebase(变基) 的区别
----------------------------------------
重要的事情说三遍：公共分支禁止使用rebase!!
rebase黄金法则：绝不要在公共分支上使用它

注意:
- 不要在公共分支使用rebase
- 本地和远端对应同一条分支,优先使用rebase,而不是merge



1.rebase会把你当前分支的 commit 放到公共分支的最后面,所以叫变基。就好像你从公共分支又重新拉出来这个分支一样。

举例:如果你从 master 拉了个feature分支出来,然后你提交了几个 commit,这个时候刚好有人把他开发的东西合并到 master 了,这个时候 master 就比你拉分支的时候多了几个 commit,如果这个时候你 rebase master 的话，就会把你当前的几个 commit，放到那个人 commit 的后面。


(1)
Q: 为什么不要在公共分支使用rebase?
A: 因为往后放的这些 commit 都是新的,这样其他从这个公共分支拉出去的人，都需要再 rebase,相当于你 rebase 东西进来，就都是新的 commit 了

例子:
1)1-2-3 是现在的分支状态
2)这个时候从原来的master ,checkout出来一个prod分支
3)然后master提交了4.5，prod提交了6.7
这个时候master分支状态就是1-2-3-4-5，
prod状态变成1-2-3-6-7

4A)如果在prod上用rebase master ,prod分支状态就成了1-2-3-4-5-6'-7'
提交点7和8已经被修改，就相当于你的分支被接到了master分支的末尾。
相关提交就会改变。


4B)如果是merge，会出来一个8，这个8的提交就是把4-5合进来的提交
1-2-3-6-7-8
....|4-5



(2)更通俗的解释一波.
merge和rebase实际上只是用的场景不一样

1)比如rebase,你自己开发分支一直在做,然后某一天，你想把主线的修改合到你的分支上,做一次集成,这种情况就用rebase比较好.把你的提交都放在主线修改的头上

2)如果用merge，会产生新提交点8, 你如果想回退你分支上的某个提交就很麻烦,还有一个重要的问题,rebase的话,本来我的分支是从3拉出来的,rebase完了之后,就不知道我当时是从哪儿拉出来的我的开发分支

同样的,如果你在主分支上用rebase, rebase其他分支的修改,是不是要是别人想看主分支上有什么历史,他看到的就不是完整的历史了,这个历史已经被你篡改了


(3)
git rebase会获得一个干净的没有merge commit的线性历史树
git merge可以避免commit history的风险






2.具体操作

(1)简单示例
Git merge是用来合并两个分支的。
git merge b      # 将b分支合并到当前分支

同样 git rebase b，也是把 b分支合并到当前分支

1)
git checkout feature
git merge master
此时在feature上git会自动产生一个新的commit

2)
git checkout feature
git rebase master（feature分支上）
它会把你整个feature分子移动到master分支后面，有效的把所有master分支新的提交并入过来




(2)原理 如下： 

假设你现在基于远程分支"origin"，创建一个叫"mywork"的分支。
$ git checkout -b mywork origin
假设远程分支"origin"已经有了2个提交，

现在我们在这个分支做一些修改，然后生成两个提交(commit).
$ vi file.txt
$ git commit
$ vi otherfile.txt
$ git commit


>> 但是与此同时，有些人也在"origin"分支上做了一些修改并且做了提交了. 这就意味着"origin"和"mywork"这两个分支各自"前进"了，它们之间"分叉"了。


在这里，你可以用"pull"命令把"origin"分支上的修改拉下来并且和你的修改合并； 结果看起来就像一个新的"合并的提交"(merge commit):


但是，如果你想让"mywork"分支历史看起来像没有经过任何合并一样，你也许可以用 git rebase:
$ git checkout mywork
$ git rebase origin

这些命令会把你的"mywork"分支里的每个提交(commit)取消掉，并且把它们临时 保存为补丁(patch)(这些补丁放到".git/rebase"目录中),然后把"mywork"分支更新 为最新的"origin"分支，最后把保存的这些补丁应用到"mywork"分支上。

当'mywork'分支更新之后，它会指向这些新创建的提交(commit),而那些老的提交会被丢弃。 如果运行垃圾收集命令(pruning garbage collection), 这些被丢弃的提交就会删除. （请查看 git gc)





3. 冲突解决
在rebase的过程中，也许会出现冲突(conflict). 
在这种情况，Git会停止rebase并会让你去解决 冲突；
在解决完冲突后，用"git-add"命令去更新这些内容的索引(index), 然后，你无需执行 git-commit,只要执行:
$ git rebase --continue

这样git会继续应用(apply)余下的补丁。
在任何时候，你可以用--abort参数来终止rebase的行动，并且"mywork" 分支会回到rebase开始前的状态。
$ git rebase --abort






4. git rebase和git merge的区别
现在我们可以看一下用合并(merge)和用rebase所产生的历史的区别：
当我们使用Git log来参看commit时，其commit的顺序也有所不同。

c1-c2-C3-C5-C6
......|-C4

假设C3提交于9:00AM,C5提交于10:00AM,C4提交于11:00AM，C6提交于12:00AM,
对于使用git merge来合并所看到的commit的顺序（从新到旧）是：C7 ,C6,C4,C5,C3,C2,C1
对于使用git rebase来合并所看到的commit的顺序（从新到旧）是：C7 ,C6',C5',C4,C3,C2,C1  #rebase 有7吗？
 因为C6'提交只是C6提交的克隆，C5'提交只是C5提交的克隆，
从用户的角度看使用git rebase来合并后所看到的commit的顺序（从新到旧）是：C7 ,C6,C5,C4,C3,C2,C1






5. 使用场景
两个使用场景是不一样的，merge只是合并另外一个分支的内容，rebase也合并另外一个分支的内容，但是会把本分支的commits顶到最顶端

假设我们现在有3个分支
1)master分支：线上环境使用的分支
2)testing分支：测试环境使用的分支
3)my_feature分支：开发新功能的分支，也就是当前分支

A. 假设我在my_feature上开发了一段时间，之后另外的同事开发的功能正式上线到master分支了，那么我可以在当前的分支下rebase一下master分支，这样我这个分支的几个commits相对于master还是处于最顶端的，也就是说rebase主要用来跟上游同步，同时把自己的修改顶到最上面

B. 我在my_feature上开发了一段时间了，想要放到testing分支上，那就切到testing，然后merge my_feature进来，因为是个测试分支，commits的顺序无所谓，也就没必要用rebase (当然你也可以用rebase)

另外，单独使用rebase，还有调整当前分支上commits的功能(合并，丢弃，修改commites msg)


S:
其他知友的答案都说到冲突的问题，
1). 用merge确实只需要解决一遍冲突，比较简单粗暴
2). 用rebase有时候会需要多次fix冲突（原因在于本地分支已经提交了非常多的commit，而且很久都没有和上游合并过）

我个人推荐大家开发的时候，尽量及时rebase上游分支（我习惯是每周merge一次），有冲突提前就fix掉，即使我们自己的分支开发了很久（哪怕是几个月），也不会积累太多的conflict，最后合并进主分支的时候特别轻松， 非常反对从master check出新分支，自己闷头开发几个月，结果最后merge进主分支的时候，一大堆冲突，自己还嗷嗷叫的行为。











6. 模拟 rebase 

主分支有2个commit，然后新建dev分支。
然后 master 和 dev 分别提交变化。

$ git checkout -b dev
$ git rebase master
First, rewinding head to replay your work on top of it...
Applying: dev0.4 dev add b1
error: Failed to merge in the changes.
Using index info to reconstruct a base tree...
M       changeLog.txt
Falling back to patching base and 3-way merge...
Auto-merging changeLog.txt
CONFLICT (content): Merge conflict in changeLog.txt
Patch failed at 0001 dev0.4 dev add b1
The copy of the patch that failed is found in: .git/rebase-apply/patch

Resolve all conflicts manually, mark them as resolved with
"git add/rm <conflicted_files>", then run "git rebase --continue".
You can instead skip this commit: run "git rebase --skip".
To abort and get back to the state before "git rebase", run "git rebase --abort".


手工解决冲突
$ vim changeLog.txt
v0.2 add line1
v0.3 add line3
<<<<<<< HEAD

v0.5 add line4
=======
dev0.4 dev add b1
>>>>>>> dev0.4 dev add b1

改为 
v0.2 add line1
v0.3 add line3
dev0.4 dev add b1
v0.5 add line4


$ git add changeLog.txt
$ git rebase --continue


查看分支
git log --graph --decorate --oneline --simplify-by-decoration --all








https://www.jianshu.com/p/4079284dd970
https://www.cnblogs.com/marblemm/p/7161614.html
https://blog.csdn.net/qq_41047322/article/details/81584437





========================================
|-- reflog命令: 找到想要恢复的分支的散列值
----------------------------------------
git reflog 命令
显示整个本地仓储的commit，包括所有branch的commit，甚至包括已经撤销的commit。
只要HEAD发生了变化， 就会在reflog里面看得到。
这时恢复分支a_branch分支如下：
git branch <branch_name> HEAD@{4}


如果我们不知道想要恢复的分支的散列值，可以用reflog命令将它找出来。如：
$ git reflog 
571bb36 (HEAD -> bug, origin/master, master) HEAD@{0}: reset: moving to 571bb36413864e
6be3b26 HEAD@{1}: reset: moving to 6be3
fb4d271 HEAD@{2}: reset: moving to fb4d
571bb36 (HEAD -> bug, origin/master, master) HEAD@{3}: reset: moving to HEAD
571bb36 (HEAD -> bug, origin/master, master) HEAD@{4}: checkout: moving from master to bug
571bb36 (HEAD -> bug, origin/master, master) HEAD@{5}: commit: v0.0.7-8 增加左下角目录，能响应滚动
d5eb9d7 HEAD@{6}: commit: v0.0.7-7 md highlight.js; v0.0.7-8 增加左下角目录
468f400 HEAD@{7}: commit: v0.0.7-6 为md增加js，自动生成顶部目录。txt.js, base.css



https://www.cnblogs.com/utank/p/7880441.html




========================================
七.tag操作: 给历史提交打上标签
----------------------------------------
1. 列出标签
列出当前仓库的所有标签：git tag
列出所有标签及说明：git tag -n
搜索符合条件的标签：git tag -l "1.0.*"
查看标签信息：git show v1.0.1


2. 创建标签
命令git tag 用于新建一个标签，默认为HEAD，也可以指定一个commit id。

git tag -a v0.1.1 master
git tag -a v0.1.2 -m "blablabla…" 28df

(1) 创建标签：git tag "指定标签名"

(2) 创建带有说明的标签： git tag -a "指定标签名" -m "指定说明文字"
$ git tag -a "v1.0.1" -m "version 1.0.1 released"

(3) 给指定的commit打标签： 
找历史提交的commit id
$ git log -n 3
$ git log --pretty=oneline --abbrev-commit

给指定的commit id打标签
$ git tag -a "指定标签名" commitID

没有tag信息说明方式：
$ git tag -a "v1.0.2" 9fbc3d0

含有tag信息说明方式：
$ git tag -a v0.1 -m "version 0.1 released" 3628164




3. 删除标签
(1) 删除标签： git tag -d 标签名
$ git tag -d v1.0.1

(2) 删除远程标签： git tag -d v1.0.2
$ git push origin :refs/tags/v1.0.2

(3) 删除远程标签(Git1.7版本以后)： git push origin --delete tag




4. 提交打好的标签，本地标签推送到远程

push单个tag：git push origin [tagname]
push所有tag：git push [origin] --tags

(1) 推送指定标签
$ git push origin v1.0.0

(2) 一次性推送全部尚未推送到远程的本地标签
$ git push origin --tags




5. 重命名tag
(1) 删除原有tag，重新添加 git tag -d
$ git tag -a -m"information"

(2) 强制替换，再删除原有 git tag -f
$ git tag -d




6. 获取指定tag代码

第一步：切换到指定标签，提示你当前处于一个“detached HEAD" 状态，因为 tag 相当于是一个快照，是不能更改它的代码的 git checkout v1.0.0

第二步：如果要在 tag 代码的基础上做修改，你需要一个分支 git checkout -b branch_name tag_name

第三步：切回到之前的HEAD指向(以master为例) git checkout master





7. 实例: tag一般维护一个只读的版本，不再进行修改

$ git tag -a v1.0 -m "v1.0 ready for  publish"    //创建一个tag ,名字是"v1.0"
$ git tag   //查看tag 
v1.0

$ git push origin v1.0            //推送tag 到github上
Counting objects: 1, done.
Writing objects: 100% (1/1), 162 bytes | 0 bytes/s, done.
Total 1 (delta 0), reused 0 (delta 0)
To git@github.com:sotrip/gittest.git
* [new tag]         v1.0 -> v1.0


$ git checkout v1.0   切换到这个tag 上

注意 最好不要在tag进行修改东西，就把tag维护成一个只读的版本 










========================================
八.其他
---------------------------------------- 
  #git rm 2.txt  删除2.txt 这个文件
  #git remote -v   可以查看远程的git的地址





========================================
|-- git rm 移除不需要版本控制文件 (比如临时文件/文件夹)
----------------------------------------
比如不小心跟踪了临时文件，
后来在.gitignore 文件中添加 tmp ，表示不再跟踪该文件夹，但是已经跟踪的文件更新时 git 还会提醒更新。

1. git怎么移除不需要版本控制文件?

$ git rm -r -n --cached "tmp/1.txt" #预览需删除的文件，可省略
$ git rm -r --cached "tmp/1.txt"  # 实际执行
rm 'tmp/1.txt'

尝试 修改 tmp/1.txt，
git status 不显示该文件的变化。



2. 文件夹呢？
$ git rm -r -n --cached "path/"   #预览需删除的文件，可省略


$ git rm -r -n --cached "step4/.ipynb_checkpoints/"
$ git rm -r --cached "step4/.ipynb_checkpoints/"


本地文件还在，但是变动后 git 不再追踪了。



ref:
https://blog.csdn.net/qq_20553613/article/details/99236049







========================================
|-- git remote 删除添加的远程地址
----------------------------------------
1.当推送到服务器时首先要添加远程地址的

git remote add origin https://gitee.com/kingCould/HelloWord.git


2.查看本地添加了哪些远程地址

$ git remote -v
origin https://github.com/zhidao/crm.git (fetch)
origin https://github.com/zhidao/crm.git (push)
sdorigin https://github.com/zhidao/erp.git (fetch)
sdorigin https://github.com/zhidao/erp.git (push)




3.删除本地指定的远程地址

git remote remove origin 删除即可








========================================
九.彻底清除Github上某个文件以及历史(敏感操作)
----------------------------------------
不小心把含有很多人信息的通信录push到github了，虽然立刻删除了该文件，但是历史记录还在，github搜索还能找到，怎么办？
下面6行代码能彻底删除该文件及其历史记录。
虽然不知道他们的作用机制是什么，不过真的解决了我的问题。看起来，以前我说我熟练掌握git，真是自不量力。


注意：如下操作会删除选中的文件以及历史记录，若你想保留最新版本的记录，请做好备份。
cd进入到你的本地项目文件夹，然后依次执行下面6行命令即可：

git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch FILE_PATH' --prune-empty --tag-name-filter cat -- --all

git push origin master --force

rm -rf .git/refs/original/

git reflog expire --expire=now --all

git gc --prune=now

git gc --aggressive --prune=now
注意上面的FILE_PATH是文件全路径



实例：比如彻底删除一个联系人信息表:
git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch Python/dustbin/contact.html' --prune-empty --tag-name-filter cat -- --all
并push即可。


refer:
https://www.cnblogs.com/xxoome/p/7794090.html
https://www.cnblogs.com/xieqiankun/p/del_github_file_history.html



========================================
|-- github 上新提交记录显示的用户名不是自己？
----------------------------------------
要点描述：github项目代码紧邻上一行显示的最新提交的用户名，竟然不是自己？！


1. 多半是git记录设置的邮箱和当前github账号的邮箱不一致。

(1) 查询本地git的邮箱
查看邮箱的方式
git show #第一行就是用户名和邮箱。
或
git config user.email

查看最近提交使用的用户名和邮箱
$ git log -n 2
commit 39b1e51d56c0c3b707fef2677f33667df21d485d (HEAD -> master, origin/master)
Author: Jimmy at Ubuntu <miostudio@163.com>
Date:   Sat Aug 7 12:43:42 2021 +0800

    v0.9 add rules/08_get_matrix.sf

(2) 查询 github 设置的邮箱
右上角头像 -> Settings
查看 Public email 显示框。


(3) 修改本地git的邮箱，要和github一致。
设置有户名和邮箱
git config --global user.name "jimmy" //给自己起个用户名
git config --global user.email  "JimmyMall@live.com" //填写自己的邮箱

以后commit的更新就显示是github当前账号了。

如果服务器上自己的账号下有好几个代码仓库，分别对应着不同的远方仓库，使用不同的邮箱地址，为了防止互相影响，需要去掉 --global 参数。


或者直接在项目下修改配置文件
$ vim .git/config
修改/添加三行
[user]
        email = JimmyMall@live.com
        name = jimmy at Ubuntu




========================================
|-- 设置了 ssh key ，为什么有些项目还是要输入用户名和密码？
----------------------------------------
1. git为什么我使用ssh keys还是需要输入用户名和密码

If you’re switching from HTTPS to SSH, you’ll need to update your remote repository URLs

然后才知道如果使用ssh key的话，只能对ssh的连接进行使用。
那么如何该如何查看本地的repository的url是什么及改变呢?

查看命令:git remote -v


(1) 下面格式是代表使用的ssh:
git remote -v
origin  git@github.com:${USERNAME}/${REPOSITORY}.git (fetch)
origin  git@github.com:${USERNAME}/${REPOSITORY}.git (push)


(2) 下面代表使用的是https:
origin  https://github.com/${USERNAME}/${REPOSITORY}.git (fetch)
origin  https://github.com/${USERNAME}/${REPOSITORY}.git (push)


(3) 设置命令是:git remote set-url

git remote set-url origin https://github.com/${USERNAME}/${REPOSITORY}.git

其中带${}是根据情况需要设置的变量。
附:官方链接
https://docs.github.com/en/github/getting-started-with-github/getting-started-with-git/managing-remote-repositories


或者先删除，再添加
$ git remote remove origin 
$ git remote add origin https://github.com/octocat/Spoon-Knife.git




2. 实例 
$ git remote -v
origin  https://github.com/DawnEve/StackNote.git (fetch)
origin  https://github.com/DawnEve/StackNote.git (push)

$ git remote set-url origin git@github.com:DawnEve/StackNote.git

$ git remote -v
origin  git@github.com:DawnEve/StackNote.git (fetch)
origin  git@github.com:DawnEve/StackNote.git (push)


如果设置过ssh key, 则现在可以直接push了。
这样就比较危险了，注意设置锁屏密码，并在离开电脑时 win+L 锁屏幕。



ref:
https://blog.csdn.net/kang389110772/article/details/52578592







========================================
|-- 一个电脑设置多个 ssh key 访问多个 github 账号  
----------------------------------------
今天(2021年8月15日) github 不允许使用账号密码推送代码了，必须使用ssh key。
那么问题来了，
如果在一台电脑上工作，但是有好几个github账号，怎么设置 ssh key 呢？


1. 默认的 ssh key 设置
$ ls ~/.ssh/
下是空的。

(1) 生成第一个秘钥对
$ ssh-keygen -t rsa -C "jimmyMall@xxx3.com" 

然后会提示三次：
- 1.输出秘钥的路径：
- 2.密码
- 3.确认密码

这三个选项都是可以直接enter的，如果都选择默认的，就会在~/.ssh/目录下创建id_rsa 和 id_rsa.pub，很明显id_rsa是私钥，id_ras.pub是公钥。
- 私钥当然是不能放在其他地方，只能放在本地。
- 而我们需要的是把id_rsa.pub添加在github的key列表中。

(2) 添加公钥到Github
$ cat ~/.ssh/id_rsa.pub
登录自己的github账号，点击右上角头像。选择settings。点击SSH and GPG keys,点击new ssh key
输入一个key名，然后在下面的文本框中粘贴进公钥，点击确定就可以了。


(3) 测试是否连通
$ ssh -T git@github.com
要添加ip地址，输入yes，最后一条显示连通了
Hi miostudio! You've successfully authenticated, but GitHub does not provide shell access.

(4) 尝试 push 到github
查看 
$ git remote  -v
origin  https://github.com/miostudio/linux_C.git (fetch)
origin  https://github.com/miostudio/linux_C.git (push)

这种https协议改成git协议才能使用ssh key 登录。
$ git remote rm origin #先删除之前的远端仓库https链接
$ git remote add origin git@github.com:miostudio/linux_C.git

再查就变成 ssh 链接了
$ git remote  -v
origin  git@github.com:miostudio/linux_C.git (fetch)
origin  git@github.com:miostudio/linux_C.git (push)

使用 $ git push origin master 就直接推送成功了。



(5) (可选)扫盲知识：上传代码仓库到 github 
$ cd <your object>
$ git init #初始化仓库，可以让你的当前文件夹成为一个git仓库
$ git remote add origin git@<Host>:xxxx/test.git	#添加一个远程仓库地址,Host要写刚才ssh config中的。
$ git push origin master

出现上传代码的数据流就上传成功了。










2. 在同一台电脑的同一个账号下，如果想推送到另一个 github B账号，怎么配置呢？

(1) 生成 ssh key
$ ssh-keygen -t rsa -C "jimmyMall@xxxe.com" 
文件名要新建一个，使用绝对地址，防止被覆盖: /home/wangjl/.ssh/eve_id_rsa
另两个是密码，直接 enter 跳过设置。

在 ~/.ssh 下有多生成2个文件，
$ ls -lth ~/.ssh
total 20K
-rw------- 1 wangjl wangjl 1.7K Aug 14 11:58 eve_id_rsa
-rw-r--r-- 1 wangjl wangjl  400 Aug 14 11:58 eve_id_rsa.pub

-rw-r--r-- 1 wangjl wangjl  884 Aug 14 11:48 known_hosts
-rw------- 1 wangjl wangjl 1.7K Aug 14 11:47 id_rsa
-rw-r--r-- 1 wangjl wangjl  399 Aug 14 11:47 id_rsa.pub

(2) cat ~/.ssh/eve_id_rsa.pub 的内容添加到账号 github B的公钥中。


(3) 把密码加到系统中【搞不懂这一步干啥用的】
$ ssh-agent bash
$ ssh-add ~/.ssh/eve_id_rsa
Identity added: /home/wangjl/.ssh/eve_id_rsa (/home/wangjl/.ssh/eve_id_rsa)

# 可以通过 ssh-add -l 来确私钥列表
$ ssh-add -l
# 可以通过 ssh-add -D 来清空私钥列表
$ ssh-add -D



(4) 配置文件
如果你在新建秘钥的时候使用了自定义的名称，比如 eve_id_rsa，你需要再配置一个config文件
$ vim ~/.ssh/config
# github 1
Host mio
    HostName github.com
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/id_rsa

# github 2
Host eve
    HostName github.com
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/eve_id_rsa

ESC+:wq保存退出.



其他人可以社会更多参数(User, ServerAliveInterval等)，可以看看什么意思：
Host github
    User git  
    HostName github.com
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/github_rsa
    ServerAliveInterval 300
    ServerAliveCountMax 10


(5) 测试
$ ssh -T git@github.com
Hi DawnEve! You've successfully authenticated, but GitHub does not provide shell access.

注意： @符号后是设置的 host。
$ ssh -T git@mio
Hi DawnEve! You've successfully authenticated, but GitHub does not provide shell access.

$ ssh -T git@eve
Warning: Permanently added the RSA host key for IP address '13.229.188.59' to the list of known hosts.
Hi DawnEve! You've successfully authenticated, but GitHub does not provide shell access.

如果出现Hi yourname! You’ve successfully authenticated, but GitHub does not provide shell access.说明配置成功了。

我的失败怎么办？-v 显示更多参数
$ ssh -Tv git@eve
miostudio@github.com: Permission denied (publickey).



(6) 把代码 push 到github仓库：必须调整 git remote 的url了。
旧的地址:
$ git remote -v
origin	git@github.com:DawnEve/snakemakeWorkflow.git (fetch)
origin	git@github.com:DawnEve/snakemakeWorkflow.git (push)

测试通的新地址:
$ ssh -T git@eve
Hi DawnEve! You've successfully authenticated, but GitHub does not provide shell access.

修改新地址:
$ git remote set-url origin git@eve:DawnEve/snakemakeWorkflow.git 

查询新地址
$ git remote -v
origin	git@eve:DawnEve/snakemakeWorkflow.git (fetch)
origin	git@eve:DawnEve/snakemakeWorkflow.git (push)

推送代码
$ git push origin master
...
To eve:DawnEve/snakemakeWorkflow.git
   cc740a8..42df284  master -> master

另一个仓库地址的调整类似。




小结：为了体验的一致性，建议把最常用的github账号对应的配置文件的 host 设置为 github.com ，这样就不用修改该仓库的 git remote url就可以直接使用了。






(7) 不太懂的命令
用 ssh -T git@github.com 命令，检查当前配置的SSH对应的git账号；
用 $ ssh-add -K ~/.ssh/id_rsa (id_rsa对应目标账户的私钥)命令，指定目标Git账号。


https://my.oschina.net/stefanzhlg/blog/529403
https://blog.csdn.net/hffygc/article/details/84021548





========================================
|-- github仓库开始启用Token认证，用户名密码模式将在2021年8月停止使用
----------------------------------------
提交代码到github原本使用github的登录账号和密码即可。现在github出于安全的考虑，将在2021年8月停止使用账号和密码的方式访问github仓库，改为token认证的方式。


1. 登录 github 账号，
点击右上角三角符号，下拉菜单选择 Settings
点击左下角 Developer settings
点击左下角 Personal access tokens
点击 Generate a personal access token

2. 输入密码后进入新页面，
填写一个 Note: testGh
选择repo
点击底部的 Generate token

新页面会生成 ghp_iY***zW
复制token，并保存到本地好，github不会保存token，离开这个页面就再也看不到这个token了。


以后访问github仓库就这样：
$ git clone https://github.com/username/repo.git
Username: your_username
Password: your_token


据说最佳实践是这样的：
$ git remote rm <远程仓库连接名>
$ git remote add <新远程仓库连接名> https://<TOKEN>@github.com.cnpmjs.org/<User>/<Repos>.git
$ git push <新远程仓库连接名> main





========================================
|-- bitbucket 也不允许使用密码和https直接提交了 2022年3月
----------------------------------------
https://id.atlassian.com/
https://bitbucket.org/dashboard/overview


https://bitbucket.org/blog/deprecating-atlassian-account-password-for-bitbucket-api-and-git-activity


How to create an app password
To create an app password:

1.From your profile and settings avatar, select Personal settings.
2.Select App passwords under Access management.
3.Select Create app password.
4.Give the app password a name related to the application that will use the password.
5.Select the specific access and permissions you want to assign to this application password.
6.Copy the generated password and either record or paste it into the application you want to give access. The password is only displayed this one time.

More details on app passwords (including usage and revocation) can be found in Bitbucket documentation.

登录。
1左下角头像，点击，选择 Personal settings.
2左侧 ACCESS MANAGEMENT 下的 App passwords
3点击Create app password.
4写个名字 myProj，给Repo 4个全选
5.密码只出现一次，注意保存。




========================================
附录1： 真正理解 git fetch, git pull 以及 FETCH_HEAD  
----------------------------------------

真正理解 git fetch, git pull 

要讲清楚git fetch，git pull,必须要附加讲清楚git remote，git merge 、远程repo， branch 、 commit-id 以及 FETCH_HEAD。

1. 【git remote】首先， git是一个分布式的结构，这意味着本地和远程是一个相对的名称。

本地的repo仓库要与远程的repo配合完成版本对应必须要有 git remote子命令，通过git remote add来添加当前本地长度的远程repo， 有了这个动作本地的repo就知道了当遇到git push 的时候应该往哪里提交代码。

2. 【git branch】其次，git天生就是为了多版本分支管理而创造的，因此分支一说，不得不提， 分支就相当于是为了单独记录软件的某一个发布版本而存在的，既然git是分布式的，便有了本地分支和远程分支一说，git branch 可以查看本地分支， git branch -r  可以用来查看远程分支。 本地分支和远程分支在git push 的时候可以随意指定，交错对应，只要不出现版本从图即可。

3. 【git merge】再者，git的分布式结构也非常适合多人合作开发不同的功能模块，此时如果每个人都在其各自的分支上开发一个相对独立的模块的话，在每次release制作时都需先将各成员的模块做一个合并操作，用于合并各成员的工作成果，完成集成。 此时需要的就是git merge.

4.【git push 和 commit-id】在每次本地工作完成后，都会做一个git commit 操作来保存当前工作到本地的repo， 此时会产生一个commit-id，这是一个能唯一标识一个版本的序列号。 在使用git push后，这个序列号还会同步到远程repo。

在理解了以上git要素之后，分析git fetch 和 git pull 就不再困难了。 

 

首先，git fetch 有四种基本用法

1. git fetch            →→ 这将更新git remote 中所有的远程repo 所包含分支的最新commit-id, 将其记录到.git/FETCH_HEAD文件中

2. git fetch remote_repo         →→ 这将更新名称为remote_repo 的远程repo上的所有branch的最新commit-id，将其记录。 

3. git fetch remote_repo remote_branch_name        →→ 这将这将更新名称为remote_repo 的远程repo上的分支： remote_branch_name

4. git fetch remote_repo remote_branch_name:local_branch_name       →→ 这将这将更新名称为remote_repo 的远程repo上的分支： remote_branch_name ，并在本地创建local_branch_name 本地分支保存远端分支的所有数据。

FETCH_HEAD： 是一个版本链接，记录在本地的一个文件中，指向着目前已经从远程仓库取下来的分支的末端版本。




git pull 的运行过程：

git pull : 首先，基于本地的FETCH_HEAD记录，比对本地的FETCH_HEAD记录与远程仓库的版本号，然后git fetch 获得当前指向的远程分支的后续版本的数据，然后再利用git merge将其与本地的当前分支合并。




Git中从远程的分支获取最新的版本到本地有这样2个命令：

1. git fetch：相当于是从远程获取最新版本到本地，不会自动merge
git fetch origin master
git diff -p master..origin/master
git merge origin/master

    以上命令的含义：
   首先从远程的origin的master主分支下载最新的版本到origin/master分支上
   然后比较本地的master分支和origin/master分支的差别
   最后进行合并
   上述过程其实可以用以下更清晰的方式来进行：

git fetch origin master:tmp
git diff tmp 
git merge tmp
   从远程获取最新的版本到本地的tmp分支上
   之后再进行比较合并

我是用了 
git fetch
git diff master FETCH_HEAD
git merge FETCH_HEAD


2. git pull：相当于是从远程获取最新版本并merge到本地
 git pull origin master
上述命令其实相当于git fetch 和 git merge
在实际使用中，git fetch更安全一些
因为在merge前，我们可以查看更新情况，然后再决定是否合并

结束

参考链接 :  
1.https://ruby-china.org/topics/4768
2.http://stackoverflow.com/questions/9237348/what-does-fetch-head-in-git-mean
3.http://www.cnblogs.com/ToDoToTry/p/4095626.html
4.[推荐]http://blog.csdn.net/hudashi/article/details/7664457










========================================
Git refer
----------------------------------------
https://docs.github.com/en/github/getting-started-with-github/getting-started-with-git
https://git-scm.com/doc

https://www.liaoxuefeng.com/wiki/896043488029600
http://www.itshouce.com.cn/linux/linux-git.html




========================================
github 上的 emoji 表情及使用场景
----------------------------------------
想不到可爱的表情居然还有严格的规范!



1. 使用方法

(1) 直接在 issue 使用
:zap:
:ambulance:
:tada:

(2) 在 git commit -m 中使用 

$ git commit -m ":tada: fisrt commit"





2. 使用规范
(1) An emoji guide for your commit messages.

https://gitmoji.dev/
https://github.com/carloscuesta/gitmoji


选几个我可能用的
修复 bug :bug:
(火花)	:sparkles:	引入新功能



(2) emoji 指南
emoji	/emoji 代码	 /commit 说明

:art: (调色板)	:art:	改进代码结构 / 代码格式
:zap:(闪电)	:zap:	提高性能
:fire: (火焰)	:fire:	移除代码或文件
:bug: (bug)	:bug:	修复 bug
:ambulance: (急救车)	:ambulance:	重要补丁
:sparkles: (火花)	:sparkles:	引入新功能
:memo: (备忘录)	:memo:	撰写文档

:rocket: (火箭)	:rocket:	部署功能
:lipstick: (口红)	:lipstick:	更新 UI 和样式文件
:tada: (庆祝)	:tada:	初次提交
:white_check_mark: (白色复选框)	:white_check_mark:	增加测试
:lock: (锁)	:lock:	修复安全问题
:apple: (苹果)	:apple:	修复 macOS 下的问题
:penguin: (企鹅)	:penguin:	修复 Linux 下的问题
:checkered_flag: (旗帜)	:checked_flag:	修复 Windows 下的问题
:bookmark: (书签)	:bookmark:	发行 / 版本标签
:rotating_light: (警车灯)	:rotating_light:	移除 linter 警告
:construction: (施工)	:construction:	工作进行中
:green_heart: (绿心)	:green_heart:	修复 CI 构建问题
:arrow_down: (下降箭头)	:arrow_down:	降级依赖
:arrow_up: (上升箭头)	:arrow_up:	升级依赖
:construction_worker: (工人)	:construction_worker:	添加 CI 构建系统
:chart_with_upwards_trend: (上升趋势图)	:chart_with_upwards_trend:	添加分析或跟踪代码
:hammer: (锤子)	:hammer:	重大重构
:heavy_minus_sign: (减号)	:heavy_minus_sign:	减少一个依赖
:whale: (鲸鱼)	:whale:	Docker 相关工作
:heavy_plus_sign: (加号)	:heavy_plug_sign:	增加一个依赖
:wrench: (扳手)	:wrench:	修改配置文件
:globe_with_meridians: (地球)	:globe_with_meridians:	国际化与本地化
:pencil2: (铅笔)	:pencil2:	修复错别字
:ok_hand: (OK 手势)	:ok_hand:	由于代码审查更改而更新代码




ref: https://qq52o.me/1974.html




========================================
疑难杂症：xshell 导入 rsa 私钥失败？
----------------------------------------

新版本git(我用的git 2.39.0)使用 OPENSSH 而不是 RSA 的私钥，可能导致有些老系统不认可。
$ head -n 2 ~/.ssh/id_rsa
-----BEGIN OPENSSH PRIVATE KEY-----


需要加 -m PEM 参数，才能生成之前的版本：
$ cd ~/.ssh/
$ ssh-keygen -t rsa -m PEM -C "jimmymall@live.com" 文件名输入 193_id_rsa
$ head -n 2 ~/.ssh/193_id_rsa
-----BEGIN RSA PRIVATE KEY-----






========================================
----------------------------------------





========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------





========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------



