rst格式简介 与 Sphinx 的使用
reStructuredText 


Sphinx 是一个文档生成引擎，也是一个搜索引擎，这里仅指前者。

中文文档：https://zh-sphinx-doc.readthedocs.io/en/latest/




========================================
reST 简介: reStructuredText
----------------------------------------
1. rst 简介

.rst 文件是轻量级标记语言的一种，被设计为容易阅读和编写的纯文本，并且可以借助Docutils这样的程序进行文档处理，也可以转换为HTML或PDF等多种格式，或由Sphinx-Doc这样的程序转换为LaTex、man等更多格式。

有人说"markdown 设计时没考虑好，不能应对复杂的文档编辑需求，作为程序员还是用 rst 更合适",https://www.v2ex.com/t/503110
貌似没有人响应。

reStructuredText - 一个比MarkDown更好用的标记语言

Sphinx + reStructuredText 生成API文档/带目录层次结构

rst与md的比较: https://www.zhihu.com/question/19851600

Sphinx 还是一个高性能SQL全文检索引擎的名字，此处不讨论它 https://www.runoob.com/w3cnote/sphinx-sql-search-engine.html





2. 为什么使用reStructuredText

经过仔细研究和比较，我终于从reStructuredText, Markdown, Wiki和Docbook中选择了reStructedText作为主要的写文档的工具。原因是：

reStructuredText(简称为rst)是一个WYSIWYG的plain text文本格式。因此rst与docbook比较,易于书写和阅读。
和同样是WYSIWYG的Markdown相比，rst支持工具更加丰富一些。并且rst还在不停的演变和发展，支持的功能更多一些，例如公式和网站发布。
 rst是python用以书写文档的工具。详细信息可以从 http://docutils.sourceforge.net/rst.html 获得。官方使用docutils来转换rst文档。

docutils在win32环境下使用有些别扭，要求在docutils/tools路径下执行转换命令：

python rst2html.py <source_file> <html_file>

可以用rst2latex.py转换为latex文档，然后使用pdflatex转换为pdf格式。

如果使用vim来编辑rst文档，一个plugin vst 可以很好的帮助大家。











========================================
|-- rst 在线解析？
----------------------------------------
在线版 http://rst.ninjs.org/

python的rst解析库Sphinx



========================================
Sphinx：转换rst文件生成专业格式的文档
----------------------------------------
Sphinx是一个基于Python的文档生成项目。最早只是用来生成Python的项目文档，但随着这个项目的逐渐完善，很多非Python的知名项目也采用Sphinx作为文档写作工具，甚至完全可以用Sphinx来写书。

1. 官网
https://www.sphinx-doc.org/en/master/

使用的例子: 
	https://docs.kernel.org/
	https://docs.python.org/3/
	https://docs.jupyter.org/en/latest/


2. 引用一段Sphinx生成文档的优点包括：

丰富的输出格式: 支持输出为HTML，LaTeX (可转换为PDF)， manual pages(man), 纯文本等若干种格式
完备的交叉引用: 语义化的标签,并对 函式,类,引文,术语以及类似片段消息可以自动化链接
明晰的分层结构: 轻松定义文档树,并自动化链接同级/父级/下级文章
美观的自动索引: 可自动生成美观的模块索引
精确的语法高亮: 基于 Pygments 自动生成语法高亮
开放的扩展: 支持代码块的自动测试,自动包含Python 的模块自述文档,等等
其实上面这么多功能，最本质的核心还是在于Sphinx采用了轻量级标记语言中的reStructuredText作为文档写作语言。reStructuredText是类似Wiki，Markdown的一种纯文本标记语言，所有Sphinx的文档其实都是扩展名为rst的纯文本文件，然后经过转换器转换为各种输出格式，并且可以配合版本控制系统轻松实现Diff。


https://www.sphinx-doc.org/en/master/index.html




========================================
|-- 实战：Sphinx 由 .rst 格式生成文档
----------------------------------------
1. 安装 Sphinx
$ pip3 install Sphinx

$ pip3 list | grep -i Sphinx
Sphinx                        7.3.7
sphinxcontrib-applehelp       1.0.8
sphinxcontrib-devhelp         1.0.6
sphinxcontrib-htmlhelp        2.0.5
sphinxcontrib-jsmath          1.0.1
sphinxcontrib-qthelp          1.0.7
sphinxcontrib-serializinghtml 1.1.10




2. Sphinx 主要语句
(1) 如果包含rst文档的目录名为doc, 以下将生成html 格式的文档到build 目录
$ sphinx-build -b html doc/ build
参数解释：
--builder BUILDER, -b BUILDER: builder to use (default: 'html')

(2) 帮助文档：
$ sphinx-build --help
usage: sphinx-build [OPTIONS] SOURCEDIR OUTPUTDIR [FILENAMES...]

Generate documentation from source files. sphinx-build generates documentation from the files in SOURCEDIR and places it in OUTPUTDIR. It looks for 'conf.py' in SOURCEDIR for the configuration settings. 
在源代码文件中找 conf.py 配置文件。

The 'sphinx-quickstart' tool may be used to generate template files, including 'conf.py' sphinx-build can create documentation in different formats. A format is selected by specifying the builder name on the command line; it defaults to HTML. 
可用 sphinx-quickstart 工具生成模版文件，包括 conf.py 

Builders can also perform other tasks related to documentation processing. By default, everything that is outdated is built. Output only
for selected files can be built by specifying individual filenames.





3. 完整示例
https://www.yisu.com/ask/68002677.html

@J3 server $ cd /home/wangjl/data/web/docs/docs/

(1) 初始化项目
$ sphinx-quickstart --version
sphinx-quickstart 7.3.7
$ sphinx-quickstart

该命令将引导你进行一些设置，包括项目名称、作者等。完成后，Sphinx项目将被初始化并创建必要的目录和文件。
> Separate source and build directories (y/n) [n]: y
> Project name: CurProj
> Author name(s): WJL
> Project release []: 0.0.1
> Project language [en]: en


$ tree 
.
├── build
├── make.bat
├── Makefile
└── source
    ├── conf.py
    ├── index.rst
    ├── _static
    └── _templates

(2) 编写文档
在Sphinx项目的"source"目录中编写文档。可以使用reStructuredText（一种标记语言）编写文档，并根据需要创建多个.rst文件。

查看默认生成的文档
$ cat source/index.rst
.. CurProj documentation master file, created by
   sphinx-quickstart on Tue Jul  9 15:43:24 2024.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Welcome to CurProj's documentation!
================= ==================

.. toctree::
   :maxdepth: 2
   :caption: Contents:


Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`





(3) 配置Sphinx

编辑"Sphinx项目目录"/conf.py文件，配置Sphinx的各种选项，包括文档的主题、输出格式等。

查看默认生成的文档
$ cat source/conf.py
# Configuration file for the Sphinx documentation builder.
#
# For the full list of built-in configuration values, see the documentation:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Project information ------------ ---------------------- -------------------
# https://www.sphinx-doc.org/en/master/usage/configuration.html#project-information

project = 'CurProj'
copyright = '2024, WJL'
author = 'WJL'
release = '0.0.1'

# -- General configuration ------------ ---------------------- -----------------
# https://www.sphinx-doc.org/en/master/usage/configuration.html#general-configuration

extensions = []

templates_path = ['_templates']
exclude_patterns = []



# -- Options for HTML output -------------- ------------------- ----------------
# https://www.sphinx-doc.org/en/master/usage/configuration.html#options-for-html-output

html_theme = 'alabaster'
html_static_path = ['_static']





(4) 生成文档
在命令行中转到Sphinx项目的根目录，并运行以下命令生成文档：
$ make html
该命令将根据配置文件conf.py和rst源文件生成HTML格式的文档。可以将"html"替换为其他格式，如"pdf"、"epub"等，以生成不同的输出格式。

示例：
$ make html
Running Sphinx v7.3.7
making output directory... done
building [mo]: targets for 0 po files that are out of date
writing output... 
building [html]: targets for 1 source files that are out of date
updating environment: [new config] 1 added, 0 changed, 0 removed
reading sources... [100%] index
looking for now-outdated files... none found
pickling environment... done
checking consistency... done
preparing documents... done
copying assets... copying static files... done
copying extra files... done
done
writing output... [100%] index
generating indices... genindex done
writing additional pages... search done
dumping search index in English (code: en)... done
dumping object inventory... done
build succeeded.

The HTML pages are in build/html.


查看帮助文档：
$ make help
  html        to make standalone HTML files
  dirhtml     to make HTML files named index.html in directories
  singlehtml  to make a single large HTML file
  pickle      to make pickle files
  json        to make JSON files
...



(5) 查看生成的文档
生成的文档位于"Sphinx项目目录"/build目录中，可以在浏览器中打开index.html文件查看生成的文档。
这只是Sphinx的基本用法，还有更多高级功能可以进一步探索和使用。可以参考Sphinx的官方文档以了解更多详细信息和示例。

$ ls -lth
total 16K
drwxr-xr-x. 4 wangjl jinlab 4.0K Jul  9 15:58 build
-rw-r--r--. 1 wangjl jinlab  804 Jul  9 15:50 make.bat
-rw-r--r--. 1 wangjl jinlab  638 Jul  9 15:50 Makefile
drwxr-xr-x. 4 wangjl jinlab 4.0K Jul  9 15:50 source


$ tree 
.
├── build
│   ├── doctrees
│   │   ├── environment.pickle
│   │   └── index.doctree
│   └── html
│       ├── genindex.html
│       ├── index.html
│       ├── objects.inv
│       ├── search.html
│       ├── searchindex.js
│       ├── _sources
│       │   └── index.rst.txt
│       └── _static
│           ├── alabaster.css
│           ├── basic.css
│           ├── custom.css
│           ├── doctools.js
│           ├── documentation_options.js
│           ├── file.png
│           ├── language_data.js
│           ├── minus.png
│           ├── plus.png
│           ├── pygments.css
│           ├── searchtools.js
│           └── sphinx_highlight.js
├── make.bat
├── Makefile
└── source
    ├── conf.py
    ├── index.rst
    ├── _static
    └── _templates

浏览器查看：
http://j3.biomooc.com:8000/file/docs/build/html/index.html

刚才的设置对应的位置：
作者(WJL)：
	©2024, WJL. | Powered by Sphinx 7.3.7 & Alabaster 0.7.16 | Page source

项目名字(CurProj)、发布号(0.0.1)：
	<title>Welcome to CurProj’s documentation! &#8212; CurProj 0.0.1 documentation</title>


(6) 学习rst语法规则
1)修改 source/*rst文件
2)修改配置文件 source/conf.py
3)生成文档 $ make html

$ sphinx-build -b html source/ build2
	效果和 make html 似乎一致，但是生成的文件结构略有不同。
	$ rm -rf build2

推荐用短命令 make html





========================================
|-- 更多主题：a theme provided by Read the Docs
----------------------------------------
1. 修改配置文件 conf.py
(1) 默认主题，推荐
html_theme = 'alabaster'  # 或者选择其他主题，如 'sphinx_rtd_theme'

https://alabaster.readthedocs.io/en/latest/


(2) Sphinx有多种内置主题可供选择。
请注意，在这些主题中，只有Alabaster和Scrolls主题是移动优化的，如果屏幕太窄，其他主题会求助于水平滚动。

这些主题包括：
	basic: 白底黑字，几乎没样式，没左侧目录
	alabaster: 同上，有左侧目录。推荐

	classic: 深蓝背景，有左侧目录。难看。
	sphinxdoc: 浅蓝背景，有右侧目录。推荐

	scrolls: 浅灰色背景，无目录。
	agogo: 有大header+footer，内容白底黑字
	nature: h1-h2 蓝背景黑字，左侧目录
	pyramid: 灰色背景，左侧目录
	haiku: 无目录
	traditional: 右侧目录
	epub: 无css，无目录
	bizstyle: 左侧目录

(3) 效果图看
sphinx-themes.org 是一个展示Sphinx的各种主题的图库，每个主题下都有演示文档。
主题也可以在 PyPI (使用分类器 Framework :: Sphinx :: Theme ), 
	GitHub: https://github.com/search?utf8=%E2%9C%93&q=sphinx+theme
	GitLab: https://gitlab.com/explore?name=sphinx+theme
https://sphinx-themes.org/ 页面最下面几个 builtin




2. 其他第三方包
https://sphinx-themes.org/

(1) try1: sphinx_rtd_theme
html_theme = 'sphinx_rtd_theme'

结果报错
$ make html
...
Theme error:
no theme named 'sphinx_rtd_theme' found (missing theme.toml?)
make: *** [html] Error 2


1) 安装主题：
$ pip3 install sphinx-rtd-theme
注意，这里安装时包名是减号-: sphinx-rtd-theme;
而python引入时使用的是下划线_: import sphinx_rtd_theme

2) 设置 conf.py
import sphinx_rtd_theme  
 
html_theme = "sphinx_rtd_theme"  
html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]

3) 编译
$ make html
网页预览，底部主题是：Built with Sphinx using a theme provided by Read the Docs.



(2) try2: Book
$ pip3 install sphinx-book-theme

# conf.py 
html_theme = 'sphinx_book_theme'

$ make html



Ref:
https://www.osgeo.cn/sphinx/usage/theming.html




========================================
|-- 定义文档结构：指令(toctree 指令，)
----------------------------------------
运行 sphinx-quickstart 之后，你将在源目录中看到 配置文件 conf.py 和根文档 index.rst。
根文档的主要功能用作欢迎页面，并包含“目录树”的根(或 toctree )。
这是Sphinx添加到reStrinredText的主要功能之一，这是一种将多个文件连接到单个文档层次结构的方法。

1. 指令
指令是显式标记的通用块。除了角色之外，它也是 reST 的延伸机制之一，Sphinx对其进行了大量的利用。

指令可以有参数、可选项和内容。
	* 参数：直接在指令名称后面的双冒号后面给出。每个指令决定它是否可以有参数，以及有多少参数。
	* 可选项：以“字段列表”的形式在参数之后给出。这个 maxdepth 是 toctree 指令的可选项。
	* 内容：在空白行后跟随选项或参数。每个指令决定是否允许内容，以及如何处理它。
	* 指令的一个常见用法是 内容的第一行必须缩进到与可选项相同的级别 .


2. toctree 指令
toctree 是RestructuredText directive 一个非常通用的标记。

例1：
.. toctree::
   :maxdepth: 2
   :caption: Contents:


例2：带其他文件名字为内容
如何添加新文件到目录？只需要把文件路径添加到inde.rst 中 toctree 中即可。

.. toctree::
   :maxdepth: 2

   usage/installation
   usage/quickstart
   ...

对应的其他文件名为： 
	usage/installation.rst
	usage/quickstart.rst
编译后，其文档结构会出现在首页顶部目录中。




例3: 如果其他单独文件不想合并到本页面怎么写？
不在 index.rst 的toctree中写文件 js.rst 的 js，则会警告：
checking consistency... /picb/jinlab/wangjl/web/docs/docs/source/js.rst: WARNING: document isn't included in any toctree
参考 https://www.itguest.com/post/ijghjj2b9.html
https://www.sphinx-doc.org/en/master/usage/restructuredtext/field-lists.html#file-wide-metadata

在rst文件中明确设置这是一个孤立的文件，会忽略掉警告信息：
:orphan:








========================================
|-- Docker 版编译环境： sphinxdoc/sphinx，输出pdf
----------------------------------------
https://hub.docker.com/r/sphinxdoc/sphinx

1. 镜像简介

$ docker pull sphinxdoc/sphinx
$ docker pull sphinxdoc/sphinx-latexpdf

注意：sphinxdoc/sphinx-latexpdf contains TeXLive packages. So the image is very large (over 2GB!).
版本号：latest=7.3.7


(2) 作为基础镜像
# in your Dockerfile
FROM sphinxdoc/sphinx

WORKDIR /docs
ADD requirements.txt /docs
RUN pip3 install -r requirements.txt




2. 使用
创建 Sphinx 项目：
$ docker run -it --rm -v /path/to/document:/docs sphinxdoc/sphinx sphinx-quickstart

构建html项目：
$ docker run --rm -v /path/to/document:/docs sphinxdoc/sphinx make html

构建EPUB项目：
$ docker run --rm -v /path/to/document:/docs sphinxdoc/sphinx make epub

构建pdf项目：
$ docker run --rm -v /path/to/document:/docs sphinxdoc/sphinx-latexpdf make latexpdf
报错：没有写入权限
	$ docker run --user root -v $(pwd):/docs -w /docs sphinxdoc/sphinx-latexpdf make latexpdf #同样报错
	$ docker run -u 5662 -v $(pwd):/docs -w /docs sphinxdoc/sphinx-latexpdf make latexpdf   #正常
	在build/latex/scpolya-seq2.pdf看到结果，效果很棒！






========================================
Docutils：将纯文本转换成 HTML 或者 LaTeX 格式 //todo
----------------------------------------
https://docutils.sourceforge.io/

Sphinx 建立在 Docutils 和 Jinja 之上。







========================================
rst语法简介：粗体、斜体等行内标记
----------------------------------------
https://docutils.sourceforge.io/docs/user/rst/quickref.html

https://www.writethedocs.org/guide/writing/beginners-guide-to-docs/

https://www.osgeo.cn/sphinx/usage/restructuredtext/basics.html


纯文本       /html       /效果描述

*emphasis*   <i>         斜体字
**strong emphasis**  <b> 粗体字
`interpreted text`  程序代码？
``inline literal`` 行内程序代码，等宽字体
reference_  <a href="#hyperlink-targets">reference</a> 超链接，注意末尾的下划线
`phrase reference`_  <a href="#hyperlink-targets">phrase reference</a> 超链接，注意末尾的下划线
anonymous__  <a href="#hyperlink-targets">anonymous</a> 匿名超链接，注意双下划线结尾
_`inline internal target`  行内内部目标
|substitution reference| 占位符，等待被替换掉
footnote reference [1]_  xx<sup><a href="#footnotes">1</a></sup> 上标的脚注
citation reference [CIT2002]_  xx<a href="#citations">[CIT2002]</a> 引用
https://docutils.sourceforge.io/ <a href="https://docutils.sourceforge.io/">https://docutils.sourceforge.io/</a> 单独的链接



对比效果：
生成前：https://docutils.sourceforge.io/rst.html
生成后：https://docutils.sourceforge.io/rst.txt






========================================
|-- Escaping with Backslashes 反斜杠
----------------------------------------
*escape* ``with`` "\" 编译后：<em>escape</em> <samp>with</samp> ""

\*escape* \``with`` "\\" 编译后： *escape* ``with`` "\" 






========================================
|-- 列表
----------------------------------------
1. 简单列表
* This is a bulleted list.
* It has two items, the second
  item uses two lines.

1. This is a numbered list.
2. It has two items too.

#. This is a numbered list.
#. It has two items too.



2. 嵌套列表：必须有空行和父列表分割
* this is
* a list

  * with a nested list
  * and some subitems

* and here the parent list continues







========================================
|-- 章节标题
----------------------------------------
1. 至少与文本一样长：
Level 1 header
==============

Level 2 header
--------------

"*" 更适合列表



2. 此约定用于 Python Developer's Guide for documenting 你可以遵循这一点：

# 带上横线，用于Part
* 带上横线，用于章节 chapter
= 对于各节 section
- 适用于小节
^ 适用于小节
" 对于段落 paragraph






========================================
|-- 图
----------------------------------------
.. image:: gnu.png
   (options)

在Sphinx中使用时，给出的文件名（此处 gnu.png ）必须是相对于源文件的，或者是绝对的，这意味着它们是相对于顶级源目录的。例如，文件 sketch/spam.rst 可以参考图像 images/spam.png 作为 ../images/spam.png 或 /images/spam.png .

sphinx将自动将图像文件复制到 build/ 输出目录的子目录（例如 _static 用于HTML输出的目录。）




========================================
|-- 超链接
----------------------------------------
1. 链接文本和URL的开头之间必须有空格。
`Link text <http://www.example.com>`_
最后的下划线是个坑









========================================
|-- 字段列表
----------------------------------------
写法如下：
:fieldname: Field content

它们通常用于python文档：

def my_function(my_arg, my_other_arg):
    """A function just for me.

    :param my_arg: The first of my arguments.
    :param my_other_arg: The second of my arguments.

    :returns: A message (just for me, of course).
    """
sphinx扩展了标准docutils行为，并拦截了文档开头指定的字段列表。参照 字段列表 更多信息。






========================================
|-- 评论
----------------------------------------
1. 单行

.. This is a comment.


2. 多行

..
   This whole indented block
   is a comment.

   Still in the comment.





========================================
|-- 提示框(note 指令)、警告框(warning 指令)
----------------------------------------
1. 提示框
.. note:: This is a note box.


2. 警告框
.. warning:: This is a warning box.


========================================
|-- 包含文件: include 指令
----------------------------------------
.. include:: /pages/technical-considerations/0070-baz.rst 




ref:
https://www.itguest.com/post/ijghjj2b9.html



========================================
|-- 代码 code
----------------------------------------
https://www.wenjiangs.com/doc/ad7zvfzt

在reST文档中列出代码有三种方式：
1. 行内代码 用``code``

2. 简单代码块 在代码块的上一个段落后面加2个冒号，空一行后开始代码块，代码块要缩进

3. 复杂代码块 使用code-block指导语句，还可以选择列出行号和高亮重点行等
	:linenos:显示行号
	:emphasize-lines:3,6 3,6行高亮

.. code-block:: c
    :linenos:
    :emphasize-lines: 3,6

    void foo()
    {
        int i;

        for(i=0; i<10; i++)
            printf("i: %d\n", a);
    }


.. code-block:: html
    :linenos:

    <b>粗体</b>


.. code-block:: php
    :linenos:

    <?php
        echo 'hi';
    ?>


写R代码时，由于缺乏R解析器，可以使用想尽的python解析器
.. code-block:: python
  :linenos:

  if(0){
	print("R code")
  }


4. 插入js代码
.. code-block:: javascript
 
   /**
    * 这是一个JavaScript代码块的示例。
    */
   function sayHello(name) {
       console.log(`Hello, ${name}!`);
   }
 
   sayHello('World');

确保你的 Sphinx 配置文件 conf.py 包含了对 Pygments 代码高亮的支持，因为 Sphinx 默认使用 Pygments 来实现代码高亮。如果没有，你可以通过以下指令来确保 Pygments 被包含：

$ vim conf.py #我测试报错：无法加载
from sphinx.highlighting import patch_pygments
patch_pygments()







========================================
|-- 单个Sphinx页面中插入可执行的 javascript
----------------------------------------

.. raw:: html

   <script type="text/javascript">
       // Your JavaScript code here
	   alert("hi!!");
   </script>

真的弹出alert了！




========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------

