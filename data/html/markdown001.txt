markdown简介


要实现txtBlog支持markdown，就需要实现
- md 2 html, 方便网页展示; 
	- 要自动生成目录，最好是悬浮右侧，并自动移动位置的。
- md 2 pdf 或html 2 pdf，方便收藏或打印;
- 最好有一个支持的js所见即所得编辑器，方便编辑。
- 最好支持数学符号


GitHub Flavored Markdown
https://github.com/guodongxiaren/README#%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE





========================================
见识见识md
----------------------------------------
真把简单的东西搞复杂了，就wikipedia上看张图，对比一下就明白了
	https://en.wikipedia.org/wiki/Markdown#Example
	
请欣赏几个markdown博客：
谢益辉的博客,真是美的享受：http://yihui.name/cn/guestbook/
https://ideazhao.com/


带右侧固定目录的文档: https://pingcap.com/docs-cn/v3.0/benchmark/how-to-run-tpcc/






========================================
|-- 终极武器：网页md编辑器
----------------------------------------
1.所见即所得书写工具：
给出两个在线的Markdown编辑器
    http://mahua.jser.me/
    http://maxiang.info/
    第一个是个人开发的，免费使用，非常赞！
    第二个是一个已经发布的产品，可以免费在线编辑。除此之外，还可以将内容同步到印象笔记，不过只能试用10天，之后需要79/年，还是非常不错的。

	https://md2.sleele.com/



2. Hugo：静态网站生成器。号称最快的！
https://gohugo.io/
The world’s fastest framework for building websites


3. Hexo 支持 GitHub Flavored Markdown 的所有功能
https://hexo.io/zh-cn/

不过，有人抱怨hexo 的生成速度过慢了：Hexo的生成速度明显比Hugo慢了一个等级。




4. 编辑器-阅读器
Typora — a markdown editor, markdown reader. Simple, yet Powerful
https://typora.io/




	
MD教程：
1.http://www.appinn.com/markdown/
2.http://www.jianshu.com/p/1e402922ee32/
3.MarkDown语法简介：http://ued.taobao.org/blog/2012/07/getting-started-with-markdown/



========================================
|-- what and why?
----------------------------------------
markdown是什么？
	Markdown 的目标是实现「易读易写」。
	markdown(简称md)可以作为书写格式，而html可以作为发布格式。
	md便于书写和阅读，而html对设备支持度高，支持更灵活的样式配置。

流程上：
	我们可以先写成markdown格式；
	再使用软件转化为html，添加好看的样式； 
	如果需要，再打印成pdf格式。


使用 Markdown 的优点：
	专注你的文字内容而不是排版样式，安心写作。
	轻松的导出 HTML、PDF 和本身的 .md 文件。
	纯文本内容，兼容所有的文本编辑器与字处理软件。
	随时修改你的文章版本，不必像字处理软件生成若干文件版本导致混乱。
	可读、直观、学习成本低。

流行程度：github和stackoverflow都支持md格式。








========================================
|-- JS markdown parser
----------------------------------------

https://github.com/markedjs/marked

https://markdown-it.github.io/


https://css-tricks.com/choosing-right-markdown-parser/




========================================
学习 md 语法规则
----------------------------------------



========================================
|-- 注释和脚注
----------------------------------------


1.单行注释 https://www.jianshu.com/p/9be87e7e15bf
[//]: # (This may be the most platform independent comment)


2.多行注释(失败)
<!--
整段整段的不可见内容
-->


(2) 这样多行注释，必须顶起空格
[^_^]:
	commentted-out contents
	should be shift to right by four spaces (vim ：`>>`).



3. 脚注 https://blog.csdn.net/PoGeN1/article/details/82183002
生成一个脚注1[^footnote].
  [^footnote]: 这里是 **脚注** 的 *内容*.





========================================
|-- 标题
----------------------------------------

类 Atx 形式是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶，例如：
# 一级标题

## 二级标题

### 三级标题

建议在井号后加一个空格，这是最标准的 Markdown 语法。



类 Setext 形式:

This is an H1
=============

This is an H2
-------------
任何数量的 = 和 - 都可以有效果。





========================================
|-- 列表
----------------------------------------
列表的显示只需要在文字前加上 + 或 - 或 * 即可变为无序列表。 
	- something
	- something2

有序列表则直接在文字前加1. 2. 3. 符号要和文字之间加上一个字符的空格。
	1. sometext
	2. sometext
很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为：



如果列表项目间用空行分开，在输出 HTML 时 Markdown 就会将项目内容用 <p> 标签包起来，举例来说：

*   Bird
*   Magic
会被转换为：
<ul>
<li>Bird</li>
<li>Magic</li>
</ul>


但是这个：

*   Bird

*   Magic
会被转换为：
<ul>
<li><p>Bird</p></li>
<li><p>Magic</p></li>
</ul>





========================================
|-- 区块引用 Blockquotes
----------------------------------------
只需要在文本前加入 > 这种尖括号（大于号）即可

> some words by Bill Gates

========================================
|-- 图片和链接
----------------------------------------
插入链接与插入图片的语法很像，区别在一个 !号

图片为：![]()

链接为：[]()

如：
请单击 [Baidu](http://baidu.com) 搜索。

请看图片 ![Baidu](http://baidu.com/logo.png)

[?]怎么加title属性？
第二个参数(url, title)


图片详细叙述如下：
	一个惊叹号 !
	接着一个方括号，里面放上图片的替代文字
	接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 'title' 文字。

========================================
|-- 粗体和斜体
----------------------------------------
用两个 * 包含一段文本就是粗体的语法，
用一个 * 包含一段文本就是斜体的语法。


========================================
|-- 表格
----------------------------------------
表格是我觉得 Markdown 比较累人的地方，例子如下：

| Tables        | Are           | Cool  |
| ------------- |:-------------:| -----:|
| col 3 is      | right-aligned | $1600 |
| col 2 is      | centered      |   $12 |
| zebra stripes | are neat      |    $1 |

* 原生markdown不支持这样的表格，扩展的markdown才支持

========================================
|-- 代码框
----------------------------------------
如果你是个程序猿，需要在文章里优雅的引用代码框，在 Markdown下实现也非常简单. 

1.行内代码(inline code)
只需要用两个 ` 把中间的代码包裹起来。图例：

`alert(123);`

2.还有块代码(block code)的写法：代码每一行的前面都加4个空格或一个tab


3. 还有一种Fenced Code Block，写法是：第一行和最后一行都是3个 " ` "，中间的行是代码，

```
function n(s){
	console.log(s);
}
```


========================================
|-- 分割线
----------------------------------------
你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：

* * *

***

*****

- - -



========================================
|-- 强调
----------------------------------------
Markdown 使用星号（*）和底线（_）作为标记强调字词的符号，被 * 或 _ 包围的字词会被转成用 <em> 标签包围，用两个 * 或 _ 包起来的话，则会被转成 <strong>，例如：

*single asterisks*
_single underscores_
**double asterisks**
__double underscores__

会转成：
<em>single asterisks</em>
<em>single underscores</em>
<strong>double asterisks</strong>
<strong>double underscores</strong>


你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。

强调也可以直接插在文字中间：
un*frigging*believable
但是如果你的 * 和 _ 两边都有空白的话，它们就只会被当成普通的符号。



========================================
|-- 上标sup、下标sub
----------------------------------------

直接使用 html 的方式:

上标：a<sup>2</sup>
下标：a<sub>2</sub>








ref:https://www.jianshu.com/p/3cb91436fba0






========================================
GitHub flavored markdown
----------------------------------------
markdown的解析器有很多（你自己写一个也不难），

要想用github上的样式应该叫GitHub flavored markdown，其实只要改一下CSS就行了


========================================
|-- GitHub Flavored Markdown 中实现【页内跳转】
----------------------------------------
https://blog.csdn.net/gfyzband/article/details/82849616

1. 任意 # 标注的标题都会被添加上同名的跳转链接，具体细节可参考这里的说明
[标题1](#标题1) 
[标题2](#标题2) 

# 标题1
## 标题2




2. 使用 html 标签
## <a name='TableOfContent'> Table of Content </a>
[1. Anchors](#Anchors)  
[2. Block Elements](#BlockElements)  

## <a name="Anchors"> 1. Anchors </a>
See [Table of Content](#TableOfContent) above.
## <a name="BlockElements"> 2. Block Elements </a>



注意
- 定义链接的时候，# 后必须与目标链接中的 name 保持一致
- 链接名称不能包含空格，可用 CamelCase 风格，或者 -(minus-sign) 连接
- 可以实现向后和向前跳转



========================================
纯python版的markdown解析器 mistune 的使用和学习
----------------------------------------
https://github.com/lepture/mistune
https://mistune.readthedocs.io/en/latest/

Block Level
Span Level
Footnotes
Lexers

md转html的代码:
import mistune
mistune.markdown('I am using **mistune markdown parser**')
# output: <p>I am using <strong>mistune markdown parser</strong></p>


只需要从github扒下来一套皮肤样式。



========================================
|-- 扩展 mistune 子类，markdown后台转html时跳过LaTex代码片段的解析
----------------------------------------

其他博客解决方案：
(1)Mistune Syntax Highlighter, MathJax support and centered images
Server rendering syntax highlighting with Mistune and other stuff
https://blog.depado.eu/post/mistune-parser-syntax-mathjax-centered-images

(2)https://github.com/jupyter/nbconvert/pull/611

(3)


md文档后台用mistune转html，前台用MathJax.js把LaTex公式可视化，发现mistune把_转为了<em>或</em>，导致很多公式可视化失败。
后来发现该包可以扩展，就参考官方文档扩展了一个子类，后台转换md为html时，碰到$$包起来的部分啥都不做。


1. md文件，含LaTex代码
$$
\varGamma(x)=\frac{\int_{\alpha}^{\beta}g(t)(x-t)^2\text{d}t}{\phi(x)\sum_{i=0}^{N-1}\omega_i}\tag{2}
$$

$\alpha+\beta=\gamma$





2. python会把md转为LaTex
import re
from mistune import Renderer, Markdown, InlineLexer

# define new sub class
#让mistune不后台处理$$和$$之间的LaTex代码，交给前台的js处理成数学公式
class LaTexRenderer(Renderer):
    #def LaTex(self, alt, link):
    def LaTex(self, text):
        return '$$%s$$' % (text)

class LaTexInlineLexer(InlineLexer):
    def enable_LaTex(self):
        # add LaTex rules
        self.rules.LaTex = re.compile(
            r'\$\$'                   # $$
            r'([\s\S]+?)'   # ***
            r'\$\$(?!\])'             # $$
        )

        # Add LaTex parser to default rules
        # you can insert it some place you like
        # but place matters, maybe 3 is not good
        self.default_rules.insert(3, 'LaTex')

    def output_LaTex(self, m):
        text = m.group(1)
        #alt, link = text.split('|')
        # you can create an custom render
        # you can also return the html if you like
        #return self.renderer.LaTex(alt, link)
        return self.renderer.LaTex(text)
# the end of sub class
#
def md2html(md):
	renderer = LaTexRenderer()
	inline = LaTexInlineLexer(renderer)
	# enable the feature
	inline.enable_LaTex()
	markdown = Markdown(renderer, inline=inline)
	return markdown(md)
#

#读取md文件
fpath="../data/Python/ReadMe.markdown";
fr=open(fpath, 'r', encoding="utf-8")
text=fr.read()
fr.close()


#md to html(leave LaTex alone)
md=md2html(text)


rs=md;
#html to LaTex
js3='<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML"></script>';
js3+='<script src="../static/js/showLaTex.js"></script>\n\n';
rs=rs+js3;
fw=open("index4.html",'w',encoding="utf-8")
fw.write(rs);
fw.close();

print("end", len(rs));







3.那个showLaTex.js文件是设置文件：

/*
* name showLaTex.js
* 依赖于  MathJax.js
* varsion: v0.1
*ES6*/
let isMathjaxConfig = false; // 防止重复调用Config，造成性能损耗

const initMathjaxConfig = () => {
  if (!window.MathJax) {
    return;
  }
  window.MathJax.Hub.Config({
    showProcessingMessages: false, //关闭js加载过程信息
    messageStyle: "none", //不显示信息
    jax: ["input/TeX", "output/HTML-CSS"],
    tex2jax: {
      inlineMath: [["$", "$"], ["\\(", "\\)"]], //行内公式选择符
      displayMath: [["$$", "$$"], ["\\[", "\\]"]], //段内公式选择符
      skipTags: ["script", "noscript", "style", "textarea", "pre", "code", "a"] //避开某些标签
    },
    "HTML-CSS": {
      availableFonts: ["STIX", "TeX"], //可选字体
      showMathMenu: false //关闭右击菜单显示
    }
  });
  isMathjaxConfig = true; // 
};


if (isMathjaxConfig === false) { // 如果：没有配置MathJax
  initMathjaxConfig();
}

// 如果，不传入第三个参数，则渲染整个document
window.MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
// 因为使用的Vuejs，所以指明#app，以提高速度
//window.MathJax.Hub.Queue(["Typeset", MathJax.Hub, document.getElementById('app')]);



alse at https://blog.csdn.net/wangjunliang/article/details/100038819


========================================
|-- 为markdown添加代码高亮: highlight.js
----------------------------------------

1.对于mistune解析过的html，只需要三步即可实现代码高亮。
实例如下：
(1).去官方选择https://highlightjs.org/风格下载css样式和js,最好本地化

<link id=css rel="stylesheet" href="highlight/styles/agate.css">
<script src="highlight/highlight.pack.js"></script>

(2).如果想让代码自动高亮需要在引用的js和css下面加一段代码
<script>hljs.initHighlightingOnLoad();</script>


(3).使用时，要把代码写到pre和code标签内，如果是mistune解析过的md，则自动符合要求。
<pre><code class="html">这里就是要显示高亮的代码</code></pre>


如果你是html语言想要高亮显示就在class类那里填写html如果你是java就填写java以此类推

<pre>
<code class=C>#include <iostream>

int main(int argc, char *argv[]) {

  /* An annoying "Hello World" example */
  for (auto i = 0; i < 0xFFFF; i++)
    cout << "Hello, World!" << endl;

  char c = '\n';
  unordered_map <string, vector<string> > m;
  m["key"] = "\\\\"; // this is an error

  return -2e3 + 12l;
}
</code>
</pre>


	
<pre>
<code class=JavaScript>function(a,b){
	var c=a+b;
	return(c);
}
</code>
</pre>

<pre> 
<code class="python"># 读取文件内容 
  def fread(self):
    # 如果指针位置大于文件大小，说明是更换了文件 
    self.filename = self.getLogPath() 
    if not os.path.isfile(self.filename): 
      while not self.checkfile() : 
        time.sleep(5) 
        self.filename = self.getLogPath() 
      self.fclose() 
      self.fopen() 
      self.pos = 0 
    self.hd.seek(self.pos,0) 
    fline = self.hd.readline() 
    self.pos = self.hd.tell() 
    return fline.replace("\n","")
  # 将文件指针定位到文件尾部 
  def feof(self): 
    self.fopen()
    # 定位到文件末尾 
    self.hd.seek(0,2)
    #设置指针位置 
    self.pos = self.hd.tell() 
</code> 
</pre> 





2.半自动化测试哪个样式表合适

<!--
这几个cdn不能用，可能是被墙了。
<link href="http://apps.bdimg.com/libs/highlight.js/9.1.0/styles/default.min.css" rel="stylesheet">
<script src="http://apps.bdimg.com/libs/highlight.js/9.1.0/highlight.min.js"></script>

<link rel="stylesheet" href="//cdn.jsdelivr.net/gh/highlightjs/cdn-release@9.15.9/build/styles/default.min.css">
<script src="//cdn.jsdelivr.net/gh/highlightjs/cdn-release@9.15.9/build/highlight.min.js"></script>
黑背景的: monokai-sublime, hybrid, a11y-dark
浅色背景: mono-blue, a11y-light

//获得css名字的列表
$  ls |grep -P "css$" |sed -e 's/\.css$/",/' -e 's/^/"/'>cssList.txt

//在chrome的(F12键，点 console)控制台输入
arr=["a11y-dark","a11y-light","agate","androidstudio","an-old-hope","arduino-light","arta","ascetic","atelier-cave-dark","atelier-cave-light","atelier-dune-dark","atelier-dune-light","atelier-estuary-dark","atelier-estuary-light","atelier-forest-dark","atelier-forest-light","atelier-heath-dark","atelier-heath-light","atelier-lakeside-dark","atelier-lakeside-light","atelier-plateau-dark","atelier-plateau-light","atelier-savanna-dark","atelier-savanna-light","atelier-seaside-dark","atelier-seaside-light","atelier-sulphurpool-dark","atelier-sulphurpool-light","atom-one-dark","atom-one-dark-reasonable","atom-one-light","brown-paper","codepen-embed","color-brewer","darcula","dark","darkula","default","docco","dracula","far","foundation","github","github-gist","gml","googlecode","grayscale","gruvbox-dark","gruvbox-light","hopscotch","hybrid","idea","ir-black","isbl-editor-dark","isbl-editor-light","kimbie.dark","kimbie.light","lightfair","magula","mono-blue","monokai","monokai-sublime","nord","obsidian","ocean","paraiso-dark","paraiso-light","pojoaque","purebasic","qtcreator_dark","qtcreator_light","railscasts","rainbow","routeros","school-book","shades-of-purple","solarized-dark","solarized-light","sunburst","tomorrow","tomorrow-night","tomorrow-night-blue","tomorrow-night-bright","tomorrow-night-eighties","vs","vs2015","xcode","xt256","zenburn"]
arr.length

function css(fname){
	var s=document.getElementById('css')
	s.setAttribute('href','highlight/styles/'+fname+'.css')
}
function c(n){
	css(arr[n])
}

//自动切换效果，手工记录哪个符合预期，使用即可。
for(var i = 0; i < arr.length; i++) {
	(function(i){
		setTimeout(function () {
			console.log("i=",i, ", arr["+i+"]=",arr[i]);
			//console.log(a);
			c(i)
		}, 3000*i);
	})(i)
}
-->




refer: https://jiub.ren/2246.html




========================================
|-- 使用 MathJax.js 在markdown和html中解析 Latex
----------------------------------------
https://www.jianshu.com/p/03a7bb984a1d

1. 使用cdn资源
<style>
/* MathJax v2.7.5 from 'cdnjs.cloudflare.com' */
.mjx-chtml {
  outline: 0;
}
.MJXc-display {
  overflow-x: auto;
  overflow-y: hidden;
}

</style>

<div id=app>
$$c = \sqrt{a^2 + b^2}$$

$$\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$$。


$$
\varGamma(x)=\frac{\int_{\alpha}^{\beta}g(t)(x-t)^2\text{d}t}{\phi(x)\sum_{i=0}^{N-1}\omega_i}\tag{2}
$$

$$\alpha+\beta=\gamma$$

$$\alpha+\beta=\gamma$$

$$\int_{0}^{1}f(x)dx \sum_{1}^{2}\int_{0}^{1}f(x)dx \sum_{1}^{2}\int_{0}^{1}f(x)dx \sum_{1}^{2}\int_{0}^{1}f(x)dx \sum_{1}^{2}\int_{0}^{1}f(x)dx \sum_{1}^{2}\int_{0}^{1}f(x)dx \sum_{1}^{2}\int_{0}^{1}f(x)dx \sum_{1}^{2}\int_{0}^{1}f(x)dx \sum_{1}^{2}\int_{0}^{1}f(x)dx \sum_{1}^{2}\int_{0}^{1}f(x)dx \sum_{1}^{2}$$
</div>


<script type="text/javascript" async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML"></script>

<script>
//ES6
let isMathjaxConfig = false; // 防止重复调用Config，造成性能损耗

const initMathjaxConfig = () => {
  if (!window.MathJax) {
    return;
  }
  window.MathJax.Hub.Config({
    showProcessingMessages: false, //关闭js加载过程信息
    messageStyle: "none", //不显示信息
    jax: ["input/TeX", "output/HTML-CSS"],
    tex2jax: {
      inlineMath: [["$", "$"], ["\\(", "\\)"]], //行内公式选择符
      displayMath: [["$$", "$$"], ["\\[", "\\]"]], //段内公式选择符
      skipTags: ["script", "noscript", "style", "textarea", "pre", "code", "a"] //避开某些标签
    },
    "HTML-CSS": {
      availableFonts: ["STIX", "TeX"], //可选字体
      showMathMenu: false //关闭右击菜单显示
    }
  });
  isMathjaxConfig = true; // 
};


if (isMathjaxConfig === false) { // 如果：没有配置MathJax
  initMathjaxConfig();
}

// 如果，不传入第三个参数，则渲染整个document
window.MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
// 因为使用的Vuejs，所以指明#app，以提高速度
//window.MathJax.Hub.Queue(["Typeset", MathJax.Hub, document.getElementById('app')]);

</script>





2. 使用本地资源
下载 mathjax库 解压到本地，http://localhost/mathjax/2.7.2
https://codeload.github.com/mathjax/MathJax/zip/2.7.5
https://cdnjs.com/libraries/mathjax/2.7.5


失败。。。文件太多，不熟悉前段构建工具，还没做到js完全本地化。



========================================
|-- 为markdown生成toc（Table of Content）顶部目录
----------------------------------------
https://ruby-china.org/topics/17028
效果图: http://i5ting.github.io/i5ting_ztree_toc/build/jquery.plugin.html

1.md目录效果调研
(1)
Jekyll 使用 kramdown 可以提供ToC 功能。
Stackedit 的ToC功能异常强大。

py的md解释器里也有toc的，我先去看看Stackedit和kramdown


(2) TOC 一般是针对比较长的文档的阅读特别方便, 长文档还几个工具,百度百科做的还不错:

TOC 一直浮动展示, 不至于点到文档末尾切换 toc 就麻烦了.
可以控制自动展开下级菜单, 同时关闭其他打开的菜单---toc长了很有用




2.我的实现方式：分析并获取h1-h6，添加锚点，并构建目录dom，插入到文档中。


怎么实现侧边栏的目录呢？怎么响应鼠标滑动位置？


我的实现见：js/好用的js脚本

========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------

========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------

========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------
