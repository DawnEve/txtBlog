java04-Spring






========================================
Spring: Java 最重要的框架 (两大核心 IoC, AOP)
----------------------------------------
课程大纲
https://www.bilibili.com/video/BV1rt4y1u7q5/

四个部分
IoC 基础容器: 其他组件功能的基础，Bean产生和关系等
AOP 面向切面编程: 用横向抽取思想对Bean进行增强，主要涉及切面配置、声明式事务控制等。
Spring 整合web环境: 方式、原理和整合web层各个MVC框架的思想
web层解决方案-Spring-MVC: 基于MVC思想打造的框架，摆脱 Servlet，用更简单的方式开发web层代码


https://spring.io/

三部曲学 Spring: https://mp.weixin.qq.com/s?__biz=MzU3MTg3NDYwNg==&mid=2247487905&idx=1&sn=2dceeadb4a27516d6392aa2952e1573b


(1)学 Spring 前要学习什么？ 
1) https://www.zhihu.com/question/321913492
	Servlet: 生命周期方法、匹配路径、GET/POST请求及参数处理。
	注解: 怎么实现的？非常重要
	反射: 框架的低层支撑。注解+反射，可以玩出很多花样。
	动态代理: 动态代理的作用是什么？
		Spring用一句话概述就是：一个精巧的Bean容器。它拥有两个非常重要的概念：IoC和AOP。
		IoC: 所谓的控制反转。通俗地讲，就是把原本需要程序员自己创建和维护的一大堆bean统统交由Spring管理。 

2) https://zhuanlan.zhihu.com/p/64001753
结论: 要开始学习 Spring(以IoC和Spring MVC 为核心)，只需要做好三个准备:
	《Java 核心技术》前6章
		第一章：Java程序设计概述
		第二章：Java程序设计环境
		第三章：Java的基本程序设计结构
		第四章：对象与类
		第五章：继承
		第六章：接口、lambda表达式与内部类
	Java反射原理(选学)
	Servlet


解释:  无论是Spring Data，还是Spring Cloud，都是建立在Spring Framework上的一个个具体领域的应用
在实践中，Spring全家桶中使用最广泛就是IOC和Spring MVC。

在Spring Framwork中，包含了Spring体系的核心机制及应用，包括IOC、AOP，SpringMVC、Data Access等。
而且，即使在Spring Framework内部，各个功能之间也不是水平的，而是存在依赖关系的。
其中最底层，最核心的概念有两个：IOC和AOP。两者之间，尤以IOC为重。

所谓的Spring前置知识，某种意义上，就是Spring IOC的前置知识。

对Spring的核心概念IOC来说，并没有涉及任何高深的Java语法，最多也就是接口和抽象类。因此学习Spring IOC，参考《Java核心技术》，只要学到前6章就可以了。

-> 因为Spring IOC的核心机制是建立在Java“反射”基础上的。因此，如果你有兴趣继续探究Spring IOC的核心原理，就有必要提前学习下Java与反射相关的概念。


Spring MVC的运行时建立在两个技术基础上：IOC和Servlet。如果不懂IOC，就搞不明不白Spring MVC是如何配置的。如果不懂Servlet，则就搞不理解Spring是如何注入及拦截Servlet消息的。而之后一旦Spring MVC在运行中出了问题，则必然会茫然不知所措。

虽然Spring MVC中的V（view），最常见的输出目标是JSP页面。但因为现代的企业应用越来越倾向于前后端分离，后端系统只负责输出REST接口。因此在Spring MVC框架中，View这一层就没有存在的必要，学习JSP也就没有价值了。


通俗版: 比如控制反转，依赖注入。在我看来，这俩概念明明可以用类似“自动创建对象”之类通俗易懂的说法替代


3) https://www.zhihu.com/question/321913492/answer/2307232396
为什么需要Spring? 什么是Spring? 
例子。


Bean 是什么? 
在Spring中，由Spring IOC容器进行实例化—>组装管理—>构成程序骨架的对象称为Bean。Bean就是应用程序中众多对象之一。 以上三点串起来就是：Spring内部是一个放置Bean的IoC容器，通过依赖注入的方式处理Bean之间的依赖关系。



4)
Spring，他的前置知识就是普通的java基础，以及XML和注解，我这里的spring是指Spring的核心容器部分。
	bean;
	注解;
	tomcat: 可以不学jsp，转而学习HTML + JS（ES6）+ CSS，HTML和JS通过Ajax和JSON与Servlet沟通
	jsp是在servlet基础上的，jsp在运行的时候就会变成servlet。
	JDBC技术，会操作数据库
	学JavaWEB的其他几个部分，监听器，拦截器等，因为到了spring中你用的其实也是建立在他们的基础上的。
	
	要搞清楚springMVC的处理流程，请求是怎么从mvc的前端servlet到达controller的，然后去学mvc的xml，搞明白各个配置的作用，然后使用注解驱动，替代xml，感受开发效率的提升。

如果你想理解spring的实现方式，怎么做到ioc和aop的，那么你就需要java的反射作为前置知识，了解ioc的aop的思想，以及面向接口编程的重要性，以及工厂模式，这样你就可以仿照Spring的效果实现自己的IoC。





5) 
Spring 的设计思路，永远都是作为 Bean 的容器，去管理好 Bean ，这是它永恒不变的地方。
第二部分，就是 Spring 的内核。Spring 的 ApplicationContext 等核心 API 是没有什么大的变化的。


6)
先学java web相关知识点。重点学会servlet，jsp可以大概了解一下，不要深究。

然后再学spring mvc,spring。可以自己网上搜教程，按教程打建一个web系统。

记祝，不要只看书，实践很重要，理论与实践相结合

建议学完jsp servlet以后学mybatis springmvc spring








========================================
|-- IoC 基础容器: 其他组件功能的基础，Bean产生和关系等
----------------------------------------
目录:
传统
IoC，DI和AOP思想的提出
Spring框架的诞生


1. 传统web开发的问题和解决方法















========================================
SpringBoot2 怎么学? //todo : 前置 Sping, Maven
----------------------------------------

花一两个小时简单看一下spring boot入门教程，然后看部门的业务代码，上手就是干

1. 教程
SpringBoot2: https://www.bilibili.com/video/BV19K4y1L7MT/
Vue2+Vue3: https://www.bilibili.com/video/BV1Zy4y1K7SH/

Java目录: https://www.weixueyuan.net/java/rumen/
SpringBoot2 笔记: https://www.yuque.com/atguigu/springboot
SpringBoot2 官方: https://spring.io/projects/spring-boot


前置知识: 
	Java8+
	Spring:aoc, ioc 是什么? 会使用 Spring
	Maven 3.3+ 的使用





========================================
----------------------------------------



========================================
----------------------------------------





========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------





========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------

