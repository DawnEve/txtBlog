c104-bioInfo


《GCC编译器30分钟入门教程》：http://c.biancheng.net/gcc/

部分学C的过程: https://xuzhougeng.top/archives





========================================
生信人学习C语言的一些计划
----------------------------------------
1. 
掌握文件的读写
彻底掌握指针
学会对C语言代码进行调试
学会使用结构体
学会使用动态内存
在实际项目中使用C语言编写小工具
学习C语言库，包括不限于
	sds 
	klib
	htslib
学习使用C处理生信数据
学会使用多线程
学会和R/Python进行交互



ref: https://xuzhougeng.top/archives/journey-of-learning-c




========================================
sds 库 //todo
----------------------------------------
https://github.com/antirez/sds



========================================
klib 库
----------------------------------------
https://github.com/attractivechaos/klib

1. 相关博客

C语言实战课-klib库学习
	https://xuzhougeng.top/archives/c-practice-learn-klib




========================================
htslib 库
----------------------------------------
https://github.com/samtools/htslib

1. 博客：怎么学该库？

生信（11）htslib处理bam或sam文件的简单示例
	https://cloud.tencent.com/developer/article/1604565
使用htslib API的一个示例程序
	https://github.com/samtools/htslib/blob/develop/test/test_view.c

生信代码中的位操作
	https://cloud.tencent.com/developer/article/1585986

htslib/sam.h操作bam文件
	https://blog.csdn.net/weixin_42670653/category_10394358.html

htslib/sam.h库使用说明
	https://blog.csdn.net/weixin_42670653/article/details/109186351


htslib 的使用( C++ 处理BAM文件）
	https://www.jianshu.com/p/b4b7e5db9272





2. Cellsnp-lite: an efficient tool for genotyping single cells

https://academic.oup.com/bioinformatics/article/37/23/4569/6272512?login=false
Here, we introduce a software, cellsnp-lite, implemented in C/C++ and based on well-supported package htslib, for genotyping in single-cell sequencing data for both droplet and well-based platforms. 

https://github.com/single-cell-genetics/cellsnp-lite
https://cellsnp-lite.readthedocs.io/en/latest/index.html






















========================================
gsl（GNU Scientific Library）是专门为应用数学和科学技术领域的数值计算提供支持的软件库
----------------------------------------
1. GSL 简介
(2)
gsl（GNU Scientific Library）是专门为应用数学和科学技术领域的数值计算提供支持的软件库。gsl使用C语言编写，同时也为其他语言做了相应的封装。gsl在GNU通用公共许可下是免费的。该函数库提供了广泛的数学算法的实现函数，包括随机数生成器，特殊函数和最小二乘拟合等等。目前该函数库提供有超过1000个函数，这些函数包含的范围有：复数计算、多项式求根、特殊函数、向量和矩阵运算、排列、组合、排序、线性代数、特征值和特征向量、快速傅里叶变换(FFT)、数值积分、随机数生成、随机数分布、统计、蒙特卡洛积分、模拟退火、常微分方程组、插值、数值微分、方程求根、最小二乘拟合、小波变换等

GSL 下载
	下载GSL安装文件： 链接: http://mirrors.ustc.edu.cn/gnu/gsl.
	GSL文档在线：链接:https://www.gnu.org/software/gsl/doc/html/index.html.
	GSL文档下载：链接:https://www.gnu.org/software/gsl/doc/latex/gsl-ref.pdf.


(2). 无 root 安装方法
编译安装
$ cd ~/soft/
$ wget http://mirrors.ustc.edu.cn/gnu/gsl/gsl-2.7.tar.gz
$ tar -xzvf gsl-2.7.tar.gz
$ cd gsl-2.7/
$ ./configure --prefix=/home/wangjl/.local/  #install in ./lib/
$ make
$ make install

或者使用root权限全局安装。




(3) 配置文件

提示：有几种找到ld的方法，要采用其中之一。
Libraries have been installed in:
   /home/wangjl/.local/lib

If you ever happen to want to link against installed libraries
in a given directory, LIBDIR, you must either use libtool, and
specify the full pathname of the library, or use the '-LLIBDIR'
flag during linking and do at least one of the following:
   - add LIBDIR to the 'LD_LIBRARY_PATH' environment variable
     during execution
   - add LIBDIR to the 'LD_RUN_PATH' environment variable
     during linking
   - use the '-Wl,-rpath -Wl,LIBDIR' linker flag
   - have your system administrator add LIBDIR to '/etc/ld.so.conf'

See any operating system documentation about shared libraries for
more information, such as the ld(1) and ld.so(8) manual pages.


我们采用第一条建议：
$ vim ~/.bashrc #末尾添加一句
export LD_LIBRARY_PATH=/home/wangjl/.local/lib:$LD_LIBRARY_PATH
$ source ~/.bashrc

$ echo $LD_LIBRARY_PATH
/home/wangjl/.local/lib:








2. 测试 so 库文件

(1) 例1 生成n个随机数，第一列高斯分布，第二列gamma分布
$ cat gsl_test.c 
#include <stdio.h>
#include <gsl/gsl_rng.h>
#include <gsl/gsl_randist.h>

int main (int argc, char *argv[]){
  /* set up GSL RNG */
  gsl_rng *r = gsl_rng_alloc(gsl_rng_mt19937);
  /* end of GSL setup */
 
  int i,n;
  double gauss,gamma;

  n=atoi(argv[1]);
  for (i=0; i<n; i++) {
    gauss=gsl_ran_gaussian(r,2.0);
    gamma=gsl_ran_gamma(r,2.0,3.0);
    printf("%2.4f %2.4f\n", gauss,gamma);
  }
  return(0);
}

编译 
##gcc -std=c11 -I/usr/local/include/gsl -lgsl -lgslcblas gsl_test.c
$ gcc -std=c11 -I/home/wangjl/.local/include/ -L/home/wangjl/.local/lib/ -lgsl -lgslcblas gsl_test.c

运行
$ ./a.out 3
0.2678 6.9645
3.3488 1.6894
1.9950 2.1575



放到 193 上测试
$ DIR=/home/yinch/R/x86_64-pc-linux-gnu-library/4.2/gsl2.4_install/
$ gcc -std=c11 -I${DIR}/include/ -L${DIR}/lib/ -lgsl -lgslcblas gsl_test.c
/home/yinch/R/x86_64-pc-linux-gnu-library/4.2/gsl2.4_install/lib/

直接运行，找不到库:
$ ./a.out  2
./a.out: error while loading shared libraries: libgsl.so.23: cannot open shared object file: No such file or directory

设置库路径后，可以找到库:
$ export LD_LIBRARY_PATH=${DIR}/lib:$LD_LIBRARY_PATH
$ ./a.out  2
0.2678 6.9645
3.3488 1.6894








(2) 例2
https://blog.csdn.net/m0_37649216/article/details/120233852

$ vim test2.c
#include <stdio.h>
#include <gsl/gsl_matrix.h>
int main (void) {
	int i, j;
	gsl_matrix * m = gsl_matrix_alloc (10, 3);
	for (i = 0; i < 10; i++)
		for (j = 0; j < 3; j++)
			gsl_matrix_set (m, i, j, 0.23 + 100*i + j);
	for (i = 0; i < 10; i++)
		for (j = 0; j < 3; j++)
			printf ("m(%d,%d) = %g\n", i, j,
			gsl_matrix_get (m, i, j));
	gsl_matrix_free (m);
	return 0;
}

$ gcc -std=c11 -I/home/wangjl/.local/include/ -L/home/wangjl/.local/lib/ -lgsl -lgslcblas test2.c -o main
$ ./main 
$ ./main 
m(0,0) = 0.23
m(0,1) = 1.23
m(0,2) = 2.23
m(1,0) = 100.23
m(1,1) = 101.23
m(1,2) = 102.23
m(2,0) = 200.23
m(2,1) = 201.23
m(2,2) = 202.23
m(3,0) = 300.23
m(3,1) = 301.23
m(3,2) = 302.23
m(4,0) = 400.23
m(4,1) = 401.23
m(4,2) = 402.23
m(5,0) = 500.23
m(5,1) = 501.23
m(5,2) = 502.23
m(6,0) = 600.23
m(6,1) = 601.23
m(6,2) = 602.23
m(7,0) = 700.23
m(7,1) = 701.23
m(7,2) = 702.23
m(8,0) = 800.23
m(8,1) = 801.23
m(8,2) = 802.23
m(9,0) = 900.23
m(9,1) = 901.23
m(9,2) = 902.23






========================================
----------------------------------------




========================================
----------------------------------------



========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------



========================================
----------------------------------------




========================================
----------------------------------------



========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------



========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------



========================================
----------------------------------------




========================================
----------------------------------------

