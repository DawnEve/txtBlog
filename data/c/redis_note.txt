radis 缓存数据库




测试页: https://try.redis.io/


========================================
radis 简介：缓存数据库
----------------------------------------

1. Redis是什么

为了缓解双11数据库大量的查询操作，类似CPU的缓存，决定给数据库做个缓存，就是redis。


(1) 官网
https://redis.io/

Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache, and message broker. 
Redis provides data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, geospatial indexes, and streams. 
Redis has built-in replication, Lua scripting, LRU eviction, transactions, and different levels of on-disk persistence, and provides high availability via Redis Sentinel and automatic partitioning with Redis Cluster. 


(2)
Redis是Remote Dictionary Service的首字母缩写，即远程字典服务。
是一个高性能的key-value形式的内存型数据库。以设置和读取一个256字节字符串为例，它的读取速度可高达11W次/s，写速度可达8.1W次/s。

Redis有5种基础数据结构，分别为：string，list，hash，set，sorted set

Redis所有的数据结构都以唯一的key字符串作为名称，然后通过这个唯一的key值来获取相应的value数据。不同类型的数据结构的差异就在于value的结构不一样。

(3) 
Redis 是一个开源的使用 ANSI C 语言编写、遵守 BSD 协议、支持网络、可基于内存、分布式、可选持久性的键值对(Key-Value)存储数据库，并提供多种语言的 API。
Redis 通常被称为数据结构服务器，因为值（value）可以是

字符串(String)、
哈希(Hash)、
Bitmap、
列表(list)、
集合(sets)和
有序集合(sorted sets)等类型。





2. Redis可以做什么
缓存
计数器
分布式id生成器
分布式锁
位操作数据统计
字符串操作
频率限制
消息队列
排行榜
延时任务








3. 缓存数据库数据，怎么保证空间够用？

(1) 快的原因：访问数据库时先问询 redis，redis没有的再去查磁盘并缓存和返回结果，有的话直接返回结果

(2) 过期删除策略
- 设置过期时间，比如2分钟。过期自动随机删除一部分
- 如果请求到了，且过期，则删除。
- 内存淘汰策略

(3) 持久化方法
save 900 1 #900s(15min)内有一个写入
save 300 10 #300s(5min)内有10个写入
save 60 10000 #60s(1min)内有10000个写入

记录操作到缓冲器，定期写入文件，方便恢复。




4. redis高可用：哨兵原理

5. redis 集群原理










========================================
安装 (默认端口 6379)
----------------------------------------

1. 使用 apt 安装
# sudo apt update
# sudo apt install redis-server
可能不是最新版



2. 源码安装最新版
(1)下载
https://download.redis.io/releases/

$ wget https://download.redis.io/releases/redis-6.2.6.tar.gz
仅2.4M

(2)解压
$ tar zxvf redis-6.2.6.tar.gz
$ cd redis-6.2.6/

(3)编译
$ make -j20
## src 目录下会出现编译后的 redis 服务程序 redis-server

测试
1) 启动服务
$ cd src
$ ./redis-server #默认启动


也可以通过启动参数告诉 redis 使用指定配置文件使用下面命令启动。
	% ./redis-server /path/to/redis.conf
redis.conf 是一个默认的配置文件。我们可以根据需要使用自己的配置文件。


或者直接传入参数
It is possible to alter the Redis configuration by passing parameters directly as options using the command line. Examples:
    % ./redis-server --port 9999 --replicaof 127.0.0.1 6379
    % ./redis-server /etc/redis/6379.conf --loglevel debug

2) 启动客户端
启动 redis 服务进程后，就可以使用测试客户端程序 redis-cli 和 redis 服务交互了。 比如：

$ cd src
$ ./redis-cli 
127.0.0.1:6379> ping
PONG
127.0.0.1:6379> set foo bar
OK
127.0.0.1:6379> get foo
"bar"
127.0.0.1:6379> 



(4) 安装
默认安装到 @J1 /usr/local/bin
$ sudo make install 
    INSTALL redis-server
    INSTALL redis-benchmark
    INSTALL redis-cli

或者指定位置 sudo make PREFIX=/some/other/directory install


(5) 启动
$ redis-server --help

启动 Redis
# redis-server

查看 redis 是否启动？
# redis-cli

以上命令将打开以下终端：
redis 127.0.0.1:6379>
127.0.0.1 是本机 IP ，6379 是 redis 服务端口。现在我们输入 PING 命令。

redis 127.0.0.1:6379> ping
PONG
以上说明我们已经成功安装了redis。




2. 配置文件
(1) Redis 的配置文件位于 Redis 安装目录下，文件名为 redis.conf
2051 15979 93724 /home/wangjl/soft/redis-6.2.6/redis.conf
还挺长的


(2) 也可以通过 CONFIG 命令查看或设置配置项。
redis 127.0.0.1:6379> CONFIG GET CONFIG_SETTING_NAME

例
127.0.0.1:6379> CONFIG GET loglevel
1) "loglevel"
2) "notice"

使用 * 号获取所有配置项：
127.0.0.1:6379> CONFIG GET *
  1) "rdbchecksum"
  2) "yes"
  3) "daemonize"
  4) "no"
  5) "io-threads-do-reads"
  6) "no"


(3) 编辑配置
你可以通过修改 redis.conf 文件或使用 CONFIG set 命令来修改配置。

语法
CONFIG SET 命令基本语法：
127.0.0.1:6379> CONFIG SET CONFIG_SETTING_NAME NEW_CONFIG_VALUE

例:
127.0.0.1:6379> CONFIG SET loglevel "notice"
OK
127.0.0.1:6379> CONFIG GET loglevel
1) "loglevel"
2) "notice"








========================================
redis 数据类型 //todo
----------------------------------------

https://www.runoob.com/redis/redis-data-types.html







========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------

