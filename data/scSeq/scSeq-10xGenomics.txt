scSeq-10xGenomics

CentOS6.8 with 40cores,128GMem.

10XQC: http://10xqc.com/

cellxgene

========================================
教程
----------------------------------------

https://www.10xgenomics.com/products/single-cell-gene-expression/

Reveal the Full Complexity of Cellular Diversity, Cell by Cell
Chromium Single Cell Gene Expression provides single cell transcriptome 3' gene expression and multiomic capabilities to profile tens of thousands of cells. Explore cellular heterogeneity, novel targets, and biomarkers with combined gene expression, surface protein expression, or CRISPR edits in each cell.





1.单细胞转录组教程汇总  生信宝典  4月29日
https://mp.weixin.qq.com/s?__biz=MzI5MTcwNjA4NQ==&mid=2247488371&idx=2&sn=386cd4ab370eaf188c0da84d91348cd8






2. 10x reads 结构
https://support.10xgenomics.com/single-cell-gene-expression/sample-prep/doc/technical-note-base-composition-of-sequencing-reads-of-chromium-single-cell-3-v2-libraries

The 16bp 10x Barcode and the UMI is encoded at the start of Read 1, while sample index sequence information is incorporated into the i7 index read. Read 1 and Read 2 are standard Illumina sequencing primer sites used in paired-end sequencing.

R1: 10xBC(16bp) + UMI(10bp) + polyT;
R2: 150bp;





3. 10x培训资料
https://elixir-iib-training.github.io/2019-05-07-pozzuoli-singlecell/pres/Panariello_Theory_refresher_and_cellranger_overview.pdf





========================================
遗留问题
----------------------------------------
1.作 UMI per cell 的柱状图，舍弃小于300的一个峰后，
发现一个2k-7k的主峰，然后还有很低的频数的7k-80k的，后面这一部分怎么处理？

10x代理公司工程师建议做个多核检测，虽然不靠谱。
google: doublet cells detection

GitHub - JonathanShor/DoubletDetection: Doublet detection in single ...
https://github.com/JonathanShor/DoubletDetection
Doublet detection in single-cell RNA-seq data. Contribute to JonathanShor/DoubletDetection development by creating an account on GitHub.

DoubletFinder: Doublet detection in single-cell RNA sequencing data ...
https://www.biorxiv.org/content/early/2018/06/26/352484
by CS McGinnis - ‎2018 - ‎Cited by 1 - ‎Related articles
Jun 26, 2018 - Neighborhood detection in gene expression space then identifies sequenced cells with increased probability of being doublets based on their ...

Detecting doublets in single-cell RNA-seq data - Bioconductor
https://www.bioconductor.org/packages/devel/.../simpleSingleCell/.../work-6-doublet.ht...
In single-cell RNA sequencing (scRNA-seq) experiments, doublets are artifactual libraries generated from two cells. They typically arise due to errors in cell ...





2.两个10x库合起来怎么分析？


3.两个库分出来bam做表达聚类，合直接用10x的cellranger分析bam做表达聚类结果有啥异同？








========================================
数据下载data download: PBMC下机数据
----------------------------------------
https://support.10xgenomics.com/single-cell-gene-expression/datasets
Chromium Demonstration (v2 Chemistry) (46 datasets)

4k PBMCs from a Healthy Donor
8k PBMCs from a Healthy Donor

(1)4k PBMCs from a Healthy Donor
https://support.10xgenomics.com/single-cell-gene-expression/datasets/2.1.0/pbmc4k

Chromium Demonstration (v2 Chemistry) Dataset by Cell Ranger 2.1.0
Peripheral blood mononuclear cells (PBMCs) from a healthy donor (same donor as pbmc8k). PBMCs are primary cells with relatively small amounts of RNA (~1pg RNA/cell).

4,340 cells detected
Sequenced on Illumina Hiseq4000 with approximately 87,000 reads per cell
26bp read1 (16bp Chromium barcode and 10bp UMI), 98bp read2 (transcript), and 8bp I7 sample barcode
Analysis run with --cells=5000
Published on November 8, 2017

This dataset is licensed under the Creative Commons Attribution license.


Input Files	Size	md5sum
FASTQs	36.38 GB	e853b3b3397a04db4d5654275e20615b
Output Files    format details →	
Genome-aligned BAM	30.96 GB	52e86c3f1ff853bd9019e9b159ecb526
Genome-aligned BAM index	8.30 MB	9f74a45b4cd830608fd4b2d95d2244ff
Per-molecule read information	186.76 MB	538e141c71eccc6dfb4a292624ca14ea
Gene / cell matrix (filtered)	17.57 MB	f61f4deca423ef0fa82d63fdfa0497f7
Gene / cell matrix (raw)	30.18 MB	039acb2ab0e8b3cfce84812f3a89f24a
Clustering analysis	22.38 MB	8b5d95df1b90b7be4f091ba9861d712a
Summary CSV	685 bytes	de2ef07620ee5dbeaea02128b0e993c8
Summary HTML	3.61 MB	704d13fc614201ef9a2aa693c43f96a8
Loupe Cell Browser file	35.48 MB	c23e862d26981f8e861de1f1eb0d8292




(2)8k PBMCs from a Healthy Donor
https://support.10xgenomics.com/single-cell-gene-expression/datasets/2.1.0/pbmc8k

Chromium Demonstration (v2 Chemistry) Dataset by Cell Ranger 2.1.0
Peripheral blood mononuclear cells (PBMCs) from a healthy donor (same donor as pbmc4k). PBMCs are primary cells with relatively small amounts of RNA (~1pg RNA/cell).

8,381 cells detected
Sequenced on Illumina Hiseq4000 with approximately 92,000 reads per cell
26bp read1 (16bp Chromium barcode and 10bp UMI), 98bp read2 (transcript), and 8bp I7 sample barcode
Analysis run with --cells=10000
Published on November 8, 2017

This dataset is licensed under the Creative Commons Attribution license.

Input Files	Size	md5sum
FASTQs	73.61 GB	daa2e6c2939f2e04749c4bb636e05bea
Output Files    format details →	
Genome-aligned BAM	67.27 GB	611eceb00160ad7f9eac436f8cb3e15e
Genome-aligned BAM index	14.62 MB	79da40ca3dad520a6b75169e8f0c0dd5
Per-molecule read information	387.69 MB	fdc8a4c5dd13f60faae4067f1da350d7
Gene / cell matrix (filtered)	35.82 MB	cbb3a7553ece7eaddeb8a56df781ccb0
Gene / cell matrix (raw)	57.78 MB	173822f5062e7efdfbc8a9cbeef1494a
Clustering analysis	26.84 MB	3cfb938552e32d5aaa79042e4154322a
Summary CSV	685 bytes	95cbb61bad531864fbf11cbb09a9b0b2
Summary HTML	4.08 MB	6421e9eb2046ea71c0821717beb22080
Loupe Cell Browser file	62.55 MB	97f948d068fbdd1e3bfa9d0c567060db




========================================
Cell Ranger的参考基因组
----------------------------------------
1. 参考基因组
(1)Linux 64-bit – 11 GB – md5sum: c3a4812f7fdb7ba84429a404ba478acf
wget http://cf.10xgenomics.com/supp/cell-exp/refdata-cellranger-GRCh38-1.2.0.tar.gz

(2)Linux 64-bit – 11 GB – md5sum: 74608d0a6fdd8c10e2918339a30c3c49
wget http://cf.10xgenomics.com/supp/cell-exp/refdata-cellranger-hg19-1.2.0.tar.gz

(3)Linux 64-bit – 9.6 GB – md5sum: 83c8e37e52139bbf4349be98c8767233
wget http://cf.10xgenomics.com/supp/cell-exp/refdata-cellranger-hg19-and-mm10-1.2.0.tar.gz

(4)Linux 64-bit – 647 KB – md5sum: c6f7d60b867e3a6d8db30396bea40d93
wget http://cf.10xgenomics.com/supp/cell-exp/refdata-cellranger-ercc92-1.2.0.tar.gz





2. Other Downloads
Sample Index Set Sequences

Chromium Single Cell 3' v2 – CSV | JSON
	http://cf.10xgenomics.com/supp/cell-exp/chromium-shared-sample-indexes-plate.csv
Chromium Single Cell 3' v1 – CSV | JSON
	http://cf.10xgenomics.com/supp/cell-exp/chromium-single-cell-sample-indexes-plate-v1.csv
Gemcode Single Cell 3' – CSV | JSON
	http://cf.10xgenomics.com/supp/cell-exp/gemcode-single-cell-sample-indexes-plate.csv







========================================
Cell Ranger工作原理
----------------------------------------

2. 管线概念
(1) Pipelines 管线包括4个主要基因表达管线
Cell Ranger includes four main gene expression pipelines:

1)cellranger mkfastq 
wraps Illumina's bcl2fastq to correctly demultiplex Chromium-prepared sequencing samples and to convert barcode and read data to FASTQ files.
包含 Illumina的bcl2fastq，来准确多路区分多个Chromium预制测序样本，然后转换barcode和read数据位fastq文件。

2)cellranger count 
takes FASTQ files from cellranger mkfastq and performs alignment, filtering, and UMI counting. It uses the Chromium cellular barcodes to generate gene-barcode matrices and perform clustering and gene expression analysis. 
使用mkfastq产生的fastq文件来进行比对、过滤和UMI计数。它使用Chromium细胞barcode来产生gene-barcode矩阵，进行聚类和基因表达分析。

count can take input from multiple sequencing runs on the same library.
count模块可以输入同一个文库的多次测序结果。


3)cellranger aggr 
aggregates outputs from multiple runs of cellranger count, normalizing those runs to the same sequencing depth and then recomputing the gene-barcode matrices and analysis on the combined data. 
聚集cellranger count的多个run的输出结果，标准化这些run到同样的测序深度，然后重新计算gene-barcode矩阵，对组合后的数据进行分析。

aggr can be used to combine data from multiple samples into an experiment-wide gene-barcode matrix and analysis.
aggr模块可以用于把多样本的数据，组合成一个experiment-wide gene-barcode矩阵，进而分析。


4)cellranger reanalyze 
takes gene-barcode matrices produced by cellranger count or cellranger aggr and reruns the dimensionality reduction, clustering, and gene expression algorithms using tunable parameter settings.
使用cellranger count 或 cellranger aggr产生的gene-barcode矩阵，使用可调整的参数设置，重新运行降维、聚类和基因表达算法。

These pipelines combine Chromium-specific algorithms with the widely used RNA-seq aligner STAR. 
这些管线组合了Chromium-specific算法和广泛用于RNA-seq比对的STAR。

Output is delivered in standard BAM, MEX, CSV, HDF5 and HTML formats that are augmented with cellular information.
输出是带有细胞信息的标准的BAM, MEX, CSV, HDF5 和 HTML格式的文件。



(2) 相关名词 Terminology
Throughout the documentation, you will see references to samples, libraries and sequencing runs. 
本文档定义的samples, libraries and sequencing runs. 
We define these as follows:

样本Sample: A cell suspension extracted from a single biological source (blood, tissue, etc).
单个生物来源（血液、组织等）提取的细胞悬液。

文库Library: A 10x-barcoded sequencing library prepared from a single sample, corresponding to a single chip channel of a 10x Chromium Controller run.
从一个样本制备的一个10x-barcoded测序文库，对应着一个10x Chromium Controller run的单芯片通道。

测序运行 Sequencing Run / Flowcell: A flowcell containing data from one sequencing instrument run. The sequencing data can be further addressed by lane and by one or more sample indices.
一个芯片包含一个run的测序数据。该测序数据可以进一步按照lane研究，或者按照1个或多个样本index研究。



这几个名词的关系 The relationship between these terms can be complex:
A single sample may be prepared into multiple libraries; this is commonly done to achieve higher cell counts without overloading a single 10x Chromium Controller run.
一个单样本可制备为多个文库；这样不用重复加10x Chromium Controller run就能获得更多细胞数。

A single library may be sequenced across multiple flowcells, and then combined as if all the reads came from one sequencing run.
一个单文库可以被多个芯片测序，然后合并，就像这些read是从一次run获得的。

A single flowcell may contain multiple libraries, separated using different lanes and / or sample indices.
一个芯片可以包含多个文库，按照lane区分，和/或按照样本index区分。

The definition of "library" makes no distinction between two channels of the same physical 10x chip, versus the same channel of two different chips.
"文库"的定义并没有差别：1.同一个10x chip的2个channel; 2.两个不同芯片的同一个channel。





(3) Workflows 工作流程  //todo
The Cell Ranger workflow always starts with running cellranger mkfastq on each flowcell directory, as described in Generating FASTQs. 

The subsequent steps vary depending on how many samples, libraries and flowcells you have. We will describe them in order of increasing complexity:


Single Sample, Library, and Flowcell

One Library, Multiple Flowcells

One Sample, Multiple Libraries

Multiple Biological Samples

One or more 5′ Gene Expression and V(D)J Enriched Libraries from the Same Biological Sample







========================================
第一步分析 Cell Ranger软件及安装 (2024.5 v8.0.1)
----------------------------------------
1. 软件安装

(1)下载 download
https://www.10xgenomics.com/support/software/cell-ranger/downloads

File size: 702 MB
md5sum: 1d08d8005b026fc1ca3c867bc67b2dbd

wget -O cellranger-8.0.1.tar.gz "https://cf.10xgenomics.com/releases/cell-exp/cellranger-8.0.1.tar.gz?Expires=1717100986&Key-Pair-Id=APKAI7S6A5RYOXBWRPDA&Signature=bOQ5v58oaS56dD5BD9gS7WZOjqqaEywEF9ZY71JEKj5iNcuq4rGaTy4FKnUonav3EOvwOqrxj5r8I1gdCOcIkDixxOa8fCG31e9AieV7GMMLz7ZPjxCAoMUxt0dbLtZqIk15OyT-PSeqkjHZYKxP-VPIUAMwFT~WFFnnLFYKrT~6jK82G54vj3-qx2iZU2-48bJSGt7p4rlYTcKno0gyiP-ipZ0HJfhZ91O36SUQ3cDbTirHexuu-ZE75FiJIkFOdd2JxTLDc1j-kKbgDrt6-R78qlm~d7ZpYc-ZSlEk4HjdPseaPVQLE0hLfP7u5eXAKMOxSmmgf9H7JJlpN3CKEQ__"

查看：
-rw-r--r--.  1 wangjl jinlab 699M May 15 00:29 cellranger-8.0.1.tar.gz

解压：
$ tar -xzvf cellranger-8.0.1.tar.gz

移动到软件文件夹
$ mv cellranger-8.0.1 ~/soft/

建立快捷方式：
$ vim ~/.bashrc
export PATH=/home/wangjl/soft/cellranger-8.0.1/:$PATH

$ source ~/.bashrc
$ cellranger --version
cellranger cellranger-8.0.1


(2) 机器自查
$ cellranger sitecheck > ~/cellranger-sitecheck.txt

(3) 设置
根据自查结果，设置系统参数。

* CPU Cores: 144
	Running Cell Ranger requires at least 8 CPUs, preferably 16, and at least 64 GB of RAM, preferably 128. We have 144 CPU available.

* Memory Total: 1056273980 kB = 1007 GB
	We need to convert from kB to GB. A quick Google search does that for us. So, we have 1 TB RAM available, which meets the minimum requirements.


* Global File Limit: 104113730
	This value 26216544 meets the minimum requirements of 10k per GB RAM: (10,000 * 1007 GB RAM = 10,070,000) < 104,113,730

* User Limits:
	max user processes:  (-u) 4096
	open files:          (-n) 1024
	Note that this machine does meet the max user processes requirement of 64 times the number of CPUs (4096): (64 * 128 = 8,192) <?? 4096. However, it does not meet the max open file requirement of 16,000.

	这样修改不行：失败
	$ sudo -i
	# ulimit -n 16000
	# exit 再查又回去了？

可行方法：
$ sudo vim /etc/security/limits.conf
* soft nofile 16000
* hard nofile 16000

$ su wangjl
Password: 
$ ulimit -n
16000
可以了！



(4) 测试
$ cd /picb/jinlab/wangjl/others/shenwh/mapping/
$ cellranger testrun --id=check_install







2. 参考基因组

(1) Human reference (GRCh38) - 2024-A
File size: 11 GB
md5sum: a7b5b7ceefe10e435719edc1a8b8b2fa

$ cd /home/wangjl/picb/ref/10x/

$ curl -O "https://cf.10xgenomics.com/supp/cell-exp/refdata-gex-GRCh38-2024-A.tar.gz"
$ mv refdata-gex-GRCh38-2024-A.tar.gz /home/wangjl/picb/ref/10x/
$ tar zxvf refdata-gex-GRCh38-2024-A.tar.gz

(2) Mouse reference (GRCm39) - 2024-A
File size: 9.7 GB
md5sum: 37c51137ccaeabd4d151f80dc86ce0b3

$ wget "https://cf.10xgenomics.com/supp/cell-exp/refdata-gex-GRCm39-2024-A.tar.gz"
$ tar zxvf refdata-gex-GRCm39-2024-A.tar.gz






3. 运行

https://www.10xgenomics.com/support/software/cell-ranger/latest/tutorials/cr-tutorial-ct

(1) 测试数据
$ cd /picb/jinlab/wangjl/others/shenwh/mapping
$ wget https://cf.10xgenomics.com/samples/cell-exp/3.0.0/pbmc_1k_v3/pbmc_1k_v3_fastqs.tar
$ tar -xvf pbmc_1k_v3_fastqs.tar

$ ls -lth pbmc_1k_v3_fastqs
total 5.2G
-rw-r--r--. 1 wangjl jinlab 1.7G Nov  2  2018 pbmc_1k_v3_S1_L001_R2_001.fastq.gz
-rw-r--r--. 1 wangjl jinlab 1.7G Nov  2  2018 pbmc_1k_v3_S1_L002_R2_001.fastq.gz
-rw-r--r--. 1 wangjl jinlab 719M Nov  2  2018 pbmc_1k_v3_S1_L001_R1_001.fastq.gz
-rw-r--r--. 1 wangjl jinlab 714M Nov  2  2018 pbmc_1k_v3_S1_L002_R1_001.fastq.gz
-rw-r--r--. 1 wangjl jinlab 245M Nov  2  2018 pbmc_1k_v3_S1_L001_I1_001.fastq.gz
-rw-r--r--. 1 wangjl jinlab 243M Nov  2  2018 pbmc_1k_v3_S1_L002_I1_001.fastq.gz



(2) count 命令

$ cellranger count --help
Count gene expression and/or feature barcode reads from a single sample and GEM well
Usage: cellranger count [OPTIONS] --id <ID> --transcriptome <PATH> --create-bam <true|false>

$ cellranger count --id=run_count_1kpbmcs \
   --fastqs=/mnt/home/user.name/yard/run_cellranger_count/pbmc_1k_v3_fastqs \
   --sample=pbmc_1k_v3 \
   --transcriptome=/mnt/home/user.name/yard/run_cellranger_count/refdata-gex-GRCh38-2020-A

参数解释： https://www.10xgenomics.com/support/software/cell-ranger/latest/resources/cr-command-line-arguments
--id <ID>                    A unique run id and output folder name [a-zA-Z0-9_-]+
--fastqs <PATH>              Path to input FASTQ data
--sample <PREFIX>            Prefix of the filenames of FASTQs to select
--transcriptome <PATH>       Path of folder containing 10x-compatible transcriptome reference

--localcores <NUM>           Set max cores the pipeline may request at one time. Only applies to local jobs
--localmem <NUM>             Set max GB the pipeline may request at one time. Only applies to local jobs
--dry                        Do not execute the pipeline. Generate a pipeline invocation (.mro) file and stop
--output-dir <PATH>          Output the results to this directory
--uiport <PORT>              Serve web UI at http://localhost:PORT


我的命令：
$ cellranger count --id=run_count_1kpbmcs2 \
--fastqs=/picb/jinlab/wangjl/others/shenwh/mapping/pbmc_1k_v3_fastqs/ \
--sample=pbmc_1k_v3 \
--transcriptome=/home/wangjl/picb/ref/10x/refdata-gex-GRCh38-2024-A/ \
--create-bam true \
--output-dir /picb/jinlab/wangjl/others/shenwh/mapping/01/ \
--localcores 72 \
--localmem 400 \
--uiport 8080


开端口 $ sudo iptables -I INPUT -p tcp --dport 8080 -j ACCEPT
查看web UI: http://j3.biomooc.com:8080/
# 19:11 --> 19:34, 5.2G压缩数据 运行23min;


输出内容：
$ ls -lth /picb/jinlab/wangjl/others/shenwh/mapping/01/outs/filtered_feature_bc_matrix/
total 15M
-rw-r--r--. 1 wangjl jinlab 7.0K May 30 19:36 barcodes.tsv.gz
-rw-r--r--. 1 wangjl jinlab 334K May 30 19:36 features.tsv.gz
-rw-r--r--. 1 wangjl jinlab  15M May 30 19:36 matrix.mtx.gz


(3) Seurat 分析















========================================
|-- cellranger 实战: 从 fastq 获取表达矩阵
----------------------------------------

$ cd /data/jinwf/wangjl/neu/neutrophils_scRNA/
$ mkdir yanpd


1. 版本号
$ /data/software/cellranger-3.0.1/cellranger --version
/data/software/cellranger-3.0.1/cellranger-cs/3.0.1/bin
cellranger --version (3.0.1)
Copyright (c) 2018 10x Genomics, Inc.  All rights reserved.


$ /data/software/cellranger-3.0.1/cellranger count --help



2. 命令及参数意义
chengm cmd: 这是 V3 的试剂
$ cat /data/jinwf/wangjl/neu/neutrophils_scRNA/APC_tumor/apc_tumor_1/Tumor-1/_cmdline 
/home/chengm/data/soft/cellranger/cellranger-5.0.0/cellranger count --id=Tumor-1 --transcriptome=/data/jinwf/chengm/rawdata/refdata/refdata-gex-mm10-2020-A/ --fastqs=/data/jinwf/chengm/rawdata/neutrophils/210219_A00682_0546_BHW7Y3DSXY/ --sample=Tumor-1 --r2-length=91 --localcores=32 --localmem=64 --chemistry=SC3Pv3


zhoub cmd: 这是 V2 的试剂
$ /data/software/cellranger-3.0.1/cellranger count --id=neu \
	--fastqs=/home/zhoub/data/neutrophil/Bonemarrow_20190306 \
	--transcriptome=/data/reference/10X/refdata-cellranger-mm10-3.0.0 \
	--localcores=48 \
	--chemistry=SC3Pv2 \
	--r1-length=26 --r2-length=98 \
	--sample=Neu \
	--localmem=100


参数的解释:
--id=ID
    id      A unique run id, used to name output folder [a-zA-Z0-9_-]+.
[--fastqs=PATH]
    fastqs  Path of folder created by mkfastq or bcl2fastq.
[--sample=PREFIX]
    sample  Prefix of the filenames of FASTQs to select.
	比如 subject1_S1_L001_R1_001.fastq.gz, then set --sample=subject1
--transcriptome=DIR
    transcriptome   Path of folder containing 10x-compatible reference.
[options]
	--chemistry 不设置了，取默认值，自动检测吧。
	--localcores=NUM 最多的核心数
	--localmem=NUM      Set max GB the pipeline may request at one time. 内存使用，单位G
                            Only applies when --jobmode=local.

参考基因组 mm10:
$ ls /data/reference/10X/refdata-cellranger-mm10-3.0.0
fasta  genes  pickle  reference.json  star



3. 我的命令
/data_slow/pdyan/rawdata/

Tumour:
-rw-r--r--. 1  1023 jinwf 6.5G Dec  3  2019 T_S4_L001_R2_001.fastq.gz
-rw-r--r--. 1  1023 jinwf 6.6G Dec  3  2019 T_S4_L001_R1_001.fastq.gz
-rw-r--r--. 1  1023 jinwf 6.0G Dec  2  2019 T_S3_L001_R2_001.fastq.gz
-rw-r--r--. 1  1023 jinwf 6.1G Dec  2  2019 T_S3_L001_R1_001.fastq.gz
-rw-r--r--. 1  1023 jinwf 5.4G Dec  2  2019 T_S2_L001_R2_001.fastq.gz
-rw-r--r--. 1  1023 jinwf 5.5G Dec  2  2019 T_S2_L001_R1_001.fastq.gz
-rw-r--r--. 1  1023 jinwf 8.6G Dec  2  2019 T_S1_L001_R2_001.fastq.gz
-rw-r--r--. 1  1023 jinwf 8.7G Dec  2  2019 T_S1_L001_R1_001.fastq.gz


Normal 癌旁:
-rwxrwxrwx. 1  1023 jinwf 4.9G Nov 30  2019 N_S4_L001_R2_001.fastq.gz
-rwxrwxrwx. 1  1023 jinwf 4.8G Nov 30  2019 N_S4_L001_R1_001.fastq.gz
-rwxrwxrwx. 1  1023 jinwf 8.5G Nov 30  2019 N_S3_L001_R2_001.fastq.gz
-rwxrwxrwx. 1  1023 jinwf 8.4G Nov 30  2019 N_S3_L001_R1_001.fastq.gz
-rwxrwxrwx. 1  1023 jinwf 6.3G Nov 30  2019 N_S2_L001_R2_001.fastq.gz
-rwxrwxrwx. 1  1023 jinwf 6.2G Nov 30  2019 N_S2_L001_R1_001.fastq.gz
-rwxrwxrwx. 1  1023 jinwf 9.3G Nov 29  2019 N_S1_L001_R2_001.fastq.gz
-rwxrwxrwx. 1  1023 jinwf 9.1G Nov 29  2019 N_S1_L001_R1_001.fastq.gz


我的命令1
$ cd /data/jinwf/wangjl/neu/neutrophils_scRNA/yanpdT
$ /data/software/cellranger-3.0.1/cellranger count --id=Tumor \
	--fastqs=/data_slow/pdyan/rawdata/ \
	--transcriptome=/data/reference/10X/refdata-cellranger-mm10-3.0.0 \
	--localcores=48 \
	--chemistry=SC3Pv2 \
	--r1-length=26 --r2-length=98 \
	--sample=T \
	--localmem=80
# 16:44 --> 


我的命令2: 这个今天晚上运行吧，怕资源不够用。
$ cd /data/jinwf/wangjl/neu/neutrophils_scRNA/yanpd
$ /data/software/cellranger-3.0.1/cellranger count --id=AdjNormal \
	--fastqs=/data_slow/pdyan/rawdata/ \
	--transcriptome=/data/reference/10X/refdata-cellranger-mm10-3.0.0 \
	--localcores=48 \
	--chemistry=SC3Pv2 \
	--r1-length=26 --r2-length=98 \
	--sample=N \
	--localmem=80
#






========================================
|-- 输入文件 fastq 的命名格式，GEO 下载的 10x 数据的重命名
----------------------------------------
1. fastq.gz的命名规则

不同的测序公司交付测序数据的保存路径，以及测序文件的命名规则千差万别，因此10X特别对测序文件路径和命名规则做出了说明。

测序得到的最最最原始数据是.bcl文件，也就是一个个的荧光信号信息，可以用cellranger mkfastq或bcl2fastq命令转换为我们最熟知的.fastq.gz文件，不同命令和参数生成的测序文件路径以及名称存在差异。

fastq.gz 文件名称（Specifying Input FASTQ Files for 10x Pipelines）必须符合cellranger相关命名规则：

	[Sample Name]_S1_L00[Lane Number]_[Read Type]_001.fastq.gz
 
Where Read Type is one of:

	I1: Sample index read (optional)
	R1: Read 1
	R2: Read 2
	*注：I1是optional，有的数据中没有I1 reads，比如GEO下载的数据。

主要涉及到以下四个参数：
--fastqs  ##fastq.gz文件的绝对路径，如果测序数据在多个文件夹中，用逗号（,）分隔多个路径
--sample  ##可选择参数（optional），想要分析的某个样品或多个样品（逗号分隔）
--libraries	 ##feature-barcode analysis需要该参数，用于描述输入文库的.csv文件的绝对路径
             ##需要注意的是不能和--fastqs或--sample参数同时使用
--lanes	  ##大的测序数据量（如150G）需要在不同泳道（lane）上测序，该参数可以指定分析特定泳道的数据



(2) 更渐变的方法是先合并fastq文件

$ cat /home/wangjl/picb/others/shenwh/origData/180144B_TPC1/180144B_TPC1-?_S8?_L00?_R1_001.fastq.gz > /picb/jinlab/wangjl/others/shenwh/PTC/raw/ptcB/ptcB_S1_L001_R1_001.fastq.gz

$ cat /home/wangjl/picb/others/shenwh/origData/180144B_TPC1/180144B_TPC1-?_S8?_L00?_R2_001.fastq.gz > /picb/jinlab/wangjl/others/shenwh/PTC/raw/ptcB/ptcB_S1_L001_R2_001.fastq.gz

$ ls -lth /picb/jinlab/wangjl/others/shenwh/PTC/raw/ptcB/
total 73G
-rw-r--r--. 1 wangjl jinlab 35G May 31  2024 ptcB_S1_L001_R2_001.fastq.gz
-rw-r--r--. 1 wangjl jinlab 38G May 31  2024 ptcB_S1_L001_R1_001.fastq.gz










2. 案例
(1)案例1： 不同样品测序数据在不同样品名文件夹下，与上边文件路径和命名规则相同，路径结构和参数设置如下
MKFASTQ_ID
|-- MAKE_FASTQS_CS
`-- outs
    |-- fastq_path
        |-- HFLC5BBXX
            |-- test_sample1
            |   |-- test_sample1_S1_L001_I1_001.fastq.gz
            |   |-- test_sample1_S1_L001_R1_001.fastq.gz
            |   |-- test_sample1_S1_L001_R2_001.fastq.gz
            |   |-- test_sample1_S1_L002_I1_001.fastq.gz
            |   |-- test_sample1_S1_L002_R1_001.fastq.gz
            |   |-- test_sample1_S1_L002_R2_001.fastq.gz
            |   |-- test_sample1_S1_L003_I1_001.fastq.gz
            |   |-- test_sample1_S1_L003_R1_001.fastq.gz
            |   `-- test_sample1_S1_L003_R2_001.fastq.gz
            |-- test_sample2
            |   |-- test_sample2_S2_L001_I1_001.fastq.gz
            |   |-- test_sample2_S2_L001_R1_001.fastq.gz
            |   |-- test_sample2_S2_L001_R2_001.fastq.gz
            |   |-- test_sample2_S2_L002_I1_001.fastq.gz
            |   |-- test_sample2_S2_L002_R1_001.fastq.gz
            |   |-- test_sample2_S2_L002_R2_001.fastq.gz
            |   |-- test_sample2_S2_L003_I1_001.fastq.gz
            |   |-- test_sample2_S2_L003_R1_001.fastq.gz
            |   `-- test_sample2_S2_L003_R2_001.fastq.gz
        |-- Reports
        |-- Stats
        |-- Undetermined_S0_L001_I1_001.fastq.gz
        ...
        `-- Undetermined_S0_L003_R2_001.fastq.gz


--fastqs=MKFASTQ_ID/outs/fastq_path   ##全部样品

--fastqs=MKFASTQ_ID/outs/fastq_path1,MKFASTQ_ID/outs/fastq_path2  ##多个flowcells上测序的全部样品
--fastqs=/PATH/TO/bcl2fastq_output    ##bcl2fastq命令生成的.fastq.gz路径

--fastqs=MKFASTQ_ID/outs/fastq_path \
--sample=test_sample1                 ##sample1在全部泳道（lane1-3）的测序数据

--fastqs=MKFASTQ_ID/outs/fastq_path \
--sample=test_sample1 \
--lanes=1                             ##sample1在泳道1（lane1）的测序数据

fastqs=MKFASTQ_ID/outs/fastq_path \
--sample=test_sample1,test_sample2    ##将sample1和sample2作为合并样品进行分析




(2) 案例2： 同一样品的测序文件在多个文件夹下（包含4个sample index），路径结构和参数设置如下
bcl2fastq_output
|-- HFLC5BBXX
    |-- SI-GA-A1_1
    |   |-- SI-GA-A1_1_S1_L001_I1_001.fastq.gz
    |   |-- SI-GA-A1_1_S1_L001_R1_001.fastq.gz
    |   `-- SI-GA-A1_1_S1_L001_R2_001.fastq.gz
    |-- SI-GA-A1_2
    |   |-- SI-GA-A1_2_S2_L001_I1_001.fastq.gz
    |   |-- SI-GA-A1_2_S2_L001_R1_001.fastq.gz
    |   `-- SI-GA-A1_2_S2_L001_R2_001.fastq.gz
    |-- SI-GA-A1_3
    |   |-- SI-GA-A1_3_S3_L001_I1_001.fastq.gz
    |   |-- SI-GA-A1_3_S3_L001_R1_001.fastq.gz
    |   `-- SI-GA-A1_3_S3_L001_R2_001.fastq.gz
    |-- SI-GA-A1_4
    |   |-- SI-GA-A1_4_S4_L001_I1_001.fastq.gz
    |   |-- SI-GA-A1_4_S4_L001_R1_001.fastq.gz
    |   `-- SI-GA-A1_4_S4_L001_R2_001.fastq.gz
|-- Reports
|-- Stats
|-- Undetermined_S0_L001_I1_001.fastq.gz
|-- Undetermined_S0_L001_R1_001.fastq.gz
`-- Undetermined_S0_L001_R2_001.fastq.gz


--fastqs=MKFASTQ_ID/outs/fastq_path      ##全部样品

--fastqs=MKFASTQ_ID/outs/fastq_path \    ##单独分析每一个文件夹下测序数据
--sample=SI-GA-A1_1,SI-GA-A1_2,SI-GA-A1_3,SI-GA-A1_4

--fastqs=MKFASTQ_ID/outs/fastq_path \    ##只分析第一个sample index
--sample=SI-GA-A1_1





(3) 案例3：感觉与案例1相似，但是显得特别乱 
fastq_path
|-- Reports
|-- Stats
|-- test_sample_S1_L001_I1_001.fastq.gz
|-- test_sample_S1_L001_R1_001.fastq.gz
|-- test_sample_S1_L001_R2_001.fastq.gz
|-- test_sample_S1_L002_I1_001.fastq.gz
|-- test_sample_S1_L002_R1_001.fastq.gz
|-- test_sample_S1_L002_R2_001.fastq.gz
|-- test_sample_S1_L003_I1_001.fastq.gz
|-- test_sample_S1_L003_R1_001.fastq.gz
|-- test_sample_S1_L003_R2_001.fastq.gz
|-- Undetermined_S0_L001_I1_001.fastq.gz
...
`-- Undetermined_S0_L003_R2_001.fastq.gz

--fastqs=MKFASTQ_ID/outs/fastq_path   ##所有样品，mkfastq

-fastqs=/PATH/TO/bcl2fastq_output     ##所有样品，bcl2fastq

--fastqs=MKFASTQ_ID/outs/fastq_path \ ##test sample数据
--sample=test_sample

--fastqs=MKFASTQ_ID/outs/fastq_path \  ##test sample，lane1数据
--sample=test_sample \
--lanes=1





(4) 案例4：路径结构和参数设置如下：

PROJECT_FOLDER
|-- MySample_S1_L001_I1_001.fastq.gz
|-- MySample_S1_L001_R1_001.fastq.gz
|-- MySample_S1_L001_R2_001.fastq.gz
|-- MySample_S1_L002_I1_001.fastq.gz
|-- MySample_S1_L002_R1_001.fastq.gz
|-- MySample_S1_L002_R2_001.fastq.gz
--fastqs=/PATH/TO/PROJECT_FOLDER   ##所有样品
 
--fastqs=/PATH/TO/PROJECT_FOLDER \ ##某一样品
--sample=MySample

--fastqs=/PATH/TO/PROJECT_FOLDER \ ##MySample的lane1
--sample=MySample \
--lanes=1






3. GEO 下载的 10x scRNA-seq 原始数据的处理

(1) 将SRA转为fastq
我们使用 fastq-dump

cat SRR_Acc_List-2586-4.txt |while read i;
do
time fastq-dump --gzip --split-3 -A $i ${i}.sra && echo "** ${i}.sra to fastq done **"
done


其中主要使用了三个参数：
	--gzip  #将生成的结果fastq文件进行压缩
	--split-3  #其实有点复杂：首先它是分割的意思，-3 实际上指的是分成3个文件，它诞生的时间比较早，是在1000 Genome的Phase1阶段产生的。

		* 如果结果发现只有一个文件，说明数据不是双端(第三个文件太大会覆盖前两个)；
		* 如果结果有两个文件，说明是双端文件并且数据质量比较高(没有低质量的reads或者长度小于20bp的reads)；
		* 如果结果有三个文件，说明是双端文件，但是有的数据质量不高，存在trim的结果，第三个文件的名字一般是：<srr_id>.fastq， 而且文件也不大，基本可以忽略

	-A指定输出的文件名

如果使用上面的参数 --split-3，结果只有一个fq文件!!
利用cell ranger软件分析，一般需要两个输入文件:
* 其中一个是测序reads，
* 另一个是UMI+Barcode文件。

那么只生成一个文件是不够的，因此可以换个参数：
* 使用另外一个参数 --split-files，来替代 --split-3，就可以生成三个文件。
* 其中第一个文件的所有序列都是8bp，第二个文件都是26bp，第三个文件都是91bp，初步判断，第三个文件是测序reads


小结：
* GEO下载的10x数据，需要使用如下方法进行拆分：
	$ fastq-dump --gzip --split-files -A $i ${i}.sra
* --split-3 不能使用！只生成一个文件
* --split-files 产生的三个文件分别是 I1, R1, R2。




(2) 利用下载SRA的SRR ID 批处理

比如，将原来的 SRR7692286_1.fastq.gz 改成 SRR7692286_S1_L001_I1_001.fastq.gz
依次类推，将原来_2的改成R1，将_3改成R2

$ cat  SRR_Acc_List-9245-3.txt | while read i;do \
  (mv ${i}_1*.gz ${i}_S1_L001_I1_001.fastq.gz; \
   mv ${i}_2*.gz ${i}_S1_L001_R1_001.fastq.gz; \
   mv ${i}_3*.gz ${i}_S1_L001_R2_001.fastq.gz); \
done





ref:
https://blog.csdn.net/flashan_shensanceng/article/details/115718180
http://www.360doc.com/content/19/1011/09/26628304_866069959.shtml




========================================
第二步分析 R包 cellrangerrkit (废弃了，直接用 Seurat)
----------------------------------------
http://cf.10xgenomics.com/supp/cell-exp/cellrangerrkit-PBMC-vignette-knitr-2.0.0.pdf
$ sudo R 
> source("http://cf.10xgenomics.com/supp/cell-exp/rkit-install-2.0.0.R")






















========================================
运行 cellranger mkfastq
----------------------------------------
cellranger mkfastq recognizes two file formats for describing samples: 
 - a simple, three-column CSV format, 
 - and the Illumina Experiment Manager (IEM) sample sheet format, the same format used by bcl2fastq. 

There is an example below for running mkfastq with each format.
https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/using/mkfastq

1.数据准备

下载例子文件
$ wget http://cf.10xgenomics.com/supp/cell-exp/cellranger-tiny-bcl-1.2.0.tar.gz
$ wget http://cf.10xgenomics.com/supp/cell-exp/cellranger-tiny-bcl-simple-1.2.0.csv
$ wget http://cf.10xgenomics.com/supp/cell-exp/cellranger-tiny-bcl-samplesheet-1.2.0.csv

解压数据
$ tar zxvf cellranger-tiny-bcl-1.2.0.tar.gz




2. 使用简单csv布局文件  Running mkfastq with a simple CSV layout file

$ cat cellranger-tiny-bcl-simple-1.2.0.csv
Lane,Sample,Index
1,test_sample,SI-P03-C9

$ cellranger mkfastq --id=tiny-bcl \
                     --run=/path/to/tiny_bcl \
                     --csv=cellranger-tiny-bcl-simple-1.2.0.csv


我使用的命令：
$ pwd
/home/wangjl/Downloads/scSeq
[wangjl@ngs2 scSeq]$ cellranger mkfastq --id=test-bcl --run=cellranger-tiny-bcl-1.2.0 --csv=cellranger-tiny-bcl-simple-1.2.0.csv
大约几分钟后输出文件：
Outputs:
- Run QC metrics:        /home/wangjl/Downloads/scSeq/test-bc/outs/qc_summary.json
- FASTQ output folder:   /home/wangjl/Downloads/scSeq/test-bc/outs/fastq_path
- Interop output folder: /home/wangjl/Downloads/scSeq/test-bc/outs/interop_path
- Input samplesheet:     /home/wangjl/Downloads/scSeq/test-bc/outs/input_samplesheet.csv

Waiting 6 seconds for UI to do final refresh.
Pipestance completed successfully!

Saving pipestance info to test-bc/test-bc.mri.tgz




$ cd test-bc/outs/fastq_path/
[wangjl@ngs2 fastq_path]$ pwd
/home/wangjl/Downloads/scSeq/test-bc/outs/fastq_path












3. 使用IEM格式。Running mkfastq with an Illumina Experiment Manager (IEM) sample sheet

$ cat cellranger-tiny-bcl-samplesheet-1.2.0.csv
[Header],,,,,,,,
IEMFileVersion,4,,,,,,,
Investigator Name,rjr,,,,,,,
Experiment Name,hiseq_test,,,,,,,
Date,8/15/16,,,,,,,
Workflow,GenerateFASTQ,,,,,,,
Application,HiSeq FASTQ Only,,,,,,,
Assay,TruSeq HT,,,,,,,
Description,hiseq sample sheet,,,,,,,
Chemistry,Default,,,,,,,
,,,,,,,,
[Reads],,,,,,,,
26,,,,,,,,
98,,,,,,,,
,,,,,,,,
[Settings],,,,,,,,
,,,,,,,,
[Data],,,,,,,,
Lane,Sample_ID,Sample_Name,Sample_Plate,Sample_Well,I7_Index_ID,index,Sample_Project,Description
1,s1,test_sample,,,SI-P03-C9,SI-P03-C9,p1,


$ cellranger mkfastq --id=tiny-bcl \
                     --run=/path/to/tiny_bcl \
                     --samplesheet=cellranger-tiny-bcl-samplesheet-1.2.0.csv

--











========================================
统计 10x scRNAseq 中R1和R2中polyA/T read占比
----------------------------------------
1.
R1: 10xBC(16bp) + UMI(10bp) + polyT;
R2: 150bp;


(1)
$ zcat B116_S1_L005_R1_001.fastq.gz |head
@E00500:97:H7NHJCCXY:5:1101:4787:1450 1:N:0:NTGTTTCC
NGCCCATTCGTACGGCTTAAGTCATT
+
#<AAFA-FF<FF7<<<7AA-FFFFJF
@E00500:97:H7NHJCCXY:5:1101:5700:1450 1:N:0:NTGTTTCC
NTCTCAACAATAAGCAATCTAGCGTT
+
#AAA-AFA-FJFJJA<F7FAJ<AJ-F
@E00500:97:H7NHJCCXY:5:1101:7019:1450 1:N:0:NTGTTTCC
NAGCATAAGTTTCCTTGGTTAAAGCA


(2)
$ zcat B116_S1_L005_R2_001.fastq.gz |head
@E00500:97:H7NHJCCXY:5:1101:4787:1450 2:N:0:NTGTTTCC
NGCAGGTGTGGCTAATACCCTGGCCCACAAGTAACACAAAGCACGATATCTTGCAGACCAATTTCTATTAAAGGATCCTATGTTCCCTAAATCCAACT
+
#----7-----77F<<----<-----7-7F<<-<----<------------7---7<--7------<<AAF<--------77<-7---A------7--
@E00500:97:H7NHJCCXY:5:1101:5700:1450 2:N:0:NTGTTTCC
NAGTATATGTACTTATTAATGAACACGGGTCTCACACACAAAAAGAAAAAAGGAATTATTTTACAAGTAAGAGACAAATAATTTGCAACCAGCTTATG
+
#---AF-AA<JFJ--<--F--AF<<-A--7F----<---<F<FA-7A<-FJ--<F---7-A---<<--AJF----7--77-<AF--7<7-A---77--
@E00500:97:H7NHJCCXY:5:1101:7019:1450 2:N:0:NTGTTTCC
NCAGTCTCCTTCAAGCATTCTGTCGACACTGGATGTTGAATTGCCACCTGTTTGCTGTGACATAGATATTTAAATTTCTTAGTGCTTCAGAGTTTGTG











2.
zcat Neu_S01_L004_R1_001.fastq.gz|grep -P "T{20,}" -B 1 -A 3 | head -n 43500 | tail -n 40| grep -P "T{20,}" -B 1 -A 3

zcat Neu_S01_L004_R1_001.fastq.gz|grep -P "T{10,}" -B 1 -A 3 | head -n 43500 | tail -n 40| grep -P "T{10,}" -B 1 -A 3







(1)
$ zcat Neu2_S4_L002_R1_001.fastq.gz | wc
498245328 622806660 44775503427

$ zcat Neu2_S4_L002_R1_001.fastq.gz | grep -P "T{10,}"  | less
$ zcat Neu2_S4_L002_R1_001.fastq.gz | grep -P "T{10,}"  | wc
123195972 123195972 18602591772
123195972/498245328*4 = 0.9890386528621901=98%


$ zcat Neu2_S4_L002_R1_001.fastq.gz | grep -P "T{10,}"  -B1 -A3|head
@A00129:409:HKVNVDSXX:2:1101:1940:1031 1:N:0:CCGGGTAT
GNGAGATAGGCCCTCAAACTGTATCCTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTGTGTGGTGGGTTTTTTTTTTTTTTTTTTAAATATGGCAAAAAAAAGGTTTTAAAGTGGAACAAAAAGAA
+
F#FFF:FFFFFFFFFFFFFFF,FFFFFFF:F:FFFFFFFFFFFFFFFFFF:FFFFFFFFFF:FFFFFFFFFFFFFFFFFF,,::,,:,:F,,F,FFF:FF,,,:F,,:,FF,,,,,,,F,,,F,,,,,:,,,,,F,,:,,,,,F:F,,,,
@A00129:409:HKVNVDSXX:2:1101:3314:1031 1:N:0:CCGGGTAT
CNACTTCGTGTATGGGGGCCTGCGGGTTTTTTTTTTTTTTTTTTTTTTTTTTTTTAAAAAACAAACAATTTATTTATTAAAATTTTTAAATTTTAAAATTTATTATTAAAATTAAACACAATTAAGTATTAAAAAAAAAAAAAAAAAAAA
+
F#F,FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF::F,F,F,F,F,,:FF:::FF:,,:FF,,,,,:FFF,:,:,:F,FF:,,F:F,FF,::,:,,,F,,,,,F,,,:F,,FFFFFF:,,,:F:,F,FFF
@A00129:409:HKVNVDSXX:2:1101:4797:1031 1:N:0:CCGGGTAT
GNTTGAATCTCGGACGTTCTCTCAGCTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTAAATATATATATTAAATTAAAATTATAAAATGAAAAAAAAGCGTTGGGGTGGGGGGGGGATTGAG


## 做QC
$ fastqc Neu2_S4_L002_R1_001.fastq.gz -o /home/wangjl/test/fastqc_out_dir/
$ fastqc Neu2_S4_L002_R2_001.fastq.gz -o /home/wangjl/test/fastqc_out_dir/


(2)
$ zcat Neu_S01_L004_R1_001.fastq.gz | wc
89243812 111554765 8221354216

$ zcat Neu_S01_L004_R1_001.fastq.gz  | grep -P "A{10,}"  | wc
269484  269484 40692084
269484/89243812*4 = 0.012078551731967702=1.2%

$ zcat Neu_S01_L004_R1_001.fastq.gz  | grep -P "T{10,}"  | wc
2692455 2692455 406560705
2692455/89243812*4 = 0.1206786191517682=12%

$ zcat Neu_S01_L004_R1_001.fastq.gz  | grep -P "G{10,}"  | wc
4936397 4936397 745395947
4936397/89243812*4 = 0.22125442153905303=22%

$ zcat Neu_S01_L004_R1_001.fastq.gz  | grep -P "C{10,}"  | wc
86034   86034 12991134
86034/89243812*4 = 0.003856132904766551=0.3%


## 做QC
$ fastqc Neu_S01_L004_R1_001.fastq.gz -o /home/wangjl/test/fastqc_out_dir/
$ fastqc Neu_S01_L004_R2_001.fastq.gz -o /home/wangjl/test/fastqc_out_dir/



(3)
# /data/rawdata/Heartproject/AC_normal_20190417/AC-2

$ zcat S-6_S1_L001_R1_001.fastq.gz | wc
1702985768 2128732210 154377253803

$ zcat S-6_S1_L001_R1_001.fastq.gz | grep -P "T{10,}" | wc
417006026 417006026 62967909926

417006026/1702985768*4=0.9794703721798808=97.9%












========================================
|-- 找到R2定位下游5k区域，并把R1的polyT后的序列比对上去
----------------------------------------

0. 选择unique map 的序列(对于star也就是mapQ=255)
in TGACTAGGTAAACACA_Aligned.sortedByCoord.out.bam

$ samtools view TGACTAGGTAAACACA_Aligned.sortedByCoord.out.bam | awk '$5==255{print $0}' |head
A00129:409:HKVNVDSXX:2:1527:1561:13808	0	chr10	7844744	255	2S74M4119N37M648N15M22S	*	0	0	CCTTGACTTTCAACCGCACCCGCCAGGCTGTCATCACAAAGGAGTTGATTGAAATCATCTCTGGGGCTGCTGCTCTGGATTAATGAAAATCAAGTTGCATCCTCAGACAAGAGGTAAAGAAGAAGAATGCGCAGGCTGATTTTAACTGAT	FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF:FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF:FFFFFFFFF:FFFFFFFFFFFFFFFFFFFF	NH:i:1	HI:i:1	AS:i:107	nM:i:10

A00129:409:HKVNVDSXX:2:1244:28185:36683 0       chr11   812541  255     93M126N43M14S   *       0       0       GCAAGCTGGCCAGTGTGCCTGCTGGTGGGGCTGTGGCTGTTTCTGCTGCCCCTGGCTCTGCAGCACCTGCTGCTGGTTCTGCCCCCGCTGCAGCAGAGGAGAAGAAAGATGAGAAGAAGGAGGAGTCCGAGGAGTCGGATGACGACATGG  FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF,FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF  NH:i:1  HI:i:1  AS:i:116        nM:i:10



1. 比如 
i) A00129:409:HKVNVDSXX:2:1527:1561:13808 序列的R1不可比对
ii) A00129:409:HKVNVDSXX:2:1244:28185:36683 序列R1不可比对
iii) A00129:409:HKVNVDSXX:2:2565:1823:3615 序列

(1) R2的fq文件为
$ cd /data/jinwf/wangjl/apa/test2/
$ cat TGACTAGGTAAACACA.uniq.R2.fq | grep -P "2:2565:1823:3615" -A 3 -n
18937:@A00129:409:HKVNVDSXX:2:2565:1823:3615 2:N:0:CCGGGTAT
18938-ACGAGGGGACGCTGTAGCCAAGGCTTCCAAGGACACCCATGTAATGGATTACCGGGCCTTGGTGCATGAGCGAGATGAAGCAGCCTATGGGGCGCTAAGGGCCATGGTGCTGGACCTGAGGGCCTTCTATGCTGAGCTTTATCATATCAT
18939-+
18940-FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF,FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF:FFFFFFFFFFFFFFFFFF



获取质量比较低的R1的polyT后的序列(pos+3)
$ cat TGACTAGGTAAACACA.uniq.R1.fq | grep -P "2:2565:1823:3615" -A 3 -n
18937:@A00129:409:HKVNVDSXX:2:2565:1823:3615 1:N:0:CCGGGTAT
18938-TGACTAGGTAAACACATTAATAGGTATTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTGTAGTATAAATCATTTATTTTACTTATAATACTTAGAACAATAAATCGAAGGGTTTTATTAACCCATGGGGTTGACGATTTTCTATAGGTTG
18939-+
18940-FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF,FFFFFFFFFFFF:F,,:,:::FFF:,,,F:,FFFF,,FF,,FF:,,,:,,,:,:,:F,:,,,,,FF,,FF:,:F,FFFF,F,,FF,FF,,,:FFFF,,,:,,FFF,

去掉前56个，剩下的就是R1 lowQ序列: TTGTAGTATAAATCATTTATTTTACTTATAATACTTAGAACAATAAATCGAAGGGTTTTATTAACCCATGGGGTTGACGATTTTCTATAGGTTG





(2) bam文件的比对结果
$ samtools view map/TGACTAGGTAAACACA_Aligned.sortedByCoord.out.bam | awk '$5==255{print $0}' | grep '2565:1823:3615'

A00129:409:HKVNVDSXX:2:2565:1823:3615   16      chr14   24612679        255     20M95N87M303N43M        *       0       0       ATGATATGATAAAGCTCAGCATAGAAGGCCCTCAGGTCCAGCACCATGGCCCTTAGCGCCCCATAGGCTGCTTCATCTCGCTCATGCACCAAGGCCCGGTAATCCATTACATGGGTGTCCTTGGAAGCCTTGGCTACAGCGTCCCCTCGT  FFFFFFFFFFFFFFFFFF:FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF,FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF  NH:i:1  HI:i:1  AS:i:134        nM:i:9



(3) 获取定位点位置
$ bedtools bamtobed -i map/TGACTAGGTAAACACA_Aligned.sortedByCoord.out.bam | awk '$5==255{print $0}' | grep '2565:1823:3615'
chr14   24612678        24613226        A00129:409:HKVNVDSXX:2:2565:1823:3615   255     -
注释: bed 是0-based坐标，比bam小1。[A, B)






(4) 获取下游5k序列
这里暂时不检测是否到同一个链上的下一个基因内。
因为是-链，所以下游是坐标减小的方向。
chr14:24607678-24612678, 用IGV目测已经进入另一个基因内了，先不管了。

$ samtools faidx /home/wangjl/data/ref/hg19/hg19.fa chr14:24607678-24612678 > testDB.fa
返回很多行的序列。



(5) 先试试网页版工具

1) 使用 blat的结果
检查是否在 chr14 呢？ 不在，所以不对。


2) blast
https://blast.ncbi.nlm.nih.gov/Blast.cgi?PROGRAM=blastn&PAGE_TYPE=BlastSearch&LINK_LOC=blasthome

blast 没有结果。



3) 使用 blast+
$ cd blast 

## 由fa建立索引数据库
$ cd blast
$ makeblastdb -in ../testDB.fa -input_type fasta -dbtype nucl -title geneBase -parse_seqids -out geneBase -logfile File_Name

## 
$ blastn -query ../test.fasta -db geneBase -out test1.blastn.out
$ less test1.blastn.out

结果是 ***** No hits found *****






4) bowtie2 
$ cd bowtie2
## 建库
$ bowtie2-build ../testDB.fa geneDB

## 比对
$ bowtie2 -x geneDB -U ../test.fq ## 没有比对结果


## 换这一套参数
$ bowtie2 --mp 2,1 -D 15 -R 2 -N 1 -L 10 -I S,1,0.75  -x geneDB -U ../test.fq
参数解释: http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml#building-from-source
(1*)--mp MX,MN   Sets the maximum (MX) and minimum (MN) mismatch penalties, both integers.Default: MX = 6, MN = 2.
(2)-D <int> 
Up to <int> consecutive seed extension attempts can “fail” before Bowtie 2 moves on, using the alignments found so far. A seed extension “fails” if it does not yield a new best or a new second-best alignment. This limit is automatically adjusted up when -k or -a are specified. Default: 15.
(3) -R <int>
<int> is the maximum number of times Bowtie 2 will “re-seed” reads with repetitive seeds. When “re-seeding,” Bowtie 2 simply chooses a new set of reads (same length, same number of mismatches allowed) at different offsets and searches for more alignments. A read is considered to have repetitive seeds if the total number of seed hits divided by the number of seeds that aligned at least once is greater than 300. Default: 2.
(4) 启发式算法 Multiseed heuristic
the trade-off between speed and sensitivity/accuracy can be adjusted by setting the seed length (-L), the interval between extracted seeds (-i), and the number of mismatches permitted per seed (-N). 

(5)-r
Reads (specified with <m1>, <m2>, <s>) are files with one input sequence per line, without any other information (no read names, no qualities). When -r is set, the result is as if --ignore-quals is also set.



$ bowtie2 --mp 2,1 -D 15 -R 2 -N 1 -L 10 -x geneDB -U ../test.fq
$ bowtie2 --mp 2,1 -D 15 -R 2 -N 1 -L 9 -x geneDB -U ../test.fq


$ bowtie2 --mp 2,1 -D 15 -R 2 -N 1 -L 10 -I S,1,0.75  -x geneDB -U ../test.fq 
$ bowtie2 --local --mp 2,1 -D 15 -R 2 -N 1 -L 10 -I S,1,0.75  -x geneDB -U ../test.fq 




## 结果输出
5 reads; of these:
  5 (100.00%) were unpaired; of these:
    0 (0.00%) aligned 0 times
    3 (60.00%) aligned exactly 1 time
    2 (40.00%) aligned >1 times
100.00% overall alignment rate
@HD     VN:1.0  SO:unsorted
@SQ     SN:chr14:24607678-24612678      LN:5001
@PG     ID:bowtie2      PN:bowtie2      VN:2.3.5.1      CL:"/home/wangjl/software/bowtie2-2.3.5.1-linux-x86_64/bowtie2-align-s --wrapper basic-0 --mp 2,1 -D 15 -R 2 -N 1 -L 10 -I S,1,0.75 -x geneDB -U ../test.fq"
PosQC   0       chr14:24607678-24612678 3318    42      60M     *       0       0       CACTCTTATTGGCTAGGTTCCCCGACTTCCGCTCTCGGTTGGTGGTTGGCTTTGCCTGTT    ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,F,,,,,,,,,,,,,,    AS:i:0XN:i:0  XM:i:0  XO:i:0  XG:i:0  NM:i:0  MD:Z:60 YT:Z:UU
NegQC   16      chr14:24607678-24612678 3318    42      60M     *       0       0       CACTCTTATTGGCTAGGTTCCCCGACTTCCGCTCTCGGTTGGTGGTTGGCTTTGCCTGTT    KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK    AS:i:0XN:i:0  XM:i:0  XO:i:0  XG:i:0  NM:i:0  MD:Z:60 YT:Z:UU
line1   16      chr14:24607678-24612678 1891    2       94M     *       0       0       ACTTTTTGTTTTTTTTTTTATAATAAACTTGGTCCCCTTTTTTAAAAATAAATATTGTTTTTTTTAAATTATATTAAAATAAAAAACTTAAAAC  FFFFFFFFFFFFFF,FFFFF<FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF<FFFFFFFFFFFFFFFFFFFFFFFFFF        AS:i:-53        XS:i:-54        XN:i:0  XM:i:53 XO:i:0  XG:i:0  NM:i:53 MD:Z:1A0G2C1A0G0A0C0C0A0G0C0C1G0G0C0C2C1T0G0G0C0G0A0A0A4A1C1C2C0T2A2T0A1A0A0A0A1A0A1A0A7A1A0A2T1A6T1A0G0C0C0G0G0      YT:Z:UU
line2   0       chr14:24607678-24612678 3663    2       94M     *       0       0       TTTAAAAAAAAAAAATTTATTTTAGGGGGAGCCGGAAATTAAAAAAAAAAACCAAAAACCAAGTAGGAAACCCACACCAAGGACACCACCATAT  FFFFFFFFFFFFFFFFFFFFFFFFF,FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF,FFFFFFFFFFFFFFFFFFFFFF,FFFFFFFFFFF        AS:i:-51        XS:i:-54        XN:i:0  XM:i:51 XO:i:0  XG:i:0  NM:i:51 MD:Z:2C0T0T1T0C0T0C1T1T0T2A0T0G0A0C0A0G1A0T0A0A0G3C0T0G7G2C2T0C3T0G0G1G0T0T0T0A0C2C2G0A0T4G3A1G0A3C0T0T0G1C1  YT:Z:UU
line3   0       chr14:24607678-24612678 4902    23      94M     *       0       0       TTGTAGTATAAATCATTTATTTTACTTATAATACTTAGAACAATAAATCGAAGGGTTTTATTAACCCATGGGGTTGACGATTTTCTATAGGTTG  FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF,,,FFFFFFFFFFFFFFFFFFFFFFFFFF        AS:i:-28        XN:i:0  XM:i:28 XO:i:0  XG:i:0  NM:i:28 MD:Z:0A0C0A0A0C0A4G12C3C2G1C1C0G0G1T0T2G2C2A2T2C4C2C4T1T8A7C0C6 YT:Z:UU




目测比对效果

> mapped-line2: 
ACAACATATAGATCATTTATTTTCCTTCTAGTCCCGGGTTCAGTACATAGATGGCTTTTCTTCACCCTTTGGGTTGACAATTTTCTCCAGGTTG
> origin-line2:
TTGTAGTATAAATCATTTATTTTACTTATAATACTTAGAACAATAAATCGAAGGGTTTTATTAACCCATGGGGTTGACGATTTTCTATAGGTTG

#
https://sequencing.qcfail.com/articles/mapq-values-are-really-useful-but-their-implementation-is-a-mess/

the max MAPQ score that bowtie2 gives is 42. You should be able to demonstrate this for yourself by examining the distribution of MAPQ scores from your own data.





(6) 获取切割位点
1)bam 2 bed(0-based)
bam to bed
$ samtools view -bS 01.sam >01.bam

$ bedtools bamtobed -i 01.bam 
chr14:24610815-24612679 1764    1858    line3   23      +
24610815+1764=24612579
chr14:24612580-24612580 # 坐标要加1



2) 直接用bam计算

背景序列是 chr14:24607678-24612678，比对到的位置是  24607678+4902=24612580
chr14:24612580-24612580




========================================
空间转录组 Visium CytAssist 简介 (2022.2.6)
----------------------------------------
1. 解决的问题
单细胞知道细胞分类，但是不知道细胞来自于哪里，所以需要空间转录组。

10x的技术，目前一个孔大概10个细胞。


(1) 一般都是单细胞和空间连用。
为什么做空间？为了确定某些细胞的位置。
	疾病状态下，淋巴细胞是否有很好的浸入？如果只在肿瘤的边缘，无法进入组织，则预后一般不好。
	所以，细胞的分布很重要。

(2) 分析过程
和10x差不多，但是多了一个图像文件。
可以把细胞还原到图像的原位。



(3) 整体制备流程：
	组织固定，切片，HE染色，照相；
	透化处理(细胞破膜，RNA释放出来，重力作用下掉到孔中，结合到 barcoded spot capture 捕获探针上)
		提供组织优化芯片，透化酶 + cDNA合成。
		长度 
	产生cDNA, 建库上机测序
	

(4) 空间转录组的几个技术方法
	基于微解刨
	原位杂交
	原位测序
	原位捕获
	A,Rao,2021, nature review 
	spatialDB: 空间上差异表达的基因。

10x空间转录组技术原理
	组织大小 6.5mm
	每个半点直径 55微米，平均每个斑点1-10个细胞。需要根据算法推算比例。
	不需要解离组织，所以减少了细胞损失、细胞外力效应。
	斑点总共 5k 个。
费用：
	大概一个片子 16万，包含4个区域。


(5) 下游分析：
	图像
	fastq文件


(6) 研究应用：
	肿瘤
		通过鉴定肿瘤的免疫反应来推动免疫治疗的发展
	发育
	神经
		
	免疫
		自身免疫
		传染病
		肿瘤微环境





2. 空间转录组的分析方法
空间转录组数据的研究思路和分析模块。

(1) 反卷积推算出来一个spot有哪些细胞比例？

(2) 聚类的细胞都来自于哪里？还原到图片上的原位。

(3) 定义score，看其在空间的分布。
	EMT score

(4) 空间的片子特别多，还可以三维重构。

(5) 数据分析流程
- spots 分群图
- Nrgn 基因表达热图


(6) 拟时序分析
器官特定位置发育过程。

Cellranger, 这里是 Space ranger.

Mapping 后，大概5k个spot有一半能用上，也就是有2.5k个spot。
	每个spot是1-10个细胞，基因数 5.7k个。

底层文件
	片子照片
	h5文件

(7) 降维、聚类、可视化

(8) 空间差异基因
//todo


(9) 与单细胞整合分析

因为有可能一个spot是1-10个细胞，仅仅有空间转录组不能定义新细胞类型。
如果有同一个样本的单细胞数据，则可以使用单细胞定义细胞类型，使用空间转录组做翻卷积推测每个spot的细胞类型。


轨迹分析

细胞通讯


(10) 代表作
心脏发育
大脑皮层发育
小肠发育
新冠


(11) 









========================================
cellxgene: 单细胞可视化工具
----------------------------------------
1. 下载 
(1) 简介
https://data.humancellatlas.org/analyze/portals/cellxgene

cellxgene is an interactive, performant explorer for single cell transcriptomics data - an open-source experiment in how to bring powerful tools from modern web development to visualize and explore large single-cell transcriptomics datasets. cellxgene hopes to both enable scientists to explore their data and to equip developers with scalable, reusable patterns and frameworks for visualizing large scientific datasets. Features will include scalable visualization of at least 1 million cells, interactive exploration via performant cross-filtering and comparison, and a flexible API that supports a range of existing analysis packages (e.g. scanpy) for backend computational tasks integrated with client-side visualization.

展示 1百万细胞，交互式探索，灵活的API和后台交互(scanpy)

https://github.com/chanzuckerberg/cellxgene

https://cellxgene.cziscience.com/docs/01__CellxGene


(2) 安装
$ pip3 install cellxgene
$ pip3 freeze | grep -i cellxgene
cellxgene==1.1.2






2. 运行
Usage: cellxgene launch <options> <path to data file>
--host <IP address>             Host IP address. By default cellxgene will use
                                  localhost (e.g. 127.0.0.1).
-p, --port <port>               Port to run server on. If not specified cellxgene
                                  will find an available port.

(1) try1:
$ cellxgene launch https://cellxgene-example-data.czi.technology/pbmc3k.h5ad
失败，没文件

下载 
https://support.10xgenomics.com/single-cell-gene-expression/datasets/1.1.0/pbmc3k?
Per-molecule read information	594.25 MB	5e372c0ef44dc3581f1d642ad48502d6

$ cd /home/wangjl/data/PBMC
$ wget https://cf.10xgenomics.com/samples/cell-exp/1.1.0/pbmc3k/pbmc3k_molecule_info.h5


(2) try2: 指定IP和端口
$ cellxgene launch --host 0.0.0.0 -p 9001 /home/wangjl/data/PBMC/pbmc3k_molecule_info.h5
[cellxgene] Starting the CLI...
Error: Dataset does not have an allowed type.

(3) try3: 预处理
$ pip3 install scanpy
$ pip3 freeze | grep -i scanpy
scanpy==1.9.3

$ pip3 install louvain
Uninstalling igraph-0.9.11:
Successfully uninstalled igraph-0.9.11
now (0.10.8)

>>> import louvain
__main__:1: DeprecationWarning: This package has been superseded by the `leidenalg` package and will no longer be maintained. Please upgrade to the `leidenalg` package.


$ pip3 install leidenalg
leidenalg 0.8.10 requires igraph<0.10,>=0.9.0, but you have igraph 0.10.0 which is incompatible.

$ pip3 install igraph==0.9.11
louvain 0.8.1 requires igraph<0.11,>=0.10.0, but you have igraph 0.9.11 which is incompatible.

$ pip3 install igraph==0.10.0



https://github.com/chanzuckerberg/cellxgene-compbio-methods/blob/master/dataset-processing/pbmc3k-processing.ipynb

import scanpy as sc
import numpy as np
import pandas as pd

adata = sc.datasets.pbmc3k() ## load data
sc.pp.calculate_qc_metrics(adata, inplace=True) ## compute quality control metrics

## Just reimplement the normalization and preprocessing 
## described in the scanpy tutorial here: 
## https://scanpy-tutorials.readthedocs.io/en/latest/pbmc3k.html
sc.pp.filter_cells(adata, min_genes=200)
sc.pp.filter_genes(adata, min_cells=3)
mito_genes = adata.var_names.str.startswith('MT-')

adata.obs['percent_mito'] = np.sum(
    adata[:, mito_genes].X, axis=1).A1 / np.sum(adata.X, axis=1).A1
adata.obs['n_counts'] = adata.X.sum(axis=1).A1
adata = adata[adata.obs['n_genes'] < 2500, :]
adata = adata[adata.obs['percent_mito'] < 0.05, :]
sc.pp.normalize_per_cell(adata, counts_per_cell_after=1e4)
sc.pp.log1p(adata)

sc.pp.highly_variable_genes(adata, min_mean=0.0125, max_mean=3, min_disp=0.5)
sc.pl.highly_variable_genes(adata)
adata = adata[:, adata.var['highly_variable']]
sc.pp.regress_out(adata, ['n_counts', 'percent_mito'])
sc.pp.scale(adata, max_value=10)

sc.tl.pca(adata, svd_solver='arpack')
sc.pp.neighbors(adata, n_neighbors=10, n_pcs=40)

sc.tl.umap(adata) ## compute embeddings
sc.tl.tsne(adata)
sc.tl.draw_graph(adata, layout='fr')


sc.tl.louvain(adata) ## compute clusters
# sc.tl.leiden(adata)
# Could not construct partition: Weight vector not the same size as the number of edges.


adata.write('./pbmc3k_reprocessed.h5ad')


$ cellxgene launch --host 0.0.0.0 -p 9001 /data/wangjl/web/webPan.py/dustbin/pbmc3k_reprocessed-scanpy.h5ad

$ cellxgene launch --host 0.0.0.0 -p 9001 pbmc3k_raw.h5ad

不好用....






3. 示例
https://cellxgene.cziscience.com/datasets

简介 https://zhuanlan.zhihu.com/p/436325671







========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------


