Perl


perl语法怪异，符号随性，很难读懂，被嘲笑为 write only 的语言。
这十分不利于交流与团队合作。
如果可能，尽量使用Python等其他语言代替。


perl入门：变量、IO、正则、包 https://qinqianshan.com/software/perl/

一天学会Perl: https://www.jianshu.com/p/8209681f7dec




========================================
概述 与优势
----------------------------------------
1.
安装：默认常见的Linux发行版中都有内置
windows安装包区别：active和Strawberry的区别。后者有gcc。


2.
Perl是一种脚本语言。最初的设计者为拉里·沃尔（Larry Wall），它于1987年12月18日发表。
•Perl借取了C、sed、awk、shell scripting 以及很多其他程式语言的特性。
•其中最重要的特性是他内部集成了正则表达式的功能，以及巨大的第三方代码库CPAN。
•“Pathologically Eclectic Rubbish Lister”“Practical Extraction and Report Language”


3.Why Perl ?
•文本处理强大
•模式匹配（正则表达式）
•不用或很小的修改就可以跨平台运行
•语言简洁
•存在大量的模块
	•CPAN
	•http://search.cpan.org/


4.程序注释：
# 这是注释





##
Perl 是不是快死了？
	卧槽这个轮子好烂，看我来造个更烂的”
	本人的研究领域需要进行大量的文本处理与提取，所用工具一直是Perl。
		Python需要n行代码才能搞定的正则，对于Perl而言也就是几个运算符的事。
	至少有时候解析下日志文件，解析下app跑出的log，还是第一时间想到perl。
	真心的爱用Perl处理文本，已经成本能。Perl还有命令行用法，一行就解决了。
		Perl中有一系列专用的正则运算符，例如，=~、!~、m//、s//……（用过的小朋友不会陌生），无须调用外部的模块和函数。
		在编写的简洁性和执行的效率方面，Perl的正则绝对是老大。
	Perl 支持指针和泛型吗？它有软引用，比指针还要灵活。 它的数组和MATLAB的数组一样好用，随写随有。


用在什么地方/行业？优势是什么？
	生信领域，服务器管理还是有用武之地，IC领域还是历史遗留主力。关键是正则还是很牛逼的，这个真没啥可黑的必要。
	测试用例很多也是用perl脚本生成的。
	Tex Live的安装脚本是Perl写的，PostgreSQL源码中也包含大量的Perl脚本，用来配置编译依赖、批量处理源文件。
	会作为作为UNIX 工具箱就像awk 和sed 那样存在下去的。
	作为脚本语言在数据挖掘、linux系统管理等偏重于面向过程的文本处理分析方面仍然是十分顺手的工具，并且有很多自动化测试领域的工具都是Perl写的，所以显然Perl还活得好好的，只是逐渐淡出了为人们所熟知的Perl CGI开发而已。
	如果你想转行做CS或者金融，python显然是好选项……R也是很易用且应用广泛的……perl的门路就比较窄了
	不需要维护的地方：perl能强大到用一行命令完成python几十行脚本的任务，而且它和写shell命令行差不多，但可以比shell命令行更出色，另外因为这些处理任务的程序一般只用一次，所以没有维护不维护的问题，但用perl写起来非常省时省力。

作图：
	另外建议做统计和图的时候，不想找虐还是优先使用R而不要跟python那些强大但是蛋疼的module摩擦……当然熟练使用的话还是哪个顺手用哪个。

	
版本区别？
	实战用5 兴趣看6 实践从改代码开始切入：所谓的难学都是开始的时候被别人吓到的。
	近些年来感觉到所谓流行趋势的没落，个人觉得还有一部分原因是由于perl 6 和perl 5的割裂。
	perl 6的雄心太庞大，编译器非要自己实现自己，进展异常缓慢



敢问 Perl 比 Python 好在哪里？
1. perl正则好用: sed, awk, grep的正则有细微差异, 难以记忆, 基本上一个正则表达式需要试很久. 
	无比强大且易用的正则表达式。python的正则表达式一样强大，尤其是抓网页很好用，但是用起来要麻烦多了
	perl在onelinar写shell脚本中, 可以替换sed/awk/grep. 只需要记住统一的perl正则即可, 统一简洁好用. 
	Perl 是 sed/awk 的最佳替代品。python 写点正则可比 perl 麻烦多了。

2. perl 单行模式挺好的。适合在 pipeline 中一行干掉几十行python。

3. 繁杂的extension和精简的语言内核很吸引人. 函数(sub)和符号表(%::)都是first-citizen, 所以高阶函数和typeglob都用起来很爽.
	输入输出文件IO要简单省事得多，堪比shell，远方便于python


4. 最最重要原因, 用perl的人, 内心强烈的认为perl比python好, 不用不知道这种偏好是多么强烈. 偏好是一种强烈的执念, 执念容易虚妄. 
5. 其实ruby要比perl和python都好. 但脚本语言, 属于小语种, 熟悉了常用的一种, 就不想学其他小语种了.

6. 形式自由, 可以随心所欲. 用perl写脚本, 可以有多种写法. 想简洁就简洁, 想整洁就整洁, 风格自己定.
	数据结构灵活。hash套hash，hash套array，hash的key套array，hash套hash套hash，非常实用。而且不同数据类型带符号标志，比较好区分







========================================
安装
----------------------------------------
=== Strawberry Perl (64-bit) 5.24.0.1-64bit README ===

What is Strawberry Perl?
------------------------

* 'Perl' is a programming language suitable for writing simple scripts as well
  as complex applications. See http://perldoc.perl.org/perlintro.html

* 'Strawberry Perl' is a perl environment for Microsoft Windows containing all
  you need to run and develop perl applications. It is designed to be as close
  as possible to perl environment on UNIX systems. See http://strawberryperl.com/

* If you are completely new to perl consider visiting http://learn.perl.org/

Installation instructions: (.ZIP distribution only, not .MSI installer)
------------- ------------------ ----------------------- -----------------

* If installing this version from a .zip file, you MUST extract it to a 
  directory that does not have spaces in it - e.g. c:\myperl\
  and then run some commands and manually set some environment variables:

  c:\myperl\relocation.pl.bat         ... this is REQUIRED!
  c:\myperl\update_env.pl.bat         ... this is OPTIONAL

  You can specify " --nosystem" after update_env.pl.bat to install Strawberry 
  Perl's environment variables for the current user only.

* If having a fixed installation path does not suit you, try "Strawberry Perl
  Portable Edition" from http://strawberryperl.com/releases.html

How to use Strawberry Perl?
---------------------------

* In the command prompt window you can:

  1. run any perl script by launching
  
     c:\> perl c:\path\to\script.pl

  2. install additional perl modules (libraries) from http://www.cpan.org/ by

     c:\> cpan Module::Name
  
  3. run other tools included in Strawberry Perl like: perldoc, gcc, dmake ...

* You'll need a text editor to create perl scripts.  One is NOT included with 
  Strawberry Perl. A few options are Padre (which can be installed by running 
  "cpan Padre" from the command prompt) and Notepad++ (which is downloadable at
  http://notepad-plus-plus.org/ ) which both include syntax highlighting
  for perl scripts. You can even use Notepad, if you wish.

 
========================================
版本查看与运行Hello world!
----------------------------------------
1.
D:\R_code\bioToolKit\Perl>perl -v

This is perl 5, version 24, subversion 0 (v5.24.0) built for MSWin32-x64-multi-t
hread

Copyright 1987-2016, Larry Wall

Perl may be copied only under the terms of either the Artistic License or the
GNU General Public License, which may be found in the Perl 5 source kit.

Complete documentation for Perl, including FAQ lists, should be found on
this system using "man perl" or "perldoc perl".  If you have access to the
Internet, point your browser at http://www.perl.org/, the Perl Home Page.



2.
示例程序hello.pl
print “Hello , world!\n”;

打开命令提示符,切换到程序所在目录，然后运行
D:\R_code\bioToolKit\Perl>perl hello.pl
Hello World!



3.运行方式
•在命令行下运行
•切换到程序所在目录
•指定程序的绝对路径
•双击运行
•如何解决一闪而过问题？



4.在notepad++中直接运行？
按下F5，输入如下一行，保存，之后就可以正常运行了。
cmd /k C:\Strawberry\perl\bin\perl.exe "$(FULL_CURRENT_PATH)" &ECHO.&PAUSE&EXIT

"$(FULL_CURRENT_PATH)" 是当前文件的完整路径；
&ECHO. 是打印换行
&PAUSE 暂停批处理文件的处理并显示消息
&EXIT 退出cmd.exe程序（命令行解释程序）




========================================
Perl语言数据结构
----------------------------------------
•标量
	用$开头定义的变量，比如$foo
•数组
	用@开头定义的变量，比如@foo，里面的每个元素都是标量
•联合数组（哈希）
	用％开头定义的变量，比如％foo ，里面的每个元素都是标量
	
注意：
	1.Perl变量名称对大小写敏感, $foo和$Foo是两个不同的变量。
	2.Perl每种数据结构有专门的命名空间, $foo和@foo是两个不同的变量。
	3.显式申明一个变量使用my或者our。

========================================
标量($)
----------------------------------------
•整型
	Perl 最常用的简单变量，$x=10;
•浮点数
	如11.4 、-0.3 、.3 、3. 、54.1e+02 、5.41e03
	$value = 9.01e+21;
•字符串(最常见)
	$number = 11;
	$text = "This text contains the number $number.";
	输出：print $text,"\n";

•实例程序见scalar.pl

 
========================================
操作符
----------------------------------------
•算术操作符
	+(加)、-(减)、*(乘)、/(除)、**(乘幂)、%(取余)、-(单目负)
•整数比较操作符
	<（小于）、>（大于）、==（等于）、<=（小于等于）、>=（大于等于）、!=（不等于）、<=>比较（返回1, 0, or -1）
•字符串比较操作符
	lt（小于）、gt（大于）、eq（等于）、le（小于等于）、ge（大于等于）、ne（不等于）、cmp比较（返回1, 0, or -1）
•逻辑操作符
	逻辑或：$a || $b 或$a or $b 
	逻辑与：$a && $b 或$a and $b
	逻辑非：!$a 或 not $a
•赋值操作符
	=（等于）、+=（加等于）、-=（减等于）、*=（乘等于）、/=（除等于）、%=（余等于）

注意点：


	
========================================
列表和数组(@)
----------------------------------------
•列表
	列表是包含在括号里的一序列的值，可以为任何数值，也可为空，如：(1, 5.3 , "hello" , 2)，空列表：()。
•数组
	列表存贮于数组变量中，与简单变量不同，数组变量以字符"@"打头，如：@array = (1, 2, 3);
	数组存取：对数组中的值通过下标存取，第一个元素下标为0 ，且存取值时，通过标量变量的方式存取，如：
		- 取数组@array的第二个元素为$array[1]，
		- 将4存为@array的第四个元素为$array[3]=4;
		- 此时，数组@array中的元素为：(1,2,3,4)
•实例程序array.pl


注意：perl的数组下标是从0开始的。

========================================
关联数组（%）
----------------------------------------
类比：基本相当于java的HashMap。

•Perl定义了另一种数组，可以用任意简单变量值来访问其元素，这种数组叫做关联数组，也叫哈希表。
•关联数组定义：Perl使用%作为其首字符，如：
	%fruit = ("apples",17,"bananas",9,"oranges","none");
	%fruit=("apples"=>17,"bananas"=>9,"oranges"=>"none")
•访问关联数组的元素:关联数组的下标可以为任何简单/标量值，访问单个元素时以$符号打头，下标用大括号围起来。如：$fruit{"bananas"}
•关联数组循环：
	foreach $price (keys(%fruit)){
		$record = $fruit{$price};
	}
•实例程序hash.pl

	#定义一个hash数组
	%fruit=("apples"=>17,"bananas"=>9,"oranges"=>"none");
	#添加一个元素。注意用$开头！
	$fruit{"nut"}=5;
	
	#put all keys to an array 
	my @anArray=keys(%fruit);

	#遍历该hash数组
	foreach $keys (keys(%fruit)){
		$price = $fruit{$keys};
		print $keys,":",$price. "\n";
	}

	#输出
	print "\n\n";
	print %fruit{"apples"},"\n"; #输出key,value数组
	print $fruit{"apples"},"\n"; #输出value


========================================
文件读写
----------------------------------------
•打开、关闭文件
	语法为open (FH, filename)，其中FH为文件句柄，或者说是程序中用来代表某文件的代号，filename为文件名，其路径可为相对路径，亦可为绝对路径。
	
	打开文件时必须决定访问模式，在PERL中有三种访问模式：读、写和添加。如：
	open(FILE1,"file1"); #读文件打开模式
	open(FILE1, ">file1"); #写文件打开模式
	open(FILE1, ">>file1"); #向文件末尾追加模式
	
	读文件：
	while($line = <FILE1>){
		print $line,"\n"; #为文件每一行的内容
	}
•写文件：
	open(FILE1, ">outfile");
	print FILE1 "Here is an output line.\n";
	close FILE1;#关闭文件：


例1:open.pl 需要从命令行运行，否则会提示找不到文件。
#file read
#open(FILE1, "D:/R_code/bioToolKit/Perl/test.txt") or die $!;
open(FILE1, "test.txt") or die $!;
while($line=<FILE1>){
	print $line;
}
close FILE1;

>perl open.pl #要先保证有这个文件


例2:write.pl 
open(FILE1,">test.txt") or die $!;
print FILE1 "TEST TEST2\n";
print FILE1 "line2 123";
close FILE1;

>perl write.pl #覆盖文件。


========================================
控制结构
----------------------------------------
1.条件判断
if ( <expression>) {
	<statement_block_1>
}elsif( <expression> ) {
	<statement_block_2>
}
...
else{
	<statement_block_3>
}


2.循环

•while循环
while ( <expression> ) {
	<statement block>
}

•for循环
for ($count=1; $count <= 5; $count++) {
	# statements inside the loop go here
}


例1：求1+2+...+100的和for.pl
$sum=0;
for($i=1;$i<=100;$i++){
	$sum += $i;
}
print($sum);

注意：语句末尾一定要有;符号，否则会莫名其妙的报错。


========================================
字符串处理
----------------------------------------
1.大小写转换
$a="This is a book";

$b=uc $a;
print($b); #THIS IS A BOOK

print("\n");

$c=lc $a;
print($c); #this is a book



2.字符串长度
$a="aaa";
print(length($a));#3


3.截取字符
#substr(待截取字符串,截取起始位置,截取终了位置);
$str="012345 this is a book.";
print(substr($str,0,3)); #012
print substr($str,-5); #book.




========================================
正则表达式
----------------------------------------
Perl中两种使用正则表达式的方法，m和s.

一、
•正则表达式，是用来描述或者匹配一系列符合某个句法规则的字符串。
•用来筛选、提取、替换字符串中的特定内容
•类似于Windows/DOS下用于文件查找的通配符，*和?。例如：*.doc，所有的Word文档。这里的*可以当作一种简单的正则表达式。

二、Perl 正则表达式语法

•由反斜线包含：m/def/ ,可略去m,即/def/
•匹配操作符=~（检验匹配是否成功）、!~（检验匹配是否不成功）
•模式中的特殊字符
	1、字符+ ：+意味着一个或多个相同的字符，如：/de+f/指def、deef、deeeeef等
	2、字符[ ]和[^] ：
	[ ]意味着匹配一组字符中的一个，如/a[0123456789]c/将匹配a加数字加c的字符串；
	[^ ]表示除其之外的所有字符，如：/d[^eE]f/匹配d加非e字符加f的字符串
	
	3、字符*和?：
		*{0,}匹配0个、1个或多个相同字符，
		?{0,1}匹配0个或1个该字符
		+{1,,}
	4、匹配任意字符：字符"."匹配除换行外的所有字符，通常与*合用
	5、转义字符：如果你想在模式中包含通常被看作特殊意义的字符，须在其前加斜线“\”。
	6、匹配任意字母或数字：/[0-9a-zA-Z]/
	7、锚模式：
		^ ，仅匹配串首；
		$ 仅匹配串尾

三、模式匹配转义符

转义字符	描述	范围
\d	任意数字	[0-9]
\D	除数字外的任意字符	[^0-9]
\w	任意单词字符	[_0-9a-zA-Z]
\W	任意非单词字符	[^_0-9a-zA-Z]
\s	空白	[ \r\t\n\f]
\S	非空白	[^ \r\t\n\f]


四、两种特殊操作符

1.替换操作符
•语法：s/pattern/replacement/
其效果为将字符串中与pattern匹配的部分换成replacement。如：
	$string = "abc123def";
	$string =~ s/123/456/; # now $string = "abc456def";

2.翻译操作符
•语法：tr/string1/string2/
string2为替换部分，但其效果是把string1中的第一个字符替换为string2中的第一个字符，把string1中的第二个字符替换为string2中的第二个字符，依此类推。如：
	$string = "abcdefghicba";
	$string =~ tr/abc/def/; # now string = "defdefghifed"
当string1比string2长时，其多余字符替换为string2的最后一个字符；
当string1中同一个字符出现多次时，将使用第一个替换字符。




========================================
子程序（函数）
----------------------------------------
1.系统提供的函数
数学函数
	abs
	sin
	cos








2.自定义函数

•定义
sub subroutine
{
	statements;
}
•调用
	&subname; Perl5.0以下版本
	subname;
	do subname;
•返回值
	return (retval); #retval可以为列表


	
例1：#子程序接收参数使用特殊数组@_标明，
#第一个参数是$_[0],第二个是$_[1],依次类推。

$c=add(2,3);
print(add($c,100));

#函数可以先定义再使用
sub add{
	my($a,$b)=@_; # 接收2个参数
	return($a+$b); #返回结果
}



例2：#传递任意个普通参数
$c=add(2,3,4);
print($c);

#可以传递很多参数
sub add{
	my $i; #加my是局部变量
	for($i=0; $i<=$#_;$i++){
		print($_[$i],"\n");
	}
}

print("\$i的值是：",$i);


例3：传递数组的函数














========================================
Perl 程序片段讲解
----------------------------------------
见github.com/dawnEve/bioToolKit/Perl/day2
•dna_to_aa.pl
•reverse_complement.pl
•generate_random_dna.pl

1.#分割一行中的每个字符。
$line="this is a cat";

my @charArr=split("",$line);
foreach my $char (@charArr){
	print $char."\n";
}










========================================
Perl资源
----------------------------------------
•ActivePerl
ActivePerlis the industry-standard Perl distribution available for Windows etc.
http://www.activestate.com/activeperl

•CPAN
Comprehensive Perl Archive Network。第三方代码库，包含Perl模块、脚本、软件源码
http://www.cpan.org/

•Bioperl
http://www.bioperl.org
BioPerlis a collection of Perl modules that facilitate the development of Perl scripts for bioinformatics applications.




========================================
安装、查询 Perl 模块
----------------------------------------
运行MEME报错，说缺少包：
$ meme all.up40_down0-1S_gt5_with4A.fasta -dna -oc ./1S_gt5_with4A -mod zoops -nmotifs 1 -minw 4 -maxw 10 -objfun classic -revcomp -markov_order 0
file: http://y.biomooc.com/wangjl/MEME/all.up40_down0-1S_gt5_with4A.fasta 

Can't locate XML/Parser/Expat.pm in @INC (you may need to install the XML::Parser::Expat module) (@INC contains: /home/wangjl/meme/libexec/meme-5.0.5 /home/wangjl/meme/lib/meme-5.0.5/perl /home/wangjl/perl5/lib/perl5/5.26.2/x86_64-linux-thread-multi /home/wangjl/perl5/lib/perl5/5.26.2 /home/wangjl/perl5/lib/perl5/x86_64-linux-thread-multi /home/wangjl/perl5/lib/perl5 /data/jinwf/wangjl/software/anaconda3/lib/site_perl/5.26.2/x86_64-linux-thread-multi /data/jinwf/wangjl/software/anaconda3/lib/site_perl/5.26.2 /data/jinwf/wangjl/software/anaconda3/lib/5.26.2/x86_64-linux-thread-multi /data/jinwf/wangjl/software/anaconda3/lib/5.26.2 .) at /home/wangjl/meme/lib/meme-5.0.5/perl/CheckingSAX.pm line 12.
BEGIN failed--compilation aborted at /home/wangjl/meme/lib/meme-5.0.5/perl/CheckingSAX.pm line 12.
Compilation failed in require at /data/jinwf/wangjl/software/anaconda3/lib/5.26.2/base.pm line 138.
	...propagated at /data/jinwf/wangjl/software/anaconda3/lib/5.26.2/base.pm line 160.
BEGIN failed--compilation aborted at /home/wangjl/meme/lib/meme-5.0.5/perl/MemeSAX.pm line 3.
Compilation failed in require at /home/wangjl/meme/libexec/meme-5.0.5/meme_xml_to_html line 48.
Warning: meme_xml_to_html exited abnormally and may have failed to create HTML output.



安装包时报错，说找不到c编译器！！
$ cpan -i XML::Parser::Expat
unning install for module 'XML::Parser::Expat'
Checksum for /home/wangjl/.cpan/sources/authors/id/T/TO/TODDR/XML-Parser-2.44.tar.gz ok
Configuring T/TO/TODDR/XML-Parser-2.44.tar.gz with Makefile.PL
Couldn't find your C compiler  #找不到gcc，但是我测试gcc正常可用。
Compilation failed in require at Makefile.PL line 4.
BEGIN failed--compilation aborted at Makefile.PL line 4.
Warning: No success on command[/data/jinwf/wangjl/software/anaconda3/bin/perl Makefile.PL]
  TODDR/XML-Parser-2.44.tar.gz
  /data/jinwf/wangjl/software/anaconda3/bin/perl Makefile.PL -- NOT OK
#

为什么这里使用的是 anaconda3/bin下的perl?



1. 自动安装perl包
$ perl -MCPAN -e shell
帮助
>h 

安装
>install XML::Parser::Expat

退出
>quit

或者 cpan -i 模块名
$ cpan -i YAML
$ cpan -i Log::Log4perl

$ cpan -i XML::Parser::Expat
## 选择默认的'local::lib'。



(2)如果找不到cpan，让输入url：
https://www.cpan.org/SITES.html
China
	http://mirrors.163.com/cpan/
AnHui
	ftp://mirrors.ustc.edu.cn/CPAN/
	http://mirrors.ustc.edu.cn/CPAN/
	rsync://mirrors.ustc.edu.cn/CPAN/
Gansu
	http://mirror.lzu.edu.cn/CPAN/
#



(3)也可以主动修改urllist
https://blog.csdn.net/weixin_33728708/article/details/92584864
$ cpan
cpan[1]> o conf

默认没有配置源，也即使用的官方源，所以这里查不到源信息。

增加源或移出源并提交
cpan[3]> o conf urllist push http://mirrors.aliyun.com/CPAN/
Please use 'o conf commit' to make the config permanent!
cpan[4]> o conf commit
commit: wrote '/usr/share/perl5/CPAN/Config.pm'

也可以一次增加多个源：
cpan[4]> o conf urllist ftp://mirrors.sohu.com/CPAN/ http://mirrors.163.com/cpan/

移出一个源可以使用pop函数，如下：
cpan[3]> o conf urllist pop http://mirrors.163.com/cpan/ ftp://mirrors.sohu.com/CPAN/

再次查看当前源信息
cpan[5]> o conf urllist
    urllist
        0 [http://mirrors.aliyun.com/CPAN/]
Type 'o conf' to view all configuration items


也可以为本地用户自定义一个配置文件，可以配置为root的环境变量文件（原理类似于profile 与 ~/.bash_profile）
# mkdir -p /root/.cpan/CPAN/
# cp /usr/share/perl5/CPAN/Config.pm /root/.cpan/CPAN/MyConfig.pm


重新初始化配置
如果对当前的当前所有的cpan shell 的配置不满意，也可以通过命令重新初始化该文件，如下：
cpan> o conf init





2.检查都安装了哪些模块？
refer: http://www.ttlsa.com/perl/see-the-installation-which-perl-module/
(1)方法1
$ perldoc perllocal| grep Module
Mon May 20 15:10:25 2019: "Module" local::lib
Fri Jun 21 21:12:09 2019: "Module" Test::Deep
Fri Jun 21 21:12:13 2019: "Module" Algorithm::Diff
Fri Jun 21 21:12:16 2019: "Module" Spiffy
Fri Jun 21 21:12:18 2019: "Module" Text::Diff
Fri Jun 21 21:12:25 2019: "Module" Test::Base
Fri Jun 21 21:12:26 2019: "Module" Test::YAML
Fri Jun 21 21:12:37 2019: "Module" YAML
Fri Jun 21 21:14:00 2019: "Module" Log::Log4perl


(2)方法1
$ instmodsh
Available commands are:
   l            - List all installed modules
   m <module>   - Select a module
   q            - Quit the program
cmd? l
Installed modules are:
   Algorithm::Diff
   Log::Log4perl
   Perl
   Spiffy
   Test::Base
   Test::Deep
   Test::YAML
   Text::Diff
   YAML
   local::lib
cmd?

(3)方法3
find `perl -e 'print "@INC"'` -name '*.pm' -print

$ find `perl -e 'print "@INC"'` -name '*.pm' -print | xargs ls -lth | grep -i expat
find: ‘/usr/local/share/perl5’: No such file or directory
-r--r--r--. 1 root   root   34K Jan 12  2015 /usr/local/lib64/perl5/XML/Parser/Expat.pm
-rw-r--r--. 1 root   root   34K Jun  3  2011 /usr/lib64/perl5/vendor_perl/XML/Parser/Expat.pm
-rw-r--r--. 1 root   root   34K Jun  3  2011 /usr/lib64/perl5/vendor_perl/XML/Parser/Expat.pm






3. 如何让MEME正常运行？
(1)原因可能是 /home/wangjl/software/anaconda3/bin 中的perl 及cpan 和系统中的perl有冲突？
$ whereis perl
perl: /usr/bin/perl /data/jinwf/wangjl/software/anaconda3/bin/perl /usr/share/man/man1/perl.1.gz
$ which perl
~/software/anaconda3/bin/perl

$ whereis cpan
cpan: /usr/bin/cpan /data/jinwf/wangjl/software/anaconda3/bin/cpan /usr/share/man/man1/cpan.1.gz
$ which cpan
~/software/anaconda3/bin/cpan


就把anaconda3中的同名函数重命名为
cpan.BuYaoYong
perl.BuYaoYong

直接结果，就是下面两个命令不能使用了：
$ perldoc perllocal| grep Module
$ instmodsh
不知道会有其他什么影响？


MEME测试代码：尽量简化，找一个motif，长度是6-6；
$ meme all.up40_down0-1S_gt5_with4A.fasta -dna -oc ./1S_gt5_with4A -mod zoops -nmotifs 1 -minw 6 -maxw 6 -objfun classic -revcomp -markov_order 0



还是报错：
sh: /home/wangjl/meme/libexec/meme-5.0.5/meme_xml_to_html: /home/wangjl/software/anaconda3/bin/perl: bad interpreter: No such file or directory
Warning: meme_xml_to_html exited abnormally and may have failed to create HTML output.


又把 
cpan.BuYaoYong
perl.BuYaoYong
改回去。




(2) 2019年5月7日3:06安装的perl相关程序可能都有问题，收起到dustbin，使用系统默认perl及其套件。
$ cd software/anaconda3/bin
$ ls -lth | grep perl
-rwxrwxr-x. 1 wangjl jinwf  45K May  7 03:06 perlthanks
-rwxrwxr-x. 1 wangjl jinwf  11K May  7 03:06 perlivp
-rwxrwxr-x. 1 wangjl jinwf  45K May  7 03:06 perlbug
-rwxrwxr-x. 1 wangjl jinwf  316 May  7 03:06 perldoc
-rwxrwxr-x. 2 wangjl jinwf 2.2M Jun  1  2018 perl
-rwxrwxr-x. 2 wangjl jinwf 2.2M Jun  1  2018 perl5.26.2

把perl和cpan相关的都收到dustbin文件夹中: 
$ ls | grep perl|xargs -i mv {} dustbin/
$ ls | grep cpan|xargs -i mv {} dustbin/
$ mv instmodsh dustbin/

这时 perl和cpan已经是系统默认的了
$ which perl
/usr/bin/perl



(3)重新安装包
$ cpan -i XML::Parser::Expat
Reading '/home/wangjl/.cpan/Metadata'
  Database was generated on Thu, 18 Jul 2019 10:41:02 GMT
XML::Parser::Expat is up to date (2.44).

测试包
$ cat aa.pl 
use XML::Parser::Expat
printf("Hello, perl\n");
$ perl aa.pl  #至少包含没有报错
Hello, perl

查询包是否安装：
$ instmodsh  #已经能查到XML::Parser(看来还是推荐使用这个)
$ perldoc perllocal| grep Module #查不到，perl的模块管理渣渣。。。


(4) 修改  /home/wangjl/meme/libexec/meme-5.0.5/meme_xml_to_html 第一行，改为 #!/usr/bin/perl
MEME 正常运行。



(5) 危害可能就是会影响
浏览https://github.com/BenLangmead/bowtie2，发现 bowtie2 大量使用perl。
又因为他们的安装日期一样，我怀疑这个anaconda3/bin下的perl就是bowtie2安装的。
为什么 bowtie2 会被安装到anaconda3/bin下呢？可能 make install 默认是安装到PATH的第一个bin中的？




refer: https://www.cnblogs.com/xianguang/p/9845375.html

========================================
----------------------------------------

========================================
----------------------------------------


========================================
----------------------------------------

========================================
----------------------------------------


========================================
----------------------------------------
