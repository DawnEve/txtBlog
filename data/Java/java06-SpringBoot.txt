java06-SpringBoot



目标技术:

隔壁 IT 圈 B/S 技术，越来越多的采用前后端分离实现，前端（Browser 端）：
	容易上手的 vue+element /iview 或者 react + ant，vue 学习曲线平滑，这里选择 vue；
	前端需要长连接与后端通信，这里引入 websocket 实现。 
	后端（Server 端）使用最常用的 java 微服务架构

需求分析及技术实现
	1. springboot2+mybatis+mysql/postgresql，使用的人多，文档齐全，更新维护频繁。
	数据库熟悉 pg 强于mysql，这里选择 pg。
	2. 需要前端 javascript 实现图形化的分析流程设计器，后面会详细讲，如图 1。
	3. Springboot 提供了计划任务（定时任务）的功能，这里使用 vue+iview 前端表单+ 后端 springboot 自带的Scheduling 实现





========================================
SpringMVC是对Servlet的封装
----------------------------------------

DispatcherServlet（入口）->DispatcherServlet.properties（会初始化的对象）
->HandlerMapping（映射器）->HandlerExecutionChain(映射器+拦截器List) ->
HttpRequestHandlerAdapter(适配器)->HttpMessageConverter(数据转换)





========================================
SpringBoot学习路线图
----------------------------------------
1.SpringBoot学习路线图:
	Java - MySql - Servlet 
		-> Spring 干啥的？
		-> Spring MVC 一个web框架
		-> Mybatis  数据库
		-> Spring boot 最后才到这个

2.SpringBoot 简单步骤
	1.建立实体类，跟数据库表字段保持一致：entity/User.java 全是JavaBean
	2.建立 mapper 接口，定义要操作数据库的动作: mapper/UserMapper.java 全是 接口
@Mapper
public interface UserMapper{
	List<User> findAll();
}
	3.建立 mapper 的xml文件，写具体的sql语句: resources/UserMapper.xml 针对 MyBatis 的
		(1)怎么引入 MyBatis?
			bing 搜 maven mybitis pringboot; 
			找到 https://mvnrepository.com/artifact/org.mybatis.spring.boot
			点击 MyBatis Spring Boot Starter，点最新版 3.0.1，复制文本框中的内容，添加到 pom.xml 中
<!-- https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter -->
<dependency>
    <groupId>org.mybatis.spring.boot</groupId>
    <artifactId>mybatis-spring-boot-starter</artifactId>
    <version>3.0.1</version>
</dependency>
		(2)写入sql语句
<mapper namespace="com.test5.demo.mapper.UserMapper">
	<select id="findAll" resultType="com.test3.demo.entity.User">
		SELECT * FROM user
	</select>
</mapper>
解释: namespace 是使用sql的类，id是该类中的方法，resultType是返回对应的bean
还要在 application.xml 中指定以上xml文件：
mybatis:
	mapper-locations: classpath:mapper/*xml
	4.建立service类，处理业务逻辑：对数据做检查、过滤。
@Service //实例化
public class UserService{
	@Autowired //实例化，依赖注入方式
	private UserMapper userMapper;
	
	public List<User> findAll(){
		return userMapper.findAll();
	}
} 
	5.在controller类中展示处理的结果
@RestController
public class UserController{
	@Autowired
	private UserService userService;
	
	@RequestMapping("/abc")
	public List<User> getUser(){
		return userService.findAll();
	}
}

可以启动、浏览了。

解释：
	controller/ 只和前端交互
	service/ 处理业务逻辑 
	mapper/ 执行数据库操作
	entity/ 和数据库一模一样
	其中的注解，都可以认为是new。这些注解告诉 Spring 容器创建对象并注入。









========================================
SpringBoot2 怎么学? //todo : 前置 Spring, Maven
----------------------------------------

花一两个小时简单看一下spring boot入门教程，然后看部门的业务代码，上手就是干

1. 教程
SpringBoot2: https://www.bilibili.com/video/BV19K4y1L7MT/
Vue2+Vue3: https://www.bilibili.com/video/BV1Zy4y1K7SH/

Java目录: https://www.weixueyuan.net/java/rumen/
SpringBoot2 笔记: https://www.yuque.com/atguigu/springboot
SpringBoot2 官方: https://spring.io/projects/spring-boot


前置知识: 
	Java8+
	Spring:aoc, ioc 是什么? 会使用 Spring
	Maven 3.3+ 的使用





========================================
|-- SpringBoot 项目 //todo
----------------------------------------
责任链模式处理请求

PostMan测试已开发的接口
SpringBoot打包项目，部署到云服务器
Linux服务器环境安装的基本操作
SpringBoot必考真题







========================================
----------------------------------------






========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------








