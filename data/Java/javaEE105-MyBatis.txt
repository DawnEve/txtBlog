MyBatis: 是一个数据持久层框架

javaEE
	表现层
	业务层
	持久层


前置知识： JDBC
	无论是什么的ORM框架（Object Relation Mapping）其实都是在JDBC上封装了一层，底层用的都是JDBC的代码。
	Mybatis作为一个ORM框架，在市面上非常受欢迎，只要有JDBC基础，学会用很简单。



竞争框架：
	手写SQL
	DBUtils
	我觉得 JdbcTemplate 非常好用
	Mybatis 
	Hibernate
	SpringData JPA
		SpringDataJPA 在自动化方面 几乎是吊打mybaits跟那些狗屁插件，甚至连一句SQL都不用写，DDL都可以省了，但是所有的表结构都是高度针对Java对象模型的，对OLAP并不友好
		大家穷尽智力，经过无数次尝试也没能写出对比Hibernate有稳定性能提升的SQL，最后都通过修改表设计、分区、分库分表、业务方妥协或者整体架构的变动来解决性能问题。

		我的经验告诉我，业务复杂到一定程度的时候，对比徒手写SQL和Hibernate自动生成SQL的效率是一种很愚蠢且没有意义的行为，因为决定效率的不是SQL本身，而是整个系统设计、实施的问题。
		如果你的数据库架构很烂，再高的SQL水平也写不出能好的性能。





========================================
MyBatis 简介
----------------------------------------
1. 简介 
(1)官网
https://github.com/mybatis

https://mybatis.org/mybatis-3/ 文档很好
https://mybatis.net.cn/

(2)什么是 MyBatis？
MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。


动态sql
缓存
Mapper代理
逆向工程：通过表的结构，生成我们自己的JavaBean以及对应的Mapper接口和Mapper映射文件。

Mybatis-plus又是程序员偷懒造出的轮子：这款插件说实话我没用过，看了一下官网，大致就是：简单的CRUD，我连XML都不需要了，API直接帮我们内置了对应的CRUD方法


jdbc 的缺点： MyBatis 怎么简化？
	硬编码：
		用户名、密码 -> 写到xml配置文件中，可维护性很强
		SQL语句  -> 抽取到 xml 中
	操作繁琐：
		手动设置参数  -> 后台封装
		手动解析封装结果 -> 后台封装

MyBatis 几乎免除了所有 JDBC 设置参数和解析结果的工作。




(3) 教程
https://mybatis.org/mybatis-3/getting-started.html
https://mybatis.net.cn/getting-started.html
https://blog.csdn.net/lsl5713/article/details/124451398


学习方法: 一两周就可以上手，后面在工作中不断地使用，同时把MyBatis官方文档完整的看上两三遍，定能完全掌握MyBatis。
	http://www.mybatis.cn/archives/789.html



2. mybatis 做了什么？
https://zhuanlan.zhihu.com/p/260090982

(1)mybatis-config.xml是Mybatis的核心配置文件，通过其中的配置可以生成SqlSessionFactory,也就是SqlSession工厂

(2)基于SqlSessionFactory可以生成SqlSession对象

(3)SqlSession是一个既可以发送SQL去执行，并返回结果，类似于JDBC中的Connection对象，也是Mybatis中至关重要的一个对象。

(4)Executor是SqlSession底层的对象，用于执行SQL语句

(5)MapperStatement对象也是SqlSession底层的对象，用于接收输入映射（SQL语句中的参数），以及做输出映射（即将SQL查询的结果映射成相应的结果）





3.使用步骤

(1) 使用传统方式JDBC访问数据库：
	1)使用JDBC访问数据库有大量重复代码（比如注册驱动、获取连接、获取传输器、释放资源等）；
	2)JDBC自身没有连接池，会频繁的创建连接和关闭连接，效率低；
	3)SQL是写死在程序中，一旦修改SQL，需要对类重新编译；
	4)对查询SQL执行后返回的ResultSet对象，需要手动处理，有时会特别麻烦；
	...


(2) 使用mybatis框架访问数据库：

	1)Mybatis对JDBC做了封装，可以简化JDBC代码；
	2)Mybatis自身支持连接池（也可以配置其他的连接池），因此可以提高程序的效率；
	3)Mybatis是将SQL配置在mapper文件中，修改SQL只是修改配置文件，类不需要重新编译。
	4)对查询SQL执行后返回的ResultSet对象，Mybatis会帮我们处理，转换成Java对象。
	...

总之，JDBC中所有的问题（代码繁琐、有太多重复代码、需要操作太多对象、释放资源、对结果的处理太麻烦等），在Mybatis框架中几乎都得到了解决！！





========================================
MyBatis 快速入门 (IDEA 社区版)
----------------------------------------
https://www.bilibili.com/video/BV1MT4y1k7wZ/?p=2

目录:
	Mapper 代理开发
	MyBatis 核心配置文件
	增删改查：基于xml配置文件
	增删改查：基于注解
	动态SQL


1. 创建项目

目标：查询user表中所有数据

步骤：
	1 创建user表，添加数据
	2 创建模块，导入坐标
	3 编写MyBatis核心配置文件 --> 替换连接信息，解决硬编码问题
	4 编写SQL映射文件 --> 统一管理sql语句，解决硬编码问题
	5 编码：
		1 定义pojo类
		2 加载核心配置文件，获取 SqlSessionFactory 对象
		3 获取 SqlSession 对象，执行SQL语句
		4 释放资源


(0) 找一个测试mysql服务

1) 使用Ubuntu上的，版本号：
$ mysql --version
mysql  Ver 8.0.32-0ubuntu0.20.04.2 for Linux on x86_64 ((Ubuntu))
查询默认用户名和密码
	$ sudo cat /etc/mysql/debian.cnf 
	上面，password后面的就是默认密码。
	Server version: 8.0.32-0ubuntu0.20.04.2 (Ubuntu)


用老版本吧，新版本改动太多，不太会。
2) 改用 ubuntu上的docker版，宿主机7070端口映射到容器的3306。
root@b919662117cc:/# mysql --version
mysql  Ver 14.14 Distrib 5.7.18, for Linux (x86_64) using  EditLine wrapper

登录
root@b919662117cc:/# mysql -h y.biomooc.com -P 7070 -u root -p
Enter password: 123456
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 8
Server version: 5.7.18 MySQL Community Server (GPL)

切换数据库:
mysql> use mysql;
mysql> select Host, User, authentication_string from user;
+-----------+-----------+------------------ ------------------------+
| Host      | User      | authentication_string                     |
+-----------+-----------+------------------- -----------------------+
| localhost | root      | *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 |
| localhost | mysql.sys | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |
| %         | root      | *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 |
| %         | wp        | *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 |
| %         | yanpd     | *A20A1D957DC042DF8559A2FD83641CE96742B4D7 |
+-----------+-----------+-------------------- ----------------------+

win10上使用xampp的mysql进行远程连接
> mysql -h y.biomooc.com -P 7070 -u root -p
密码 123456
连接成功。




(1) 创建user表，添加数据

create database mybatis;
use mybatis;
drop table if exists tb_user;

create table tb_user(
	id int primary key auto_increment,
	username varchar(20),
	password varchar(20),
	gender char(1),
	addr varchar(30)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

insert into tb_user values(1, "zhangsan", "123", "M", "北京");
insert into tb_user values(2, "Lily", "234", "F", "广州"), (3, "王五", "345", "M", "上海");


查询:
MySQL [mybatis]> select * from tb_user;
+----+----------+----------+--------+------+
| id | username | password | gender | addr |
+----+----------+----------+--------+------+
|  1 | zhangsan | 123      | M      | 北京 |
|  2 | Lily     | 234      | F      | 广州 |
|  3 | 王五     | 345      | M      | 上海 |
+----+----------+----------+--------+------+
3 rows in set (0.00 sec)





(2) 创建模块，导入坐标
IDEA 社区版
1) 创建父工程
菜单 File - new - project
	Name: MyBatis-demo
	Location: G:\java_code\LearnSpring5
	Java - Maven - jdk17
	adv:
		GroupId: com.mio
		ArtifactId: MyBatis-demo
	在当前窗口打开。


2) 在父工程中引入依赖
$ cat pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.mio</groupId>
    <artifactId>MyBatis-demo</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>


    <dependencies>
        <!-- mybatis 3 的依赖 -->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
            <version>3.5.13</version>
        </dependency>

        <!-- mysql 的依赖 -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.49</version>
        </dependency>

        <!-- junit 的依赖 -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>


        <!-- slf4j 日志api -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>2.0.5</version>
        </dependency>

        <!-- logback-classic 依赖 -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.4.6</version>
        </dependency>

        <!-- logback-core 依赖 -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-core</artifactId>
            <version>1.4.6</version>
        </dependency>

    </dependencies>
    
</project>



3) 创建子模块
右击项目 - new - New Module:
	Name: demo1
	Location: G:\java_code\LearnSpring5\MyBatis-demo(默认)
	Java - Maven - jdk17
	Parent: MyBatis-demo(默认)
	adv:(和父工程一致)
		com.mio
		demo1
	点击create



4) logback 还需要配置文件(接着都在子模块中操作)

内容一会补充
$ cat src/main/resources/logback.xml
<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!--    console表示当前日志信息是可以输出到控制台的-->
    <appender name="Console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>【%level】  %cyan(【%thread】) %boldGreen(%logger{15}) - %msg %n</pattern>
        </encoder>
    </appender>
    <logger name="com.Carter_x" level="DEBUG" additivity="false">
        <appender-ref ref="Console"/>
    </logger>
</configuration>




(3) 编写MyBatis核心配置文件 --> 替换连接信息，解决硬编码问题
https://mybatis.org/mybatis-3/getting-started.html

$ cat src/main/resources/mybatis-config.xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <!-- mysql 连接信息 -->
                <property name="driver" value="com.mysql.jdbc.Driver"/>
                <property name="url" value="jdbc:mysql://y.biomooc.com:7070/mybatis?useSSL=false"/>
                <property name="username" value="root"/>
                <property name="password" value="123456"/>

            </dataSource>
        </environment>
    </environments>

    <mappers>
        <!-- SQL 映射文件 -->
        <mapper resource="UserMapper.xml"/>
    </mappers>
</configuration>








(4) 编写SQL映射文件 --> 统一管理sql语句，解决硬编码问题
$ cat resources/UserMapper.xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mio.UserMapper">
    <select id="selectAll" resultType="com.mio.pojo.User">
        select * from tb_user;
    </select>
</mapper>




(5) 编码：
	0 定义pojo类
	
	1 加载核心配置文件，获取 SqlSessionFactory 对象
	2 获取 SqlSession 对象
	3 执行SQL语句
	4 释放资源


创建实体类
$ cat User.java
package com.mio.pojo;

public class User {
    private Integer id;
    private String username;
    private String password;
    private String gender;
    private String addr;

    @Override
    public String toString() {
        return "User{" +
                "id='" + id + '\'' +
                ", username='" + username + '\'' +
                ", password='" + password + '\'' +
                ", gender='" + gender + '\'' +
                ", addr='" + addr + '\'' +
                '}';
    }
    //...get/set略
}


测试类
$ cat TestUser.java
package com.mio.pojo;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import java.io.IOException;
import java.io.InputStream;
import java.util.List;

// MyBatis 快速入门
public class TestUser {
    public static void main(String[] args) throws IOException {
        //https://mybatis.org/mybatis-3/getting-started.html
        //1.加载核心配置文件，获取 SqlSessionFactory 对象
        String resource = "mybatis-config.xml";
        InputStream inputStream = Resources.getResourceAsStream(resource);
        SqlSessionFactory sqlSessionFactory =
                new SqlSessionFactoryBuilder().build(inputStream);

        //2.获取 SqlSession 对象
        SqlSession sqlSession = sqlSessionFactory.openSession();

        //3.执行SQL语句
        List<User> users = sqlSession.selectList("com.mio.UserMapper.selectAll");
        System.out.println(users);

        //4.释放资源
        sqlSession.close();
    }
}

输出:
[
User{id='1', username='zhangsan', password='123', gender='M', addr='北京'}, 
User{id='2', username='Lily', password='234', gender='F', addr='广州'}, 
User{id='3', username='王五', password='345', gender='M', addr='上海'}]


终于成功输出！








========================================
IDEA 快捷键
----------------------------------------
1. 按照数据表创建pojo类
按列选取：alt+鼠标左键
	id int primary key auto_increment,
	username varchar(20),
	password varchar(20),
	gender char(1),
	addr varchar(30)

变量名后都加空格，然后按照某一列选取之后的字符删掉，并加上分号结尾。
前面按列加上 private String 
最后修改 id 的类型为 Integer。
格式化代码: ctrl+alt+shift+L

(2) alt+insert 创建getter/setter 方法
(3) 输入 toString 的前几个字母，选择提示的第二项，选择全部变量名覆盖该方法。






========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------




========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------




========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------




========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------




========================================
----------------------------------------


========================================
----------------------------------------

