Java 学习准备：环境搭建、时间估计、路线图


廖雪峰视频教程
	https://pan.baidu.com/s/1vlZp8QpyvLHaBXQMDsHIcQ
	提取码：java


========================================
*** Java学习路线图 ***
----------------------------------------
1. 学习路线
入门：Java SE基础-->Java Web(含数据库+H5+js+vue)

中级：Maven-->Git-->SSM框架 -->MybatisPlus-->Spring Boot-->传智健康【项目实战】

进阶：Spring Cloud(微服务开发,学这一套就够了) 
也可分技术点学： (Dubbo-->Zookeeper-->RabbitMQ-->RocketMQ-->Docker-->Redis -->MongoDB-->搜索技术Elasticsearch-->MySQL进阶）

项目：SaaSiHRM【企业服务】-->好客租房【生活服务】-->万信金融【金融行业】-->闪聚支付【聚合支付】-->权限管理一体化解决方案-->短信网关平台以上技术，足以支撑找一份好的java开发工作。

链接：https://www.zhihu.com/question/470828417/answer/2502386643
黑马程序员2022年Java学习路线图 https://zhuanlan.zhihu.com/p/451278356



Spring + SpringMVC + Mybatis: https://www.zhihu.com/question/457890725/answer/2048095339

Java的三个方向：JavaEE，大数据，安卓
	企业级应用: Spring-Rest(Spring MVC): 
	安卓: library 都是C写的。
	大数据: Spark-Spark Streaming(Scalar开发的): 其他语言也有接口



大数据:
	hadoop
	flink/spark

JavaSE 

JavaWeb
	html,css,
	JS Dom, jQ
	XML与Tomcat
	http协议
	服务器端组件 Servlet
	JSP
	EL表达式
	JSTL
	会话控制Cookie和Session
	服务器端组件Filter
	服务器端组件 Listener
	国际化
	异步数据传输框架Ajax
	文件的上传下载
	web项目：书城

JavaEE框架
	系统整体分层解耦框架 Spring
	轻量级Web框架springMVC
	轻量级持久层框架mybatis
	服务器操作系统 Linux
	内存数据库 Redis
	项目架构、jar包管理工具Maven
	项目：众筹(Maven/SVN/SpringBoot/Activity/SpringCloud)







2. 学习方法
(1) 尚硅谷 https://www.bilibili.com/video/BV1Kb411W75N/?p=21
背单词 20个。
公开演讲 2 分钟，一个主题。
考试：昨天的5个题目
每天登记excel，干了什么，打分等。
关于笔记：怎么合理？电子版最好。要有整理的过程。
关于兴趣：天生存在的兴趣，可能后天变得没有了兴趣。后天没有的兴趣，也可以慢慢培养起来。

(2) 开始慢，后面快
前两周会比较慢。
从OOP讲完，开始提速。

(3) 后台语言
Java, PHP, Python, Go, Node.js 











10. 要深入学点东西

最终上了年纪会很吃亏，尤其像我这种只会写代码，搞销售不能喝酒和吹牛，搞管理又缺乏情商低下。
我感受到这种悲哀后，每天晚上看看基础知识和体系，感觉收获很多，自己以前太过浮躁。



比如ioc的实现机制，或者aop的实现机制，或者数据库的链接字符串该如何写这样的初等理论问题
各种绕口的多线程或者线程死锁这样的问题

问了下数据库的事务，大家能说出来加个注解，也知道是用aop实现的。但是注解里面有什么样的参数，如何避免脏读，幻读，不可重复读？基本上都回答不上来了。


再比如数据库悲观锁和乐观锁的问题，更不用说分布式事务了！甚至连权限鉴别的实现也不能说出更深的道道。到使用shiro可以实现权限鉴别，但是如何实现分布式的shiro或者自己定义一些filter或者sessionManage更是闻所未闻。

然后动手搭建一个ssm框架都非常的艰难。一般回答都是这些年公司的框架都是搭建好的，自己只是写写读写删改的业务逻辑，至于这些都是框架考虑的。


至于高并发，大数据，微服务这些框架也只是点到为止。甚至都没机会去深入研究使用。








========================================
|-- Java 过时的技术
----------------------------------------
1. https://www.zhihu.com/question/305924723/answer/557800752
我接触 Java已近20年了，见证了许多Java技术变迁，包括：
JavaEE框架，从百家混战到现在Spring基本一统天下。
Web开发，从标配的SSH到现在SpirngMVC + MyBatis组合。
IDE，从当年如火如荼的JBuilder到Eclipse，再到更好用的IDEA。

JSP: “完全可以放弃对JSP的学习。”
	MVC 的View层，类似的还有 FreeMaker、Velocity，前后端不分
	现在都是前后端分离了，后台模板技术都失去了学习的必要

Struts：“不要再学习Struts了，从Spring MVC开始吧！”
	老牌MVC框架，现在都用 Spring MVC 了

Hibernate：“不需要再学习Hibernate了，学MyBatis就够了。”
	这个太重量级：学习成本高、配置复杂、调优困难
	轻量级的 MyBatis
	如果需要长期维护，还是使用 Hibernate 比较好。


Servlet（要精通）：“Servlet不仅要学，而且要学深，学透。”
	如果你想要彻底掌握某个MVC框架，则必须彻底理解Servlet。
	而且，Servlet作为一个基础设施。精通它，不仅有助于理解各种MVC框架。
	即使Servlet本身，也有很多实用价值。
		如果你深刻理解了Servlet的生命周期，就可以在底层做很多事情。
		譬如在Request进来的时候，进行拦截，进行权限的判定。
		也可以在Response发出的时候，进行拦截，统一检查、统一附加。

JDBC:
	作为较低层的数据库基础设施，JDBC被很多框架（例如MyBatis）支持。
	但在实际开发中，程序员即使不了解也无大碍。

XML:
	XML现在还在广泛应用。但作为一个web数据传输格式，正在逐渐被JSON替代。
	所以，对Java后端学习来说，XML简单了解即可。
	至于庞杂的XML操作API（例如XPath），完全不必学习。将来真要用到，再查也不迟。


废弃的: Applet, Swing


其他言论: 
搞懂了servlet和jsp，玩转spring mvc和structs分分钟的事。
同理会jdbc和数据库操作，hibernate和mybatis上手也不难。
实际上当你玩这些框架想精通的时候，你会被逼着去了解这些“过时”的东西


现在都是vue+springBoot+jpa转微服务了，为啥要放弃Hibernate
	vue是前端框架，这里讨论的是java后端
	springBoot也是Spring呀？它只是简化了传统Spring应用的配置，
		所以才叫boot，它的核心机制还是spring。所以它也只是Spring家族中的一个项目。
	而jpa做为一种持久化规范，仅定义了OR映射的规范，但本身并没有具体实现。
		而在实际项目中，jpa作为一种规范，既有hibernate的实现，也有mybatis的实现。
	而Hibernate作为一个持久层，太重了，好多公司已经不用了。代之用更轻量，更灵活的mybatis。
	至于说微服务，它并不是指代某种具体技术，而是一种编程理念，核心理念包括无状态，整个系统服务化。
		而实现微服务的技术就多了，既可以是SpringMVC，也可以是Structs，也可以说NodeJS，也可以是Python。


(2) 为什么前后端分离？
jsp和asp当年都是构建前端页面的框架，但这俩玩意儿是在服务端以write的方式把HTML写入服务端返回信息从而形成页面的，页面改动困难不说，返回流量大，还加重服务端负担。

所以nginx兴起后开始玩前后端分离，
	web服务端只提供json或xml形式的数据，
	页面都交给了静态服务器，变成了HTML+css+jquery，
	后端的jsp和asp也就淘汰了


(3) 
rpc技术，目前主流有finagle，dubbo，hsf，thrift等，但是建议掌握dubbo/dubbox，无它，源代码其实还是有很多可取地方。

第九. 微服务技术，基本上springcloud全家桶就行了，知道在service层配置ribbot,feign就可以了，至于zipkin，cat等其他技术了解下就知道了，http://spring.io多逛逛，有好处的。目前我生产主推的springboot2.2.2版本


> mysql其实也需要了解innodb存储引擎，但是mysql8.0出来了后，分区表的一些查询用法也要掌握，反正主流现在是mysql8.0了。


> 前端技术
目前前后端分离是主流，国内主要是vue vuex，webpack，
其他less elementui ，js掌握核心匿名函数，回调地狱，作用域链，对于后端来讲就够用了，
反正虽然知乎不少前端大神，但是说句得罪所有前端大佬的话，前端都是玩具。


> 第十九 操作系统
作为工业界，没事多看看linux内核源代码，特别是select epoll机制，这个基本上大厂都会问











========================================
|-- 部署到 Linux 上
----------------------------------------
https://how2j.cn/frontroute

1 .JAVA 基础 --- HelloWorld
2 .JAVA 基础 --- 面向对象
3 .JAVA 基础 --- 变量
4 .JAVA 基础 --- 操作符
5 .JAVA 基础 --- 控制流程
6 .JAVA 基础 --- 数组
7 .JAVA 基础 --- 类和对象
8 .JAVA 基础 --- 接口与继承
9 .JAVA 基础 --- 数字与字符串
10 .JAVA 基础 --- 日期
11 .JAVA 中级 --- 异常处理
12 .JAVA 中级 --- I/O
13 .JAVA 中级 --- 集合框架
14 .JAVA 中级 --- 泛型
15 .JAVA 中级 --- JDBC
16 .前端部分 --- HTML
17 .前端部分 --- CSS
18 .前端部分 --- JavaScript

19 .J2EE --- Tomcat
20 .J2EE --- Servlet
21 .J2EE --- HTTP协议
22 .J2EE --- JSP
23 .工具和中间件 --- 部署到Linux







========================================
|-- 使用 SpringBoot
----------------------------------------
https://how2j.cn/frontroute

1 .JAVA 基础 --- HelloWorld
2 .JAVA 基础 --- 面向对象
3 .JAVA 基础 --- 变量
4 .JAVA 基础 --- 操作符
5 .JAVA 基础 --- 控制流程
6 .JAVA 基础 --- 数组
7 .JAVA 基础 --- 类和对象
8 .JAVA 基础 --- 接口与继承
9 .JAVA 基础 --- 数字与字符串
10 .JAVA 基础 --- 日期
11 .JAVA 中级 --- 异常处理
12 .JAVA 中级 --- I/O
13 .JAVA 中级 --- 集合框架
14 .JAVA 中级 --- 泛型
15 .JAVA 中级 --- JDBC
16 .前端部分 --- HTML
17 .前端部分 --- CSS
18 .前端部分 --- JavaScript

19 .前端部分 --- JSON
20 .前端部分 --- Ajax
21 .前端部分 --- JQuery
22 .J2EE --- Tomcat
23 .J2EE --- Servlet
24 .J2EE --- HTTP协议
25 .J2EE --- JSP
26 .J2EE --- 前后端分离
27 .JAVA 框架 --- Spring
28 .JAVA 框架 --- SpringBoot






========================================
Java 重要思想和书籍
----------------------------------------
1. 思想

(1) 学习真没有捷径，唯一让人省力的方式就是悟性。

哪些是真正的核心思想？
http://swiftlet.net/archives/3124

2023年的目标: 每天2小时，学习Java基础到SpringBoot。






2. 书籍
《Java核心技术》、《Thinking in Java》和《Effective Java》等。
https://zhuanlan.zhihu.com/p/402329452



(1) 关于辅助书籍，只推荐两本
> Core Java 字典
比如学习完了IO的知识，觉得意犹未尽，那么就通过这本字典一样的Java书籍，把IO的知识更丰满的刷一遍，因为已经通过本站做了很多实践操作了，所以这个时候，看这些知识就会触类旁通，比较好消化了。

站长说的Core Java  就是核心技术卷二，不过你说的这2本书，里面的图形化界面(swing，gui) ，其实没必要学了。
而且我建议你看最新的11版。里面有一些很方便的版本新特性
https://manongbook.com/download/1695.html



> Effective Java 零食，提升代码质量
作为初学者，首要任务不是提升质量，而是掌握完成功能的基本手法。这本书就像零食一样，只要主食吃了，你不吃零食也没关系，但是吃点零食会觉得生活质量得到了提升。 本书可以帮你写出更优质的代码，空隙时间可以拿出来看看，不用通看，碰到什么，看什么，一次也不应该看太多，当做有益的课外补充。


(2) 
> Thinking in Java 提升功力
太早看不合适，里面有些概念需要相当的基础才能理解，否则消化不好。 1年左右看，可以提高不少功力，相当于一个十人副本，在你有了一些基本装备之后，去一趟。为以后去25人团队副本添砖加瓦。

> Head First Java 这是给幼儿园小朋友看的
适合完全外行的人看看，页面很多，包含的知识量较少，学习效率较低。

> 官方出的 Java Tutorial BEST OF THE BEST
曾经心中的最好的Java入门教程，没有之一，当然，现在被本站代替了，哇哈哈哈。 本站的建设从这个教程里得到很多启发，比如基于代码的学习方式，有兴趣的可以过一过，前提是你的英语还不错。 缺点是，有些概念翻来覆去地讲，我曾经翻译过Java Tutorial，但是一部分翻来覆去倒腾的理论讲解，让我的胃翻腾了很久。






3.看看AI的回答
怎么学Java
Java是一种跨平台的编程语言，广泛应用于企业级应用、移动应用、游戏开发、云计算等领域。

(1)学习Java需要掌握以下几个方面：

Java基础知识：掌握Java基础知识，如语法、数据类型、运算符、控制语句、方法、类、对象等。
面向对象编程：Java是一种面向对象的编程语言，需要掌握面向对象编程的思想和技能，如封装、继承、多态等。
Java标准库：Java标准库提供了丰富的API，包括输入输出、网络、多线程、集合等方面，需要掌握Java标准库的使用方法。
数据库编程：Java可以通过JDBC或ORM框架来操作数据库，需要掌握数据库编程的基础知识和技能。
Web开发：Java可以通过Servlet、JSP、Spring MVC等技术来开发Web应用程序，需要掌握Web开发的基础知识和技能。
框架和工具：Java有很多框架和工具，如Spring、Hibernate、MyBatis、Maven等，需要掌握这些框架和工具的使用方法。

(2)自学Java可以通过以下几个步骤：

学习Java基础知识：学习Java基础知识，如语法、数据类型、运算符、控制语句、方法、类、对象等。可以通过在线教程、视频课程、Java编程书籍等途径学习。
练习编程：练习编写Java代码，可以通过编写小程序、练习算法、解决编程问题来提高编程能力。
学习面向对象编程：Java是一种面向对象的编程语言，需要掌握面向对象编程的思想和技能，如封装、继承、多态等。
学习Java标准库：Java标准库提供了丰富的API，包括输入输出、网络、多线程、集合等方面，需要掌握Java标准库的使用方法。
学习Web开发：Java可以通过Servlet、JSP、Spring MVC等技术来开发Web应用程序，需要掌握Web开发的基础知识和技能。
练习项目：通过练习项目来巩固Java编程知识，可以从一些开源项目中找到一些练手的项目，并尝试使用Java进行开发。
参加社区和论坛：参加Java编程社区和论坛，与其他Java开发者交流和学习，可以获取更多的Java知识和经验。
总的来说，自学Java需要不断地实践和探索，需要有一定的耐心和毅力。可以通过多种途径来学习和练习Java编程，不断提高自己的技能水平。

(3) 以下是一些比较好的Java编程书籍推荐：

《Java编程思想》（Thinking in Java）：作者Bruce Eckel，这是一本经典的Java编程入门书籍，深入浅出地介绍了Java编程语言的基本概念和技术。
《Head First Java》：作者Kathy Sierra和Bert Bates，这是一本非常适合初学者的Java编程书籍，通过生动有趣的图例和案例，帮助读者快速掌握Java编程的基础知识。
《Effective Java》：作者Joshua Bloch，这是一本讲述Java编程最佳实践的书籍，全面介绍了Java编程中的一些常见问题和最佳解决方案。
《Java核心技术》（Core Java）：作者Cay S. Horstmann和Gary Cornell，这是一本介绍Java编程语言和Java标准库的权威书籍，内容涵盖了Java编程的方方面面。
《Java并发编程实战》（Java Concurrency in Practice）：作者Brian Goetz等，这是一本介绍Java并发编程的经典书籍，详细讲解了Java并发编程的基本概念和技术。
《深入理解Java虚拟机》：作者周志明，这是一本介绍Java虚拟机的书籍，全面深入地讲解了Java虚拟机的工作原理和调优技术。
以上是一些比较好的Java编程书籍推荐，可以帮助读者深入学习和理解Java编程语言。

(4) 以下是一些比较好的Java编程社区和论坛推荐：

Stack Overflow：这是一个全球性的程序员问答社区，可以在其中提问和回答关于Java编程的问题。
GitHub：这是一个代码托管平台，也是一个开源社区，可以在其中找到很多Java项目和开源库，并参与开源项目的贡献和讨论。
Oracle Community：这是Oracle官方的Java社区，提供了Java技术的最新资讯、文档、工具和讨论。
CSDN：这是一个专注于程序员的社区和博客平台，其中有很多Java编程的技术文章、教程和经验分享。
JavaRanch：这是一个Java编程社区和论坛，提供了关于Java编程的讨论、问答和资源分享。
JavaWorld：这是一个Java编程的在线杂志和社区，提供了最新的Java技术资讯、文章和经验分享。

以上是一些比较好的Java编程社区和论坛推荐，可以帮助Java开发者在学习和工作中获取更多的资源和支持。




========================================
**** 另一套流程图 ****
----------------------------------------




========================================
1. Java 语言核心
----------------------------------------
基本语法
面向对象 
集合
文件操作
多线程 
Lambda 表达式 & StreamAPI 
MySQL 数据库核心技术
JDBC 规范与实现

综合: EMS 管理系统/银行管理系统

目标: 夯实语法内功，熟悉各种核心类库，深入理解面向对象思想。



========================================
2. JavaWeb 前后端技术
----------------------------------------
主要是后端部分

Html网页, Css样式, JavaScript 脚本;
XML 配置
Tomcat 服务器
http & 请求 & 响应
Servlet 请求处理
Filter 过滤器
Listener 监听器
Cookie & Session 会话控制

Vue.js 前端框架
Ajax 异步请求
Thymeleaf 模板引擎
综合: 书城

目标: 掌握web原理，熟悉前端技术，为后续框架学习打下基础。


========================================
3. 企业常用技术
----------------------------------------
Maven 项目依赖管理
Spring 容器框架
SpringMVC web框架
MyBatis SQL 框架

MyBatis 增强器 MyBatisPlus
Linux 服务器系统
Redis 数据缓存框架
SpringSecurity 权限框架

综合: 众筹网



========================================
4.分布式系统
----------------------------------------
Git 与 Github版本控制与协同开发
SpringBoot 一站式框架
SpringCloud 系列
	Eureka 注册中心/配置中心
	Hystrix 服务熔断
	OpenFeign 声明式远程调用
	Gateway网关
Docker 容器化
Nginx 反向代理服务
Elasticsearch 检索&分析

SpringCloud Alibaba系列
	Nacos 注册中心/配置中心 
	Sentinel 服务熔断
	Seata 分布式事务
RabbitMQ/Kafka 消息队列
Minio 对象存储
支付SDK
全栈式前后端分离项目: 某融宝/某医通

目标: 深入理解项目架构，熟悉项目真实开发流程。




========================================
5. 互联网架构技术
----------------------------------------
分布式事务与一致性协议
Apache shardingSphere 分库分表
Redisson 数据网格与分布式锁
Apache JMeter系统性能分析与压力测试
组件抽取与自定义 starter
秒杀架构与分析
消息流转与最终一致性系统
Jenkins 持续集成/持续部署
大型分布式项目：某某商城

目的: 掌握行业主流技能，提高开发实战能力。



========================================
6. 大厂面试突击
----------------------------------------
Java 底层源码剖析
JUC底层源码与常见面试问题
JVM系统分析与调优指南
MySQL高级面试精讲
Spring 源码分析
数据结构与算法进阶

目的: 理解底层原理，熟知大厂面试常考技术。



========================================
7. 架构师提升
----------------------------------------
云平台操作实战
Kubernetes容器编排系统实战
DevOps 流水线构建实战
项目与技术选型分析
行业解决方案分析

目的：深入了解架构师级技术要求，全局性规划职业生涯。










========================================
第一讲 java语言概论
----------------------------------------

1人机交互:
图形化界面
命令行界面

(1) 计算机语言: 人与计算机交流的方式。

(2) java语言概述
面向互联网、面向对象。


1) java语言的三种技术架构
j2ee企业版：
j2se标准版
j2me小型版 基本不用了。

JDK1.5，也就是
Java5.0版后，更名为 JavaEE、JavaSE、JavaME

安卓系统：自己的工具包。

2009年，
oracle收购了sun，与ms类似，
有自己的数据库、自己的语言等。

2014 JDK 8.0;

常用的 1.6-1.8之间。



2) java语言的特点：跨平台性
java程序可以在win、linux、mac系统下运行。
也就是具有好的可移植性。
实现方式是虚拟机JVM。虚拟机本身是不跨平台的。
（写虚拟机的都是牛人！！）





(3) java语言的环境搭建
1.3.1什么事JRE, JKD
Java6.0platform

JRE
包括(JVM Java Virtual Machine)和java程序所需的核心类库等。

JDK开发工具包
包括JRE在内，以及开发工具。
安装后放U盘在其他机器也可以用。

下载和安装JDK
配制环境变量。
JDK的bin目录：D:\Program Files\Java\jdk1.6.0_35\bin
都是可执行程序。

命令行简介：
开始运行，输入cmd，进入CMD命令行，java -version
Java version "1.7.0_45"

进入目录 cd命令；进入其他盘，直接输入F:

常见命令：
Md aaa //新建目录
Rm aaa//删除目录
如果目录不是空的，先删除里面的东西，才能删除文件夹。从里往外山。

Del 1.txt //删除文件
Del *.txt//删除txt文件
Del *.*//删除所有文件
*为通配符

Exit 退出dos；

怎么查找命令帮助？
Help //查找所有命令

Help cd //查找cd命令的帮助

配制环境变量
dos命令执行过程：1.在当前目录找；2.如果找不到，在环境变量path中找；3.如果还找不到，则报错。
任何目录都能实现的命令，需要配制【环境变量】。
我的电脑》右键》高级》环境变量》系统变量中 找path，修改值，加入一个; 后面跟着java的bin目录。


安装java环境的步骤：
1.下载安装JDK；
2.改变环境变量；
3.重新打开dos，输入 javac命令，不报错，就成功了。

环境变量配制技巧：
环境变量关系到系统的稳定，更改出错误删会导致不会启动等风险，所以，尽量避免直接修改path。

新建环境变量：JAVA_HOME=f:\jdk\jdk1.6.0
path则设置为：Path=%JAVA_HOME%\bin;


1.3.4 配制环境变量path——临时配制方式
加入已经放到U盘了。
dos命令set，查看所有环境命令
Help set命令查看此命令的帮助；
发现，set path就是直接查看path这个环境变量；
使用命令path=H:\jkd\bin
临时设置java目录到u盘。仅在此dos窗口内有效。

更好的设置方式：
Set path=H:\jkd\bin; %path%

相当于在原来的path中增加了东西。









========================================
|-- 配置 JDK (win10) 和 Eclipse: Java8 & API
----------------------------------------
Java8 API: https://docs.oracle.com/javase/8/docs/api/

1. 配置 JDK 路径
https://www.cnblogs.com/WangYiqiang/p/9735304.html

win10 控制面板，系统。

左侧 高级系统设置。
底部 环境变量。

(1) 点击“系统变量”下面的”新建“选项
在”变量名“处填上”Java_Home“
”变量值“为JDK安装路径，笔者的路径是”D:\Program Files\Java\jdk1.8.0_91“
点击”确定“选项

Java_Home
C:\Program Files\Java\jdk1.8.0_161



(2) 在”系统变量“中找到“Path”
选中”Path“点击”编辑“选项
选择右边的“编辑文本”，将引号里面的全部复制“%Java_Home%\bin;%Java_Home%\jre\bin;”，到“变量值”栏的最前面，“确定”

%Java_Home%\bin;%Java_Home%\jre\bin;

(3) 在“系统变量”栏，“新建”，“变量名”为“CLASSPATH”，“变量值”为“.;%Java_Home%\bin;%Java_Home%\lib\dt.jar;%Java_Home%\lib\tools.jar”，“确定”
CLASSPATH
.;%Java_Home%\bin;%Java_Home%\lib\dt.jar;%Java_Home%\lib\tools.jar;
注意: 添加环境变量，并在CLASSPATH后面加;


(4) 点击“环境变量”最下面的“确定”选项
回到电脑桌面，按快捷键“Win+R”，输入“cmd”
java 
javac
java -version
都要能找到才行。

C:\Users\admin>java -version
java version "1.8.0_291"
Java(TM) SE Runtime Environment (build 1.8.0_291-b10)
Java HotSpot(TM) 64-Bit Server VM (build 25.291-b10, mixed mode)


https://www.cnblogs.com/joker-game/p/13150587.html






2. 配置 Eclipse 

菜单 windows - 首选项 
Java, build path, classpath variable:

以上都不是重点，重点是项目的 .classpath 中的路径在新电脑上是不一样的。

修改方式，右击项目，选择 build path - Configuration path,
选择library选项卡，选择有红叉的条目，点edit，然后替换掉新的路径。
新的路径也在XAMPP中，可以使用 everything 搜索文件名。

eclipse 对项目是整体编译的，如果有报错，则部分也运行不了。必须把所有错误全部处理好。



(1) 老文件
$ cat Java/.classpath
<?xml version="1.0" encoding="UTF-8"?>
<classpath>
	<classpathentry kind="src" path="src"/>
	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>
	<classpathentry kind="lib" path="src/lib/mysql-connector-java-5.1.40-bin.jar"/>
	<classpathentry kind="lib" path="src/lib/servlet-api.jar"/>
	<classpathentry kind="lib" path="F:/xampp/tomcat/lib/jstl-1.2.jar"/>
	<classpathentry kind="lib" path="F:/xampp/tomcat/lib/standard-1.1.2.jar"/>
	<classpathentry kind="output" path="bin"/>
</classpath>


(2) 新文件: 只有这几个jar文件变了
<?xml version="1.0" encoding="UTF-8"?>
<classpath>
	<classpathentry kind="src" path="src"/>
	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
	<classpathentry kind="lib" path="src/lib/mysql-connector-java-5.1.40-bin.jar"/>
	<classpathentry kind="lib" path="src/lib/servlet-api.jar"/>
	<classpathentry kind="lib" path="G:/xampp/tomcat/webapps/examples/WEB-INF/lib/jstl.jar"/>
	<classpathentry kind="lib" path="G:/xampp/tomcat/webapps/examples/WEB-INF/lib/standard.jar"/>
	<classpathentry kind="output" path="bin"/>
</classpath>









========================================
|-- 打包 jar 
----------------------------------------
1. 配置 jdk (jre 不行)
添加路径的例子:  
JAVA_HOME d:\Program Files\Java\jdk1.5.0_02
CLASS_PATH .;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;
Path %JAVA_HOME\bin;

我的实战：失败
JAVA_HOME=C:\Program Files\Java\jdk1.8.0_161
CLASS_PATH .;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;
Path %JAVA_HOME%\bin;


这样成功了，虽然只在当前 cmd 有效，不过够用了: 
G:\java_code\Louvain>
> Path=C:\Program Files\Java\jdk1.8.0_161\bin;
> javac -version
javac 1.8.0_161
>jar -version
用法: jar {ctxui}[vfmn0PMe] [jar-file] [manifest-file] [entry-point] [-C dir] files ...


2. 打包 
https://blog.csdn.net/u012060033/article/details/120693742

(1) 直接打包(失败)
> jar -cvf Louvain.v1.jar *


(2) 修改MANIFEST.MF文件 (失败)
用winRAR软件打开生成的 .jar文件，修改MANIFEST.MF文件，在文件中添加如下一句，并保存到 .jar文件中。这句的意思是说默认执行的主程序的入口。
Main-Class: com.jar.test.MyJarHello

注意：冒号后面有个空格，com.jar.test.MyJarHello最后有个回车。

如果当前类还依赖别的jar包，则在Main-Class下面一行添加如下代码：Class-Path: jar/axis.jar jar/commons-discovery-0.2.jar
上面的jar目录与hello.jar文件放在同一个目录下即可，即：axis.jar和commons-discovery-0.2.jar是相对路径。


==> 上文使用了 package com.jar.test; 
如果没有呢？
Main-Class: ModularityOptimizer
==> 位置也变了
先压缩一个txt文件为rar，双击打开rar界面，填入jar的绝对路径，在 META-INF/MANIFEST.MF
解压出来，添加一行 Main-Class: ModularityOptimizer
然后在移动回压缩包。



(3) 重新构建jar包(成功)

1) 要先编译
>javac *.java

2) 然后把编译文件打包
> jar -cvf Louvain.v1.jar *.class

3) 使用rar压缩软件打开jar包，在 jar包的  META-INF/MANIFEST.MF 文件最后添加一行
Main-Class: ModularityOptimizer





3.运行
> java -jar hello.jar param1 param2

教程: http://www.ludowaltman.nl/slm/
java -jar ModularityOptimizer.jar input_file output_file modularity_function resolution_parameter optimization_algorithm n_random_starts n_iterations random_seed print_output

> java -jar ModularityOptimizer.jar network.txt communities.txt 1 1.0 3 10 10 0 0


(1) try1
> java -jar Louvain.v1.jar G:/xampp/htdocs/bioToolKit/Python/Louvain/data/snn_df.txt G:/xampp/htdocs/bioToolKit/Python/Louvain/backup/result.txt 1 0.5 1 10 10 0 0

报错: Louvain.v1.jar中没有主清单属性
回到打包(2)。


(2) try2
再运行还报错: 错误: 找不到或无法加载主类 ModularityOptimizer
原来要打包的是 class文件。
回到打包(3)


(3) try3: OK
> java -jar Louvain.v1.jar G:/xampp/htdocs/bioToolKit/Python/Louvain/data/snn_df2.txt G:/xampp/htdocs/bioToolKit/Python/Louvain/backup/result.txt 1 0.5 1 10 10 0 0

正常了。
$ head G:/xampp/htdocs/bioToolKit/Python/Louvain/backup/result.txt
9
2

统计结果:
$ cat G:/xampp/htdocs/bioToolKit/Python/Louvain/backup/result.txt | sort | uniq -c | sort -k1nr
    730 0
    480 1
    454 2
    344 3
    278 4
    162 5
    144 6
     32 7
     14 8
      1 9
#

试试分辨率高的
> java -jar Louvain.v1.jar G:/xampp/htdocs/bioToolKit/Python/Louvain/data/snn_df2.txt G:/xampp/htdocs/bioToolKit/Python/Louvain/backup/result.txt 1 1.5 1 10 10 0 0

统计结果:
$ cat G:/xampp/htdocs/bioToolKit/Python/Louvain/backup/result.txt | sort | uniq -c | sort -k1nr
    379 0
    349 1
    344 2
    271 3
    269 4
    255 5
    225 6
    162 7
    160 8
    145 9
     33 10
     32 11
     14 12
      1 13
确实类更多了。
Q: 有一个只有一个元素的类，不好，怎么处理掉？
A: Seurat 4 是在最后一步增加一个处理函数，把孤立点划归到最近的cluster中，最近的定义是什么？貌似 KNN 点落到哪个cluster最多。
注意：画图发现，输出文件的第一行的数字是表示总类数，画图时应该忽略。也就是跳过第一行那个只有一个元素的cluster编号。



(4) R语言可视化检查
# dataset: https://github.com/DawnEve/bioToolKit/tree/master/Python/Louvain

dat2=read.table("backup/UMAP_coord.df.txt", header = T)
head(dat2)
dim(dat2)
#
tmp1=readLines("backup/Lv.cluster.txt")
length(tmp1)
table(tmp1)
dat2$r1=tmp1[2:length(tmp1)]
#
tmp2=readLines("backup/Lv.cluster.txt")
length(tmp2)
table(tmp2)
dat2$r2=tmp2[2:length(tmp2)]
dat2$r2=factor(dat2$r2, 0:(length(unique(dat2$r2))-1) )
#
head(dat2)
library(ggplot2)
p1=ggplot(dat2, aes(x,y, color=r1))+geom_point(size=0.5)+theme_classic()+ggtitle("R=0.5")
p2=ggplot(dat2, aes(x,y, color=r2))+geom_point(size=0.5)+theme_classic()+ggtitle("R=1.5")
p1+p2








========================================
|-- 什么是框架？Utils -> jar -> 组件 -> 框架
----------------------------------------

所谓的“工具”：在单个系统使用叫做“Utils”、被多个系统使用打成jar包叫做“组件”、组件继续发展壮大就叫做“框架”


例如SpringMVC 你在方法上写上对象，传入的参数就会帮你封装到对象上

Mybatis可以让我们只写接口，不写实现类，就可以执行SQL

你在类上加上@Component注解，Spring就帮你创建对象

这些统统都有反射的身影：约定大于配置，配置大于硬编码。










========================================
|-- 编写hello world
----------------------------------------
三大步骤：
1.写代码：将java代码编写成扩展名为.java的文件；
2.编译：进入文件目录，javac命令翻译成java的运行程序；
3.执行：java xxClass
	
	
具体实例：
1.下载并安装jdk；
2.配制环境变量； -- 请百度
	直到命令行输入java -version能查到版本号：

java version "1.7.0_45"
Java(TM) SE Runtime Environment (build 1.7.0_45-b18)
Java HotSpot(TM) Client VM (build 24.45-b08, mixed mode, sharing)

[My PC in 4012]D:\>java -version
java version "1.8.0_66"
Java(TM) SE Runtime Environment (build 1.8.0_66-b18)
Java HotSpot(TM) 64-Bit Server VM (build 25.66-b18, mixed mode)



3.在某个文件夹中新建文本文档HelloWorld.java，内容如下：

//定义一个类名称为HelloWorld
public class HelloWorld {
	//类的主入口函数 
	public static void main(String args[])  {  
		//System.out.println为打印语句，用来显示结果  
		System.out.println("欢迎使用Java来编写程序!");  
	}
}

4.命令行找到该目录，编译文件：javac HelloWorld.java； 
	如果有错误，请按照提示修改文件；
	如果没有错误，则会生成一个HelloWorld.class文件；
5.命令行输入：java HelloWorld，即可看到输出：

F:\java_code\new_hello>java HelloWorld
欢迎使用Java来编写程序!
	
好的，我们第一个java程序运行了！


常见错误：
	1.不要漏泄结尾的分号;
	2.大小写要正确;
	3.文件名、路径要正确，不要隐藏文件扩展名！
	4.public修饰的类，文件名必须和类名一致，否则编译错误。


classpath环境变量
	java语言classpath环境变量，告诉虚拟机怎么执行程序：
	如果没有分号结尾，在classpath中找，找不到就报错。
	如果有分号结尾，在classpath中找，找不到就在当前目录中找，如果还找不到，就报错。
	防止出错，不要加入分号结尾；
	点号代表当前路径，就是>号左边的部分。

找不到文件的原因：
	1.文件名错误（大小写）；
	2.classpath被设置了


小结：
	1.一个java程序包括编写、编译、运行几个步骤；
	2.javac编译时文件要带扩展名；
	3.java运行程序时不要扩展名！
	4.源程序里要有main方法；
	5.源程序的类名和文件名相同，包括大小写；




========================================
javac 手动编译
----------------------------------------
1. javac支持utf-8

https://www.cnblogs.com/shanheshui/p/4993743.html
$ javac -encoding "utf-8"  TestInteger.java
$ javac -encoding utf8  TestInteger.java



2. javac 编译 指定jar: -classpath
javac -encoding UTF-8 -classpath .;C:\Users\chenquan\IdeaProjects\Toy\libs\commons-codec-1.12.jar;C:\Users\chenquan\IdeaProjects\Toy\libs\commons-lang3-3.9.jar -d . C:\Users\chenquan\IdeaProjects\Toy\src\test\SignNatureTest.java


如果jar太多怎么办？
$ javac  -Djava.ext.dirs=path_jars  package.className
解释: path_jars 可以是相对路径也可以是绝对路径


$ javac -Djava.ext.dirs=../lib/ -encoding UTF8 HelloServlet.java



3. 指定编译后的class文件目录 -d . 当前目录

$ javac -Djava.ext.dirs=../lib/ -encoding UTF8 -d D:\ProgramFiles\apache-tomcat-9.0.73\webapps\mywebsite\WEB-INF\classes\ HelloServlet.java

直接把class文件生成到 D:\ProgramFiles\apache-tomcat-9.0.73\webapps\mywebsite\WEB-INF\classes\ 下，会自动按照包名构建路径。








========================================
安装 jdk17，并配置给当前cmd窗口
----------------------------------------
1. 下载
https://www.oracle.com/java/technologies/javase/jdk17-archive-downloads.html
https://download.oracle.com/java/17/archive/jdk-17.0.6_windows-x64_bin.exe

2. 安装
按照之前jdk8的安装位置
C:\Program Files\Java\jdk-17\

后续步骤: https://docs.oracle.com/en/java/javase/17/index.html


3. 配置环境
(1) 查询
win+R 输入cmd，
发现已经是 jdk17了
> java -version
java version "17.0.6" 2023-01-17 LTS


(2)命令行输入

别执行：> setx JAVA_HOME "C:\Program Files\Java\jdk-17" #这个直接修改系统设置了，跳过

>ECHO %PATH%
C:\Program Files\Common Files\Oracle\Java\javapath;C:\Program Files\Java\jdk1.8.0_161\bin;
需要删掉这个刚加上的第一个分号前的部分。
高级系统设置-环境变量，
底部系统变量，找到 Path，编辑，删掉第一个分号前的。

新建 JAVA_HOME17=C:\Program Files\Java\jdk-17\

新开cmd窗口
C:\Users\admin>java -version
java version "1.8.0_161"




4. 怎么在命令行切换两个版本？ 8 vs 17
(1) 这个太繁琐
方法1: https://blog.csdn.net/qq_43391670/article/details/129376847
删除环境变量 
	C:\Program Files\Common Files\Oracle\Java\javapath和
	C:\Program Files (x86)\Common Files\Oracle\Java\javapath
然后配置 JAVA_HOME, JAVA_HOME17
每次修改 path 中的 %JAVA_HOME%\bin OR %JAVA_HOME17%\bin


(2) 可在当前cmd下临时配置path
>java -version
java version "1.8.0_161"

> echo %JAVA_HOME17%
C:\Program Files\Java\jdk-17\

> PATH=%JAVA_HOME17%\bin;%PATH%
>java -version
java version "17.0.6" 2023-01-17 LTS

已经修改为jdk17版本，仅在当前cmd窗口有效。












========================================
eclipse集成开发工具
----------------------------------------
工欲善其事，必先利其器！
使用记事本也行，但是记事本功能薄弱，没有错误提示、引用提示、帮助提示灯。
使用eclipse则能大大加快软件开发的效率，其在性能、效率、便捷性上都有优势。

Eclipse是目前最流行的Java开发工具，在Eclipse中集成了许多工具和插件，从而使Java的开发更容易。Eclipse是一个可以免费使用的软件，可以从Eclipse的官方网站<http://www.eclipse.org/>上下载。解压缩就可以使用，直接下载的Eclipse是英文版，可以下载中文语言包NLpack1-eclipse-SDK-3.2.1-win32.zip从而完成中文版Eclipse的安装。

•下载和安装Eclipse后，就可以使用该集成工具了，双击eclipse.exe文件就可以运行Eclipse。由于篇幅原因，这里读者可以自己熟练一下Ecliopse界面内容。这里主要来讲解如何在Eclipse中进行第一个HelloWorld程序开发。开发步骤如下所示。 
 
•（1）打开Eclipse，选择菜单栏“文件”，再选择级联菜单“新建”，最后选择子菜单“项目”，在弹出的对话框中选择Java项目，并单击按钮“下一步”。 
 
•（2）输入项目名称，例如：FirstProject；在“内容”选项卡中选择“从现有资源创建项目（X）”，然后在目录中找到前面HelloWorld.java的路径。单击“完成”按钮完成项目的创建。 
 
•（3）在“包资源管理器”中单击右键，弹出邮件菜单，选择“新建”->“包”菜单，在弹出对话框的“名称（N）”文本框中输入包名，这里输入FirstBao。 
 
•（4）打开Java编写界面，输入HelloWorld程序。单击运行按钮，就会在下面的控制台窗口中输出“HelloWorld”内容。这样一个Java程序就在Eclipse工具中编写、编译和运行完成。





========================================
|-- Eclipse 快捷键
----------------------------------------
https://www.runoob.com/w3cnote/eclipse-shortcut-keys.html?from=timeline
https://blog.csdn.net/weixin_40918067/article/details/116846952
https://www.runoob.com/eclipse/eclipse-shortcuts.html

ctrl+shift+L 显示快捷键列表。


1. Alt+上下方向键：移动代码行
	这也是个节省时间的法宝。这个组合将当前行的内容往上或下移动。在try/catch部分，这个快捷方式尤其好使。

2. ctrl+alt+上下键：复制当前行

3. ctrl+/ 注释当前行

4. 怎么快速书写输出: alt+/
System.out.print();
输入 syso 按 tab 键，
	或者 alt+/，[推荐后者]。

自动导入包: 
Arrays+ alt+/

clipse故障排除：eclipse不自动弹出提示（alt+/快捷键失效）
http://www.cnblogs.com/shaweng/archive/2013/09/26/3340016.html

次方法用于没有一点提示的情况：依次打开eclipse上面的windows ——preferences ——java ——editor —— content assist ，在右上方有一行“select the proposal kinds contained in the 'default' content assist list” 下面，勾选Java Prolosals 复选框，保存退出即可。


5. 运行 ctrl+F11

6. 新对象 命名及其类型声明
new XXcLass(); 这时 shift+alt+L 可以弹出窗口，给出变量名，确定，自动生成:
XXcLass xxclass = new XXcLass();

7. shift+enter及ctrl+shift+enter
　　Shift+enter在当前行之下创建一个空白行，与光标是否在行末无关。Ctrl+shift+enter则在当前行之前插入空白行。




10. 大小写
ctrl+shift+x -- >变大写
ctrl+shift+y -- >变小写


11.Eclipse 块选择列选择(块选择)命令
这个功能名叫：Toggle Block Selection 
默认快捷键是：Alt + Shift + A 

按下快捷键，鼠标即变成十字形状，就可以选择BLOCK了；如果要多行插入相同内容，只需要选择多行零列，输入即可。 
操作完成后再按下快捷键，退出块选模式。 












========================================
|-- Eclipse 设置
----------------------------------------
######### JDK 版本号！！！
1. Eclipse2022版如何设置JDK版本？
https://blog.csdn.net/gnail_oug/article/details/53610768
需要设置默认jdk！
window-首选项-Java - installed JRE
右侧勾选jdk1.8为默认。

首选项中 Java - Compiler，设置 Compiler compliance level: 1.8.
应用新设置重新编译整个项目。



2. 字太小怎么办？
菜单 window- Preferences 
左侧 General - Appearance -Colors and Fonts
右侧  Basic - 下拉最下面 TEXT FONT - 双击 弹出窗口，选4号字。



3. 换成黑色主题
菜单 window- Preferences
左侧 选择General选项，选择Appearance选项，
右侧 选择其中的Dark主题模式
自动重启。



4. eclipse没有server选项解决方法
卸载重装，选择eclipse for javaEE不要选javaSE。

Oomph 版本:
- 双击，选择 For Entrerprise Java and web Developers
- 安装目录：默认 D盘。
- 启动，选择一个空白目录作为 工作目录 G:\java_code
- 菜单 window - 首选项，左侧有 Server。









========================================
|-- 使用eclipse进行debug
----------------------------------------
1. 基本步骤
(1) 点击eclipse右上角debug按钮

(2) 调出debug面板
点击小蜘蛛图标（不是点绿色三角的Run）

此时会进入debug，这一排小图标会亮起，三个debug的箭头

在代码行数双击可以设置断点


2.三种执行方式 – 键盘快捷键

step into：按F5，单步执行，遇到子函数就进入并且继续单步执行（简而言之，进入子函数）；【会详细得进入所执行的每一步，据说jar文件包也会进去】

step over：按F6，在单步执行时，在函数内遇到子函数时不会进入子函数内单步执行，而是将子函数整个执行完再停止，也就是把子函数整个作为一步。有一点,经过我们简单的调试,在不存在子函数的情况下是和step into效果一样的（简而言之，越过子函数，但子函数会执行）。【也可以理解为只观察当前文件里的代码运行情况，不会跳到别的文件里去】

step out：按F7，当单步执行到子函数内时，用step out就可以执行完子函数余下部分，并返回到上一层函数。【可以快速执行完子函数剩余的代码并返回到上一层】

【F6和F7按下去以后会一直执行到下一个断点处，如果一直按F5，断点没有功能，形同虚设】



3. variables面板
(1) 可以查看当前执行的代码中的参数内部的值
通过三个debug的箭头以及variables面板，就可以查看代码执行的顺序以及参数情况，了解代码内部逻辑

如果有误点，代码没在执行状态，三个debug箭头是灰色的，可以在这个区域点击，选择开始debug的行数，三个debug箭头会变亮

(2) 移除debug过的项目
右键点击debug面板中的项目，选择Terminate and Remove，就可以在面板里移除这个项目


(3) 通过eclipse调用具有软件界面的项目进行debug
注意提前在软件调用的代码前设置断点，不然软件中点了选项后代码会一路执行到底，达不到debug的效果。提前设置断点然后再一步步的调试

比如运行到这个面板的时候，debug会走不动，三个箭头变灰，提交面板中的数据之后，debug才会再次往下走


(4) 各个variable颜色具有的意义
蓝色三角：类中定义的变量
红色方块：私有方法定义
绿色实心圆：共有方法
黄色实心菱形：protected修饰的方法
小黄色空心菱形：protected变量
空心绿色圆环：共有定义变量
突然整个变黄的变量条条：该变量被更新




ref: https://blog.csdn.net/wuyanne/article/details/119594240




========================================
学习Java心得: 多次学习、循序渐进
----------------------------------------
个人心得：

第一.切记不要一上来就找一大本厚书看。这样你绝对会放弃。《Java核心技术》《Java编程思想》等都不适合入门阅读。

第二.先找一个入门级别的java教程看。网上有很多极简入门教程。例如runoob网站、w3cschool网站(它还有手机app)。我记得我一开始入门找的教程，知识面全而精炼简洁，含有基础、spring、Hibernate Servlet Structs Mybatis等,地址如下供参考。http://how2j.cn?p=51259

第三.此时对java有一个整体的认识，找一个小项目，上手练习，边做边查资料。进步会飞快。

第四.这个阶段再回头精读一些java经典书籍，获得内功上的提升。






========================================
计算机组成原理
----------------------------------------



========================================
|-- 二进制: 2/8/16
----------------------------------------
1. 一个bit是内存的最基本单元。就是01中的一个。
1 byte = 8 bit



2. 进制的由来
对于整数，由四种表现形式：
	二进制：0  1,满2进1；
	八进制0-7，满8进1；
	十进制 0-9，满10进1；
	十六进制：1-9A-F,以0x开始

计算机内部都是二进制；
来源于早期的电子开关；

1bit字节=8个二进制位；
1k = 1024;

(2) 如果三个bit位为一组，则得到八进制；

3个一组，就是8进制。
010-101-110
 2   5   6 = 0256



(3) 如果四个bit位为一组，则得到十六进制；
4个一组，就是16进制。
1010-1110
10    14  =0xAE  
 1111(16)=127
所以2进制和16进制常用。8进制不常用。


进制转换

结论：
八进制数，其实就是二进制3位分组；
十六进制数，其实就是二进制4位分组；

负数的二进制表现形式：
	负数就是整数取反再加1；
	负数的二进制的最高位是1；




========================================
|-- 内存的划分：堆和栈
----------------------------------------
内存的划分：
1.寄存器；
2.本地方法区；
3.方法区；
4.栈内存；
5.堆内存；


栈内存：
1存储的都是局部变量；
2变量所属作用域一旦结束，该变量被释放；

堆内存：
1存储的是数组和对象（其实就是数组），new建立的都在堆中；
2特点：每个实体都有首地址；有初始化值；有垃圾回收机制；



========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------












