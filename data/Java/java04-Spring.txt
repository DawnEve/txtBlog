java04-Spring






========================================
Spring: Java 最重要的框架 (两大核心 IoC, AOP)
----------------------------------------
课程大纲
https://www.bilibili.com/video/BV1rt4y1u7q5/

四个部分
IoC 基础容器: 其他组件功能的基础，Bean产生和关系等
AOP 面向切面编程: 用横向抽取思想对Bean进行增强，主要涉及切面配置、声明式事务控制等。
Spring 整合web环境: 方式、原理和整合web层各个MVC框架的思想
web层解决方案-Spring-MVC: 基于MVC思想打造的框架，摆脱 Servlet，用更简单的方式开发web层代码


https://spring.io/

三部曲学 Spring: https://mp.weixin.qq.com/s?__biz=MzU3MTg3NDYwNg==&mid=2247487905&idx=1&sn=2dceeadb4a27516d6392aa2952e1573b


(1)学 Spring 前要学习什么？ 
1) https://www.zhihu.com/question/321913492
	Servlet: 生命周期方法、匹配路径、GET/POST请求及参数处理。
	注解: 怎么实现的？非常重要
	反射: 框架的低层支撑。注解+反射，可以玩出很多花样。
	动态代理: 动态代理的作用是什么？
		Spring用一句话概述就是：一个精巧的Bean容器。它拥有两个非常重要的概念：IoC和AOP。
		IoC: 所谓的控制反转。通俗地讲，就是把原本需要程序员自己创建和维护的一大堆bean统统交由Spring管理。 

2) https://zhuanlan.zhihu.com/p/64001753
结论: 要开始学习 Spring(以IoC和Spring MVC 为核心)，只需要做好三个准备:
	《Java 核心技术》前6章
		第一章：Java程序设计概述
		第二章：Java程序设计环境
		第三章：Java的基本程序设计结构
		第四章：对象与类
		第五章：继承
		第六章：接口、lambda表达式与内部类
	Java反射原理(选学)
	Servlet


解释:  无论是Spring Data，还是Spring Cloud，都是建立在Spring Framework上的一个个具体领域的应用
在实践中，Spring全家桶中使用最广泛就是IOC和Spring MVC。

在Spring Framwork中，包含了Spring体系的核心机制及应用，包括IOC、AOP，SpringMVC、Data Access等。
而且，即使在Spring Framework内部，各个功能之间也不是水平的，而是存在依赖关系的。
其中最底层，最核心的概念有两个：IOC和AOP。两者之间，尤以IOC为重。

所谓的Spring前置知识，某种意义上，就是Spring IOC的前置知识。

对Spring的核心概念IOC来说，并没有涉及任何高深的Java语法，最多也就是接口和抽象类。因此学习Spring IOC，参考《Java核心技术》，只要学到前6章就可以了。

-> 因为Spring IOC的核心机制是建立在Java“反射”基础上的。因此，如果你有兴趣继续探究Spring IOC的核心原理，就有必要提前学习下Java与反射相关的概念。


Spring MVC的运行时建立在两个技术基础上：IOC和Servlet。如果不懂IOC，就搞不明不白Spring MVC是如何配置的。如果不懂Servlet，则就搞不理解Spring是如何注入及拦截Servlet消息的。而之后一旦Spring MVC在运行中出了问题，则必然会茫然不知所措。

虽然Spring MVC中的V（view），最常见的输出目标是JSP页面。但因为现代的企业应用越来越倾向于前后端分离，后端系统只负责输出REST接口。因此在Spring MVC框架中，View这一层就没有存在的必要，学习JSP也就没有价值了。


通俗版: 比如控制反转，依赖注入。在我看来，这俩概念明明可以用类似“自动创建对象”之类通俗易懂的说法替代


3) https://www.zhihu.com/question/321913492/answer/2307232396
为什么需要Spring? 什么是Spring? 
例子。


Bean 是什么? 
在Spring中，由Spring IOC容器进行实例化—>组装管理—>构成程序骨架的对象称为Bean。Bean就是应用程序中众多对象之一。 以上三点串起来就是：Spring内部是一个放置Bean的IoC容器，通过依赖注入的方式处理Bean之间的依赖关系。



4)
Spring，他的前置知识就是普通的java基础，以及XML和注解，我这里的spring是指Spring的核心容器部分。
	bean;
	注解;
	tomcat: 可以不学jsp，转而学习HTML + JS（ES6）+ CSS，HTML和JS通过Ajax和JSON与Servlet沟通
	jsp是在servlet基础上的，jsp在运行的时候就会变成servlet。
	JDBC技术，会操作数据库
	学JavaWEB的其他几个部分，监听器，拦截器等，因为到了spring中你用的其实也是建立在他们的基础上的。
	
	要搞清楚springMVC的处理流程，请求是怎么从mvc的前端servlet到达controller的，然后去学mvc的xml，搞明白各个配置的作用，然后使用注解驱动，替代xml，感受开发效率的提升。

如果你想理解spring的实现方式，怎么做到ioc和aop的，那么你就需要java的反射作为前置知识，了解ioc的aop的思想，以及面向接口编程的重要性，以及工厂模式，这样你就可以仿照Spring的效果实现自己的IoC。





5) 
Spring 的设计思路，永远都是作为 Bean 的容器，去管理好 Bean ，这是它永恒不变的地方。
第二部分，就是 Spring 的内核。Spring 的 ApplicationContext 等核心 API 是没有什么大的变化的。


6)
先学java web相关知识点。重点学会servlet，jsp可以大概了解一下，不要深究。

然后再学spring mvc,spring。可以自己网上搜教程，按教程打建一个web系统。

记祝，不要只看书，实践很重要，理论与实践相结合

建议学完jsp servlet以后学mybatis springmvc spring








========================================
|-- IoC 基础容器: 其他组件功能的基础，Bean产生和关系等
----------------------------------------
目录:
传统
IoC，DI和AOP思想的提出
Spring框架的诞生


1. 传统web开发的问题和解决方法



















========================================
Spring 入门: quickstart
----------------------------------------
https://spring.io/quickstart
1. 下载代码
http://start.spring.io/
Project: Maven
Lang: Java 
Spring Boot: 3.0.5

Project Metadata:
	Group: com.example1
	Artifact: demo2
	Name: demo3
	Description: 
	package name: com.example1.demo2 
	Packaging: Jar
	Java: 8
右边添加包：Spring web
点击底部 下载



2. 解压到文件夹
Eclipse 菜单打开-open Projects from file system

编辑  src/main/java/com/example/demo/DemoApplication.java 
添加注解和方法

@SpringBootApplication
@RestController
public class DemoApplication {
    public static void main(String[] args) {
      SpringApplication.run(DemoApplication.class, args);
    }
    @GetMapping("/hello")
    public String hello(@RequestParam(value = "name", defaultValue = "World") String name) {
      return String.format("Hello %s!", name);
    }
}

解释: 
- hello() 方法接收一个name参数，然后内部拼接字符串后返回。
	* 如果name传入 Amy，则返回 Hello Amy
- @RestController 注解告诉 Spring 这是一个web可访问终点。
- @GetMapping("/hello") 绑定URL  http://localhost:8080/hello 到这个方法
- @RequestParam 声明一个URL参数name，默认值name=world




3.运行

(1) 修改 eclipse 配置文件，使用该全局配置文件
打开eclipse菜单 window-preference-Maven-User Setting
Global settins和 User setting 都填写已经配置好的 maven 设置文件:
	D:\ProgramFiles\apache-maven-3.9.1\conf\settings.xml


(2) 使用 eclipse 执行
右击项目，run as - mvn build ...
Goal: spring-boot:run，勾选底部 Skitp Tests，确定
浏览器访问 
	http://localhost:8080/hello
	http://localhost:8080/hello?name=wangcai


(3) 使用cmd命令行执行
只有 Spring 2.* 才行:
> mvn package -DskipTests #跳过测试
> mvn spring-boot:run

http://localhost:8080/hello2
http://localhost:8080/hello2?name=boy





========================================
|-- 安装 SpringBoot 插件 //失败
----------------------------------------
1. eclipse中打开help-->Eclipse Marketplace

2. 在search栏目下，输入：spring-tool-suite 或者 springboot

3. 找到Spring tool suite(STS) for Eclipse 4，点击installed安装(默认勾选的)即可安装好springboot插件。



或者 (没测试过)
1. 从官网下载插件：Spring Tools 4 for Eclipse
eclipse中打开help-->About Eclipse，找到版本号 Version: 2022-12 (4.26.0)

https://spring.io/tools 下载对应的版本号的插件
https://download.springsource.com/release/STS4/4.18.0.RELEASE/dist/e4.27/spring-tool-suite-4-4.18.0.RELEASE-e4.27.0-win32.win32.x86_64.self-extracting.jar

2. 下载完成，打开eclipse中 菜单 --> Help--> Install new Sofware，点击Add,添加本地下载好的文件，一路next，完成安装。

3. 校验springboot是否安装成功。打开eclipse中Eclipse-->Windows --> Preferences，如果找到spring模块，spring boot 插件安装成功。

没找到！！






========================================
Spring 入门: guide
----------------------------------------
1. 构建一个 REST 服务器
接上例的框架。使用 demo3, SpringBoot 3.*, Java17
注意: Spring会自动加载main所在的包及其子包，所以放到其他地方的类找不到。
(1) 添加 json 文件映射
$ cat Greeting.java
package com.example1.demo3.restservice;
public record Greeting(long id, String content) {}
//自动加载 Jackson包，它会自动把 Greeting 转为 JSON

(2) 添加方法，返回刚定义的 Greeting 类
$ cat RestDemo1.java
package com.example1.demo3.restservice;

import java.util.concurrent.atomic.AtomicLong;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class RestDemo1 {
	private final AtomicLong counter=new AtomicLong();
	private static final String template="Hello, %s!(json)";
	
	/* PostMapping 针对post请求 */
	@GetMapping("/greeting") 
	public Greeting greeting(@RequestParam(value="name", defaultValue = "world") String name) {
		System.out.println("from greeting1");
		System.out.println("json> greeting from: "+name); //本地打印有中文乱码
		return new Greeting(counter.incrementAndGet(), String.format(template, name));
		
	}
}

(3) 启动方式见 上文 quickstart
> mvnw spring-boot:run

浏览器打开  http://localhost:8080/greeting?name=旺财
可看到 {"id":3,"content":"Hello, 旺财!(json)"}


(4) 构建 jar 包 (2.*版本才行)
> mvnw clean package
> java -jar target/gs-rest-service-0.1.0.jar



(5) 控制台中文乱码怎么解决？网页输出正常
在 resources/application.properties 添加: 不起作用
spring.http.encoding.force=true
spring.http.encoding.charset=UTF-8
spring.http.encoding.enabled=true
server.tomcat.uri-encoding=UTF-8

解决方法：help-marketplace - 搜索 Ansi
	安装 ANSI Escape in Console，没用;
	目前无解 //todo




========================================
|-- RESTful 接口模拟: json-server Or 原文推荐的Spring 案例
----------------------------------------
1. 模拟
https://www.jianshu.com/p/474c0431dc01

(1)安装
>npm install json-server

(2) 找一个空文件夹
D:\Temp\test1>

> npm init -y #初始化工程
> npm i json-server -D #添加依赖

# 修改package.json文件
"scripts": {
  "mock": "json-server --watch ./mock_server/db.json --id key --p 13000"
},

在根目录下创建 mock_server/db.json文件
{
  "users": [
    {
      "key": 11,
      "name": "KevinChen"
    },
    {
      "key": 12,
      "name": "KevinChen"
    },
    {
      "key": 13,
      "name": "KevinChen"
    },
    {
      "key": 14,
      "name": "KevinChen"
    },
    {
      "key": 15,
      "name": "KevinChen"
    },
    {
      "key": 16,
      "name": "KevinChen"
    },
    {
      "key": 17,
      "name": "KevinChen"
    },
    {
      "key": 18,
      "name": "KevinChen"
    }
  ],
  "dept": [
    {
      "title": "西安分公司",
      "key": "xian",
      "checkable": false,
      "isDept": true,
      "children": [
        {
          "title": "张叁",
          "key": "张叁"
        },
        {
          "title": "李四",
          "key": "李四"
        },
        {
          "title": "王五",
          "key": "王五"
        }
      ]
    },
    {
      "title": "上海分公司",
      "key": "shanghai",
      "isDept": true,
      "checkable": false,
      "children": [
        {
          "title": "刘平",
          "key": "刘平"
        },
        {
          "title": "陈辰",
          "key": "陈辰"
        },
        {
          "title": "何夕",
          "key": "何夕"
        }
      ]
    }
  ]
}


运行：
> npm run mock


# 获取数据 get
http://localhost:13000
http://localhost:13000/users
http://localhost:13000/users?_page=1&_limit=4 // 分页
http://localhost:13000/dept
http://localhost:13000/dept/xian // 根据id查询
http://localhost:13000/dept?title=西安分公司 // 根据条件查询






2. 最后决定使用原文的项目
(1) 下载
https://github.com/spring-guides/quoters
放到 learngit\ready_projects\quoters

(2) 启动
G:\learngit\ready_projects\quoters>mvn spring-boot:run

(3) 访问
http://localhost:8080/api #返回全部
http://localhost:8080/api/ #返回全部
http://localhost:8080/api/random #访问随机一条

http://localhost:8080/api/1 #访问具体一条
http://localhost:8080/api/2

返回的json结构
{
   type: "success",
   value: {
      id: 10,
      quote: "Really loving Spring Boot, makes stand alone Spring apps easy."
   }
}

(4) 怎么修改 Spring boot 的默认端口号？
try1: 失败
-Dserver.port=端口号
> mvn spring-boot:run -Dserver.port=8081


try2: 失败
修改 resources/application.properties
server.port=8081

> mvn spring-boot:run
http://localhost:8081/api


try3: OK!
> mvn package
> java -jar -Dserver.port=8081 target/quoters-incorporated-0.0.1-SNAPSHOT.jar
http://localhost:8081/api





========================================
|-- RestTemplate 接收 json 数据
----------------------------------------
1. RestTemplate 可以与大多数 RESTful 服务交互
	仅一行代码搞定
	甚至能绑定自定义域类型

都在主方法文件夹内或者其子文件夹内创建，否则找不到。

(1) 创建一个 domain class
$ cat Quote.java
package com.example1.demo3.consumingrest;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

@JsonIgnoreProperties(ignoreUnknown = true)
public record Quote(String type, Value value) {}


解释:
@JsonIgnoreProperties 不匹配的数据，忽视
@JsonProperty 为了防止变量名和json不匹配，可以使用该注释。
	本例匹配，所以没使用


(2) 需要定义 Value 的类
$ cat Value.java
package com.example1.demo3.consumingrest;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

@JsonIgnoreProperties(ignoreUnknown=true)
public record Value(Long id, String quote) {}

使用同样的注释，但是映射到不同的成员变量。


(3) 创建启动方法（好复杂。。。）
需要添加3个元素，来完成接收json并显示的功能
A logger, to send output to the log (the console, in this example).
	输出到日志，比如控制台 
A RestTemplate, which uses the Jackson JSON processing library to process the incoming data.
	RestTemplate 用来从 Jackson JSON 库接收输入的数据
A CommandLineRunner that runs the RestTemplate (and, consequently, fetches our quotation) on startup.
	CommandLineRunner 运行 RestTemplate


$ cat ConsumingRestApp.java
package com.example1.demo3.consumingrest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.web.client.RestTemplate;

@SpringBootApplication
public class ConsumingRestApp {
	private static final Logger log=LoggerFactory.getLogger(ConsumingRestApp.class);

	public static void main(String[] args) {
		SpringApplication.run(ConsumingRestApp.class, args);
	}

	@Bean
	public RestTemplate restTemplate(RestTemplateBuilder builder) {
		return builder.build();
	}
	
	@Bean
	public CommandLineRunner run(RestTemplate restTemplate) throws Exception{
		System.out.println("consuming rest...");
		return args -> {
			Quote quote = restTemplate.getForObject("http://localhost:8081/api/random", Quote.class);
			log.info(quote.toString());
		};
	}
}

准备数据源：使用命令行启动上一节的 quoters 类，指定端口号为 8081。
ready_projects\quoters
> mvn package
> java -jar -Dserver.port=8081 target/quoters-incorporated-0.0.1-SNAPSHOT.jar



在 Eclipse 中选中本类，右击，run as，Java application
注意控制台，能看到相关输出：第一行是控制台输出，最后一行是从REST接口获取的json信息。

consuming rest...
2023-03-31T16:46:18.730+08:00  INFO 8372 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2023-03-31T16:46:18.750+08:00  INFO 8372 --- [           main] c.e.d.consumingrest.ConsumingRestApp     : Started ConsumingRestApp in 2.94 seconds (process running for 3.659)
2023-03-31T16:46:18.920+08:00  INFO 8372 --- [           main] c.e.d.consumingrest.ConsumingRestApp     : Quote[type=success, value=Value[id=10, quote=Really loving Spring Boot, makes stand alone Spring apps easy.]]









========================================
maven 的使用
----------------------------------------
1. Eclipse 中 maven 的设置
菜单 window -首选项-maven
(1) installation 中设置我们自己安装的maven
External, 
地址: D:\ProgramFiles\apache-maven-3.9.1

(2) User Settings
Global Settings: D:\ProgramFiles\apache-maven-3.9.1\conf\settings.xml

底下的本地仓库，自动变为我们在maven中的设置
D:\ProgramFiles\myMavenRepo




2. 新建maven项目
文件结构
└──src
    └──main
        └──java
            └── hello\ 这里对应引入包 package hello;
            	如果包名更长，则文件夹更深


(1) 菜单 file-new-maven project
(2) 勾选第一个 Create a simple project(skip archetype selection)
第二个是否勾选？ Use default workspace location
	勾选，则选择当前工作目录创建项目，比如 G:\java_code\Hello\
	(没测试)不勾选，则选一个空白文件夹: G:\java_code\test2
		创建为 G:\java_code\test2\Hello\
下一步
(3) 配置 GAV 坐标及打包方式
Group Id: com.atcc.maven
Artifact Id: Hello
Version: 默认 0.0.1-SNAPSHOT
Packaging: jar
	Java 工程选 jar
	Web 工程选 war
	父工程选 pom
Finish

(4) 项目创建到哪了呢？
看来是相对于工作目录，在 G:\java_code\Hello\

自动生成的 Maven 的核心配置文件 pom.xml 文件
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.atcc.maven</groupId>
  <artifactId>Hello</artifactId>
  <version>0.0.1-SNAPSHOT</version>
</project>

(5) 配置jar包，在 project 标签内添加
  <dependencies>
	  <dependency>
		  <groupId>junit</groupId>
		  <artifactId>junit</artifactId>
		  <version>4.12</version>
		  <scope>test</scope>
	  </dependency>
  </dependencies>
  
</project>

(6) 编写主代码
菜单 File - new - class 文件，
文件夹: Hello/src/main/java
Package: com.atcc.maven
Name: Hello
在 src/ main /java 目录下创建包并创建 Hello.java 文件

package com.atcc.maven;

public class Hello {
	//主类要有main方法，否则无法执行
	public static void main(String[] args) {
		Hello hello=new Hello();
		System.out.println(hello.say("maven in Eclipse"));
	}

	public String say(String name) {
		return "Hello "+name+"!";
	}
}


(7) 编写测试
菜单 File - new - class 文件
Sourc folder: Hello/src/test/java
Package: com.atcc.maven
Name: HelloTest

在 src/ test /java 目录下创建包并创建 HelloTest.java 文件

package com.atcc.maven;

import org.junit.Test;

public class HelloTest {
	@Test
	public void testSay() {
		Hello hello=new Hello();
		String maven=hello.say("Maven");
		System.out.println(maven);
	}
}

(8) 使用 Maven 的方式运行 Maven 工程
在工程名 Hello 或 pom.xml 上右键 -> Run As: Maven test，运行 Maven 项目
首次运行需要下载一些依赖的jar包。

最后显示 BUILD SUCCESS





3. 使用命令行进行测试
(1) 打开命令行 
进入文件夹 G:\java_code\Hello，在地址栏输入 cmd，回车

查看版本号
G:\java_code\Hello>mvn -v
Apache Maven 3.9.1 (2e178502fcdbffc201671fb2537d0cb4b4cc58f8)

(2) 常用命令
> mvn compile #	编译项目，新class文件在 target/classes 

> mvn package #打包，默认是jar包，位置由 <artifactId> 和 <version> 确定。
	实例: target\Hello-0.0.1-SNAPSHOT.jar

> java -jar target/Hello-0.0.1-SNAPSHOT.jar #运行
报错: target/Hello-0.0.1-SNAPSHOT.jar中没有主清单属性


(3) 有说需要执行main方法的位置 
注意 包名+类名: <mainClass>com.atcc.maven.Hello</mainClass>
设置 pom.xml 文件: 
<build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.2.4</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <transformers>
                                <transformer
                                    implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <mainClass>com.atcc.maven.Hello</mainClass>
                                </transformer>
                            </transformers>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>



重新打包和运行:
> mvn package
> java -jar target/Hello-0.0.1-SNAPSHOT.jar
Hello maven in Eclipse!






4. 声明依赖
模拟一个需求，打印日期时间，不适用java内置的，
使用第三方库  Joda Time libraries

(1) 添加代码
package com.atcc.maven;

import org.joda.time.LocalTime;

public class Hello {
	public static void main(String[] args) {
		Hello hello=new Hello();
		System.out.println(hello.say("maven in Eclipse"));
		
		LocalTime currentTime = new LocalTime();
		System.out.println("The current local time is: " + currentTime);
	}
	
	public String say(String name) {
		return "Hello "+name+"!";
	}
}

有报错，添加 pom.xml 依赖后就正常了。

(2) 修改 pom.xml
	  <dependency>
			<groupId>joda-time</groupId>
			<artifactId>joda-time</artifactId>
			<version>2.9.2</version>
	  </dependency>
  </dependencies>

解释:
groupId 指定包所属的组织
artifactId 指定依赖的包名字
version 版本号
默认 scope 是compile，编译时依赖。如果编译war文件，包含 /WEB-INF/libs 文件夹;
	其他 scope 还包括: 
	provided: 编译依赖，但运行时会提供，比如 Java Servlet API
	test: 编译及运行测试的依赖。不是构建和运行必须的。
如果运行 mvn compile 或 mvn package，Maven 将从中央仓库解决 Joda Time 依赖，并构建成功。


> mvn package
> java -jar target/Hello-0.0.1-SNAPSHOT.jar
Hello maven in Eclipse!
The current local time is: 22:38:36.929





5. 写测试
(1) 修改 pom.xml 文件
<dependency>
	<groupId>junit</groupId>
	<artifactId>junit</artifactId>
	<version>4.12</version>
	<scope>test</scope>
</dependency>

(2) 写测试方法
package com.atcc.maven;

import static org.junit.Assert.assertEquals;

import org.junit.Test;

public class HelloTest {
	@Test
	public void testSay() {
		Hello hello=new Hello();
		String maven=hello.say("Maven");
		//System.out.println(maven);
		
		//是否相等
		assertEquals(maven, "Hello Maven!");
	}
}



(3) 运行
> mvn test
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0


(4) 安装
> mvn install # 会把新建的jar放到本地中央仓库

查看 D:\ProgramFiles\myMavenRepo\com\atcc\maven\Hello\0.0.1-SNAPSHOT
$ ls -lht
total 625K
-rw-r--r-- 1 admin 197121  705 3月  31 22:45 maven-metadata-local.xml
-rw-r--r-- 1 admin 197121  198 3月  31 22:45 _remote.repositories
-rw-r--r-- 1 admin 197121 1.4K 3月  31 22:45 Hello-0.0.1-SNAPSHOT.pom
-rw-r--r-- 1 admin 197121 615K 3月  31 22:45 Hello-0.0.1-SNAPSHOT.jar





https://blog.csdn.net/qq_57391513/article/details/123826378







========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------





========================================
----------------------------------------



========================================
----------------------------------------





========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------





========================================
----------------------------------------



========================================
----------------------------------------





========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



