java04-Spring

https://spring.io/
https://spring.io/projects/spring-framework



========================================
Spring: Java 最重要的框架 (两大核心 IoC, AOP)
----------------------------------------
课程大纲
https://www.bilibili.com/video/BV1rt4y1u7q5/
https://www.imooc.com/video/3662 不要看，讲得太跳跃。


四个部分
IoC 基础容器: 其他组件功能的基础，Bean产生和关系等
AOP 面向切面编程: 用横向抽取思想对Bean进行增强，主要涉及切面配置、声明式事务控制等。
Spring 整合web环境: 方式、原理和整合web层各个MVC框架的思想
web层解决方案-Spring-MVC: 基于MVC思想打造的框架，摆脱 Servlet，用更简单的方式开发web层代码


https://spring.io/

三部曲学 Spring: https://mp.weixin.qq.com/s?__biz=MzU3MTg3NDYwNg==&mid=2247487905&idx=1&sn=2dceeadb4a27516d6392aa2952e1573b


(1)学 Spring 前要学习什么？ 
1) https://www.zhihu.com/question/321913492
	Servlet: 生命周期方法、匹配路径、GET/POST请求及参数处理。
	注解: 怎么实现的？非常重要
	反射: 框架的低层支撑。注解+反射，可以玩出很多花样。
	动态代理: 动态代理的作用是什么？
		Spring用一句话概述就是：一个精巧的Bean容器。它拥有两个非常重要的概念：IoC和AOP。
		IoC: 所谓的控制反转。通俗地讲，就是把原本需要程序员自己创建和维护的一大堆bean统统交由Spring管理。 

2) https://zhuanlan.zhihu.com/p/64001753
结论: 要开始学习 Spring(以IoC和Spring MVC 为核心)，只需要做好三个准备:
	《Java 核心技术》前6章
		第一章：Java程序设计概述
		第二章：Java程序设计环境
		第三章：Java的基本程序设计结构
		第四章：对象与类
		第五章：继承
		第六章：接口、lambda表达式与内部类
	Java反射原理(选学)
	Servlet


解释:  无论是Spring Data，还是Spring Cloud，都是建立在Spring Framework上的一个个具体领域的应用
在实践中，Spring全家桶中使用最广泛就是IOC和Spring MVC。

在Spring Framwork中，包含了Spring体系的核心机制及应用，包括IOC、AOP，SpringMVC、Data Access等。
而且，即使在Spring Framework内部，各个功能之间也不是水平的，而是存在依赖关系的。
其中最底层，最核心的概念有两个：IOC和AOP。两者之间，尤以IOC为重。

所谓的Spring前置知识，某种意义上，就是Spring IOC的前置知识。

对Spring的核心概念IOC来说，并没有涉及任何高深的Java语法，最多也就是接口和抽象类。因此学习Spring IOC，参考《Java核心技术》，只要学到前6章就可以了。

-> 因为Spring IOC的核心机制是建立在Java“反射”基础上的。因此，如果你有兴趣继续探究Spring IOC的核心原理，就有必要提前学习下Java与反射相关的概念。


Spring MVC的运行时建立在两个技术基础上：IOC和Servlet。如果不懂IOC，就搞不明不白Spring MVC是如何配置的。如果不懂Servlet，则就搞不理解Spring是如何注入及拦截Servlet消息的。而之后一旦Spring MVC在运行中出了问题，则必然会茫然不知所措。

虽然Spring MVC中的V（view），最常见的输出目标是JSP页面。但因为现代的企业应用越来越倾向于前后端分离，后端系统只负责输出REST接口。因此在Spring MVC框架中，View这一层就没有存在的必要，学习JSP也就没有价值了。


通俗版: 比如控制反转，依赖注入。在我看来，这俩概念明明可以用类似“自动创建对象”之类通俗易懂的说法替代


3) https://www.zhihu.com/question/321913492/answer/2307232396
为什么需要Spring? 什么是Spring? 
例子。


Bean 是什么? 
在Spring中，由Spring IOC容器进行实例化—>组装管理—>构成程序骨架的对象称为Bean。Bean就是应用程序中众多对象之一。 以上三点串起来就是：Spring内部是一个放置Bean的IoC容器，通过依赖注入的方式处理Bean之间的依赖关系。



4)
Spring，他的前置知识就是普通的java基础，以及XML和注解，我这里的spring是指Spring的核心容器部分。
	bean;
	注解;
	tomcat: 可以不学jsp，转而学习HTML + JS（ES6）+ CSS，HTML和JS通过Ajax和JSON与Servlet沟通
	jsp是在servlet基础上的，jsp在运行的时候就会变成servlet。
	JDBC技术，会操作数据库
	学JavaWEB的其他几个部分，监听器，拦截器等，因为到了spring中你用的其实也是建立在他们的基础上的。
	
	要搞清楚springMVC的处理流程，请求是怎么从mvc的前端servlet到达controller的，然后去学mvc的xml，搞明白各个配置的作用，然后使用注解驱动，替代xml，感受开发效率的提升。

如果你想理解spring的实现方式，怎么做到ioc和aop的，那么你就需要java的反射作为前置知识，了解ioc的aop的思想，以及面向接口编程的重要性，以及工厂模式，这样你就可以仿照Spring的效果实现自己的IoC。





5) 
Spring 的设计思路，永远都是作为 Bean 的容器，去管理好 Bean ，这是它永恒不变的地方。
第二部分，就是 Spring 的内核。Spring 的 ApplicationContext 等核心 API 是没有什么大的变化的。


6)
先学java web相关知识点。重点学会servlet，jsp可以大概了解一下，不要深究。

然后再学spring mvc,spring。可以自己网上搜教程，按教程打建一个web系统。

记祝，不要只看书，实践很重要，理论与实践相结合

建议学完jsp servlet以后学 mybatis springmvc spring






========================================
|-- Spring 简介
----------------------------------------
Spirng 文档: https://docs.spring.io/spring-framework/docs/current/reference/html/

1.作用
- 容器
- 提供了读多种技术的支持
	* JMS
	* MQ 支持
	* UnitTest
	* ...
- AOP(事务管理，日志等)
- 提供了众多方便应用的辅助类(JDBC Template等)
- 对主流应用框架(Hibernate等)提供了良好的支持


2. 使用范围
- 构建企业应用: SpringMVC+Spring+Hibernate/ibatis
- Bean管理
- 单独使用AOP
- 对消息的支持等


3. 什么是框架？
框架就是一套规则，使用该规范或规则，使开发更容易。
- 半成品
- 封装了特定的后处理流程和控制逻辑
- 成熟的、不断升级的软件

类库的组合=框架。

(2) 为什么使用框架
- 软件系统日益复杂
- 重用度高，开发效率和质量提高
- 使软件设计人员专注于需求分析
- 易上手、快速解决问题




4. 接口
对外的说明，内部实现不公开。
Java8中，接口可以拥有方法体。

面向接口编程
	设计时，只需要规定好接口。
		具体的实现类中，根据情况具体实现，可以隐藏，可以调整。

	Flyable bird=new FlyableImpl();
	bird.fly();



5. IoC 控制反转
应用程序需要对象时，不是自己new出来
而是第三方来维护。

DI 依赖注入是其中一种实现方式。

啥反转了？
	获得依赖对象的过程反转了。


(2)IOC 房屋中介的类比
房屋中介
	找中介
	中介介绍房子
	租房、入住

IOC
	找IOC容器
	容器返回对象
	使用对象






6. Spring中Bean配置
Spring把所有管理的对象都叫做Bean。

可以基于xml，或注解声明Bean。

(1) xml 配置
https://www.bbsmax.com/A/VGzlqR87Jb/

<beans>
	<bean id="Flyable" class="com.atcc.ioc.interfaces.FlyableImpl"></bean>
</beans>

这个文件在哪？

Eclipse 新建 Dynamic Web Project
	Project name: BeanDemo
	Location: G:\learngit\dustbin\BeanDemo
	下一步，下一步，勾选 生成 web.xml，finish

新建 Servlet，跳过
	目录 /BeanDemo/src/main/java
	包 com.dawn.bean
	类 BeanDemo

新建 class
	目录 BeanDemo/src/main/java
	包 com.dawn.bean
	类 User

导包:
	右击 build path，library, Classpath - Add External JARs
	选择 maven 仓库的四个核心包
	* spring-beans-6.0.7.jar
	* spring-core-6.0.7.jar
	* spring-context-6.0.7.jar
	* spring-expression-6.0.7.jar
	* commons-logging-1.2.jar

创建spring配置文件，配置创建类
	* spring核心配置文件名和位置不是固定的 建议放到src下面（官方建议名字 applicationContext.xml）
	* 引入schema约束  


报错: Caused by: java.lang.ClassNotFoundException: org.apache.commons.logging.LogFactory
	原因: 缺少类 logging.LogFactory
	解决：没有引入 myMavenRepo\commons-logging\commons-logging\1.2\commons-logging-1.2.jar

src/目录下新建 applicationContext.xml
	Caused by: java.io.FileNotFoundException: class path 
	不对，找不到该文件，改为 包目录，比如 src/main/java/下，正常了。

异常: No bean named 'UserService' available
	原因：多半因该是<bean>里的id的名字和getBean("id名字")不一致。
	解决：确实首字母的大小写不一致。


1) 相关源码
除配置文件，都放在一个目录中了。

$ cat src/main/java/applicationContext.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">
	<bean id="UserService" class="com.dawn.bean.UserServiceImpl"></bean>
</beans>

定义接口
$ cat UserService.java
package com.dawn.bean;
public interface UserService {
	public void setAge(int i);
	public void setName(String string);
	public void say();
}

定义实现
$ cat UserServiceImpl.java
package com.dawn.bean;

public class UserServiceImpl implements UserService{
	private String name;
	private int age;
	//为了简洁，这里略去 setter和getter
	@Override
	public String toString() {
		return "User1 [name=" + name + ", age=" + age + "]";
	}
	
	public UserServiceImpl(String name, int age) {
		System.out.println("有参构造");
		this.name = name;
		this.age = age;
	}
	public UserServiceImpl() {
		super();
		System.out.println("无参构造");
	}
	
	@Override
	public void say() {
		System.out.println(this);
	}
}


测试：
	//1.自己实例化对象
	private static void demo1() {
		UserService user1=new UserServiceImpl();
		user1.setAge(10);
		user1.setName("张三");
		System.out.println(user1);
		user1.say();
	}

	//2.使用Spring实例化对象
	private static void demo2() {
		ApplicationContext context=new ClassPathXmlApplicationContext("applicationContext.xml");
		System.out.println(context);
		UserService user1= (UserServiceImpl) context.getBean("UserService");
		System.out.println(user1);
	}
输出:
//1无参构造
User1 [name=张三, age=10]
User1 [name=张三, age=10]

//2无参构造
org.springframework.context.support.ClassPathXmlApplicationContext@ff5b51f, started on Sun Apr 02 10:15:17 CST 2023
User1 [name=null, age=0]


2) 修改配置文件，按参数名(name)传入参数，有警告（不推荐）
	<bean id="UserService" class="com.dawn.bean.UserServiceImpl">
		<!-- 构造器 方法1：传值 -->
		<constructor-arg name="name" value="张三"></constructor-arg>
		<constructor-arg name="age" value="20"></constructor-arg>
	</bean>
输出:
4月 02, 2023 10:22:17 上午 org.springframework.core.LocalVariableTableParameterNameDiscoverer inspectClass
警告: Using deprecated '-debug' fallback for parameter name resolution. Compile the affected code with '-parameters' instead or avoid its introspection: com.dawn.bean.UserServiceImpl
有参构造
org.springframework.context.support.ClassPathXmlApplicationContext@ff5b51f, started on Sun Apr 02 10:22:17 CST 2023
User1 [name=张三, age=20]



3) 修改配置文件，按参数 下标(index) 传入参数，无警告 
	<bean id="UserService" class="com.dawn.bean.UserServiceImpl">
		<!-- 构造器 方法2：按序号 -->
		<constructor-arg index="0" value="张三"></constructor-arg>
		<constructor-arg index="1" value="21"></constructor-arg>
	</bean>
输出: 
有参构造
org.springframework.context.support.ClassPathXmlApplicationContext@ff5b51f, started on Sun Apr 02 10:26:29 CST 2023
User1 [name=张三, age=21]




(2) 注解配置










========================================
|-- IoC 基础容器: 其他组件功能的基础，Bean产生和关系等
----------------------------------------
目录:
传统
IoC，DI和AOP思想的提出
Spring框架的诞生
	管理应用对象的配置和生命周期，是一种容器
	AOP，分离应用的业务逻辑和系统服务。


1. 传统web开发的问题和解决方法



















========================================
Spring 入门: quickstart
----------------------------------------
https://spring.io/quickstart
1. 下载代码
http://start.spring.io/
Project: Maven
Lang: Java 
Spring Boot: 3.0.5

Project Metadata:
	Group: com.example1
	Artifact: demo2
	Name: demo3
	Description: 
	package name: com.example1.demo2 
	Packaging: Jar
	Java: 8
右边添加包：Spring web
点击底部 下载



2. 解压到文件夹
Eclipse 菜单打开-open Projects from file system

编辑  src/main/java/com/example/demo/DemoApplication.java 
添加注解和方法

@SpringBootApplication
@RestController
public class DemoApplication {
    public static void main(String[] args) {
      SpringApplication.run(DemoApplication.class, args);
    }
    @GetMapping("/hello")
    public String hello(@RequestParam(value = "name", defaultValue = "World") String name) {
      return String.format("Hello %s!", name);
    }
}

解释: 
- hello() 方法接收一个name参数，然后内部拼接字符串后返回。
	* 如果name传入 Amy，则返回 Hello Amy
- @RestController 注解告诉 Spring 这是一个web可访问终点。
- @GetMapping("/hello") 绑定URL  http://localhost:8080/hello 到这个方法
- @RequestParam 声明一个URL参数name，默认值name=world




3.运行

(1) 修改 eclipse 配置文件，使用该全局配置文件
打开eclipse菜单 window-preference-Maven-User Setting
Global settins和 User setting 都填写已经配置好的 maven 设置文件:
	D:\ProgramFiles\apache-maven-3.9.1\conf\settings.xml


(2) 使用 eclipse 执行
右击项目，run as - mvn build ...
Goal: spring-boot:run，勾选底部 Skitp Tests，确定
浏览器访问 
	http://localhost:8080/hello
	http://localhost:8080/hello?name=wangcai


(3) 使用cmd命令行执行
只有 Spring 2.* 才行:
> mvn package -DskipTests #跳过测试
> mvn spring-boot:run

http://localhost:8080/hello2
http://localhost:8080/hello2?name=boy





========================================
|-- 安装 SpringBoot 插件 //失败
----------------------------------------
方案1: 失败
1. eclipse中打开help-->Eclipse Marketplace
2. 在search栏目下，输入：spring-tool-suite 或者 springboot
3. 找到Spring tool suite(STS) for Eclipse 
4.点击installed安装(默认勾选的)即可安装好springboot插件。
报错，总是安装不成功。
	可能是网速不行？

校验springboot是否安装成功。打开eclipse中Eclipse-->Windows --> Preferences，如果找到spring模块，spring boot 插件安装成功。




方案2: 失败
1. help - install new software
2. 根据版本号输入网址
help - about: Version: 2022-12 (4.26.0)
Eclipse 4.26: https://download.springsource.com/release/TOOLS/sts4/update/e4.26/

还是网速问题。





方案3: 基本是失败
https://www.geeksforgeeks.org/how-to-download-and-install-spring-tool-suite-spring-tools-4-for-eclipse-ide/

1. 从官网下载插件：Spring Tools 4 for Eclipse
eclipse中打开help-->About Eclipse，找到版本号 Version: 2022-12 (4.26.0)

https://spring.io/tools 下载对应的版本号的插件
https://download.springsource.com/release/STS4/4.18.0.RELEASE/dist/e4.27/spring-tool-suite-4-4.18.0.RELEASE-e4.27.0-win32.win32.x86_64.self-extracting.jar


2. 解压缩：双击解压缩到文件夹 sts-4.18.0.RELEASE/
双击打开如报错：invalid entry CRC(expected 0xd4802.. but got 0xde...)
	可能下载不完整，重新下载即可。

3. 进入该文件夹，双击 SpringToolSuite4.exe
... 这是启动了一个支持spring的新Eclipse程序？而不是给已有的eclipse 安装了插件？

把它的 D:\安装程序\Java\sts-4.18.0.RELEASE\plugins\ 下的文件复制到 原 Eclipse 对应文件夹下呢？
	关闭 eclipse，复制，再启动 eclipse。







========================================
Spring 入门: guide
----------------------------------------
1. 构建一个 REST 服务器
接上例的框架。使用 demo3, SpringBoot 3.*, Java17
注意: Spring会自动加载main所在的包及其子包，所以放到其他地方的类找不到。
(1) 添加 json 文件映射
$ cat Greeting.java
package com.example1.demo3.restservice;
public record Greeting(long id, String content) {}
//自动加载 Jackson包，它会自动把 Greeting 转为 JSON

(2) 添加方法，返回刚定义的 Greeting 类
$ cat RestDemo1.java
package com.example1.demo3.restservice;

import java.util.concurrent.atomic.AtomicLong;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class RestDemo1 {
	private final AtomicLong counter=new AtomicLong();
	private static final String template="Hello, %s!(json)";
	
	/* PostMapping 针对post请求 */
	@GetMapping("/greeting") 
	public Greeting greeting(@RequestParam(value="name", defaultValue = "world") String name) {
		System.out.println("from greeting1");
		System.out.println("json> greeting from: "+name); //本地打印有中文乱码
		return new Greeting(counter.incrementAndGet(), String.format(template, name));
		
	}
}

(3) 启动方式见 上文 quickstart
> mvnw spring-boot:run

浏览器打开  http://localhost:8080/greeting?name=旺财
可看到 {"id":3,"content":"Hello, 旺财!(json)"}


(4) 构建 jar 包 (2.*版本才行)
> mvnw clean package
> java -jar target/gs-rest-service-0.1.0.jar



(5) 控制台中文乱码怎么解决？网页输出正常
在 resources/application.properties 添加: 不起作用
spring.http.encoding.force=true
spring.http.encoding.charset=UTF-8
spring.http.encoding.enabled=true
server.tomcat.uri-encoding=UTF-8

解决方法：help-marketplace - 搜索 Ansi
	安装 ANSI Escape in Console，没用;
	目前无解 //todo




========================================
|-- RESTful 接口模拟: json-server Or 原文推荐的Spring 案例
----------------------------------------
1. 模拟
https://www.jianshu.com/p/474c0431dc01

(1)安装
>npm install json-server

(2) 找一个空文件夹
D:\Temp\test1>

> npm init -y #初始化工程
> npm i json-server -D #添加依赖

# 修改package.json文件
"scripts": {
  "mock": "json-server --watch ./mock_server/db.json --id key --p 13000"
},

在根目录下创建 mock_server/db.json文件
{
  "users": [
    {
      "key": 11,
      "name": "KevinChen"
    },
    {
      "key": 12,
      "name": "KevinChen"
    },
    {
      "key": 13,
      "name": "KevinChen"
    },
    {
      "key": 14,
      "name": "KevinChen"
    },
    {
      "key": 15,
      "name": "KevinChen"
    },
    {
      "key": 16,
      "name": "KevinChen"
    },
    {
      "key": 17,
      "name": "KevinChen"
    },
    {
      "key": 18,
      "name": "KevinChen"
    }
  ],
  "dept": [
    {
      "title": "西安分公司",
      "key": "xian",
      "checkable": false,
      "isDept": true,
      "children": [
        {
          "title": "张叁",
          "key": "张叁"
        },
        {
          "title": "李四",
          "key": "李四"
        },
        {
          "title": "王五",
          "key": "王五"
        }
      ]
    },
    {
      "title": "上海分公司",
      "key": "shanghai",
      "isDept": true,
      "checkable": false,
      "children": [
        {
          "title": "刘平",
          "key": "刘平"
        },
        {
          "title": "陈辰",
          "key": "陈辰"
        },
        {
          "title": "何夕",
          "key": "何夕"
        }
      ]
    }
  ]
}


运行：
> npm run mock


# 获取数据 get
http://localhost:13000
http://localhost:13000/users
http://localhost:13000/users?_page=1&_limit=4 // 分页
http://localhost:13000/dept
http://localhost:13000/dept/xian // 根据id查询
http://localhost:13000/dept?title=西安分公司 // 根据条件查询






2. 最后决定使用原文的项目
(1) 下载
https://github.com/spring-guides/quoters
放到 learngit\ready_projects\quoters

(2) 启动
G:\learngit\ready_projects\quoters>mvn spring-boot:run

(3) 访问
http://localhost:8080/api #返回全部
http://localhost:8080/api/ #返回全部
http://localhost:8080/api/random #访问随机一条

http://localhost:8080/api/1 #访问具体一条
http://localhost:8080/api/2

返回的json结构
{
   type: "success",
   value: {
      id: 10,
      quote: "Really loving Spring Boot, makes stand alone Spring apps easy."
   }
}

(4) 怎么修改 Spring boot 的默认端口号？
try1: 失败
-Dserver.port=端口号
> mvn spring-boot:run -Dserver.port=8081


try2: 失败
修改 resources/application.properties
server.port=8081

> mvn spring-boot:run
http://localhost:8081/api


try3: OK!
> mvn package
> java -jar -Dserver.port=8081 target/quoters-incorporated-0.0.1-SNAPSHOT.jar
http://localhost:8081/api





========================================
|-- RestTemplate 接收 json 数据
----------------------------------------
1. RestTemplate 可以与大多数 RESTful 服务交互
	仅一行代码搞定
	甚至能绑定自定义域类型

都在主方法文件夹内或者其子文件夹内创建，否则找不到。

(1) 创建一个 domain class
$ cat Quote.java
package com.example1.demo3.consumingrest;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

@JsonIgnoreProperties(ignoreUnknown = true)
public record Quote(String type, Value value) {}


解释:
@JsonIgnoreProperties 不匹配的数据，忽视
@JsonProperty 为了防止变量名和json不匹配，可以使用该注释。
	本例匹配，所以没使用


(2) 需要定义 Value 的类
$ cat Value.java
package com.example1.demo3.consumingrest;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

@JsonIgnoreProperties(ignoreUnknown=true)
public record Value(Long id, String quote) {}

使用同样的注释，但是映射到不同的成员变量。


(3) 创建启动方法（好复杂。。。）
需要添加3个元素，来完成接收json并显示的功能
A logger, to send output to the log (the console, in this example).
	输出到日志，比如控制台 
A RestTemplate, which uses the Jackson JSON processing library to process the incoming data.
	RestTemplate 用来从 Jackson JSON 库接收输入的数据
A CommandLineRunner that runs the RestTemplate (and, consequently, fetches our quotation) on startup.
	CommandLineRunner 运行 RestTemplate


$ cat ConsumingRestApp.java
package com.example1.demo3.consumingrest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.web.client.RestTemplate;

@SpringBootApplication
public class ConsumingRestApp {
	private static final Logger log=LoggerFactory.getLogger(ConsumingRestApp.class);

	public static void main(String[] args) {
		SpringApplication.run(ConsumingRestApp.class, args);
	}

	@Bean
	public RestTemplate restTemplate(RestTemplateBuilder builder) {
		return builder.build();
	}
	
	@Bean
	public CommandLineRunner run(RestTemplate restTemplate) throws Exception{
		System.out.println("consuming rest...");
		return args -> {
			Quote quote = restTemplate.getForObject("http://localhost:8081/api/random", Quote.class);
			log.info(quote.toString());
		};
	}
}

准备数据源：使用命令行启动上一节的 quoters 类，指定端口号为 8081。
ready_projects\quoters
> mvn package
> java -jar -Dserver.port=8081 target/quoters-incorporated-0.0.1-SNAPSHOT.jar



在 Eclipse 中选中本类，右击，run as，Java application
注意控制台，能看到相关输出：第一行是控制台输出，最后一行是从REST接口获取的json信息。

consuming rest...
2023-03-31T16:46:18.730+08:00  INFO 8372 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2023-03-31T16:46:18.750+08:00  INFO 8372 --- [           main] c.e.d.consumingrest.ConsumingRestApp     : Started ConsumingRestApp in 2.94 seconds (process running for 3.659)
2023-03-31T16:46:18.920+08:00  INFO 8372 --- [           main] c.e.d.consumingrest.ConsumingRestApp     : Quote[type=success, value=Value[id=10, quote=Really loving Spring Boot, makes stand alone Spring apps easy.]]









========================================
maven 的使用 (v3.9.1)
----------------------------------------
1. Eclipse 中 maven 的设置
菜单 window -首选项-maven
(1) installation 中设置我们自己安装的maven
External, 
地址: D:\ProgramFiles\apache-maven-3.9.1

(2) User Settings
Global Settings: D:\ProgramFiles\apache-maven-3.9.1\conf\settings.xml

底下的本地仓库，自动变为我们在maven中的设置
D:\ProgramFiles\myMavenRepo




2. 新建maven项目
文件结构
└──src
    └──main
        └──java
            └── hello\ 这里对应引入包 package hello;
            	如果包名更长，则文件夹更深
    └──test
        └──java\ 测试文件


(1) 菜单 file-new-maven project
(2) 勾选第一个 Create a simple project(skip archetype selection)
第二个是否勾选？ Use default workspace location
	勾选，则选择当前工作目录创建项目，比如 G:\java_code\Hello\
	(没测试)不勾选，则选一个空白文件夹: G:\java_code\test2
		创建为 G:\java_code\test2\Hello\
下一步
(3) 配置 GAV 坐标及打包方式
Group Id: com.atcc.maven
Artifact Id: Hello
Version: 默认 0.0.1-SNAPSHOT
Packaging: jar
	Java 工程选 jar
	Web 工程选 war
	父工程选 pom
Finish

(4) 项目创建到哪了呢？
看来是相对于工作目录，在 G:\java_code\Hello\

自动生成的 Maven 的核心配置文件 pom.xml 文件
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.atcc.maven</groupId>
  <artifactId>Hello</artifactId>
  <version>0.0.1-SNAPSHOT</version>
</project>

(5) 配置jar包，在 project 标签内添加
  <dependencies>
	  <dependency>
		  <groupId>junit</groupId>
		  <artifactId>junit</artifactId>
		  <version>4.12</version>
		  <scope>test</scope>
	  </dependency>
  </dependencies>
  
</project>

(6) 编写主代码
菜单 File - new - class 文件，
文件夹: Hello/src/main/java
Package: com.atcc.maven
Name: Hello
在 src/ main /java 目录下创建包并创建 Hello.java 文件

package com.atcc.maven;

public class Hello {
	//主类要有main方法，否则无法执行
	public static void main(String[] args) {
		Hello hello=new Hello();
		System.out.println(hello.say("maven in Eclipse"));
	}

	public String say(String name) {
		return "Hello "+name+"!";
	}
}


(7) 编写测试
菜单 File - new - class 文件
Sourc folder: Hello/src/test/java
Package: com.atcc.maven
Name: HelloTest

在 src/ test /java 目录下创建包并创建 HelloTest.java 文件

package com.atcc.maven;

import org.junit.Test;

public class HelloTest {
	@Test
	public void testSay() {
		Hello hello=new Hello();
		String maven=hello.say("Maven");
		System.out.println(maven);
	}
}

(8) 使用 Maven 的方式运行 Maven 工程
在工程名 Hello 或 pom.xml 上右键 -> Run As: Maven test，运行 Maven 项目
首次运行需要下载一些依赖的jar包。

最后显示 BUILD SUCCESS





3. 使用命令行进行测试
(1) 打开命令行 
进入文件夹 G:\java_code\Hello，在地址栏输入 cmd，回车

查看版本号
G:\java_code\Hello>mvn -v
Apache Maven 3.9.1 (2e178502fcdbffc201671fb2537d0cb4b4cc58f8)

(2) 常用命令
> mvn compile #	编译项目，新class文件在 target/classes 

> mvn package #打包，默认是jar包，位置由 <artifactId> 和 <version> 确定。
	实例: target\Hello-0.0.1-SNAPSHOT.jar

> java -jar target/Hello-0.0.1-SNAPSHOT.jar #运行
报错: target/Hello-0.0.1-SNAPSHOT.jar中没有主清单属性


(3) 有说需要执行main方法的位置 
注意 包名+类名: <mainClass>com.atcc.maven.Hello</mainClass>
设置 pom.xml 文件: 
<build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.2.4</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <transformers>
                                <transformer
                                    implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <mainClass>com.atcc.maven.Hello</mainClass>
                                </transformer>
                            </transformers>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>



重新打包和运行:
> mvn package
> java -jar target/Hello-0.0.1-SNAPSHOT.jar
Hello maven in Eclipse!






4. 声明依赖
模拟一个需求，打印日期时间，不适用java内置的，
使用第三方库  Joda Time libraries

(1) 添加代码
package com.atcc.maven;

import org.joda.time.LocalTime;

public class Hello {
	public static void main(String[] args) {
		Hello hello=new Hello();
		System.out.println(hello.say("maven in Eclipse"));
		
		LocalTime currentTime = new LocalTime();
		System.out.println("The current local time is: " + currentTime);
	}
	
	public String say(String name) {
		return "Hello "+name+"!";
	}
}

有报错，添加 pom.xml 依赖后就正常了。

(2) 修改 pom.xml
	  <dependency>
			<groupId>joda-time</groupId>
			<artifactId>joda-time</artifactId>
			<version>2.9.2</version>
	  </dependency>
  </dependencies>

解释:
groupId 指定包所属的组织
artifactId 指定依赖的包名字
version 版本号
默认 scope 是compile，编译时依赖。如果编译war文件，包含 /WEB-INF/libs 文件夹;
	其他 scope 还包括: 
	provided: 编译依赖，但运行时会提供，比如 Java Servlet API
	test: 编译及运行测试的依赖。不是构建和运行必须的。
如果运行 mvn compile 或 mvn package，Maven 将从中央仓库解决 Joda Time 依赖，并构建成功。


> mvn package
> java -jar target/Hello-0.0.1-SNAPSHOT.jar
Hello maven in Eclipse!
The current local time is: 22:38:36.929





5. 写测试
(1) 修改 pom.xml 文件
<dependency>
	<groupId>junit</groupId>
	<artifactId>junit</artifactId>
	<version>4.12</version>
	<scope>test</scope>
</dependency>

(2) 写测试方法
package com.atcc.maven;

import static org.junit.Assert.assertEquals;

import org.junit.Test;

public class HelloTest {
	@Test
	public void testSay() {
		Hello hello=new Hello();
		String maven=hello.say("Maven");
		//System.out.println(maven);
		
		//是否相等
		assertEquals(maven, "Hello Maven!");
	}
}



(3) 运行
> mvn test
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0


(4) 安装
> mvn install # 会把新建的jar放到本地中央仓库

查看 D:\ProgramFiles\myMavenRepo\com\atcc\maven\Hello\0.0.1-SNAPSHOT
$ ls -lht
total 625K
-rw-r--r-- 1 admin 197121  705 3月  31 22:45 maven-metadata-local.xml
-rw-r--r-- 1 admin 197121  198 3月  31 22:45 _remote.repositories
-rw-r--r-- 1 admin 197121 1.4K 3月  31 22:45 Hello-0.0.1-SNAPSHOT.pom
-rw-r--r-- 1 admin 197121 615K 3月  31 22:45 Hello-0.0.1-SNAPSHOT.jar





https://blog.csdn.net/qq_57391513/article/details/123826378







========================================
定时任务 Scheduling Tasks: 只能有一个main方法(两种启动Spring的方法); jdk17环境设置要考虑 java_home;
----------------------------------------
@Scheduled 注解。

1. 在pom.xml中dependencies内添加依赖
注意：新版本的 awaitility 在本例中不行，要指定版本号 3.1.2

<dependency>
  <groupId>org.awaitility</groupId>
  <artifactId>awaitility</artifactId>
  <version>3.1.2</version>
  <scope>test</scope>
</dependency>

我的测试:
	3.1.2 ok
	4.2.0 ok



2. 创建定时任务
$ cat ScheduledTasks.java
package com.example1.demo3.schedualing;

import java.text.SimpleDateFormat;
import java.util.Date;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

@Component
public class ScheduledTasks {
	private static final Logger log=LoggerFactory.getLogger(ScheduledTasks.class);
	
	private static final SimpleDateFormat dateFormat=new SimpleDateFormat("HH:mm:ss");
	
	@Scheduled(fixedDelay = 5000) //固定时间，单位 毫秒
	public void reportCurrentTime() {
		log.info("The time is now {}", dateFormat.format(new Date()));
	}
}

解释:
@Scheduled 当一个特别的方法运行时，注解被定义
	参数 @Scheduled(fixedRate = 5000) fixedRate表示调用的时间间隔，单位 毫秒
	其他选项包括: fixedDelay 表示任务结束后多久再次调用。
	也可以使用更精细的cron表达式 @Scheduled(cron=". . .")

@Component //todo



3. 启动定时任务
就是在 main 方法中启动应用，并在主类的加注释 @EnableScheduling

$ cat SchedulingTasksApplication.java
package com.example1.demo3.schedualing;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.scheduling.annotation.EnableScheduling;

@SpringBootApplication
@EnableScheduling
public class SchedulingTasksApplication {
	public static void main(String[] args) {
		SpringApplication.run(SchedulingTasksApplication.class, args);
	}
}

解释:
@SpringBootApplication 是一个惯例注释，能添加如下注释
	@Configuration 标记该类为上下文的bean定义
	@EnableAutoConfiguration 告诉 Spring Boot 使用 classpath 添加bean
		如果有 spring-webmvc 标签，则该应用为web应用，能激活关键行为，如 DispatcherServlet
	@ComponentScan 告诉Spring去 com/example 包找其他组件、设置、服务，让它寻找 控制器
@EnableScheduling 后台执行启动。就是定时任务





4.运行项目
(1) 使用 eclipse 运行
而直接点 eclipse 运行，可以运行。

右击项目，run as - mvn build...，
	输入 goal: spring-boot:run，
	勾选 skip test
	确定，还是报错

Execution default-cli of goal org.springframework.boot:spring-boot-maven-plugin:3.0.5:run failed: Unable to find a single main class from the following candidates [com.example1.demo3.Demo3Application, com.example1.demo3.schedualing.SchedulingTasksApplication] -> [Help 1]

是不是只能有一个 main 方法？
	是的。多个main方法会无法编译。
	解决方法：
		之前含有main方法的 ConsumingRestApp 类已注释掉。
		把 SchedulingTasksApplication 中的类整体注释掉
		只保留一个带main方法的类，并在该类上加注解 @EnableScheduling



(2) 使用命令行运行
经过测试，既要求 java -version 版本是17，也要求 java_home 指向jdk17。
	否则报错: 无效的目标发行版: 17

进入目录 G:\learngit\demo3，地址栏输入cmd回车，输入命令:
>path=%JAVA_HOME17%\bin;%path%
>set JAVA_HOME=%JAVA_HOME17%
>java -version
java version "17.0.6" 2023-01-17 LTS

> mvn spring-boot:run




(3)两种启动Spring的方法 区别

1) 在某个有main方法的类文件打开状态，使用 Eclipse 左上角 Run 按钮启动 Spring的方法，
是使用该类作为Spring的入口，该方法可以做测试

2) 真实环境还是要使用命令行编译
	> mvn spring-boot:run #直接运行 [正常打印中文]

	或分成两步：先创建 jar 包，再运行 [正常打印中文]
	> mvn package -DskipTests #打包(跳过测试)
	> java -jar target/demo3-0.0.1-SNAPSHOT.jar #运行

	或在eclipse内 [命令行打印 中文乱码]//todo
	右击项目 run as - mvn build... 
	输入 goal: spring-boot:run 的方式运行
#










========================================
Spring JDBC: relational-data-access/
----------------------------------------
目的: 使用 JdbcTemplate 访问关系数据库。

0. 准备数据库
打算使用mysql默认的数据库，后来发现还要修改该表，只能新建一个测试表。
首先启动数据库服务。

G:\xampp\mysql\bin>mysql  -h localhost -u root -p
> 
> use test;
MariaDB [test]> show tables;
+----------------+
| Tables_in_test |
+----------------+
| students1      |
| user           |
+----------------+

MariaDB [test]> desc user;
+-------+-------------+------+-----+---------+----------------+
| Field | Type        | Null | Key | Default | Extra          |
+-------+-------------+------+-----+---------+----------------+
| id    | int(10)     | NO   | PRI | NULL    | auto_increment |
| name  | varchar(30) | YES  |     | NULL    |                |
+-------+-------------+------+-----+---------+----------------+

MariaDB [test]> select * from user;
+----+----------+
| id | name     |
+----+----------+
|  1 | Lilei    |
|  2 | jim      |
|  3 | Michael  |

算了，还是用其他表吧。
最后发现，不用MySQL。用的是Java实现的H2数据库。




1. 创建 Customer 类
$ cat Customer.java
package com.example1.demo3.relationaldataaccess;

public class Customer {
	private long id;
	private String first_name, last_name;
	
	public Customer(long id, String first_name, String last_name) {
		super();
		this.id = id;
		this.first_name = first_name;
		this.last_name = last_name;
	}

	@Override
	public String toString() {
		return String.format("Costomer[id=%d, first_name=%s, last_name=%s]", 
				id, first_name, last_name);
	}
	// getters & setters omitted for brevity(简洁)
}







2. 保存和检索数据
Spring 提供一个模板类 JdbcTemplate 
方便处理关系数据库SQL和JDBC
	JDBC操作深陷细节：资源获取、链接管理、异常处理、常规错误检查等，和项目主体无关。
	JdbcTemplate 来做以上工作

(1) pom.xml 中添加依赖
bing 搜: spring jdbc maven

	<!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
	<dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-jdbc</artifactId>
	</dependency>


后来又改成了： bing搜索: spring boot jdbc maven
		<dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-jdbc</artifactId>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>


(2) 写方法
$ cat RelationalDataAccessApplication.java
package com.example1.demo3.relationaldataaccess;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.jdbc.core.JdbcTemplate;

@SpringBootApplication
public class RelationalDataAccessApplication implements CommandLineRunner {
	private static final Logger log=LoggerFactory.getLogger(RelationalDataAccessApplication.class);
	
	public static void main(String[] args) {
		SpringApplication.run(RelationalDataAccessApplication.class, args);
	}
	
	@Autowired
	JdbcTemplate jdbcTemplate;

	@SuppressWarnings("deprecation")
	@Override
	public void run(String... args) throws Exception {
		log.info("Creating tables");
		jdbcTemplate.execute("DROP TABLE customers IF EXISTS");
		jdbcTemplate.execute("CREATE TABLE customers(" +
		        "id SERIAL, first_name VARCHAR(255), last_name VARCHAR(255))");
		
		// Split up the array of whole names into an array of first/last names
	    List<Object[]> splitUpNames = Arrays.asList("John Woo", "Jeff Dean", "Josh Bloch", "Josh Long").stream()
	        .map(name -> name.split(" "))
	        .collect(Collectors.toList());
	    
	    // Use a Java 8 stream to print out each tuple of the list
	    splitUpNames.forEach(name -> log.info(String.format("Inserting customer record for %s %s", name[0], name[1])));
	    
	    // Uses JdbcTemplate's batchUpdate operation to bulk load data
	    jdbcTemplate.batchUpdate("INSERT INTO customers(first_name, last_name) VALUES (?,?)", splitUpNames);
	    
	    log.info("Querying for customer records where first_name = 'Josh':");
	    jdbcTemplate.query(
	            "SELECT id, first_name, last_name FROM customers WHERE first_name = ?", new Object[] { "Josh" },
	            (rs, rowNum) -> new Customer(rs.getLong("id"), rs.getString("first_name"), rs.getString("last_name"))
	        ).forEach(customer -> log.info(customer.toString()));
	}
}


解释:
@Autowired //todo
	默认使用 H2 内存数据库。


(3) 直接启动main方法所在的类：
报错:
Consider defining a bean of type 'org.springframework.jdbc.core.JdbcTemplate' in your configuration.
有人说主要是配置文件不对，可能没有注入。

参考官方示例: https://github.com/spring-guides/gs-relational-data-access/blob/main/complete/pom.xml
回到(1)修改pom.xml，正常启动了。


输出:
2023-04-01T21:32:44.598+08:00  INFO 9428 --- [           main] c.e.d.r.RelationalDataAccessApplication  : Costomer[id=3, first_name=Josh, last_name=Bloch]
2023-04-01T21:32:44.602+08:00  INFO 9428 --- [           main] c.e.d.r.RelationalDataAccessApplication  : Costomer[id=4, first_name=Josh, last_name=Long]






========================================
----------------------------------------





========================================
----------------------------------------



========================================
----------------------------------------





========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------





========================================
----------------------------------------



========================================
----------------------------------------





========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



