算法 第四版

基础: 数学归纳法思想
Java: 第一章会介绍



代码笔记: https://github.com/DawnEve/learngit/tree/dev/Java/src/chapter20




========================================
算法 第四版 简介, 及相关博客
----------------------------------------
1. 配套网站
https://algs4.cs.princeton.edu/home/

代码: https://algs4.cs.princeton.edu/code/


(2) 课程推荐: Coursera: Algorithms I & II
先修要求：CS61A

https://csdiy.wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Algo/

预计学时：60 小时
这是 Coursera 上评分最高的算法课程。Robert Sedgewick 教授有一种魔力，可以将无论多么复杂的算法讲得极为生动浅显。实不相瞒，困扰我多年的 KMP 以及网络流算法都是在这门课上让我茅塞顿开的，时隔两年我甚至还能写出这两个算法的推导与证明。

你是否觉得算法学了就忘呢？我觉得让你完全掌握一个算法的核心在于理解三点：

为什么这么做？（正确性推导，抑或是整个算法的核心本质）
如何实现它？（光学不用假把式）
用它解决实际问题（学以致用才是真本事）
这门课的构成就非常好地契合了上述三个步骤。观看课程视频并且阅读教授的开源课本有助于你理解算法的本质，让你也可以用非常 生动浅显的话语向别人讲述为什么这个算法得长这个样子。

在理解算法之后，你可以阅读教授对于课程中讲授的所有数据结构与算法的代码实现。 注意，这些实现可不是 demo 性质的，而是工业级的高效实现，从注释到变量命名都非常严谨，模块化也做得相当好，是质量很高的代码。我从这些代码中收获良多。

最后，就是这门课最激动人心的部分了，10 个高质量的 Project，并且全都有实际问题的背景描述，丰富的测试样例，自动的评分系统（代码风格也是评分的一环）。让你在实际生活中 领略算法的魅力。


课程地址:
https://www.coursera.org/learn/algorithms-part1
https://www.coursera.org/learn/algorithms-part2

该课程资源和作业实现
https://github.com/PKUFlyingPig/Princeton-Algorithm







2.相关博客

https://blog.csdn.net/qq_36754767/category_9479440.html




3. 习题答案

https://www.zhihu.com/question/27876056/answer/64157598
https://github.com/jimmysuncpt/Algorithms

官方维护的库: https://github.com/kevin-wayne/algs4


(2) 书中用到的数据文件
https://pan.baidu.com/share/link?shareid=491130&uk=202395669





4. 算法网站
https://visualgo.net/zh






========================================
第一章 基础
----------------------------------------



========================================
|-- 牛顿迭代法求平方根
----------------------------------------
1. 数学原理
https://blog.csdn.net/qq_36754767/article/details/105877322

(1) 算法过程:
求一个数的平方根，就是求 f(x)=x^2-C=0 的解。
我们先在 x=x1=C 的位置画 f(x)的切线，和x轴的交点为x2，它比x1更接近f(x)=0的位置。
然后 在x=x2 的位置画 f(x) 的切线，和x轴的焦点为x3，它比x2更接近f(x)=0的位置。
逐步逼近 f(x)=0的真实解。

(2) 数学推导，找出递推公式

1) x1 处画切线，切点为 (x1, f(x1))，斜率为 k= f'(x)|x=x1 = 2x1;

2) 过点(a0, b0) 且斜率为k的直线为?
一般形式为 y=kx+b 
b=y-kx= b0-k*a0;

该直线与x轴的交点为: y=0时, x=?
x= (y-b)/k=(0-b)/k = (k*a0-b0)/k=a0-b0/k

3) 把x1的切线的斜率带入
a0=x1,
b0=f(x1)=x1^2-C,
k=2x1;

x2=a0-b0/k=x1 - (x1^2-C)/2x1 = (x1^2 + C)/2x1=0.5*(x1 + C/x1)

误差为 f(x2)=x2^2 = 0.25*(x1 + C/x1)^2 逐步逼近 0 
接近到一定程度就可以停止计算了。





2. 编程实现
(1) java 实现

package chapter20;

public class C1_NewtonIter{
	public static void main(String[] args) {
		//System.out.println("test");
		double x=3;
		System.out.printf("sqrt(%.3f)=%.10f\n", x, sqrt2(x));
	}
	
	public static double sqrt2(double x) {
		if(x<0) {
			return Double.NaN;
		}
		double err=1e-15;
		double result=x;
		int i=0;
		while(0.25* Math.pow( (result - x/result), 2) > err ) {
			i+=1;
			result = (x/result + result) /2;
			System.out.printf("[%d] x=%.3f, result=%.10f\n", i, x, result);
		}
		return result;
	}
}



(2) R语言实现
sqrt3=function(x=4){
  if(x<0) return (NA);
  err=1e-15 #允许的误差
  result = x #初始化
  i=0 #计数器
  while( 0.25*( result - x/result)**2 > err ){
    i=i+1
    result=(x/result + result) /2;
    print(paste(i, x, result));
  }
  return(result);
}
sqrt3(100)

> sqrt3(16)
[1] "1 16 8.5"
[1] "2 16 5.19117647058824"
[1] "3 16 4.13666472254624"
[1] "4 16 4.00225752479852"
[1] "5 16 4.00000063669294"
[1] "6 16 4.00000000000005"
[1] 4

> sqrt3(2)
[1] "1 2 1.5"
[1] "2 2 1.41666666666667"
[1] "3 2 1.41421568627451"
[1] "4 2 1.41421356237469"
[1] 1.414214



(3) C 语言实现
$ cat M1_newton_iter.c
#include<stdio.h>
#include<math.h>

//牛顿迭代法求平方根
double sqrt(double x){
    // https://www.demo2s.com/c/c-math-h-nan.html
    if(x<0) return NAN;

    double err=1e-20;
    double rs=x;
    int i=0;
    while( 0.25 * (rs - x/rs)*(rs - x/rs) > err){
        i+=1;
        rs=(x/rs + rs)/2;
        printf("%d %f %f\n", i, x, rs);
    }
    return rs;
}

int main(){
    double x;
    printf("Enter a positive number:");
    scanf("%lf", &x);

    double result=sqrt(x);
    printf("sqrt(%0.3f)=%0.10f\n", x, result);
    return 0;
}

$ gcc M1_newton_iter.c
$ ./a.out 
Enter a positive number:2
1 2.000000 1.500000
2 2.000000 1.416667
3 2.000000 1.414216
4 2.000000 1.414214
sqrt(2.000)=1.4142135624











========================================
|-- 二分查找的递归实现
----------------------------------------
1. 递归三个要点

* 要有最简单情况。第一条语句总是包含return.
* 总是尝试取解决一个规模更小的问题。
* 递归调用的父问题和尝试解决的子问题之间不应该有交集。




2. 实例
package chapter20.C1;

import java.util.Arrays;

public class A2_BinarySearch {
	public static void main(String[] args) {
		int[] arr1= {10,2,-30,4, 50};
		Arrays.sort(arr1);
		printArr(arr1);
		//System.out.printf("xx");
		//二分查找
		int value=550;
		int index=BinarySearch(value, arr1, 0, arr1.length-1);
		System.out.printf("\nIndex of %d is %d\n", value, index);
	}
	
	private static int BinarySearch(int value, int[] arr, int lo, int hi) {
		if(value < arr[lo] || value >arr[hi]) {
			return -1;
		}
		int mid=(lo+hi)/2;
		if      (value > arr[mid]) return BinarySearch(value, arr, mid+1, hi);
		else if (value < arr[mid]) return BinarySearch(value, arr, lo, mid-1);
		else                       return mid;
	}

	// print array
	static void printArr(int[] arr) {
		int i=0;
		System.out.print("[");
		for(i=0; i<arr.length; i++) {
			if(i!=arr.length-1)
				System.out.print(arr[i]+", ");
			else 
				System.out.print(arr[i]+"]");
		}
	}
}







========================================
|-- 命令行参数
----------------------------------------

package chapter20.C1;

/**
 * 命令行参数
 * @author admin
 * 使用命令行运行: 
$ java chapter20/C1/A4_CmdPara 0 1
the length of args:2
args[0]=0
args[1]=1
 */
public class A4_CmdPara {
	public static void main(String[] args){
		System.out.print("the length of args:" +  args.length+"\n");
		
		for(int i=0; i<args.length; i++) {
			System.out.printf("args[%d]=%s\n", i, args[i]);
		}
	}
}






========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------



========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------



========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------


