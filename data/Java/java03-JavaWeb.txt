java03-JavaWeb 前后端技术
主要是后端部分

Html网页, Css样式, JavaScript 脚本;
XML 配置
Tomcat 服务器
http & 请求 & 响应
Servlet 请求处理
Filter 过滤器
Listener 监听器
Cookie & Session 会话控制

Vue.js 前端框架
Ajax 异步请求
Thymeleaf 模板引擎
综合: 书城

目标: 掌握web原理，熟悉前端技术，为后续框架学习打下基础。


========================================
bean
----------------------------------------
1. 就是只有 属性和 getter 和 setter 的类。

2. 使用IDE可以自动生成 方法
public class Person {
    private String name;
    private int age;
    private boolean isChild;
}

Eclipse: 点击右键，在弹出的菜单中选择“Source” - “Generate Getters and Setters”，
在弹出的对话框中选中需要生成getter和setter方法的字段，点击确定即可由IDE自动完成所有方法代码。

生成的内容如下：
	其他都是get和set前缀
	boolean字段比较特殊，它的读方法一般命名为isXyz()

class Person {
    private String name;
    private int age;
    private boolean isChild;
	
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	public boolean isChild() {
		return isChild;
	}
	public void setChild(boolean isChild) {
		this.isChild = isChild;
	}
}







========================================
Tomcat9 的安装、使用和 Eclipse 自动发布项目
----------------------------------------
1.Tomcat是一个Web服务器（同时也是Servlet容器），通过它我们可以很方便地接收和返回到请求
（如果不用Tomcat，那我们需要自己写Socket来接收和返回请求）。

Tomcat其实我们并不需要学太多的知识，只要学会安装和启动以及了解一下各个目录的含义就差不多了。


(0) 使用xampp的 tomcat 
位置在: G:\xampp\tomcat

怎么查版本号?
http://localhost:8080/ 显示是 Apache Tomcat/7.0.56
太古老了，安装新的吧。


(1) 安装
https://tomcat.apache.org/

比如tomcat9.x需要的最低版本JDK为8.0。
如果你使用的是JDK7.0版本，那么你就是想用tomcat9.x也用不了，只能选择tomcat8.5.x及以下版本。
不过即使在JDK7.0的限制下，也尽量升级到tomcat8.5.x系的最新版本，以预防安全漏洞和少量提升性能。

当然最直接的提升tomcat性能的根本方法，还是升级服务器的硬件配置来的最有效果。

我的jdk8的版本:
> java -version
java version "1.8.0_161"

选择最新的 64-bit Windows tomcat9.0：
https://tomcat.apache.org/download-90.cgi
https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.73/bin/apache-tomcat-9.0.73-windows-x64.zip

解压后就算安装好了。
放到一个没有空格和中文的路径中。
D:\ProgramFiles\apache-tomcat-9.0.73
	bin\
	conf\
	...

Tomcat各个目录的含义：
	bin/ 存放启动和关闭 Tomcat 的脚本文件
	conf/ 存放 Tomcat 服务器的各种配置文件
	lib/ 存放 Tomcat 服务器的支撑jar包
	logs/ 日志文件
	temp/ 运行时临时文件
	webapps/ web 应用所在的目录，外界访问的web资源的存放目录。自定义文件就放到这里。
	work/ Tomcat 工作目录
	其他文件


(2) Tomcat配置环境变量
- 右击此电脑，中间的 属性；
- 新窗口左侧 高级系统设置，
- 新窗口 底部 环境变量。
- 下一半 系统变量：新建
	CATALINA_HOME
	D:\ProgramFiles\apache-tomcat-9.0.73
- 找系统变量中的Path，点击编辑：后面添加 %CATALINA_HOME%\bin;
- 一路2个确定回去。

验证: 
win+R输入cmd回车，然后再DOS窗口输入startup.bat回车。
- 之后会出现Tomcat启动窗口。疑似乱码的内容，是正常的。
- 代表配置成功。
- 黑窗口不能关！关了网页就打不开了。


可能的异常:
- 如果出现报错或者一闪而过，可能是端口号被占用。Tomcat默认窗口时8080。
- 可以尝试重启电脑，再启动Tomcat试试。不行的话，就修改Tomcat端口号。

如果配置成功，打开浏览器，输入 http://localhost:8080/
可以看到网页: Apache Tomcat/9.0.73


==> CLASSPATH 末尾也要新增内容: %CATALINA_HOME%\lib;
	D:\ProgramFiles\apache-tomcat-9.0.73\lib


(3) Tomcat 的Hello world!


(4) 怎么查看源码？
https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.73/src/apache-tomcat-9.0.73-src.zip
下载后移动到 D:\ProgramFiles\apache-tomcat-9.0.73\ 改名为 src.zip。
在Eclipse中 ctrl+单击 关键词，查看源代码。如果没找到，点击添加，选 external 那一行，单击找到该zip包。
确定，即可查看源码。









2. 配置 Eclipse 
(1) 配置
环境配置 https://www.runoob.com/servlet/servlet-environment-setup.html

超详细Eclipse配置Tomcat配置教程 https://blog.csdn.net/qq_45344586/article/details/123976839

Window -> Preferences
Server -> Runtime Environments -> Add 
	选择对应的Tomcat版本（tomcat9）
	选择路径 D:\ProgramFiles\apache-tomcat-9.0.73
-> Finish -> apply and close;


(2) 创建服务器
Eclipse For JavaEE 底部标签 切换到 Servers，
点击 create a new server.
新窗口中，选择Apache 下拉 - Tomcat v0.9.0 Server, Finish;
底部出现: Tomcat v9.0 Server at localhost [Stopped, Republish]


(3) 设施部署路径
双击刚出现的字样[stopped]，弹出新页面
左侧第二个标题 Server Locations 处
	选中第二条 Use Tomcat installation
	将部署路径 Depoly path: 的 wtpwebapps 改为 webapps
		我点击浏览，改为了 D:\ProgramFiles\apache-tomcat-9.0.73\webapps
	保存此设置（叉掉后点击Save）

(3) 启动Tomcat服务
Eclipse 底部 Servers 标签，右击 [Stopped] 后，选择 start
弹出网络提醒，点击允许访问。

底部文字变为[Started, Synchronized]

浏览器访问 http://localhost:8080
可以访问。



(4) 设置密码
访问：http://localhost:8080/
登录密码：
1)打开文件 conf/tomcat-users.xml
2)增加2条
<role rolename="admin-gui"/>
<user username="tomcat" password="tomcat" roles="admin-gui"/>

现在把两处 admin-gui 改为了 manager-gui

3)重启tomcat。





(5) 怎么发布应用？手动发布

$ cat HelloServlet.java
package chapter18;

// 导入必需的 java 库
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;

// 扩展 HttpServlet 类
public class HelloServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private String message;
	
	public void init() throws ServletException
	{
		// 执行必需的初始化
		message = "Hello World";
	}
	
	public void doGet(HttpServletRequest request,
			HttpServletResponse response)
					throws ServletException, IOException
	{
		// 设置响应内容类型
		response.setContentType("text/html");
		
		// 实际的逻辑是在这里
		PrintWriter out = response.getWriter();
		out.println("<h1>" + message + " </h1>");
	}
	
	public void destroy()
	{
		// 什么也不做
	}
}




1) Tomcat主目录下的webapp文件夹内，新建文件夹 mywebsite/。
mywebsite/
	WEB-INF/ 文件夹;
		web.xml 文件,记录网站的配置信息
		classes/ 文件夹 存放你的servlet
			如果有包名，则要按照报名建立文件夹

编译的包放到 webapps\mywebsite\WEB-INF\classes\chapter18\HelloServlet.class

2) 在web.xml中加入如下内容：
<servlet>
	<!--给你的servlet起名字，任意的-->
	<servlet-name>hi2</servlet-name>
	<!--指明servlet的路径，包名+类名 注意类名后不能加上java-->
	<servlet-class>chapter18.HelloServlet</servlet-class>
</servlet>
 
<servlet-mapping>
	<!--mapping  自然就是映射了  于是乎 这个同上,一致-->
	<servlet-name>hi2</servlet-name>
	<!--这是浏览器中输入的访问该servlet的url 任意的-->
	<url-pattern>/testHi2</url-pattern>
</servlet-mapping>

3) 启动tomcat，访问你的Servlet
http://localhost:8080/mywebsite/testHi2

报错: 编译用的版本太高。
java.lang.UnsupportedClassVersionError: chapter18/HelloServlet has been compiled by a more recent version of the Java Runtime (class file version 61.0), this version of the Java Runtime only recognizes class file versions up to 52.0 (无法载入的类 [chapter18.HelloServlet])
https://blog.csdn.net/wstever/article/details/128492151
52 Java8
57 Java13
...
怎么改变版本号，参考 Java00-prep 准备。

重新编译，放置class文件，重启tomcat，即可打开网页内容。





(6) Eclipse 自动发布项目到指定容器
The Tomcat server configuration at \Servers\Tomcat v9.0 Server at localhost-config is missing. Check the server for errors.

- 菜单-文件-新建-Dynamic Web Project
- 设置 
	Project name: Servlet_2
	Target runtime: tomcat v9.0
	next;
- source folder: src\main\java
	底下的默认输出文件: build\classes
- web modele
	Context root: Servlet_2
	Content directory: src/main/webapp
	勾选 Generate web.xml deployment descriptor
- 菜单文件-file-新建servelt
	包: com.mio.hi, 类: Hello1
	url: /Hello1 
	只要 doGet方法。

现在点击顶部的运行三角，Run on server.
	选中 tomcat9，next，右侧选中项目名字，finish。
	一会重启tomcat，浏览器打开页面: http://localhost:8080/Servlet_2/Hello1



注意: 从 Servlet3开始支持注解写路径，不再需要直接配置xml文件。


package com.mio.hi;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Servlet implementation class Hello1
 */
@WebServlet("/Hello1")
public class Hello1 extends HttpServlet {
	private static final long serialVersionUID = 1L;
	String message="hello world, form Tomcat9";
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public Hello1() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		response.getWriter().append("Served at: ").append(request.getContextPath());
		
		// 设置响应内容类型
		response.setContentType("text/html");
		
		// 实际的逻辑是在这里
		PrintWriter out = response.getWriter();
		out.println("<h1>" + message + "</h1>");
	}

}



(7) 移动项目位置
- Eclipse 左侧右击，删除。
- 文件夹移动
- Eclipse 菜单 文件-从文件系统导入项目。选中 G:\learngit\Servlet_2，finish
- 需要等一会？才能运行。


(8) 怎么使用 web.xml形式指定路由？
- 首先注释掉路由注解：//@WebServlet("/Hello1")  这时浏览器打不开了
- 找到路径 Servlet_2/src/main/下的 webapp/WEB-INF/web.xml
在最后一行前添加: 
	一个是 给类(带包名的全称)绑定一个名字(任意名字)
	另一个是给名字绑定一个域名(在项目名子文件夹下的路径)。

<servlet>
	<!--给你的servlet起名字，任意的-->
	<servlet-name>hi2</servlet-name>
	<!--指明servlet的路径，包名+类名 注意类名后不能加上java-->
	<servlet-class>com.mio.hi.Hello1</servlet-class>
</servlet>
 
<servlet-mapping>
	<!--mapping  自然就是映射了  于是乎 这个同上,一致-->
	<servlet-name>hi2</servlet-name>
	<!--这是浏览器中输入的访问该servlet的url 任意的-->
	<url-pattern>/Hello1</url-pattern>
</servlet-mapping>

- 重启tomcat。浏览器又可看到输出。







========================================
【要精通】Servlet 请求处理(了解jsp)
----------------------------------------
这里只有大纲，更详细的见专题 Servlet。

https://javaee.github.io/servlet-spec/downloads/servlet-4.0/servlet-4_0_FINAL.pdf

0. 有人说可以不学
可以直接学spring boot 入门，然后再学习servlet。

其实现在很少谈论servlet 了，一方面由于spring mvc 做的太方便了，另一方面是servlet 本身配置太繁琐了。学习servlet 的最终目标一般是更好的理解spring mvc


(2) “需要学Servlet，不要跳过Servlet去学框架”
现在的项目一般来说还是以SpringMVC-Spring-Mybatis / SpringBoot居多。
面试也几乎不会问Servlet的知识（无论是校招还是社招）

我因为好好学了Servlet，在学Struts2（没错，我还学过Struts2）和SpringMVC的都非常容易上手，几天就基本会用了。

如果了解Struts2或SpringMVC的同学就会知道，其实他俩的底层都离不开Servlet。
	Struts2的核心用的是Filter（过滤器），
	而SpringMVC的核心用的就是Servlet。


(3) 怎么学？
学Servlet之前，首先我们要学学Tomcat。





1. Servlet 几个关键点
https://www.zhihu.com/question/452255228/answer/1810876466

	引入
	使用
	生命周期
	继承结构 
	读取初始化参数 ServletConfig
	读取上下文参数 ServletContext


(1) CGI -> FastCGI -> Servlet 服务器端小程序

Servlet 使用单进程多线程方式运行。
	单继承：单实例，全局只有一个对象
	多线程：














========================================
注解
----------------------------------------
https://www.lintcode.com/course/3





========================================
反射 与 数据库
----------------------------------------
关系型数据库
非关系型数据库
SQL里的各种JOIN
Java 反射机制






========================================
动态代理
----------------------------------------








========================================
监听器、拦截器
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------





========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



