项目管理利器 Maven 3.3.9



入门视频: https://www.bilibili.com/video/BV1Fz4y167p5/?p=4



========================================
什么是Maven？
----------------------------------------
1.
如今我们构建一个项目需要用到很多第三方的类库，如写一个使用Spring的Web项目就需要引入大量的jar包。一个项目Jar包的数量之多往往让我们瞠目结舌，并且Jar包之间的关系错综复杂，一个Jar包往往又会引用其他Jar包，缺少任何一个Jar包都会导致项目编译失败。

以往开发项目时，程序员往往需要花较多的精力在引用Jar包搭建项目环境上，而这一项工作尤为艰难，少一个Jar包、多一个Jar包往往会报一些让人摸不着头脑的异常。

而Maven就是一款帮助程序员构建项目的工具，我们只需要告诉Maven需要哪些Jar 包，它会帮助我们下载所有的Jar，极大提升开发效率。



应用场景：
确定项目要用到spring/mybatis等，项目还没开始写，已经从各个网站下载大量jar包，bin下有百八十个包了，有用的、没用的、版本冲突的，该删除哪一个？
Maven、Ant、gradle就是解决这个问题的。该怎么删除、管理这些jar包。

目录：
	1.maven快速入门。
	2.maven核心知识。
	3.maven建立web项目。
	
	
2.更多资料
慕课网视频：http://www.imooc.com/video/8615

The 5 minute test，官方简易入门文档；
	http://maven.apache.org/guides/getting-started/maven-in-five-minutes.html
Getting Started Tutorial，官方入门文档；
	http://maven.apache.org/guides/getting-started/index.html
POM Reference，POM文件的设置参考
	http://maven.apache.org/pom.html
Settings Reference ，settings文件的设置参考
	http://maven.apache.org/settings.html

	
3. Maven和Ant的区别
 
Maven正在逐渐取代Ant，很多java开源软件（spring、Struts2 ……）已经使用maven。
不需要写复杂的处理脚本；
声明式的类库依赖管理。

4.Maven的基本功能
 
构建：比如生成class、jar、war或者ear文件
生成文档：比如生成javadoc、网站文档
生成报告：比如junit测试报告
生成依赖类库：生成文档，说明项目多其他软件的依赖
有关SCM：SCM（Software Configuration Management），软件配置管理，比如版本控制，比如bug管理等等
发布：生成供发布的分发包，比如生成Struts2的分发包，供提交给用户使用
部署：比如，web应用程序，自动部署到指定的服务器上

========================================
maven快速入门
----------------------------------------
1.maven简介和maven环境搭建
	1)maven是基于项目对象模型(Project Object Model (POM))，可以通过一小段描述信息来管理项目的构建、报告和文档的软件项目管理工具。
	
	据说淘宝就是使用这个管理的。
	
	2)下载：http://maven.apache.org/ 左侧Download，右侧 zip包：apache-maven-3.3.9-bin.zip(8.21M)( http://apache.fayea.com/maven/maven-3/3.3.9/binaries/apache-maven-3.3.9-bin.zip )
	该版本需要java1.7或以上的支持，我的win7系统已经安装了java，测试下版本号：
	
C:\Users\Administrator>java -version
java version "1.8.0_66"
Java(TM) SE Runtime Environment (build 1.8.0_66-b18)
Java HotSpot(TM) 64-Bit Server VM (build 25.66-b18, mixed mode)
		
	我的是1.8版本，看来是可以的。
	
	3)解压好maven，发现里面有4个文件夹：
bin #运行目录
boot #类加载器
conf #配置文件 settings.xml
lib #maven运行时需要依赖的类库
	
	4)把bin目录添加到环境变量PATH，比如：
Unix-based operating systems (Linux, Solaris and Mac OS X)
  export PATH=/usr/local/apache-maven-3.x.y/bin:$PATH
Windows
  set PATH="c:\program files\apache-maven-3.x.y\bin";%PATH%
  
我的win7:
  set PATH="D:\Program Files\apache-maven-3.3.9\bin";%PATH%
这种配置只在当前cmd窗口内有效。  
如果想更长久，就直接写入到PATH中。


系统环境变量里，添加MAVEN_HOME(或M2_HOME)，其值为D:\Program Files\apache-maven-3.3.9，然后PATH环境变量最后附加上";%MAVEN_HOME%\bin"
检测方法：
a) 重新进入命令行(DOS窗口)模式，输入 echo %MAVEN_HOME% 如果能显示 C:\Java\maven-3.1.9 说明环境变量起作用了
b) 输入 mvn -version，正常情况下会显示maven及jdk的版本号
（前提：jdk环境必须先安装好，否则后面无法正常编译项目）



	5)	Make sure JAVA_HOME is set to the location of your JDK
	系统变量JAVA_HOME为：D:\Program Files\Java\jdk1.8.0_66
	
	6) 测试是否安装成功：
	C:\Users\Administrator>mvn -v
Apache Maven 3.3.9 (bb52d8502b132ec0a5a3f4c09453c07478323dc5; 2015-11-11T00:41:4
7+08:00)
Maven home: D:\Program Files\apache-maven-3.3.9\bin\..
Java version: 1.8.0_66, vendor: Oracle Corporation
Java home: D:\Program Files\Java\jdk1.8.0_66\jre
Default locale: zh_CN, platform encoding: GBK
OS name: "windows 7", version: "6.1", arch: "amd64", family: "dos"

	
	
	

========================================
maven版的helloWorld
----------------------------------------	
若要使用Maven，那么项目的目录结构必须符合Maven的规范，其目录结构如下：

src
  |-main
    |-java 
      |-package
  |-test
    |-java 
      |-package 
	|-resources
target/
pom.xml 

编译后的 classes 会放在 target/classes 下面， JAR 文件会放在 target/ 下面



========================================
maven基本命令与生命周期
----------------------------------------
mvn -v
查询Maven版本
本命令用于检查maven是否安装成功。
Maven安装完成之后，在命令行输入mvn -v，若出现maven信息，则说明安装成功。

mvn compile：编译
将java源文件编译成class文件

mvn test:编译并测试
执行test目录下的测试用例

mvn package:打包
将项目打成jar包

mvn clean:清空生成的文件，就是删除target文件夹

mvn install:安装
将当前项目放到Maven的本地仓库中。供其他项目使用



default 生命周期中最常用的命令列表：
validate验证: validate the project is correct and all necessary information is available
compile编译: compile the source code of the project
test测试: test the compiled source code using a suitable unit testing framework. These tests should not require the code be packaged or deployed
package打包: take the compiled code and package it in its distributable format, such as a JAR.
integration-test集成测试: process and deploy the package if necessary into an environment where integration tests can be run
verify验证包: run any checks to verify the package is valid and meets quality criteria
install安装: install the package into the local repository, for use as a dependency in other projects locally
deploy部署: done in an integration or release environment, copies the final package to the remote repository for sharing with other developers and projects.


其他2个常见的生命周期：
clean: cleans up artifacts created by prior builds
site: generates site documentation for this project





========================================
Eclipse插件m2e版的helloWorld
----------------------------------------
安装Maven 和 Maven的Eclipse插件
http://blog.csdn.net/qjyong/article/details/9098213

1.安装
eclipse菜单 help->install new software.
Maven的Eclipse插件地址为：http://download.eclipse.org/technology/m2e/releases。

2.
指定为本地maven：点击 windows->preference，选择Maven-installations中，添加本地安装的Maven，并勾选该按钮。


3.新建 maven工程；

4.右击pom.xml文件，run as，选择 Maven Build ...，输入 test，就是运行了mvn test.依次类推。

5.pom.xml文件报错：
Multiple annotations found at this line:
	- Plugin execution not covered by lifecycle configuration: org.apache.maven.plugins:maven-
	 resources-plugin:2.6:resources (execution: default-resources, phase: process-resources)
	- Plugin execution not covered by lifecycle configuration: org.apache.maven.plugins:maven-
	 resources-plugin:2.6:testResources (execution: default-testResources, phase: process-test-resources)

No marketplace entries found to handle maven-resources-plugin:2.6:resources in Eclipse.  Please see Help for more information.
No marketplace entries found to handle maven-resources-plugin:2.6:testResources in Eclipse.  Please see Help for more information.


解决方法：
参考：http://www.eclipse.org/m2e/documentation/m2e-execution-not-covered.html
右击pom.xml文件，选择open with，选择Maven POM editor。
顶部出错有提示，点击后下拉菜单中选择忽略xxxx即可。
这是再打开pom.xml文件，增添了一堆东西，已经看不懂了。






========================================
什么是Maven仓库？
----------------------------------------	
Maven仓库用来存放Maven管理的所有Jar包。分为：本地仓库 和 中央仓库。

1.本地仓库 
Maven本地的Jar包仓库。


2.中央仓库 
Maven官方提供的远程仓库。
当项目编译时，Maven首先从本地仓库中寻找项目所需的Jar包，若本地仓库没有，再到Maven的中央仓库下载所需Jar包。
官方仓库不全，可能还需要添加第三方镜像 http://maven.ibiblio.org/maven2/
国内镜像：http://maven.aliyun.com/nexus/#welcome



3.配置文件
1).全局配置文件 \apache-maven-3.3.9\conf
	全局仓库位置： ~/.m2/repository/ 
	
2).自定义配置文件：一般放到仓库附近。



========================================
mvn 坐标gav
----------------------------------------
什么是“坐标”？
在Maven中，坐标是Jar包的唯一标识，Maven通过坐标在仓库中找到项目所需的Jar包。
如下代码中，groupId和artifactId构成了一个Jar包的坐标。

<dependency>
   <groupId>javax.servlet</groupId>  
   <artifactId>jstl</artifactId>  
   <version>1.2</version> 
</dependency>

groupId:所需Jar包的项目名
artifactId:所需Jar包的模块名
version:所需Jar包的版本号


========================================
传递依赖 与 排除依赖
----------------------------------------
1.传递依赖：如果我们的项目引用了一个Jar包，而该Jar包又引用了其他Jar包，那么在默认情况下项目编译时，Maven会把直接引用和间接引用的Jar包都下载到本地。

依赖关系列表（dependency list）是POM的重要部分。
 
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.0</version>
      <scope>test</scope>
    </dependency>
    ...
  </dependencies>
 
groupId , artifactId , version :
scope : compile(default),provided,runtime,test,system
exclusions







2.如何查到依赖的类库？
一般可以通过这个网站：http://www.mvnrepository.com
比如查询hibernate，可以找到结果列表中的hibernate类库条目。
点击：http://www.mvnrepository.com/artifact/org.hibernate/hibernate，
选择版本，比如3.2.6ga，即：http://www.mvnrepository.com/art ... /hibernate/3.2.6.ga
复制文章中的：
 
<dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate</artifactId>
    <version>3.2.6.ga</version>
</dependency>
到pom.xml文件中即可。

是否还需要找到hibernate依赖的pom？
不需要，hibernate也会有pom，maven会通过它的pom自动找到它依赖的类库。
 

3.依赖冲突
若项目中多个Jar同时引用了相同的Jar时，会产生依赖冲突，但Maven采用了两种避免冲突的策略，因此在Maven中是不存在依赖冲突的。

1).短路优先(就近原则)
本项目——>A.jar——>B.jar——>X.jar
本项目——>C.jar——>X.jar
若本项目引用了A.jar，A.jar又引用了B.jar，B.jar又引用了X.jar，并且C.jar也引用了X.jar。

在此时，Maven只会引用引用路径最短的Jar。
如果版本有冲突，也会引用最近的jar包。

2).声明优先
若引用路径长度相同时，在pom.xml中谁先被声明，就使用谁。




4.排除依赖：如果我们只想下载直接引用的Jar包，那么需要在pom.xml中做如下配置：(将需要排除的Jar包的坐标写在中)
<exclusions>
    <exclusion>
        <groupId>ch.qos.logback</groupId>
        <artifactId>logback-classic</artifactId>
    </exclusion>
</exclusions>



========================================
生命周期
----------------------------------------
生命周期是由多个阶段（phase）组成的，每个阶段完成一个完整的功能，比如mvn clean中的clean就是一个阶段。

1.clean生命周期：


2.default生命周期
最常用的生命周期，包括很多阶段：compile, test, package, install, deploy等。
执行后面的命令，前面的阶段也是执行的。


3.site生命周期

scope : compile(default),provided,runtime,test,system




========================================
聚合
----------------------------------------
1.什么是聚合？
将多个项目同时运行就称为聚合。

2.如何实现聚合？

比如目录结构如下：
.
|-- pom.xml
|-- module-a
    `-- pom.xml
|-- module-b
    `-- pom.xml
|-- module-c
    `-- pom.xml
|-- foo-all
    `-- pom.xml

那么总的pom.xml文件类似：
...
    <modules>
        <module>module-a</module>
        <module>module-b</module>
        <module>module-c</module>
        <module>foo-all</module>
    </modules>
</project>



========================================
继承
----------------------------------------
1.什么是继承？
在聚合多个项目时，如果这些被聚合的项目中需要引入相同的Jar，那么可以将这些Jar写入父pom中，各个子项目继承该pom即可。

maven提供了一个类似java.lang.Object的顶级父pom.xml文件。
可以通过下面命令查看当前pom.xml受到超pom.xml文件的影响：
mvn help:effective-pom


2.如何实现继承？
父pom配置：将需要继承的Jar包的坐标放入标签即可。
<dependencyManagement>
	<dependencies>
		<dependency>
			<groupId>org.apache.shiro</groupId>
			<artifactId>shiro-spring</artifactId>
			<version>1.2.2</version>
		</dependency> 
	</dependencies>
</dependencyManagement>

子pom配置：
<parent>
    <groupId>父pom所在项目的groupId</groupId>
    <artifactId>父pom所在项目的artifactId</artifactId>
    <version>父pom所在项目的版本号</version>
</parent>






========================================
实例1：自动下载jar包
----------------------------------------
http://jingyan.baidu.com/article/22fe7ced3b0a003002617fd1.html

目的：偶尔出现需要直接使用某些jar包的情况下，可以通过maven来下载获得。
该经验是在maven使用基础上，抽取出部分功能作为个人工具使用。

准备：保证maven安装正常。

1.在任意目录下创建一个文件夹，其下创建一个pom.xml文件，一个bat批处理脚本。

2.选择bat批处理脚本右键选择编辑，复制以下内容：
call mvn -f pom.xml dependency:copy-dependencies
@pause

3.pom.xml 不需要实际项目中那么复杂，示例如下（<?xml version="1.0"?>必须在文本第一行）：
<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>temp.download</groupId>
    <artifactId>temp-download</artifactId>
    <version>1.0-SNAPSHOT</version> 
    <dependencies>
<!-- 需要下载什么jar包 添加相应依赖 其余部分无需在意-->
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpcore</artifactId>
            <version>4.3.1</version>
        </dependency>
    </dependencies>
</project>


4.最后双击运行bat脚本即可。（bat脚本针对Windows系统。如果你使用的是其它系统，bat中的maven命令是相同的，你可以通过命令行进入相应目录然后运行maven命令，或者使用其他脚本的方式运行）

[INFO] ----- -------- ---------- --------- ------- --------
[INFO] BUILD SUCCESS
[INFO] ----- -------- ---------- --------- ------- --------
[INFO] Total time: 04:55 min
[INFO] Finished at: 2017-01-16T19:37:36+08:00
[INFO] Final Memory: 13M/67M
[INFO] ----- -------- ---------- --------- ------- --------
请按任意键继续. . .

运行完成后新增target文件夹，其下有一个dependency文件夹，里面便是你要的jar包。


5.下载jstl包
pom.xml改为：（可以正确使用）
<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>temp.download</groupId>
    <artifactId>temp-download</artifactId>
    <version>1.2-SNAPSHOT</version> 
    <dependencies>
<!-- 需要下载什么jar包 添加相应依赖 其余部分无需在意-->
        <dependency>
 
           <groupId>javax.servlet</groupId>  
           <artifactId>jstl</artifactId>  
           <version>1.2</version> 
       </dependency>
	   
	   <dependency>
		   <groupId>taglibs</groupId>
		   <artifactId>standard</artifactId>
		   <version>1.1.2</version>
	  </dependency>
  
    </dependencies>
</project>

在使用Maven管理项目时，JSTL需同时导入jstl.jar及standard.jar：http://blog.csdn.net/u010962906/article/details/40785023

[INFO] ------ ------------- ---------------------- ------------ ---------
[INFO] BUILD SUCCESS
[INFO]  ------ ------------- ---------------------- ------------ ---------
[INFO] Total time: 8.219 s
[INFO] Finished at: 2017-01-17T08:28:41+08:00
[INFO] Final Memory: 15M/148M
[INFO]  ------ ------------- ---------------------- ------------ ---------
jstl-1.2.jar
standard-1.1.2.jar




本地临时库位置：C:\Users\Administrator\.m2\repository

更多jar包地址：
http://tomcat.apache.org/taglibs/standard/
http://archive.apache.org/dist/jakarta/taglibs/standard/binaries/
http://www.javacoder.cn/?p=195
http://mvnrepository.com/artifact/jstl/jstl

http://www.runoob.com/jsp/jsp-jstl.html
包冲突解决方法：http://www.cnblogs.com/yolanda-lee/p/5133339.html


========================================
实例2：使用Maven构建Web项目
----------------------------------------
1.New Maven项目：选择WebApp：

2.若使用JSP，需添加Servlet依赖：
注：Servlet依赖只在编译和测试时使用！

<dependency>
    <groupId>javax.servlet</groupId>
    <artifactId>javax.servlet-api</artifactId>
    <version>3.0.1</version>
    <!-- 只在编译和测试时运行 -->
    <scope>provided</scope>
</dependency>

1)在Bulid Path中设置resource输出目录：
2)勾选：Dynamic Web Module
3)删掉测试目录
4)在pom中加入jetty的插件，并设置JDK版本：

<plugins>
	<plugin>
		<groupId>org.apache.maven.plugins</groupId>
		<artifactId>maven-compiler-plugin</artifactId>
		<configuration>
			<source>1.8</source>
			<target>1.8</target>
		</configuration>
	</plugin>

	<plugin>
		<groupId>org.eclipse.jetty</groupId>
		<artifactId>jetty-maven-plugin</artifactId>
		<version>9.3.10.v20160621</version>
		<executions>
			<execution>
				<phase>package</phase>
			</execution>
		</executions>
	</plugin>
</plugins>
1)运行项目：
2)输入：jetty:run
3)访问127.0.0.1:8080

若出现如下界面，表示成功！



========================================
pom.xml详解
----------------------------------------
pom.xml是Maven的核心，你的项目需要什么Jar包就在pom.xml里面配置。当编译项目时Maven读取该文件，并从仓库中下载相应的Jar包。

<project xmlns="http://maven.apache.org/POM/4.0.0"     
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"     
xsi:schemaLocation="http://maven.apache.org/POM/4.0.0http://maven.apache.org/maven-v4_0_0.xsd">     
    <!--父项目的坐标。如果项目中没有规定某个元素的值，那么父项目中的对应值即为项目的默认值。 坐标包括group ID，artifact ID和 version。-->    
    <parent>    
     <!--被继承的父项目的构件标识符-->    
     <artifactId/>    
     <!--被继承的父项目的全球唯一标识符-->    
     <groupId/>    
     <!--被继承的父项目的版本-->    
     <version/>    
     <!-- 父项目的pom.xml文件的相对路径。相对路径允许你选择一个不同的路径。默认值是../pom.xml。Maven首先在构建当前项目的地方寻找父项 目的pom，其次在文件系统的这个位置（relativePath位置），然后在本地仓库，最后在远程仓库寻找父项目的pom。-->    
     <relativePath/>    
 </parent>    
 <!--声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。-->       
    <modelVersion>4.0.0</modelVersion>     
    <!--项目的全球唯一标识符，通常使用全限定的包名区分该项目和其他项目。并且构建时生成的路径也是由此生成， 如com.mycompany.app生成的相对路径为：/com/mycompany/app-->     
    <groupId>cn.erhuowang</groupId>     
    <!-- 构件的标识符，它和group ID一起唯一标识一个构件。换句话说，你不能有两个不同的项目拥有同样的artifact ID和groupID；在某个 特定的group ID下，artifact ID也必须是唯一的。构件是项目产生的或使用的一个东西，Maven为项目产生的构件包括：JARs，源 码，二进制发布和WARs等。-->     
    <artifactId>erhuowang-maven2</artifactId>     
    <!--项目产生的构件类型，例如jar、war、ear、pom。插件可以创建他们自己的构件类型，所以前面列的不是全部构件类型-->     
    <packaging>war</packaging>     
    <!--项目当前版本，格式为:主版本.次版本.增量版本-限定版本号-->     
    <version>1.0-SNAPSHOT</version>     
    <!--项目的名称, Maven产生的文档用-->     
    <name>erhuo-maven</name>     
    <!--项目主页的URL, Maven产生的文档用-->     
    <url>http://erhuowang.cn</url>     
    <!-- 项目的详细描述, Maven 产生的文档用。  当这个元素能够用HTML格式描述时（例如，CDATA中的文本会被解析器忽略，就可以包含HTML标 签）， 不鼓励使用纯文本描述。如果你需要修改产生的web站点的索引页面，你应该修改你自己的索引页文件，而不是调整这里的文档。-->     
    <description>A maven project to study maven.</description>     
    <!--描述了这个项目构建环境中的前提条件。-->    
 <prerequisites>    
  <!--构建该项目或使用该插件所需要的Maven的最低版本-->    
    <maven/>    
 </prerequisites>    
 <!--项目名称和URL-->     
    <issueManagement>    
     <!--项目名字，-->     
        <system>erhuowang</system>     
        <!--该项目使用的URL-->    
        <url>http://erhuowang.cn</url>     
    </issueManagement>     
    <!--项目持续集成信息-->    
 <ciManagement>    
  <!--持续集成系统的名字，例如continuum-->    
  <system/>    
  <!--该项目使用的持续集成系统的URL（如果持续集成系统有web接口的话）。-->    
  <url/>    
  <!--构建完成时，需要通知的开发者/用户的配置项。包括被通知者信息和通知条件（错误，失败，成功，警告）-->    
  <notifiers>    
   <!--配置一种方式，当构建中断时，以该方式通知用户/开发者-->    
   <notifier>    
    <!--传送通知的途径-->    
    <type/>    
    <!--发生错误时是否通知-->    
    <sendOnError/>    
    <!--构建失败时是否通知-->    
    <sendOnFailure/>    
    <!--构建成功时是否通知-->    
    <sendOnSuccess/>    
    <!--发生警告时是否通知-->    
    <sendOnWarning/>    
    <!--不赞成使用。通知发送到哪里-->    
    <address/>    
    <!--扩展配置项-->    
    <configuration/>    
   </notifier>    
  </notifiers>    
 </ciManagement>    
 <!--项目创建年份，4位数字。当产生版权信息时需要使用这个值。-->    
    <inceptionYear/>    
    <!--项目相关邮件列表信息-->     
    <mailingLists>    
     <!--该元素描述了项目相关的所有邮件列表。自动产生的网站引用这些信息。-->     
        <mailingList>     
         <!--邮件的名称-->    
            <name>Demo</name>     
            <!--发送邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建-->     
            <post>chaibozhou@163.com</post>     
            <!--订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建-->     
            <subscribe>chaibozhou@163.com</subscribe>     
            <!--取消订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建-->     
            <unsubscribe>chaibozhou@163.com</unsubscribe>     
            <!--你可以浏览邮件信息的URL-->    
            <archive>chaibozhou@163.com</archive>     
        </mailingList>     
    </mailingLists>     
    <!--项目开发者列表-->     
    <developers>     
     <!--某个项目开发者的信息-->    
        <developer>     
         <!--SCM里项目开发者的唯一标识符-->    
            <id>HELLO WORLD</id>     
            <!--项目开发者的全名-->    
            <name>chaimm</name>     
            <!--项目开发者的email-->    
            <email>chaibozhou@163.com</email>     
            <!--项目开发者的主页的URL-->    
            <url/>    
            <!--项目开发者在项目中扮演的角色，角色元素描述了各种角色-->    
            <roles>     
                <role>Project Manager</role>     
                <role>Architect</role>     
            </roles>    
            <!--项目开发者所属组织-->    
            <organization>demo</organization>     
            <!--项目开发者所属组织的URL-->    
            <organizationUrl>http://erhuowang.cn</organizationUrl>     
            <!--项目开发者属性，如即时消息如何处理等-->    
            <properties>     
                <dept>No</dept>     
            </properties>    
            <!--项目开发者所在时区， -11到12范围内的整数。-->    
            <timezone>-5</timezone>     
        </developer>     
    </developers>     
    <!--项目的其他贡献者列表-->     
    <contributors>    
     <!--项目的其他贡献者。参见developers/developer元素-->    
     <contributor>    
   <name/><email/><url/><organization/><organizationUrl/><roles/><timezone/><properties/>    
     </contributor>         
    </contributors>       
    <!--该元素描述了项目所有License列表。 应该只列出该项目的license列表，不要列出依赖项目的 license列表。如果列出多个license，用户可以选择它们中的一个而不是接受所有license。-->     
    <licenses>    
     <!--描述了项目的license，用于生成项目的web站点的license页面，其他一些报表和validation也会用到该元素。-->     
        <license>    
         <!--license用于法律上的名称-->    
            <name>Apache 2</name>     
            <!--官方的license正文页面的URL-->    
            <url>http://www.baidu.com/erhuwoang/LICENSE-2.0.txt</url>     
            <!--项目分发的主要方式：    
              repo，可以从Maven库下载    
              manual， 用户必须手动下载和安装依赖-->    
            <distribution>repo</distribution>     
            <!--关于license的补充信息-->    
            <comments>A business-friendly OSS license</comments>     
        </license>     
    </licenses>     
    <!--SCM(Source Control Management)标签允许你配置你的代码库，供Maven web站点和其它插件使用。-->     
    <scm>     
        <!--SCM的URL,该URL描述了版本库和如何连接到版本库。欲知详情，请看SCMs提供的URL格式和列表。该连接只读。-->     
        <connection>     
            scm:svn:http://svn.baidu.com/banseon/maven/banseon/banseon-maven2-trunk(dao-trunk)      
        </connection>     
        <!--给开发者使用的，类似connection元素。即该连接不仅仅只读-->    
        <developerConnection>     
            scm:svn:http://svn.baidu.com/banseon/maven/banseon/dao-trunk      
        </developerConnection>    
        <!--当前代码的标签，在开发阶段默认为HEAD-->    
        <tag/>           
        <!--指向项目的可浏览SCM库（例如ViewVC或者Fisheye）的URL。-->     
        <url>http://svn.baidu.com/banseon</url>     
    </scm>     
    <!--描述项目所属组织的各种属性。Maven产生的文档用-->     
    <organization>     
     <!--组织的全名-->    
        <name>demo</name>     
        <!--组织主页的URL-->    
        <url>http://www.erhuowang.cn</url>     
    </organization>    
    <!--构建项目需要的信息-->    
    <build>    
     <!--该元素设置了项目源码目录，当构建项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。-->    
  <sourceDirectory/>    
  <!--该元素设置了项目脚本源码目录，该目录和源码目录不同：绝大多数情况下，该目录下的内容 会被拷贝到输出目录(因为脚本是被解释的，而不是被编译的)。-->    
  <scriptSourceDirectory/>    
  <!--该元素设置了项目单元测试使用的源码目录，当测试项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。-->    
  <testSourceDirectory/>    
  <!--被编译过的应用程序class文件存放的目录。-->    
  <outputDirectory/>    
  <!--被编译过的测试class文件存放的目录。-->    
  <testOutputDirectory/>    
  <!--使用来自该项目的一系列构建扩展-->    
  <extensions>    
   <!--描述使用到的构建扩展。-->    
   <extension>    
    <!--构建扩展的groupId-->    
    <groupId/>    
    <!--构建扩展的artifactId-->    
    <artifactId/>    
    <!--构建扩展的版本-->    
    <version/>    
   </extension>    
  </extensions>    
  <!--当项目没有规定目标（Maven2 叫做阶段）时的默认值-->    
  <defaultGoal/>    
  <!--这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在最终的打包文件里。-->    
  <resources>    
   <!--这个元素描述了项目相关或测试相关的所有资源路径-->    
   <resource>    
    <!-- 描述了资源的目标路径。该路径相对target/classes目录（例如${project.build.outputDirectory}）。举个例 子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为org/apache/maven /messages。然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。-->    
    <targetPath/>    
    <!--是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素里列出。-->    
    <filtering/>    
    <!--描述存放资源的目录，该路径相对POM路径-->    
    <directory/>    
    <!--包含的模式列表，例如**/*.xml.-->    
    <includes/>    
    <!--排除的模式列表，例如**/*.xml-->    
    <excludes/>    
   </resource>    
  </resources>    
  <!--这个元素描述了单元测试相关的所有资源路径，例如和单元测试相关的属性文件。-->    
  <testResources>    
   <!--这个元素描述了测试相关的所有资源路径，参见build/resources/resource元素的说明-->    
   <testResource>    
    <targetPath/><filtering/><directory/><includes/><excludes/>    
   </testResource>    
  </testResources>    
  <!--构建产生的所有文件存放的目录-->    
  <directory/>    
  <!--产生的构件的文件名，默认值是${artifactId}-${version}。-->    
  <finalName/>    
  <!--当filtering开关打开时，使用到的过滤器属性文件列表-->    
  <filters/>    
  <!--子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。给定插件的任何本地配置都会覆盖这里的配置-->    
  <pluginManagement>    
   <!--使用的插件列表 。-->    
   <plugins>    
    <!--plugin元素包含描述插件所需要的信息。-->    
    <plugin>    
     <!--插件在仓库里的group ID-->    
     <groupId/>    
     <!--插件在仓库里的artifact ID-->    
     <artifactId/>    
     <!--被使用的插件的版本（或版本范围）-->    
     <version/>    
     <!--是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，只有在真需要下载时，该元素才被设置成enabled。-->    
     <extensions/>    
     <!--在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。-->    
     <executions>    
      <!--execution元素包含了插件执行需要的信息-->    
      <execution>    
       <!--执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标-->    
       <id/>    
       <!--绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段-->    
       <phase/>    
       <!--配置的执行目标-->    
       <goals/>    
       <!--配置是否被传播到子POM-->    
       <inherited/>    
       <!--作为DOM对象的配置-->    
       <configuration/>    
      </execution>    
     </executions>    
     <!--项目引入插件所需要的额外依赖-->    
     <dependencies>    
      <!--参见dependencies/dependency元素-->    
      <dependency>    
       ......    
      </dependency>    
     </dependencies>         
     <!--任何配置是否被传播到子项目-->    
     <inherited/>    
     <!--作为DOM对象的配置-->    
     <configuration/>    
    </plugin>    
   </plugins>    
  </pluginManagement>    
  <!--使用的插件列表-->    
  <plugins>    
   <!--参见build/pluginManagement/plugins/plugin元素-->    
   <plugin>    
    <groupId/><artifactId/><version/><extensions/>    
    <executions>    
     <execution>    
      <id/><phase/><goals/><inherited/><configuration/>    
     </execution>    
    </executions>    
    <dependencies>    
     <!--参见dependencies/dependency元素-->    
     <dependency>    
      ......    
     </dependency>    
    </dependencies>    
    <goals/><inherited/><configuration/>    
   </plugin>    
  </plugins>    
 </build>    
 <!--在列的项目构建profile，如果被激活，会修改构建处理-->    
 <profiles>    
  <!--根据环境参数或命令行参数激活某个构建处理-->    
  <profile>    
   <!--构建配置的唯一标识符。即用于命令行激活，也用于在继承时合并具有相同标识符的profile。-->    
   <id/>    
   <!--自动触发profile的条件逻辑。Activation是profile的开启钥匙。profile的力量来自于它    
   能够在某些特定的环境中自动使用某些特定的值；这些环境通过activation元素指定。activation元素并不是激活profile的唯一方式。-->    
   <activation>    
    <!--profile默认是否激活的标志-->    
    <activeByDefault/>    
    <!--当匹配的jdk被检测到，profile被激活。例如，1.4激活JDK1.4，1.4.0_2，而!1.4激活所有版本不是以1.4开头的JDK。-->    
    <jdk/>    
    <!--当匹配的操作系统属性被检测到，profile被激活。os元素可以定义一些操作系统相关的属性。-->    
    <os>    
     <!--激活profile的操作系统的名字-->    
     <name>Windows XP</name>    
     <!--激活profile的操作系统所属家族(如 'windows')-->    
     <family>Windows</family>    
     <!--激活profile的操作系统体系结构 -->    
     <arch>x86</arch>    
     <!--激活profile的操作系统版本-->    
     <version>5.1.2600</version>    
    </os>    
    <!--如果Maven检测到某一个属性（其值可以在POM中通过${名称}引用），其拥有对应的名称和值，Profile就会被激活。如果值    
    字段是空的，那么存在属性名称字段就会激活profile，否则按区分大小写方式匹配属性值字段-->    
    <property>    
     <!--激活profile的属性的名称-->    
     <name>mavenVersion</name>    
     <!--激活profile的属性的值-->    
     <value>2.0.3</value>    
    </property>    
    <!--提供一个文件名，通过检测该文件的存在或不存在来激活profile。missing检查文件是否存在，如果不存在则激活    
    profile。另一方面，exists则会检查文件是否存在，如果存在则激活profile。-->    
    <file>    
     <!--如果指定的文件存在，则激活profile。-->    
     <exists>/usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/</exists>    
     <!--如果指定的文件不存在，则激活profile。-->    
     <missing>/usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/</missing>    
    </file>    
   </activation>    
   <!--构建项目所需要的信息。参见build元素-->    
   <build>    
    <defaultGoal/>    
    <resources>    
     <resource>    
      <targetPath/><filtering/><directory/><includes/><excludes/>    
     </resource>    
    </resources>    
    <testResources>    
     <testResource>    
      <targetPath/><filtering/><directory/><includes/><excludes/>    
     </testResource>    
    </testResources>    
    <directory/><finalName/><filters/>    
    <pluginManagement>    
     <plugins>    
      <!--参见build/pluginManagement/plugins/plugin元素-->    
      <plugin>    
       <groupId/><artifactId/><version/><extensions/>    
       <executions>    
        <execution>    
         <id/><phase/><goals/><inherited/><configuration/>    
        </execution>    
       </executions>    
       <dependencies>    
        <!--参见dependencies/dependency元素-->    
        <dependency>    
         ......    
        </dependency>    
       </dependencies>    
       <goals/><inherited/><configuration/>    
      </plugin>    
     </plugins>    
    </pluginManagement>    
    <plugins>    
     <!--参见build/pluginManagement/plugins/plugin元素-->    
     <plugin>    
      <groupId/><artifactId/><version/><extensions/>    
      <executions>    
       <execution>    
        <id/><phase/><goals/><inherited/><configuration/>    
       </execution>    
      </executions>    
      <dependencies>    
       <!--参见dependencies/dependency元素-->    
       <dependency>    
        ......    
       </dependency>    
      </dependencies>    
      <goals/><inherited/><configuration/>    
     </plugin>    
    </plugins>    
   </build>    
   <!--模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径-->    
   <modules/>    
   <!--发现依赖和扩展的远程仓库列表。-->    
   <repositories>    
    <!--参见repositories/repository元素-->    
    <repository>    
     <releases>    
      <enabled/><updatePolicy/><checksumPolicy/>    
     </releases>    
     <snapshots>    
      <enabled/><updatePolicy/><checksumPolicy/>    
     </snapshots>    
     <id/><name/><url/><layout/>    
    </repository>    
   </repositories>    
   <!--发现插件的远程仓库列表，这些插件用于构建和报表-->    
   <pluginRepositories>    
    <!--包含需要连接到远程插件仓库的信息.参见repositories/repository元素-->        
    <pluginRepository>    
     <releases>    
      <enabled/><updatePolicy/><checksumPolicy/>    
     </releases>    
     <snapshots>    
      <enabled/><updatePolicy/><checksumPolicy/>    
     </snapshots>    
     <id/><name/><url/><layout/>    
    </pluginRepository>    
   </pluginRepositories>    
   <!--该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。-->    
   <dependencies>    
    <!--参见dependencies/dependency元素-->    
    <dependency>    
     ......    
    </dependency>    
   </dependencies>    
   <!--不赞成使用. 现在Maven忽略该元素.-->    
   <reports/>       
   <!--该元素包括使用报表插件产生报表的规范。当用户执行“mvn site”，这些报表就会运行。 在页面导航栏能看到所有报表的链接。参见reporting元素-->    
   <reporting>    
    ......    
   </reporting>    
   <!--参见dependencyManagement元素-->    
   <dependencyManagement>    
    <dependencies>    
     <!--参见dependencies/dependency元素-->    
     <dependency>    
      ......    
     </dependency>    
    </dependencies>    
   </dependencyManagement>    
   <!--参见distributionManagement元素-->    
   <distributionManagement>    
    ......    
   </distributionManagement>    
   <!--参见properties元素-->    
   <properties/>    
  </profile>    
 </profiles>    
 <!--模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径-->    
 <modules/>    
    <!--发现依赖和扩展的远程仓库列表。-->     
    <repositories>     
     <!--包含需要连接到远程仓库的信息-->    
        <repository>    
         <!--如何处理远程仓库里发布版本的下载-->    
         <releases>    
          <!--true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。 -->    
    <enabled/>    
    <!--该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。这里的选项是：always（一直），daily（默认，每日），interval：X（这里X是以分钟为单位的时间间隔），或者never（从不）。-->    
    <updatePolicy/>    
    <!--当Maven验证构件校验文件失败时该怎么做：ignore（忽略），fail（失败），或者warn（警告）。-->    
    <checksumPolicy/>    
   </releases>    
   <!-- 如何处理远程仓库里快照版本的下载。有了releases和snapshots这两组配置，POM就可以在每个单独的仓库中，为每种类型的构件采取不同的 策略。例如，可能有人会决定只为开发目的开启对快照版本下载的支持。参见repositories/repository/releases元素 -->    
   <snapshots>    
    <enabled/><updatePolicy/><checksumPolicy/>    
   </snapshots>    
   <!--远程仓库唯一标识符。可以用来匹配在settings.xml文件里配置的远程仓库-->    
   <id>banseon-repository-proxy</id>     
   <!--远程仓库名称-->    
            <name>banseon-repository-proxy</name>     
            <!--远程仓库URL，按protocol://hostname/path形式-->    
            <url>http://192.168.1.169:9999/repository/</url>     
            <!-- 用于定位和排序构件的仓库布局类型-可以是default（默认）或者legacy（遗留）。Maven 2为其仓库提供了一个默认的布局；然 而，Maven 1.x有一种不同的布局。我们可以使用该元素指定布局是default（默认）还是legacy（遗留）。-->    
            <layout>default</layout>               
        </repository>     
    </repositories>    
    <!--发现插件的远程仓库列表，这些插件用于构建和报表-->    
    <pluginRepositories>    
     <!--包含需要连接到远程插件仓库的信息.参见repositories/repository元素-->    
  <pluginRepository>    
   ......    
  </pluginRepository>    
 </pluginRepositories>    

    <!--该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。-->     
    <dependencies>     
        <dependency>    
   <!--依赖的group ID-->    
            <groupId>org.apache.maven</groupId>     
            <!--依赖的artifact ID-->    
            <artifactId>maven-artifact</artifactId>     
            <!--依赖的版本号。 在Maven 2里, 也可以配置成版本号的范围。-->    
            <version>3.8.1</version>     
            <!-- 依赖类型，默认类型是jar。它通常表示依赖的文件的扩展名，但也有例外。一个类型可以被映射成另外一个扩展名或分类器。类型经常和使用的打包方式对应， 尽管这也有例外。一些类型的例子：jar，war，ejb-client和test-jar。如果设置extensions为 true，就可以在 plugin里定义新的类型。所以前面的类型的例子不完整。-->    
            <type>jar</type>    
            <!-- 依赖的分类器。分类器可以区分属于同一个POM，但不同构建方式的构件。分类器名被附加到文件名的版本号后面。例如，如果你想要构建两个单独的构件成 JAR，一个使用Java 1.4编译器，另一个使用Java 6编译器，你就可以使用分类器来生成两个单独的JAR构件。-->    
            <classifier></classifier>    
            <!--依赖范围。在项目发布过程中，帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。    
                - compile ：默认范围，用于编译      
                - provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath      
                - runtime: 在执行时需要使用      
                - test:    用于test任务时使用      
                - system: 需要外在提供相应的元素。通过systemPath来取得      
                - systemPath: 仅用于范围为system。提供相应的路径      
                - optional:   当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用-->     
            <scope>test</scope>       
            <!--仅供system范围使用。注意，不鼓励使用这个元素，并且在新的版本中该元素可能被覆盖掉。该元素为依赖规定了文件系统上的路径。需要绝对路径而不是相对路径。推荐使用属性匹配绝对路径，例如${java.home}。-->    
            <systemPath></systemPath>     
            <!--当计算传递依赖时， 从依赖构件列表里，列出被排除的依赖构件集。即告诉maven你只依赖指定的项目，不依赖项目的依赖。此元素主要用于解决版本冲突问题-->    
            <exclusions>    
             <exclusion>     
                    <artifactId>spring-core</artifactId>     
                    <groupId>org.springframework</groupId>     
                </exclusion>     
            </exclusions>       
            <!--可选依赖，如果你在项目B中把C依赖声明为可选，你就需要在依赖于B的项目（例如项目A）中显式的引用对C的依赖。可选依赖阻断依赖的传递性。-->     
            <optional>true</optional>    
        </dependency>    
    </dependencies>    
    <!--不赞成使用. 现在Maven忽略该元素.-->    
    <reports></reports>    
    <!--该元素描述使用报表插件产生报表的规范。当用户执行“mvn site”，这些报表就会运行。 在页面导航栏能看到所有报表的链接。-->    
 <reporting>    
  <!--true，则，网站不包括默认的报表。这包括“项目信息”菜单中的报表。-->    
  <excludeDefaults/>    
  <!--所有产生的报表存放到哪里。默认值是${project.build.directory}/site。-->    
  <outputDirectory/>    
  <!--使用的报表插件和他们的配置。-->    
  <plugins>    
   <!--plugin元素包含描述报表插件需要的信息-->    
   <plugin>    
    <!--报表插件在仓库里的group ID-->    
    <groupId/>    
    <!--报表插件在仓库里的artifact ID-->    
    <artifactId/>    
    <!--被使用的报表插件的版本（或版本范围）-->    
    <version/>    
    <!--任何配置是否被传播到子项目-->    
    <inherited/>    
    <!--报表插件的配置-->    
    <configuration/>    
    <!--一组报表的多重规范，每个规范可能有不同的配置。一个规范（报表集）对应一个执行目标 。例如，有1，2，3，4，5，6，7，8，9个报表。1，2，5构成A报表集，对应一个执行目标。2，5，8构成B报表集，对应另一个执行目标-->    
    <reportSets>    
     <!--表示报表的一个集合，以及产生该集合的配置-->    
     <reportSet>    
      <!--报表集合的唯一标识符，POM继承时用到-->    
      <id/>    
      <!--产生报表集合时，被使用的报表的配置-->    
      <configuration/>    
      <!--配置是否被继承到子POMs-->    
      <inherited/>    
      <!--这个集合里使用到哪些报表-->    
      <reports/>    
     </reportSet>    
    </reportSets>    
   </plugin>    
  </plugins>    
 </reporting>    
 <!-- 继承自该项目的所有子项目的默认依赖信息。这部分的依赖信息不会被立即解析,而是当子项目声明一个依赖（必须描述group ID和 artifact ID信息），如果group ID和artifact ID以外的一些信息没有描述，则通过group ID和artifact ID 匹配到这里的依赖，并使用这里的依赖信息。-->    
 <dependencyManagement>    
  <dependencies>    
   <!--参见dependencies/dependency元素-->    
   <dependency>    
    ......    
   </dependency>    
  </dependencies>    
 </dependencyManagement>       
    <!--项目分发信息，在执行mvn deploy后表示要发布的位置。有了这些信息就可以把网站部署到远程服务器或者把构件部署到远程仓库。-->     
    <distributionManagement>    
        <!--部署项目产生的构件到远程仓库需要的信息-->    
        <repository>    
         <!--是分配给快照一个唯一的版本号（由时间戳和构建流水号）？还是每次都使用相同的版本号？参见repositories/repository元素-->    
   <uniqueVersion/>    
   <id>banseon-maven2</id>     
   <name>banseon maven2</name>     
            <url>file://${basedir}/target/deploy</url>     
            <layout/>    
  </repository>    
  <!--构件的快照部署到哪里？如果没有配置该元素，默认部署到repository元素配置的仓库，参见distributionManagement/repository元素-->     
  <snapshotRepository>    
   <uniqueVersion/>    
   <id>banseon-maven2</id>    
            <name>Banseon-maven2 Snapshot Repository</name>    
            <url>scp://svn.baidu.com/banseon:/usr/local/maven-snapshot</url>     
   <layout/>    
  </snapshotRepository>    
  <!--部署项目的网站需要的信息-->     
        <site>    
         <!--部署位置的唯一标识符，用来匹配站点和settings.xml文件里的配置-->     
            <id>banseon-site</id>     
            <!--部署位置的名称-->    
            <name>business api website</name>     
            <!--部署位置的URL，按protocol://hostname/path形式-->    
            <url>     
                scp://svn.baidu.com/banseon:/var/www/localhost/banseon-web      
            </url>     
        </site>    
  <!--项目下载页面的URL。如果没有该元素，用户应该参考主页。使用该元素的原因是：帮助定位那些不在仓库里的构件（由于license限制）。-->    
  <downloadUrl/>    
  <!--如果构件有了新的group ID和artifact ID（构件移到了新的位置），这里列出构件的重定位信息。-->    
  <relocation>    
   <!--构件新的group ID-->    
   <groupId/>    
   <!--构件新的artifact ID-->    
   <artifactId/>    
   <!--构件新的版本号-->    
   <version/>    
   <!--显示给用户的，关于移动的额外信息，例如原因。-->    
   <message/>    
  </relocation>    
  <!-- 给出该构件在远程仓库的状态。不得在本地项目中设置该元素，因为这是工具自动更新的。有效的值有：none（默认），converted（仓库管理员从 Maven 1 POM转换过来），partner（直接从伙伴Maven 2仓库同步过来），deployed（从Maven 2实例部 署），verified（被核实时正确的和最终的）。-->    
  <status/>           
    </distributionManagement>    
    <!--以值替代名称，Properties可以在整个POM中使用，也可以作为触发条件（见settings.xml配置文件里activation元素的说明）。格式是<name>value</name>。-->    
    <properties/>    
</project>



========================================
maven参考：
----------------------------------------
maven介绍：http://www.tuicool.com/articles/f2yemaF
Maven较完整教程： http://blog.csdn.net/v123411739/article/details/49492401


========================================
java参考
----------------------------------------
Java 9的模块化--壮士断"腕"的涅槃
https://zhuanlan.zhihu.com/p/24800180


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------

========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------

