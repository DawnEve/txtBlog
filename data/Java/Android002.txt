
Android开发大纲

环境搭建
常用UI控件、事件机制
Android四大组件、Intent组件
Fragment
数据存储
网络编程
绘图与动画
多媒体开发
地图定位
进阶内容

四个核心要点：活动Activity、消息Intent、视图View、任务Task。
四大组件：活动Activity、服务Service、广播接收器Broadcast Receiver、内容提供者Content Provider.

相关博客：
http://www.cnblogs.com/Gaojiecai/



========================================
安卓开发的知识点？
----------------------------------------
确实，一些客户端与服务器的数据交换方法、UI操作方法足以满足大部分的需求，这些问题你可以参考一下，勿喷，我的专业是日语：

	Android App的生命周期是什么；
	四大组件很熟悉了吧，ContentProvider的生命周期是什么；
	Android设备开机的启动过程；
	Activity的视图层次是什么？打开一个对话框的时候，这个对话框是如何加入到视图上去的？
	Dialog、PopupWindow、WindowManager加载视图的区别；
	Service与Thread的区别；
	ServiceManager、ActivityManager、XXXManager是干什么的；
	为什么一定要在UI线程更新视图，为什么要这么设计；
	能不能直接New一个Activity并启动它；
	打包APK的过程干了什么；安装APK的过程干了什么；启动APK的过程干了什么；怎么玩DexLoader（动态升级）；
	MVP模式是啥；
	View的生命周期是啥；TWEEN动画跟熟悉动画在View的绘制过程是怎么作用的；自定义动画玩过吗，里面的Matrix怎么控制。
	res里面的XML资源最终都要转化成JavaCode，怎么完全脱离res，用纯代码的方式实现res资源的功能，怎么缩放一张点九图；
	Binder原理是什么，除了Binder之外，还能怎么跟Service交互；
	Touch事件的分发机制；能不能用代码模拟一组TOUCH事件（比如自动点击广告，自动滚动）；
	ROOT的原理是什么，系统是怎么管理APP的权限的；
	Material Desgin这么好看，为什么不出兼容包，让5.0以下的系统也能要动画效果；ART模式与Dalvik有什么不同；Render Thread是怎么工作的；
	为什么TMD不把功能都用H5实现然后把需求都扔给前段的人去做；

https://www.zhihu.com/question/29708440/answer/45375891



	ServiceManager、ActivityManager、packageManager 、*****Manager 都弄懂了？
	Binder 也搞清楚了？
	IPC 也弄明白了？
	FrameWork 层的每个类都折腾了？
	Hook 会玩了？
	各种 SystemService 也知道怎么运行的了？
	View 的渲染你明白是怎么回事了？
	Intent 是如何实现 Activity、Service 等之间的解耦合的？
	单元测试会写了？Monkey 能跑多长时间？性能测试通过了？
	ClassLoader 和 DexLoader 会玩了？
	Context 是个啥你也知道了？
	权限机制也弄清楚了？
	触屏事件的分发呢？
	Handler 、Message 和 Looper 是怎么跑起来的？
如果上面超过一半的东西题主还没有弄清楚，洗洗睡，明天早点起来看书。




========================================
第一章: Android概述(打包、原型、签名、反编译)
----------------------------------------

1.安卓的历史

安卓首先是制作智能相机。
后来该公司被谷歌收购，并在手机中爆炸式增长。


2.环境的搭建
	1.下载安装JDK(Java Development Kit )；
	2.下载安装Eclipse（www.eclipse.org）；
	3.下载Android-SDK；
	4.下载安装ADT插件
			（在Eclipse中，help->Install New Software
			输入地址为：https://dl-ssl.google.com/android/eclipse/ ）

	Android Studio下载：http://developer.android.com/sdk/installing/studio.html		


3.  9(九妹)图片怎么玩

！！核心要点：左上拉伸，右下内容！！！！！！ 

Android设计中如何切图.9.png（点9图）：http://www.miued.com/2074/
9.png图片的处理：http://blog.csdn.net/lizzy115/article/details/7950959


4.界面原型设计

引用锤子科技视觉设计总监——罗子雄在重庆TEDx活动上说的一小段话：
"每当我们看到一些美妙的设计的时候，很多人心里面会有一种冲动，这种冲动会让你们想去创造一些 新的东西，创造一些美妙的事物。"

公司的话，大部分使用的都是Axure Rp，但是这个东西比较难用！除了这个以外还有其他很多的原型设计工具：
	Pencil
	Framer
	Shireframe
	UIDesigner
	Balsamiq Mockups
	Mockup Builder
	Mockup
	FrameBox
	iPhone Mockup
	GOOFLOW
	WireframeSketcher
	FluidIA
	Indigo Studio
	Origami
	Quartz Composer
	Justproto
	Avocado
	PaintCode
	Mockplus(摩客)
	墨刀等....

有网页版以及客户端版供你选择：Mockplus官网 https://www.mockplus.cn/

5.Android程序签名打包

打包Android APK的方法还有很多，命令行，或者Gradle，ANT，MAVEN等等，方法有很多。
本节讲解最简单的通过图形化界面打包签名的方式！


6.反编译APK获取代码&资源

"反编译Apk"，看上去好像好像很高端的样子，其实不然，就是通过某些反编译软件，对我们的APK进行反编译，从而获取程序的源代码，图片，XML资源等文件；不知道你有没有这样做过，看到一个别人的一个APP界面做得很精美，或者你看上别人的图片素材，简单点的，我们可以下载别人的APK，然后改下后缀名，改成xxx.zip，然后解压： 笔者随便解压了一个APK。






========================================
hello World!程序与在模拟器测试（成功！）
----------------------------------------
1.安卓开发中Theme.AppCompat.Light的解决方法
http://blog.csdn.net/u013224148/article/details/45872263
http://blog.csdn.net/u011249920/article/details/50731515


2.no resource identifier found for attribute showAsAction in package 
把main.xml去掉：app:showAsAction="never" 一行。

然后eclipse的project->clean即可重建。


3.运行，啥反应没有。
在Eclipse中，选中你要运行的项目(而不是项目中的某个文件)，点击鼠标右键 -> Run as -> Android Application


4.虚拟机创建失败：no cpu/abi system image available for this target

添加ANDROID_SDK_HOME环境变量：D:\Program Files\AndroidSDK\tools
然后重启eclipse，点击创建安卓模拟器，试试能不能成功。

哪个模拟器好用？https://www.zhihu.com/question/24815978
没答案。。。先回答能用？

最后，使用的郑州大学镜像站下载的android sdk更多文件，建立原厂的模拟器。


5.模拟器成功！
运行后，create一个模拟器，然后点击start，等待按安卓开机（大概1min）。
之后，右击eclipse文件列表中的gen，选择run as->android application，eclipse开始编译程序，并安装FirstDemo.apk文件到模拟器中。
之后等待该程序运行（大概1min）。就能看到屏幕上出现了Hello world。

搜索这个显示的字符串到底在哪里设置的？
发现在res/values/strings.xml中。修改其中的字符串为Hello world,wjl!重新发布（右击eclipse文件列表中的gen，选择run as->android application）。
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="app_name">FirstDemo</string>
    <string name="hello_world">Hello world,wjl!</string>
    <string name="action_settings">Settings</string>
</resources>


6.签名apk安装文件
http://www.cnblogs.com/tianguook/archive/2012/09/27/2705724.html
本来在bin目录下就有一个apk文件。但是没有签名。
有签名的话，新app可以覆盖老app，即使同名。否则，同名老app会阻止新app的安装，导致升级失败。

Eclipse直接能导出带签名的最终apk，非常方便，推荐使用，步骤如下：
1）File->Export->Export Android Application.
第一次需要设置密码生成key，之后使用已有的key即可。
生成一个没有后缀的文件 endFile.
2)使用压缩优化：
D:\coding\android>set path=D:\Program Files\AndroidSDK\build-tools\android-4.4W
D:\coding\android>dir
 驱动器 D 中的卷是 软件
 卷的序列号是 000A-0520

 D:\coding\android 的目录

2017/01/09  20:26    <DIR>          .
2017/01/09  20:26    <DIR>          ..
2017/01/09  20:26           283,135 endFile
2017/01/09  10:19    <DIR>          FirstDemo
2017/01/09  20:23    <DIR>          keystore
               1 个文件        283,135 字节
               4 个目录 43,061,731,328 可用字节
D:\coding\android>zipalign -v 4 endFile mio.apk
Verifying alignment of mio.apk (4)...
      62 res/layout/activity_main.xml (OK - compressed)
     443 res/menu/main.xml (OK - compressed)
     765 AndroidManifest.xml (OK - compressed)
    1448 resources.arsc (OK)
    3720 res/drawable-hdpi/ic_launcher.png (OK)
    3972 res/drawable-mdpi/ic_launcher.png (OK)
    4212 res/drawable-xhdpi/ic_launcher.png (OK)
    4484 res/drawable-xxhdpi/ic_launcher.png (OK)
    4757 classes.dex (OK - compressed)
  280225 META-INF/MANIFEST.MF (OK - compressed)
  280682 META-INF/CERT.SF (OK - compressed)
  281176 META-INF/CERT.RSA (OK - compressed)
Verification succesful
生成一个mio.apk文件，就可以安装到手机了。




7.使用真机调试（失败）

如果你觉得虚拟设备的速度太慢，我们也可以使用真机来调试。其实, 操作起来也很简单，安装步骤如下。

步骤1：安装手机的驱动，保证手机在Windows XP 上可以被识别。
步骤2：打开手机的“设置”，然后选择“应用程序”中的开发选项，打开“USB 调试”和“允许模拟地点”选项。
步骤3 ：打开Eclipse 中的DDMS，在左边的Devices 列表中就可以看到你的真机设备，单击选中它，就可以开始在真机上进行安装和调试了。

之后，我们就可以通过USB 连接线把手机设备与开发机器连接起来，直接把Android 应用程序安装到手机设备上进行调试。
实际上，真机调试是正规Android 应用程序发布的必要步骤，因为Android 的手机设备型号非常多，所以在上线之前应尽量多测一些手机设备，保证Android 应用的兼容性。




8.工程相关解析(各种文件，资源访问)

我们开发大部分时间都花在下面这三个部分上。要深入了解这三个文件。

剖析工程里三个比较重要的文件： 
	主文件掌管生命周期：MainActivity.java，
	布局文件：activity_main和
	Android配置文件：AndroidManifest.xml 
	
	

========================================
第二章: Android中的UI组件的详解
----------------------------------------
2.1 View与ViewGroup的概念
2.2 布局
2.3 表单
2.4 控件
2.5 Adapter类控件
2.6 对话框控件


2.1 View与ViewGroup的概念

Android里的图形界面都是由View和ViewGroup以及他们的子类构成的： 
	View：所有可视化控件的父类,提供组件描绘和时间处理方法 
	ViewGroup： View类的子类，可以拥有子控件,可以看作是容器 Android 
	
	UI中的控件都是按照这种层次树的结构堆叠得，而创建UI布局的方式有两种， 自己在Java里写代码或者通过XML定义布局，后者显得更加方便和容易理解！ 也是我们最常用的手段！另外我们一般很少直接用View和ViewGroup来写布局，更多的 时候使用它们的子类控件或容器来构建布局！


2.2 布局

Android中有六大布局,分别是: 
	2.2.1 LinearLayout(线性布局)
	2.2.2 RelativeLayout(相对布局)
	2.2.3 TableLayout(表格布局)
	2.2.4 FrameLayout(帧布局)
	2.2.5 GridLayout(网格布局)
	2.2.6 AbsoluteLayout(绝对布局)

尽量使用RelativeLayout + LinearLayout的weight属性搭配使用吧！


 而今天我们要讲解的就是第一个布局，LinearLayout(线性布局)，我们屏幕适配的使用 用的比较多的就是LinearLayout的weight(权重属性),在这一节里,我们会详细地解析 LinearLayout,包括一些基本的属性,Weight属性的使用,以及比例如何计算,另外还 会说下一个用的比较少的属性:android:divider绘制下划线！


2.3 表单

	2.3.1 TextView(文本框)详解
	2.3.2 EditText(输入框)详解
	2.3.3 Button(按钮)与ImageButton(图像按钮)
	2.3.4 ImageView(图像视图)
	2.3.5.RadioButton(单选按钮)&Checkbox(复选框)
	2.3.6 开关按钮ToggleButton和开关Switch
	2.3.7 ProgressBar(进度条)
	2.3.8 SeekBar(拖动条)
	2.3.9 RatingBar(星级评分条)

TextView：http://androiddoc.qiniudn.com/reference/android/widget/TextView.html

EditText(输入框)； 和TextView非常类似，最大的区别是：EditText可以接受用户输入！
http://androiddoc.qiniudn.com/reference/android/widget/EditText.html

另外Button是TextView的子类，所以TextView上很多属性也可以应用到Button 上！我们实际开发中对于Button的，无非是对按钮的几个状态做相应的操作，比如：按钮按下的时候 用一种颜色，弹起又一种颜色，或者按钮不可用的时候一种颜色这样！上述实现无非是通过 StateListDrawable这种Drawable资源来实现，即编写一个drawable的资源文件。



2.4 控件

	2.4.1 ScrollView(滚动条)
	2.4.2 Date & Time组件(上)
	2.4.3 Date & Time组件(下)
	2.4.4 Adapter基础讲解
	2.4.5 ListView简单实用
	2.4.6 BaseAdapter优化
	2.4.7ListView的焦点问题
	2.4.8 ListView之checkbox错位问题解决
	2.4.9 ListView的数据更新问题

除了SimpleAdapter偶尔可能会用下，一般我们都是重写BaseAdapter的！
另外，关于BaseAdapter的，有很多东西要讲解，就把他丢到ListView那里一起讲，毕竟Adapter 总是和View沾边，而且ListView是我们用得最多的一个控件。


2.5 Adapter类控件

	2.5.0 构建一个可复用的自定义BaseAdapter
	2.5.1 ListView Item多布局的实现
	2.5.2 GridView(网格视图)的基本使用
	2.5.3 Spinner(列表选项框)的基本使用
	2.5.4 AutoCompleteTextView(自动完成文本框)的基本使用
	2.5.5 ExpandableListView(可折叠列表)的基本使用
	2.5.6 ViewFlipper(翻转视图)的基本使用
	2.5.7 Toast(吐司)的基本使用
	2.5.8 Notification(状态栏通知)详解
	2.5.9 AlertDialog(对话框)详解





2.6 对话框控件

	2.6.0 其他几种常用对话框基本使用
	2.6.1 PopupWindow(悬浮框)的基本使用
	2.6.2 菜单(Menu)
	2.6.3 ViewPager的简单使用
	2.6.4 DrawerLayout(官方侧滑菜单)的简单使用

ProgressDialog、DatePickerDialog(日期选择对话框)与TimePickerDialog(时间选择对话框)

和AlertDialog对话框不同的是，他的位置可以是随意的；
另外AlertDialog是非堵塞线程的，而PopupWindow则是堵塞线程的！而官方有这样一句话来介绍 PopupWindow：
A popup window that can be used to display an arbitrary view. 
The popup window is a floating container that appears on top of the current activity.
大概意思是：一个弹出窗口控件，可以用来显示任意View，而且会浮动在当前activity的顶部


Android中的Menu(菜单)，而在Android中的菜单有如下几种：
	OptionMenu：选项菜单，android中最常见的菜单，通过Menu键来调用
	SubMenu：子菜单，android中点击子菜单将弹出一个显示子菜单项的悬浮框， 子菜单不支持嵌套，即不能包括其他子菜单
	ContextMenu：上下文菜单，通过长按某个视图组件后出现的菜单，该组件需注册上下文菜单 本节我们来依依学习这几种菜单的用法~ PS：官方文档：menus

Android 3.0后引入的一个UI控件——ViewPager(视图滑动切换工具)

DrawerLayout(官方侧滑菜单)



========================================
第三章: Android的事件处理机制
----------------------------------------
http://blog.csdn.net/primer_programer/article/details/23056147


三种时间处理机制。
1.匿名内部类；
2.外部类；
3.实现接口。


1.方法1：匿名内部类处理单击事件
Button loginButton1=(Button)findViewById(R.id.button1);
loginButton1.setOnClickListener(new View.OnClickListener() {
	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		System.out.println("I'm clicked! inner class2");
	}
});

优点：方便使用。最常用。

2.方法2：外部类处理点击方法。也可以接着加入细节，覆盖父类方法。

		imageButton1.setOnClickListener(new MyOnClickListener(){
			@Override
			public void onClick(View v) {
				//先调用父类的同名方法
				super.onClick(v);
				//System.out.println("outer class-override.....");
				Toast.makeText(MainActivity.this, "imgButton1的逻辑", Toast.LENGTH_SHORT).show();
			}
		});
		
优点：可以批量添加统一的功能，节省代码。

/**
 * OnClickListener是一个接口
 * 一般可以放到单独java文件中定义这个自定义类。
 * */
class MyOnClickListener implements View.OnClickListener{
	@Override
	public void onClick(View v) {
		//System.out.println("button2 clicked. From outer class");
		Log.i("tag", "父类的方法");
		//统一调整透明度
		v.setAlpha(0.5f);
	}
}

3.方法3：使用实现接口的方式处理单击事件。
public class MainActivity extends Activity implements View.OnClickListener {

	//private Button loginButton;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		
		//方法3：使用实现接口的方式处理单击事件。
		findViewById(R.id.editText1).setOnClickListener(this);
	}
	
	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		System.out.println("method3: The msg from implements method.");
	}
}




========================================
----------------------------------------

生命周期。
http://blog.csdn.net/lmj623565791/article/details/41531475


http://blog.csdn.net/u013224148/article/category/2661935/2



========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------



========================================
安卓博客：
----------------------------------------
http://blog.csdn.net/u013224148/article/category/2661935/2



