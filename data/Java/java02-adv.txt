java02-adv


文件操作(放 基础部分)

集合 

泛型
序列化
网络编程

多线程

数据库操作
	MySQL 数据库核心技术
	JDBC 规范与实现

单元测试


新特性: Lambda表达式与StreamAPI

综合项目: EMS 管理系统/银行管理系统




========================================
高级部分
----------------------------------------
1. 啥是 组件?

一般组件是泛型+反射来实现的。






========================================
Java 数据结构，集合框架(Collection)
----------------------------------------
1. Java中的数据结构主要包括以下几种接口和类
枚举（Enumeration）: 	nextElement()
位集合（BitSet）
向量（Vector）: 	类似数组，但是向量大小可动态变化
栈（Stack）:	LIFO 后进先出，新元素放在其他元素的顶部，先被取出。
字典（Dictionary）: 键值对
哈希表（Hashtable）：
属性（Properties）：被许多Java类使用，如获取环境变量时它就作为System.getProperties()方法的返回值



2. 集合框架 
层次结构: https://www.runoob.com/java/java-collections.html

集合框架被设计成要满足以下几个目标。
	该框架必须是高性能的。基本集合（动态数组，链表，树，哈希表）的实现也必须是高效的。
	该框架允许不同类型的集合，以类似的方式工作，具有高度的互操作性。
	对一个集合的扩展和适应必须是简单的。

整个集合框架就围绕一组标准接口而设计。
	你可以直接使用这些接口的标准实现，诸如： LinkedList, HashSet, 和 TreeSet 等，
	除此之外你也可以通过这些接口实现自己的集合。

- 集合框架的类和接口均在java.util包中。
- 任何对象加入集合类后，自动转变为Object类型，所以在取出的时候，需要进行强制类型转换。


(2) 共性
集合框架是一个用来代表和操纵集合的统一架构。所有的集合框架都包含如下内容：

接口：是代表集合的抽象数据类型。例如 Collection、List、Set、Map 等。之所以定义多个接口，是为了以不同的方式操作集合对象

实现（类）：是集合接口的具体实现。从本质上讲，它们是可重复使用的数据结构，例如：ArrayList、LinkedList、HashSet、HashMap。

算法：是实现集合接口的对象里的方法执行的一些有用的计算，例如：搜索和排序。这些算法被称为多态，那是因为相同的方法可以在相似的接口上有着不同的实现。


除了集合，该框架也定义了几个 Map 接口和类。Map 里存储的是键/值对。尽管 Map 不是集合，但是它们完全整合在集合中。


(3) 集合接口
Collection 接口
	List 接口
	Set
		SortedSet
	Map
		Map.Entry
		SortedMap
	Enumeration

(4) Set和List的区别
- set 不能重复，List有序，可以重复；
- set 检索效率低，删除和插入效率高，插入和删除不会引起元素位置的改变
	HashSet 
	TreeSet 
- List 和数类似，可动态增长。查找效率高，插入和删除效率低
	ArrayList 
	LinkedList 
	Vector


(5) 集合算法
集合定义三个静态的变量：EMPTY_SET，EMPTY_LIST，EMPTY_MAP的。这些变量都不可改变。



(6) 迭代器
一般遍历数组都是采用for循环或者增强for，这两个方法也可以用在集合框架
还有一种方法是采用迭代器遍历集合框架，它是一个对象，实现了Iterator 接口或 ListIterator接口。

迭代器，使你能够通过循环来得到或删除集合的元素。
	ListIterator 继承了 Iterator，以允许双向遍历列表和修改元素。

	Iterator<Integer> it1=list.iterator();
	while(it1.hasNext()) {
		System.out.print(it1.next()+", ");
	}



(7) 比较器

TreeSet和TreeMap的按照排序顺序来存储元素. 然而，这是通过比较器来精确定义按照什么样的排序顺序。
Comparator 接口

// 为了使用 SortedSet 等，需要实现 Comparable 接口。
public class Person implements Comparable<Person>{
	public int age=0;
	Person(int age){
		this.age=age;
	}
	@Override
	public int compareTo(Person o) {
		return this.age - o.age;//也就是相同年龄，就认为是同一个对象
//		return o.age - this.age;
	}
}






========================================
|-- ArrayList
----------------------------------------
1.特点
ArrayList 类是一个可以动态修改的数组，与普通数组的区别就是它是没有固定大小的限制，我们可以添加或删除元素。

(1) ArrayList 继承了 AbstractList ，并实现了 List 接口。
Collection 
	AbstractCollection
		AbstractList 
			ArrayList 实现的接口包括: List, RandomAccess, Serializable, Cloneable

(2) 包引入
ArrayList 类位于 java.util 包中
	import java.util.ArrayList; // 引入 ArrayList 类
	ArrayList<E> objectName =new ArrayList<>();　 // 初始化
解释:
	E: 泛型数据类型，用于设置 objectName 的数据类型，只能为引用数据类型。
	objectName: 对象名。

(3) 方法
ArrayList 是一个数组队列，提供了相关的添加、删除、修改、遍历等功能。

声明: 如果我们要存储其他类型，而 <E> 只能为引用数据类型，这时我们就需要使用到基本类型的包装类。
	ArrayList<Integer> li=new Arraylist<Integer>();     // 存放整数元素
	ArrayList<Integer> li=new Arraylist<>();     //等号右边的<>中的内容可省略
	ArrayList<Character> li=new Arraylist<Character>();   // 存放字符元素


ArrayList<Integer> list=new ArrayList<Integer>();
list.add(newEle); 添加元素
System.out.println(list); //可以直接打印 [1, 2, 3]

list.get(2); 获取下标是2的元素，下标从0开始
list.set(2, 125); //修改元素，第一个参数为索引位置，第二个为要修改的值

list.remove(4); 删除下标4的元素
list.remove(Integer.valueOf(4)); 删除元素等于4的对象


list.contains(11); 是否包含第11个元素
list.clear(); 清空元素

System.out.println(list.size()); //元素个数


(4) 迭代
//方法1: for
for (int i = 0; i < list.size(); i++) {
	System.out.println(list.get(i));
}

// 方法2: for each 
for (String i : sites) {
	System.out.println(i);
}


(5) 排序
	ArrayList<String> alist=new ArrayList<String>();
	alist.add("ZZ");
	alist.add("TX");
	alist.add("GG");
	alist.add("AP");
	Collections.sort(alist); //排序
	for(String ele: alist) {
		System.out.print(ele+", ");
	}
输出: AP, GG, TX, ZZ, 

(6) 更多方法
https://www.runoob.com/java/java-arraylist.html
https://www.runoob.com/manual/jdk11api/java.base/java/util/ArrayList.html




2. 遍历 ArrayList
解析：三种方法都是用来遍历ArrayList集合，第三种方法是采用迭代器的方法，该方法可以不用担心在遍历的过程中会超出集合的长度。

	private static void demo1() {
		//定义ArrayList
		ArrayList<Integer> list=new ArrayList<Integer>();
		for (int i = 10; i <15; i++) {
			list.add(i);//添加元素
		}
		
		//直接输出
		System.out.println("size="+list.size()+", list = "+list);
		System.out.println("获取第2个： "+list.get(2));
		System.out.println("是否包含0： "+list.contains(11));//true
		System.out.println("是否包含15： "+list.contains(15));//false
		
		//遍历1 foreach
		for(int x: list) {
			System.out.print(x+", ");
		}
		System.out.println();
		
		//遍历2 for, 链表变数组
		Integer[] arr2=new Integer[list.size()];
		list.toArray(arr2);
		for(int i=0; i<arr2.length; i++) {
			System.out.print(arr2[i]+", ");
		}
		System.out.println();
		
		//遍历3 迭代器
		Iterator<Integer> it1=list.iterator();
		while(it1.hasNext()) {
			System.out.print(it1.next()+", ");
		}
		System.out.println();
		
		//编列4 迭代器的 for 写法
		for (Iterator<Integer> it = list.iterator(); it.hasNext();) {
			int i = (int) it.next();
			System.out.print(i+", ");
		}
	}

输出:
size=5, list = [10, 11, 12, 13, 14]
获取第2个： 12
是否包含0： true
是否包含15： false
10, 11, 12, 13, 14, 
10, 11, 12, 13, 14, 
10, 11, 12, 13, 14, 
10, 11, 12, 13, 14,




========================================
|-- LinkedList 链表 列表
----------------------------------------
1. 链表可分为单向链表和双向链表。
(1) 特点
Java LinkedList（链表） 类似于 ArrayList，是一种常用的数据容器。

与 ArrayList 相比，LinkedList 的增加和删除的操作效率更高，而查找和修改的操作效率较低。


(2) 使用情景
使用 ArrayList :
	频繁访问列表中的某一个元素。
	只需要在列表末尾进行添加和删除元素操作。

使用 LinkedList :
	你需要通过循环迭代来访问列表中的某些元素。
	需要频繁的在列表开头、中间、末尾等位置进行添加和删除元素操作。

(3) 层次结构
AbstractList 
	AbstractSequentialList 
		LinkedList
			|- size: transient int;
			|- first: Node<E>
			|- last: Node<E>

LinkedList 继承了 AbstractSequentialList 类。
实现的接口:
	Queue 接口，可作为队列使用。
	List 接口，可进行列表的相关操作。
	Deque 接口，可作为队列使用。
	Cloneable 接口，可实现克隆。
	java.io.Serializable 接口，即可支持序列化，能通过序列化去传输。


(4) 引入包 
LinkedList 类位于 java.util 包中，使用前需要引入它，语法格式如下：

	// 引入 LinkedList 类
	import java.util.LinkedList; 

	LinkedList<E> list = new LinkedList<E>();   // 普通创建方法
	或者
	LinkedList<E> list = new LinkedList(Collection<? extends E> c); // 使用集合创建链表



2. 方法 
LinkedList<String> sites = new LinkedList<String>();

sites.add("Google"); //新增元素
System.out.println(sites); //能直接打印 [aa, bb, cc]

在头尾添加更快
sites.addFirst("Wiki"); //在头部添加元素
list.addLast("zz"); //末尾添加
list.removeFirst();// 头部移除元素
list.removeLast(); //尾部移除元素

System.out.println(list.getFirst()); //获取头部元素
System.out.println(list.getLast()); //获取尾部元素 


//迭代元素 for
for(int i=0; i<list.size(); i++) {
	System.out.print(list.get(i)+", ");
}

// for each
for(String str: list) {
	System.out.print(str+", ");
}

更多方法:
https://www.runoob.com/java/java-linkedlist.html
https://www.runoob.com/manual/jdk11api/java.base/java/util/LinkedList.html






========================================
|-- HashSet //todo
----------------------------------------



























========================================
|-- HashMap
----------------------------------------

HashMap<Integer, Person> hm=new HashMap<Integer, Person>();
hm.put(i, new Person(i)); 添加元素：键-值对
Set<Integer> keys=hm.keySet(); 获取键的集合

for(Map.Entry<Integer, Person> entry: hm.entrySet()) { //遍历
	System.out.print("{key:"+entry.getKey()+", value:"+entry.getValue().age+"}, ");
}


实例：
	//HashMap类可为基本操作（get和put）提供稳定的性能
	private static void demo1() {
		HashMap<Integer, Person> hm=new HashMap<Integer, Person>();
		for (int i = 0; i < 3; i++) {
			//添加元素
			hm.put(i, new Person(i));
		}
		
		System.out.println("total="+hm.size());
		System.out.println("获取尝试："+hm.get(0).age);
		
		//获取keys
		Set<Integer> keys=hm.keySet();
		System.out.println("keys="+keys);
		//获取values
		Collection<Person> values=hm.values();
		System.out.println("values="+values);
		
		//遍历1：普遍使用，二次取值
		System.out.print("\n1.二次取值: ");
		for(Integer key: hm.keySet()) {
			Person p1=hm.get(key);
			System.out.print("{key:"+key+", value:"+p1.age+"}, ");
		}
		// Set<Integer> keys=hm.keySet();
		System.out.print("\n1.二次取值2:");
		for(Iterator<Integer> it=keys.iterator(); it.hasNext();){
			Integer key=it.next();
			Person p=hm.get(key);//获取元素，依赖key
//			System.out.print("age="+p.age+"(hashCode="+p.hashCode()+")"+p.toString());
			System.out.printf("{key:%d, value:%d}, ", key, p.age);
		}
		
		//遍历2
		System.out.print("\n2.通过 Map.EntrySet 使用iterator遍历key和value：");
		Iterator<Map.Entry<Integer, Person>> it2=hm.entrySet().iterator();
		while(it2.hasNext()) {
			// 通过迭代器，获取一个键值对
			Map.Entry<Integer, Person> entry=it2.next();
			System.out.print("{key:"+entry.getKey()+", value:"+entry.getValue().age+"}, ");
		}
		
		//遍历3: for each + 迭代器。推荐，尤其是容量大时
		System.out.print("\n3.通过Map.entrySet遍历key和value:");
		for(Map.Entry<Integer, Person> entry: hm.entrySet()) {
			System.out.print("{key:"+entry.getKey()+", value:"+entry.getValue().age+"}, ");
		}
		
		//遍历4：不要key，只要value
		System.out.print("\n4.通过Map.values()遍历所有的value，但不能遍历key: ");
		for(Person p: hm.values()) {
			System.out.print("{value:"+p.age+"}, ");
		}
		
	}
输出:
total=3
获取尝试：0
keys=[0, 1, 2]
values=[chapter7.Person@70dea4e, chapter7.Person@5c647e05, chapter7.Person@33909752]

1.二次取值: {key:0, value:0}, {key:1, value:1}, {key:2, value:2}, 
1.二次取值2:{key:0, value:0}, {key:1, value:1}, {key:2, value:2}, 
2.通过 Map.EntrySet 使用iterator遍历key和value：{key:0, value:0}, {key:1, value:1}, {key:2, value:2}, 
3.通过Map.entrySet遍历key和value:{key:0, value:0}, {key:1, value:1}, {key:2, value:2}, 
4.通过Map.values()遍历所有的value，但不能遍历key: {value:0}, {value:1}, {value:2}, 











========================================
多线程
----------------------------------------
1. volatile 修饰符
volatile 修饰符
	volatile 修饰的成员变量在每次被线程访问时，都强制从共享内存中重新读取该成员变量的值。
	而且，当成员变量发生变化时，会强制线程将变化值回写到共享内存。
	这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值。

public class MyRunnable implements Runnable
{
    private volatile boolean active;
    public void run()
    {
        active = true;
        while (active) // 第一行
        {
            // 代码
        }
    }
    public void stop()
    {
        active = false; // 第二行
    }
}

通常情况下，在一个线程调用 run() 方法（在 Runnable 开启的线程），在另一个线程调用 stop() 方法。 如果 第一行 中缓冲区的 active 值被使用，那么在 第二行 的 active 值为 false 时循环不会停止。

但是以上代码中我们使用了 volatile 修饰 active，所以该循环会停止。







========================================
JDBC 数据库 和 SQL调优 //todo
----------------------------------------
JDBC的原理
SQL如何调优



========================================
|-- MyBatis 原理 与 ORM 框架
----------------------------------------
ORM 是什么，架构思路是什么？
ORM 解决了什么问题？
常见的ORM框架有哪些？
MyBatis和Hibernate的异同和优劣
Mybatis和Spring整合的思想是什么？
如何快速搭建一个 Spring+Mybatis框架



========================================
|-- dao 是啥？数据访问对象模式（Data Access Object Pattern）或 DAO 模式
----------------------------------------
https://blog.csdn.net/m0_59834108/article/details/119376604





========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------
