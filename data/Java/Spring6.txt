Spring 6 视频笔记

狭义定义: Core	核心部分 - 本文主要关注的点
IoC Container, 
Events, 
Resources, 
i18n, 
Validation, 
Data Binding, 
Type Conversion, 
SpEL, 
AOP, 
AOT.




========================================
|-- Spring 6 大纲与进度记录(最低 jdk17)
----------------------------------------
1. 视频进度
https://www.bilibili.com/video/BV1kR4y1b7Qc/?p=2

官方文档: https://spring.io/projects/spring-framework
	https://spring.io/projects/spring-framework#learn
	https://docs.spring.io/spring-framework/docs/current/reference/html/

(1) 划分
广义：使用 spring的都是 spring 框架
狭义：spring framework

核心: IoC 和 AOP

(2) 特点
非侵入式
控制反转 IoC
面向切面 AOP
容器
组件化: 多个组件通过spring组成复杂应用
一站式


(3) 模块组成
Overview	
History, Design Philosophy, Feedback, Getting Started.

Core	核心部分 - 本文主要关注的点
IoC Container, Events, Resources, i18n, Validation, Data Binding, Type Conversion, SpEL, AOP, AOT.

Testing	 测试
Mock Objects, TestContext Framework, Spring MVC Test, WebTestClient.

Data Access	数据操作(JDBC)
Transactions, DAO Support, JDBC, R2DBC, O/R Mapping, XML Marshalling.

Web Servlet	
Spring MVC, WebSocket, SockJS, STOMP Messaging.

Web Reactive	
Spring WebFlux, WebClient, WebSocket, RSocket.

Integration	
REST Clients, JMS, JCA, JMX, Email, Tasks, Scheduling, Caching, Observability.

Languages	
Kotlin, Groovy, Dynamic Languages.

Appendix	
Spring properties.

Wiki	
What’s New, Upgrade Notes, Supported Versions, additional cross-version information.


(4) 环境
jdk17+

Eclipse: Version: 2022-12 (4.26.0)
Spring: 6.0.7
Apache Maven 3.9.1 #>mvn -v (maven 3.6+)





========================================
入门案例及实现步骤 (maven项目的文件结构、 测试文件的位置和写法)
----------------------------------------
1.大纲
(1) 先创建一个聚合工程，创建子模块
Spring6
	|-- spring-first
	|-- spring-2
(2) spring 开发步骤

1) 引入 Spring 相关依赖
2) 创建类，定义属性和方法
3) 按照 spring 要求创建配置文件(xml格式) 
4) 在spring 配置文件配置相关信息
5) 测试




2. 创建项目的具体操作
(1) 创建聚合工程
菜单 文件-new-maven project,

勾选 skip archetype selection
	archetype [ˈɑːkitaɪp]n. 原型；典型
不勾选 default Workspace location:
	Location: G:\learngit\spring6 一个新文件夹

下一步
	Group id: com.mio
	artifact id: spring6
	version: 0.0.1-SNAPSHOT 默认值
	Packaging: pom
finish。


(2) 创建子模块
菜单File-new-other-搜索 maven，选择 Maven Module
	勾选 skip archetype selection
	Module name: spring-first
	父项目: spring6

Artifact:
	group id: com.mio
	artifact id: spring-first
	version:
	packaging: jar
Finish


// 发现环境是 java1.5?
右击子模块，build path - config - Library 
	把jre环境设置为 本地安装的 jdk17




3. 写代码的具体操作
(1)修改子模块的 pom.xml 文件，添加后如下
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.mio</groupId>
    <artifactId>spring6</artifactId>
    <version>0.0.1-SNAPSHOT</version>
  </parent>
  <artifactId>spring-first</artifactId>
  
  <properties>
	  <maven.compiler.source>17</maven.compiler.source>
	  <maven.compiler.target>17</maven.compiler.target>
  </properties>
  
  <dependencies>
	  <!-- 引入Spring context依赖，表示将Spring的基础依赖引入了 -->
	  <dependency>
		  <groupId>org.springframework</groupId>
		  <artifactId>spring-context</artifactId>
		  <version>6.0.7</version>
	  </dependency>
	  
	  <!-- JUnit -->
	  <dependency>
		  <groupId>org.junit.jupiter</groupId>
		  <artifactId>junit-jupiter-api</artifactId>
		  <version>5.6.3</version>
	  </dependency>
  </dependencies>
</project>

保存后会自动刷新，子项目中的 Maven Dependencies 下已经引入10个jar包。



(2) 创建类，定义属性和方法
在子模块中创建类：右击子模块-new-class
	package: com.mio.spring6
	Name: User
$ cat User.java
package com.mio.spring6;

public class User {
	public void add() {
		System.out.println("add ....");
	}
}

(3) 按照 spring 要求创建配置文件(xml格式) 
尝试给eclipse安装 Spring suit4 插件，失败。。。

创建xml配置文件
	位置在 src/main/java 下的 resources/
	名字随意，比如 bean.xml
内容如下:
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">
</beans>


(4) 使用 bena 标签在xml中创建user对象
bean:
	id 属性：唯一标识
	class 属性：要创建对象所在类的全路径(包名称+类名称)

<bean id="user" class="com.mio.spring6.User"></bean>


(5) 测试类，在User同目录下
$ cat UserTest.java
package com.mio.spring6;

import org.junit.jupiter.api.Test;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class UserTest {

	@Test
	public void testUserObject() {
		//1.加载spring配置文件，对象创建
		ApplicationContext context=
				new ClassPathXmlApplicationContext("bean.xml");
		//2.获取创建对象
		User user=(User) context.getBean("user");
		System.out.println(user);
		//3.使用对象调用方法
		user.add();
	}
}



(6) 测试
// 右击 无法 run as test??!! //todo

尝试1: 凑合方法
只能创建main方法：
	public static void main(String[] args) {
		new UserTest().testUserObject();
	}
输出:
com.mio.spring6.User@55a1c291
add ....



尝试2: 更换测试类
注释掉 子模块中的
	  <!-- JUnit 
	  <dependency>
		  <groupId>org.junit.jupiter</groupId>
		  <artifactId>junit-jupiter-engine</artifactId>
		  <version>5.6.3</version>
	  </dependency>
	  -->
重新添加
      <!-- JUnit  这个有用 
		  <scope>test</scope>
      -->
      <dependency>
		  <groupId>junit</groupId>
		  <artifactId>junit</artifactId>
		  <version>4.11</version>
	  </dependency>
同时把测试类移动到 src/test/java/下

package com.mio.spring6;

import org.junit.Test;
//import org.junit.jupiter.api.Test;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class UserTest {

	@Test
	public void testUserObject() {
		//1.加载spring配置文件，对象创建
		ApplicationContext context=
				new ClassPathXmlApplicationContext("bean.xml");
		//2.获取创建对象
		User user=(User) context.getBean("user");
		System.out.println(user);
		//3.使用对象调用方法
		user.add();
	}
}

支持选中测试方法，右击 run as JUnit Test

或者右击 子模块 名字，右击 run as Junit Test，运行所有测试方法。



总结:
1. JUnit 两种依赖有啥关系？
2. 注意测试文件的位置
子模块/
  |-src/
     |-main/java/
         |- com.mio.spring6.User.java
     |-test/
         |- com.mio.spring6.UserTest.java





========================================
|-- 分析以上程序
----------------------------------------
1. 创建对象
(1) 是否调用了无参构造器？
$ cat User.java
package com.mio.spring6;

public class User {
	public User() {
		System.out.println("0: User 无参构造器");
	}
	
	public void add() {
		System.out.println("add ....");
	}
}

运行测试后，输出:
	0: User 无参构造器
	com.mio.spring6.User@28eaa59a
	add ....
说明: 确实输出了 无参构造器。


(2) 创建对象没有new? 如何使用反射创建对象？

步骤
	- 加载 bean.xml 配置文件
	- 解析xml文件
	- 获取属性值：id，class
	- 使用反射创建对象

代码:
	//反射创建对象
	@Test
	public void testUserObject2() throws Exception {
		//1.加载xml文件，获取信息：id, class 略
		//2.获取类对象
		Class clazz=Class.forName("com.mio.spring6.User");
		//3.创建对象
		//User user=clazz.newInstance(); //jdk17已过时
		User user=(User) clazz.getDeclaredConstructor().newInstance();
		//4.执行方法
		user.add();
		System.out.println("from: testUserObject2");
	}

输出:
	0: User 无参构造器
	add ....
	from: testUserObject2



(3) 创建的对象在哪里？
//todo: eclipse下怎么看maven项目中spring的源码?

Spring是一个bean 容器:
DefaulListableBeanFactory.java
	private final Map<String, BeanDefinition> beanDefinitionMap=...
	键值对，字符串-Bean定义，也就是bean的描述信息。







========================================
|-- 添加 Log4j2 日志记录组件
----------------------------------------
1. 日志常用设置 
(1)日志信息的优先级
从低到高：TRACE< DEBUG < INFO < WARN < ERROR < FATAL
	trace 追踪，相当于程序的执行，最低的日志级别
	debug 调试，一般将其设置为最低的日志级别
	info: 信息，输出重要信息，使用较多
	warn 警告
	error 错误
	fatal 严重错误
级别高的自动屏蔽级别低的。

(2) 日志输出目的地
控制台
文件

(3) 日志格式
时间格式

(4) 过程
引入依赖 pom.xml
写配置文件，固定名字：
测试
	输出到哪里？
	格式？
	输出哪些部分？





2. 实例
(1) 在pom.xml引入2个依赖
	  <!-- log4j2的2个依赖-->
	  <dependency>
		  <groupId>org.apache.logging.log4j</groupId>
		  <artifactId>log4j-core</artifactId>
		  <version>2.20.0</version>
	  </dependency>
      
      <dependency>
		  <groupId>org.apache.logging.log4j</groupId>
		  <artifactId>log4j-slf4j-impl</artifactId>
		  <version>2.20.0</version>
	  </dependency>

(2) 创建配置文件
文件名固定，必须放类的根目录下的 resources/下。
$ cat log4j2.xml
<?xml version="1.0" encoding="UTF-8"?>
<configuration>
	<loggers>
		<root level="DEBUG">
			<!-- 定义三种输出方式，具体定义见下文  -->
			<appender-ref ref="spring6log" />
			<appender-ref ref="RollingFile" />
			<appender-ref ref="log" />
		</root>
	</loggers>

	
	<!-- 更详细的设置: https://www.cnblogs.com/LLL0617/p/16864480.html -->
	<appenders>
		<!-- 输出日志信息到控制台 -->
		<console name="spring6log" target="SYSTEM OUT">
			<!-- 控制日志输出的格式 -->
			<PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss SSS} [%t] %-3level %logger{1024} - %msg%n" />
		</console>
		
		
		<!-- 输出到文件，每次log都自动清空，由append属性控制 -->
		<File name="log" fileName="G:/learngit/spring6/dustbin/test.log" append="false">
			<PatternLayout pattern="%d{HH:mm:ss SSS} %-5level %class{35} %L %M - %msg%xEx%n" />
		</File>
		
		
	    <RollingFile name="RollingFile" fileName="G:/learngit/spring6/dustbin/app.log" 
	    	filePattern="log/$${date:yyyy-MM}/app-%d{MM-dd-yyyy}-%i.log.gz">
            <PatternLayout pattern="%d{yyyy-MM-dd 'at' HH:mm:ss z} %-5level %class{35} %L %M - %msg%xEx%n"/>
            <SizeBasedTriggeringPolicy size="50MB" />
            <!-- 设置同类型日志,同一文件夹下可以存放的数量,如果不设置此属性则默认存放7个文件 -->
            <DefaultRolloverStrategy max="20" />
        </RollingFile>
	</appenders>

</configuration>


(3) 运行上一节的测试函数
1) 观察控制台输出，多了前三行
2023-04-02 17:37:43 441 [main] DEBUG org.springframework.context.support.ClassPathXmlApplicationContext - Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@3f57bcad
2023-04-02 17:37:43 761 [main] DEBUG org.springframework.beans.factory.xml.XmlBeanDefinitionReader - Loaded 1 bean definitions from class path resource [bean.xml]
2023-04-02 17:37:43 819 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean 'user'
0: User 无参构造器
org.springframework.context.support.ClassPathXmlApplicationContext@3f57bcad, started on Sun Apr 02 17:37:43 CST 2023
testUserObject: com.mio.spring6.User@666b83a4
add ....



2)文件 test.log

17:37:43 441 DEBUG org.springframework.context.support.AbstractApplicationContext 630 prepareRefresh - Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@3f57bcad
17:37:43 761 DEBUG org.springframework.beans.factory.xml.XmlBeanDefinitionReader 393 doLoadBeanDefinitions - Loaded 1 bean definitions from class path resource [bean.xml]
17:37:43 819 DEBUG org.springframework.beans.factory.support.DefaultSingletonBeanRegistry 225 getSingleton - Creating shared instance of singleton bean 'user'


3) 文件 app.log
2023-04-02 at 17:37:43 CST DEBUG org.springframework.context.support.AbstractApplicationContext 630 prepareRefresh - Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@3f57bcad
2023-04-02 at 17:37:43 CST DEBUG org.springframework.beans.factory.xml.XmlBeanDefinitionReader 393 doLoadBeanDefinitions - Loaded 1 bean definitions from class path resource [bean.xml]
2023-04-02 at 17:37:43 CST DEBUG org.springframework.beans.factory.support.DefaultSingletonBeanRegistry 225 getSingleton - Creating shared instance of singleton bean 'user'





3. 手动输出日志信息
(1) 在测试类中添加
public class UserTest {
	//1.创建 logger 对象
	private Logger logger=LoggerFactory.getLogger(UserTest.class);
	
	@Test
	public void testUserObject() {
		//...
		
		//2.手动写日志
		logger.info("## 执行了 testUserObject()");
		//...
	}
}

执行后，控制台多了一行
2023-04-02 17:46:32 081 [main] INFO com.mio.spring6.UserTest - ## 执行了 testUserObject()






========================================
----------------------------------------




========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------
