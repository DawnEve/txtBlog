Java IO 体系详解




========================================
Java IO 详解
----------------------------------------


========================================
|-- 文件读写实例
----------------------------------------
1. 写文件
(1) FileOutputStream 实例 
操作本地文件的字节输出流，可以把程序中的数据写到本地文件中。

	private static void demo1() throws IOException {
		//1 创建对象
		FileOutputStream fos=new FileOutputStream("src//dustbin//A1.txt");
		
		//2 写入数据
		fos.write(97);
		fos.write('b');
		
		//3 关闭资源
		fos.close();
		System.out.println("end");
	}

发现新建了文件 src/dustbin/A1.txt，内容是字符串:"ab"
语句1: 参数可以是字符串，或者File对象。注意，路径是相对于class根目录的。
	如果文件不存在，则新建，但是要保证父级路径是存在的。
	如果文件存在，则清空文件。

语句2: write参数是整数，写到文件中的是整数对应的ascii码。
	一次只能写一个字符，多个字符要执行多次。
语句3: 如果不释放，后面添加while死循环，则无法删除该文件。
	也就是不释放资源，java就会一直占用该资源，其他应用无法进行一些操作。


(2) 尝试写多个字符
	//声明数组
	byte[] arr=new byte[] {'a', 'b', 'c', 'd', '5'};
	fos.write(arr); //abcd5
	
	//还可以写入数组的部分内容 write(byte b[], int off, int len)
	fos.write(arr, 1, 2); //bc 从下标为1的字符开始，长度为2.

(3) 换行？使用字符 '\n'，win最好使用全称呼 "\r\n"，虽然java会自动补齐。
	fos.write(new byte[] {'a', 'b', 'c', '\n', '1', '2', '3'});

	//写法2: 字符串合并，字符串转为字节数组
	String str1="abc", str2="123";
	byte[] arr= (str1+'\n'+str2).getBytes();
	fos.write(arr);

(4) 已有文件，在后面追加
	// new FileOutputStream() 的第二个参数 append=true时，表示追加内容
	private static void demo4() throws IOException {
		FileOutputStream fos=
				new FileOutputStream("src//dustbin//A1.txt", true);
		fos.write(new byte[] {'\n','n', 'e', 'w', 'l', 'i', 'n', 'e'});
		fos.close();
	}


2. 读文件
(1)读取文件
	private static void demo1() throws IOException {
		//1. 创建连接
		FileInputStream fis=new FileInputStream("src/dustbin/A2.txt");
		
		//2. 读取内容
		int read = fis.read();
		System.out.println(read); //116
		
		//如果不想看到数字，想看到字符呢？强转
		System.out.println((char)read); //t
		
		//3. 关闭资源
		fis.close();
	}
第一行：如果文件不存在，报错！
第二行: 
	一次读取一个字节，读出来的是数据在 ascii 码上对应的数字
	读取一次，指针往后移动一次。
	读到文件末尾，read方法返回-1
第三行: 每次都要释放。


(2) 读取完整文本？循环读取。
反复调用 read方法，最后会出现返回-1，说明读取结束。
使用循环，读取整个文件。
	// 读取整个文件
	private static void demo2() throws IOException {
		FileInputStream fis=new FileInputStream("src//dustbin//A2.txt");
		int temp;
		while( (temp=fis.read()) != -1 ) {
			System.out.print((char) temp);
		}
	}


3. 文件拷贝
(1)读出来，再写入，就是拷贝了。
	private static void copy_file() throws IOException {
		//1.打开文件
		FileInputStream fis=new FileInputStream("src//dustbin//A2.txt");
		FileOutputStream fos=new FileOutputStream("src//dustbin//A2-back.txt");
		
		//2.读写文件
		int buffer;
		while((buffer=fis.read()) != -1) {
			fos.write(buffer);
		}
		
		//3.关闭资源
		//一般的，先开的流最后关闭
		fos.close();
		fis.close();
		System.out.println("done!");
	}

统计运行时间
	//统计运行时间
	public static void main(String[] args) throws IOException {
		long time1=System.currentTimeMillis();
		copy_file();
		long time2=System.currentTimeMillis();//单位 毫秒
		System.out.println("time elapse: "+ (time2-time1) );
	}


(2) 提高拷贝速度？
增加缓存字节数，比如 2048，能显著的减少搬运次数。
一般选择 1024 的整数倍。也可以 1024*1024*5，一次5M。

	// 带缓存的读取，速度特别快
	private static void copy_file2() throws IOException {
		//1.打开文件
		FileInputStream fis=new FileInputStream("src//dustbin//A2.txt");
		FileOutputStream fos=new FileOutputStream("src//dustbin//A2-back.txt");
		
		//2.读写文件
		byte[] buffer=new byte[8]; //实际使用时，设置为 1024 的整数倍
		int len; //返回值是读取的长度
		while((len=fis.read(buffer)) != -1) {
			//接收三个参数:arr,offset,len
			String str=new String(buffer, 0, len); 
			System.out.println( ">[" + len + "]: " + str ); 
			fos.write(buffer, 0, len);
		}
		
		//3.关闭资源
		//一般的，先开的流最后关闭
		fos.close();
		fis.close();
		System.out.println("done! 2");
	}




4. 怎么捕获异常

(1)基本做法：手动在 finally 释放资源
	private static void demo1() {
		//使用 try catch 捕获异常
		FileInputStream fis=null;
		
		try {
			fis = new FileInputStream("src//dustbin//A2.txt");
			int read = fis.read();
			System.out.println((char)read);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}finally {//一定会执行，除非try中执行了 exit 退出jvm虚拟机
			if(fis != null) { //防止空指针异常
				try {
					fis.close(); //java.lang.NullPointerException
				} catch (IOException e) {
					e.printStackTrace();
				} //还可能继续报错
			}
		}
		
		System.out.println("end 1");
	}

如果有2个流，则 finally中要写2个if+try，十分繁琐。


(2) jdk7的写法
实现了 AutoClosable 接口的，可以自动释放资源
try(创建流对象1; 创建流对象2){
	可能出现异常的代码;
}catch(异常类名 变量名){
	异常的处理代码;
}

比如:
	// jdk7写法，多个流时，try()后括号十分拥挤
	private static void demo2() {		
		try(FileInputStream fis=new FileInputStream("src//dustbin//A2.txt")) {
			int read = fis.read();
			System.out.println((char)read);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		System.out.println("end 2");
	}


(3) jdk9的写法
实现了 AutoClosable 接口的，可以自动释放资源

创建流对象1; 
创建流对象2

try(流1; 流2){
	可能出现异常的代码;
}catch(异常类名 变量名){
	异常的处理代码;
}



========================================
|-- 字符集详解(ascii, gbk, unicode/UTF-8)
----------------------------------------
1. 计算机编码规则
计算机的存储规则：二进制形式存储，计算机最小存储单元是1个字节。
	一个英文只需要一个字节(1byte=8bits)的空间。

(1) ascii 
0-127，共128个，对英文足够了。
共7位，但是一个字节是8位，所以前面补一个0.

编码: a -> 97 -> 110 0001 -> 0110 0001
解码：反过来

(2) gbk 表
GB2312-80 表示80年代发布。
BIG5 繁体
GBK 字符集: 2000年，包含简体、繁体、日韩汉字等。
	微软显示为 ANSI
	规则1:1个汉字使用2个字节，能保存 6 万个汉字。
	规则2:高位字节二进制一定以1开头，转成十进制之后是一个负数。
		这样，英文二进制开头是0，汉字二进制开头是1.
	例子: 10111010 10111010 01100001，前2个字节是"汉"，后面是英文字母"a"。
unicode 字符集: 国际字符集。

最常用的后两者：gbk, utf-8
	UTF: Unicode Transfer Format.
	最早的 utf-16编码规则：用2-4个字节保存，英文16位(2字节)，前面1个字节全是0，浪费内存。
	utf-32 编码 更浪费空间。
	utf-8 编码 比较节省空间，使用1-4个字节保存。
		ascii 用1个字节: 0xxxxxxx
		汉字用 3个字节:  1110xxxx 10xxxxxx 10xxxxxx
		先查 unicode 字符集，转为16位二进制，然后按照 utf-8 编码方式插入空白位置。



2. 为什么乱码？
原因1: 读取数据未读完整个汉字。
原因2: 编码和解码时的方式不统一。

(1) java 中编码的方法

String 类中的方法
	public byte[] getBytes() 使用默认方式进行编码(IDEA默认用utf-8, Eclipse默认用GBK)
	public byte[] getBytes(String charsetName) 使用指定方式进行编码

(2) java 中解码的方法
String 类中的方法 
	String(byte[] bytes) 使用默认方式进行解码
	String(byte[] bytes, String charsetName) 使用指定方式进行解码

实例:
	// 汉字的编码与解码
	private static void demo6() throws UnsupportedEncodingException {
		String str1 = "is你";
		//编码
		byte[] bytes1 = str1.getBytes();
		System.out.println(Arrays.toString(bytes1));
		
		byte[] bytes2 = str1.getBytes("GBK");
		System.out.println(Arrays.toString(bytes2));
		
		//解码
		System.out.println(new String(bytes1));
		System.out.println(new String(bytes2)); //乱码
		System.out.println(new String(bytes2, "GBK"));
	}

输出:
[105, 115, -28, -67, -96]
[105, 115, -60, -29]
is你
is��
is你


(3) eclipse 默认编码方式也是 utf-8

	// 打印二进制为数组形式，保留前面的0
	private static void print_byte(byte ele) {
		//System.out.println(Integer.toBinaryString(ele));
		
		StringBuffer sb=new StringBuffer();
		
		for(int i=7; i>=0; i--) {
			sb.append( (ele & (1<<i)) >0?"1":"0" );
		}
		System.out.println( sb.toString() );
	}

	// 编码方式
	private static void demo4() {
		String str1="is你";
		byte[] bytes = str1.getBytes();
		System.out.println(bytes.length); //utf-8编码，ascii码1字节，汉字3字节
		
		//打印字节 对应的数字
		System.out.println(Arrays.toString(bytes));
		System.out.println(Integer.toBinaryString(0xff) + "<<");
		
		//打印字节 二进制。只保留低8位
		for(byte ele: bytes) {
			// System.out.println(Integer.toBinaryString(ele));
//			System.out.println(Integer.toBinaryString(ele & 0xFF));
			print_byte(ele);
		}
	}
 
	// 汉字的编码，utf-8编码用3字节，gbk用2字节
	private static void demo5() throws UnsupportedEncodingException {
		String str1 = "is你";
		byte[] bytes = str1.getBytes("GBK");
		System.out.println(bytes.length); //4 汉字 gbk是2字节
		System.out.println(Arrays.toString(bytes)); //[105, 115, -60, -29]
		
		for(byte ele: bytes) {
			print_byte(ele);
		}
	}







========================================
|-- 字符流 = 字节流 + 字符集
----------------------------------------
1.字符流的底层也是字节流
	字符流 = 字节流 + 字符集 

特点：
	输入流：一次读一个字节，遇到中文时，一次读多个字节。
	输出流：底层会把数据按指定的编码方式进行编码，变成字节再写到文件中。

使用场景：对纯文本文件进行读写操作。


(2) 继承结构
字符流： Reader 读 字符流，Writer 写 字符流。作为后缀。
	FileReader 操作本地文件的字符 输入流: File 作用，Reader 父类。
	FileWriter 操作本地文件的字符 输出流：File 作用，Writer 父类。 



2. FileReader 读取文本文件
使用顺序
1) 创建字符输入流对象
	public FileReader(File file);
	public FileReader(String pathname);
	文件不存在，则报错。
2)读取数据
	public int read(); 读取数据，读到末尾返回-1
	细节1：按字节进行读取，遇到中文，一次读取多个字节，然后解码，返回一个十进制整数。
		要想获得字符，需要强转 (char) ele;
	细节2：读到文件末尾了，read方法返回-1。

	public int read(char[] buffer); 读取多个数据，读到末尾返回-1
	注意：字符流是读取到字符数组，字节流是读取到字节数组中。
	细节：一次读取的字符填充字符数组，做了三步：读取字节-解码为十进制-强转为字符。
3)释放资源
	public int close(); //释放资源/关流。

(1)实例1：空参read()读取中文文本文件
	// 读文本文件
	private static void demo1() throws IOException {
		//1 创建连接
		FileReader fr=new FileReader("src//dustbin//B1.txt");
		//2 读取数据
		//int read = fr.read();
		//System.out.println(read);//28180
		int tmp;
		while((tmp=fr.read()) != -1) {
			System.out.print((char)tmp);
		}		
		//3 释放资源
		fr.close();
	}


(2)实例2：带参数的read(char[] buffer)读取中文文本文件
	// 读文本文件：带数组参数的 read(char[] buffer)
	private static void demo2() throws IOException {
		//1 创建连接
		FileReader fr=new FileReader("src//dustbin//B1.txt");
		//2 读取数据
		char[] buffer=new char[2];
		int len;
		while((len=fr.read(buffer)) != -1) {
			System.out.println( new String(buffer, 0, len));
		}
		//3 释放资源
		fr.close();
	}


3. FileWriter 写入文本文件
步骤
1) 创建字符流，关联本地文件
	public FileWriter(File file); //File 类
	public FileWriter(String pathname); //文件路径
	默认关闭续写，如果文件存在，则清空文件。
	
	public FileWriter(File file, boolean append) //是否续写
	public FileWriter(String pathname, boolean append)

2) 写文件，有5个重载成员方法
	void write(int c); 写出一个字符。就是整数对应字符集上的字符。
	void write(String str); 写出一个字符串（高频使用）
	void write(String str, int off, int len); 写出部分字符串
	void write(char[] cbuf); 写出一个字符数组
	void write(char[] cbuf, int off, int len); 写出字符数组的一部分

3) 关闭流

(1) 实例1：逐个写入文件
	// 写入文件
	private static void demo3() throws IOException {
		//1.打开资源
		FileWriter fw=new FileWriter("src//dustbin//B2.txt");
		//2.写入内容
		fw.write(97); //参数是整数，写入的是a
		
		//写入汉字呢
		byte[] bytes = "我".getBytes("UTF-8");
		System.out.println( Arrays.toString(bytes) ); //汉字的二进制编码 [-26, -120, -111]
		
		int code=(int)'我'; //汉字对应的编码
		System.out.println( code ); //25105
		fw.write(code); //写入的是一个汉字
		//3.关闭资源
		fw.close(); //查看文件属性，确实是4字节：1个英文(1字节)，1个汉字(3字节)
	}


(2) 实例2：写入字符串或字符数组
	// 写入文件：写入字符串或字符数组，或其部分
	private static void demo4() throws IOException {
		FileWriter fw=new FileWriter("src//dustbin//B2.txt");
		//写入字符串
		String str1="你好，java";
		fw.write(str1);
		//写入字符串的一部分
		fw.write("\n");
		fw.write(str1, 0, 2); //写入2个字符
		//写入字符数组
		char[] chars={'你', '好', 'A', 'I'};
		fw.write("\n");
		fw.write(chars);
		//写入字符数组 的一部分
		fw.write("\n");
		fw.write(chars, 2, 2);
		
		fw.close();
	}

(3) 续写开关
	//续写文件: 创建连接时添加第二个参数 true
	private static void demo5() throws IOException {
		FileWriter fw=new FileWriter("src//dustbin//B2.txt", true);
		fw.write("新的函数");
		fw.close();		
	}





4. 字节读取的底层原理

(1) 字符输入流
字符流对象的底层，有一个长度为 8192的字节数组的 缓冲区。
	字节流底层没有缓冲区。

调用read时，缓存区没有数据，则从文件读取到内存的缓冲区，尽可能装满缓冲区。
	然后从缓冲区读取。

(2) 字符输出流
字符输出流也有缓冲区，长度为 8192的字节数组。
什么时候 内存缓冲区 写到 文件中呢？三种情况：
	- 缓冲区装满了
	- 手动刷新缓冲区 flush() 执行后，还可以继续往文件写入数据。
	- 释放资源 close() 关闭资源后，不能向文件继续写入数据。





========================================
|-- 字节流和字符流的使用场景：4个实例
----------------------------------------
1. 字节流和字符流的使用场景
(1) 字节流 
	拷贝任意类型的文件
(2) 字符流 
	读取纯文本文件中的数据
	向纯文本文件中写入数据。


2. 拷贝文件夹，考虑子文件夹

	// 拷贝文件夹，考虑子文件夹
	private static void demo1() throws IOException {
		//1.源文件夹
		File src=new File("src//dustbin//temp");
		//2.目的文件夹
		File dest=new File("src//dustbin//temp2");
		//3.调用方法开始拷贝
		copydir(src, dest);
	}
	
	/*
	 * 作用：执行文件夹拷贝
	 * 
	 * @param src 数据源
	 * @param dest 目的地
	 */
	private static void copydir(File src, File dest) throws IOException {
		dest.mkdirs(); //如果不存在，则新建；存在，则创建失败，但是不报错。
		//1 进入数据源，获取列表
		File[] listFiles = src.listFiles();
		//2 遍历列表
		for(File file: listFiles) {
			System.out.println("file from: "+file);
			System.out.println(">>file to: "+ file.getName() );
			if(file.isFile()) {
				//3 如果是文件，拷贝：字节流
				FileInputStream fis=new FileInputStream(file);
				FileOutputStream fos = new FileOutputStream(
							new File(dest, file.getName())
						);
				
				byte[] bytes=new byte[1024*5];
				int len;
				while((len=fis.read(bytes)) != -1) {
					fos.write(bytes,0,len);
				}
				
				fos.close();
				fis.close();
				
			}else {
				//4 如果是文件夹，则新建文件夹，递归调用本方法
				copydir(file, new File(dest, file.getName()));
			}
		}
	}





3. 文件加密
对原始文件加密存储，使用时再对其进行解密处理。

加密原理:
	对原始文件中的每一个字节数据进行更改，然后将更改后的数据存储到新的文件中。
解密原理：
	读取加密之后的文件，按照加密的规则反向操作，生成原始文件。

^ 异或，两边相同返回 false，两边不同返回 true。

	// 使用异或加密，对图片
	private static void demo3_encode() throws IOException {
		FileInputStream fis=new FileInputStream("src//dustbin//刘亦菲.png");
		FileOutputStream fos=new FileOutputStream("src//dustbin//secret.png");
		
		byte[] bytes=new byte[1024];
		int len;
		// 加密参数
		int secretNumber=100;
		while((len=fis.read(bytes)) != -1) {
			// fos.write(bytes, 0, len);
			//逐个字节加密
			for(int i=0; i<len; i++) {
				bytes[i] = (byte) (bytes[i] ^ secretNumber);
			}
			fos.write( bytes, 0, len);
		}
		fos.close();
		fis.close();
		System.out.println("encode: done!");
	}
	//解密文件，和加密一样，再次逐字节和某个整数取异或。除了文件名，和demo3没有任何变化。




4. 对文件中-分割的数字进行排序
小细节1：文件中的数字不要换行。
小细节2: 文件不能有bom头！bom头占3个字节，会导致读取、排序异常。
	IDEA: 菜单 settings - Editor-File Encoding，右侧底部 Create UTF-8 file: with NO bom;

(1) 方法1
	// 排序文件中的-分割的数字: 1-5-3-6-2-0-80-8
	private static void demo5_order() throws IOException {
		//1.读取文件
		FileReader fr=new FileReader("src//dustbin//temp//B//B3.txt");
		StringBuilder sb=new StringBuilder();
		char[] chars=new char[5];
		int len;
		while((len=fr.read(chars)) != -1) {
			sb.append(new String(chars, 0, len));
		}
		fr.close();
		System.out.println(sb.toString());
		
		//2. 排序
		String[] arrStr = sb.toString().split("-"); //按照-切分
		//转为数字
		int[] arrInt=new int[arrStr.length];
		for(int i=0; i<arrStr.length; i++) {
			arrInt[i] = Integer.parseInt(arrStr[i]);
		}
		//排序
		Arrays.sort(arrInt);
		//sort(arrInt);
		System.out.println(Arrays.toString(arrInt));
		
		//3. 写出数据
		FileWriter fw = new FileWriter("src//dustbin//temp//B//B3-sort.txt");
		for(int i=0; i<arrInt.length; i++) {
			if(i != arrInt.length-1) {
				fw.write(""+arrInt[i] + "-");
			}else {
				fw.write(""+arrInt[i] + "");
			}
		}
		fw.close();
	}

(2) 方法2: 另一种实现
https://www.bilibili.com/video/BV1n3411Q7gi/?p=24 13'44'' 描述的是 java 处理数据的流程操作。
	Arrays.stream()

	// 排序文件中的-分割的数字: 1-5-3-6-2-0-80-8
	// 使用流实现分割、排序，使用替换转为字符串并保存
	private static void demo5_order2() throws IOException {
		//1.读取文件
		FileReader fr=new FileReader("src//dustbin//temp//B//B3.txt");
		StringBuilder sb=new StringBuilder();
		char[] chars=new char[5];
		int len;
		while((len=fr.read(chars)) != -1) {
			sb.append(new String(chars, 0, len));
		}
		fr.close();
		System.out.println(sb.toString());
		
		//2. 使用流实现 排序
		Integer[] arr = Arrays.stream(sb.toString().split("-"))
				.map(Integer::parseInt)
				.sorted()
				.toArray(Integer[]::new);
		System.out.println(Arrays.toString(arr));
		//3. 保存结果
		String s = Arrays.toString(arr).replace(", ", "-");
		String result = s.substring(1, s.length()-1);
		FileWriter fw=new FileWriter("src//dustbin//temp//B//B3-sort2.txt");
		fw.write(result);
		fw.close();		
	}




========================================
|-- 字节缓冲流，字符缓冲流：自带长度为 8192 的缓冲区，缓冲字符流特有方法(readLine(), newLine())
----------------------------------------
1. 加了缓冲区，会更快
(1)字节缓冲流
●字节缓冲输入流：BufferedInputStream
●字节缓冲输出流：BufferedOutputStream
字节缓冲流 提速明显。
字节缓冲区大小是长度为8192的字节数组，其缓冲区是 8k。

(2)字符缓冲流
●字符缓冲输入流：BufferedReader
●字符缓冲输出流：BufferedWriter
字符流本身底层有缓冲区，字符缓冲流 提速不明显。
字符缓冲区是长度为8192的字符数组，一个字符占2字节，则其缓冲区是 16k。



2. 缓冲流是高级流，把基本流包装成高级流，提高数据读写性能
字节缓冲流自带 8k 缓冲区(8192)。
干活的还是4个基本流。

(1) 带缓冲区的流，能减少IO次数，从而提高速度
	// 拷贝数据
	private static void demo1() throws IOException {
		//1 打开文件，关联底层流
		BufferedInputStream bis=new BufferedInputStream(
				new FileInputStream("src//dustbin//B1.txt"));
		BufferedOutputStream bos=new BufferedOutputStream(
				new FileOutputStream("src//dustbin//B1-back.txt"));
		//2 开始复制: 逐个字节复制
		int b;
		while((b=bis.read()) != -1) {
			bos.write(b);
		}
		//3 释放资源
		bos.close();
		bis.close();
	}
几个问题：
缓冲区在哪里？物理上在内存中，定义在构造函数中的数组。
缓冲流关闭时为什么不关闭基础流？因为缓冲流close方法会做这件事。
缓冲流真的能提速吗？后面有测试。

解释：读和写的内存缓冲区不一样，变量b就是在2个缓冲区之间复制数据。
	在内存之间拷贝数据很快，比从硬盘读取数据要快很多。


(2) 一次操作多个字节
	private static void demo2() throws IOException {
		//1 打开文件，关联底层流
		BufferedInputStream bis=new BufferedInputStream(
				new FileInputStream("src//dustbin//B1.txt"));
		BufferedOutputStream bos=new BufferedOutputStream(
				new FileOutputStream("src//dustbin//B1-back.txt"));
		//2 开始复制: 逐个字节复制
		byte[] bytes=new byte[1025];
		int len;
		while((len=bis.read(bytes)) != -1) {
			bos.write(bytes, 0, len);
		}
		//3 释放资源
		bos.close();
		bis.close();
	}




3. 字符缓冲流，把基本流包装为高级流
	public BufferedReader(Reader r);
	public BufferedWriter(Writer r); 
字符流底层已经有缓冲区，这个字符缓冲流提升速度有限。
但是，它提供了2个很好用的方法，以后经常用。
	public String readLine(); 读取一行数据，如果没有数据可读了，返回null
		字符缓冲输入流特有的方法
	public void newLine(); 跨平台的换行。
		字符缓冲输出流特有的方法


	// 字符缓冲流，拷贝数据
	private static void demo3() throws IOException {
		//1 打开资源
		BufferedReader br=new BufferedReader(new FileReader("src//dustbin//B1.txt"));
		BufferedWriter bw=new BufferedWriter(new FileWriter("src//dustbin//B1-back.txt"));
		//2 拷贝
		/*
		int b;
		while((b=br.read()) != -1) {
			bw.write(b);
		}
		*/
		// 整行读取
		//String line = br.readLine();
		//System.out.println(line);
		String line=null;
		while((line=br.readLine()) != null) {
			bw.write(line);//只有这一行，则没有换行符
			bw.newLine(); //该方法是 BufferedWriter 特有的。
			//缺点：不好判断最后一行后是否有换行
		}
		
		//3 关闭资源
		bw.close();
		br.close();
	}



4. 四种流拷贝的耗时比较
字节基本流，一次一个字节，一次一个字节数组
字节缓冲流，一次一个字节，一次一个字节数组

(1)测试：4种字节流的拷贝速度比较
	public static void main(String[] args) throws IOException {
		String src="src//dustbin//secret2.png";
		String des="src//dustbin//secret2-backup.png";
		long start = System.currentTimeMillis();
//		demo1(src, des); // 基本字节流，1次1个字节 929ms
//		demo2(src, des); // 基本字节流，1次1个字节数组 114ms
		
//		demo3(src, des); //缓冲字节流，1次1个字节 17ms
		demo4(src, des); //缓冲字节流，1次1个字节数组 5ms
		long end = System.currentTimeMillis();
		System.out.println(end-start);
	}
确实差别很大。缓冲流比基本流快，而一次读取一个数组更快。
具体代码见上文。



5. 文本排序
每行文本前一个编号加点号，按编号排序。
	1.渔歌子
	2.--张志和
	3.西塞山前白鹭飞，
	4.桃花流水鳜鱼肥。
	5.青箬笠，绿蓑衣，
	6.斜风细雨不须归。

(1) 写法1
	// 对文件排序，按照每行前的序号: 使用按行读取
	private static void demo1() throws IOException {
		//1 读取文件
		BufferedReader bis=
				new BufferedReader(new FileReader("src//dustbin//C3.txt"));
		//2 读取文件
		//放到数组中
		ArrayList<String> list=new ArrayList<>();
		String line;
		while((line=bis.readLine()) != null) {
			list.add(line);
		}
		//3. 自定义排序方法
		Collections.sort(list, new Comparator<String>() {
			@Override
			public int compare(String o1, String o2) {
				//按照.切割得到数组，获取.前部分，转为整数
				int i1=Integer.parseInt(o1.split("\\.")[0]);
				int i2=Integer.parseInt(o2.split("\\.")[0]);
				return i1-i2;
			}
		});
		//4. 输出，写入文件
		BufferedWriter bos=
				new BufferedWriter(new FileWriter("src//dustbin//C3-back.txt"));
		for(int i=0; i<list.size(); i++) {
			String ele=list.get(i);
			System.out.println(ele);
			bos.write(ele);
			if(i!= list.size()-1) {
				bos.newLine();
			}
		}
		//关闭流
		bis.close();
		bos.close();
	}

(2) 写法2：对文件排序，按照每行前的序号: 使用按行读取。使用自动排序容器 TreeMap
	private static void demo2() throws IOException {
		//1 打开文件
		BufferedReader bis=
				new BufferedReader(new FileReader("src//dustbin//C3.txt"));
		//2 读取文件
		//放到会自动排序的容器中 TreeMap
		TreeMap<Integer, String> tmap=new TreeMap<>();
		String line;
		while((line=bis.readLine()) != null) {
			String[] arr=line.split("\\.");
//			tmap.put(Integer.parseInt(arr[0]), arr[1]);
			tmap.put(Integer.parseInt(arr[0]), line);
		}
		System.out.println(tmap);
		
		//3. 输出，写入文件
		BufferedWriter bos=
				new BufferedWriter(new FileWriter("src//dustbin//C3-back.txt"));
		Set<Entry<Integer, String>> entrySet = tmap.entrySet();
		Iterator<Entry<Integer, String>> iterator = entrySet.iterator();
		while(iterator.hasNext()) {
			Entry<Integer, String> entry = iterator.next();
//			String ele=entry.getKey()+"."+entry.getValue();
			String ele = entry.getValue();
			
			System.out.println(ele);
			bos.write(ele);
			if(iterator.hasNext()) {
				bos.newLine();
			}
		}
		//关闭流
		bis.close();
		bos.close();
	}




6.记录软件使用次数：运行次数记录到文件

	private static void demo3() throws IOException {
		// 字节二进制形式
		File file=new File("src//dustbin//count.txt");
		int count=1;
		if(file.exists()) {
			BufferedReader bis=new BufferedReader(new FileReader(file));
			count = Integer.parseInt( bis.readLine() ); //一次读取一行，转为整数
			bis.close();
		}
		//判断是否3次以内
		if(count <=3) {
			System.out.println("第" + count + "次运行！");
		}else {
			System.out.println("本软件只能免费使用3次，请注册会员后继续使用！"+count);
			System.exit(0);
		}
		//写入文件
		BufferedWriter bos=new BufferedWriter(new FileWriter(file) );
		bos.write(count+1 + "");
		bos.close();
	}



========================================
|-- 转换流：属于字符流，包括 InputStreamReader 输入流, OutputStreamWriter 输出流
----------------------------------------
1. 转换流是高级流
是字符流和字节流之间的桥梁。

数据源-> 字节流->转换流 -> 【内存】 ->转换流->字节流 ->目的地。

InputStreamReader 包装 字节流，字节流 to 字符流。
	缀表明，它的父类是 Reader，它前面部分表明它读取的是字节（内部转为字符）
	可以指定编码格式，不乱码了。

OutputStreamWriter 也是包装 字节流：字符流 to 字节流。 

(2) 使用场景
- 指定字符集 读写数据，但是 jdk11 之后，淘汰了该用法。
- 字节流想用字符流的方法：


2. 转换文件编码
(1) 手动创建GBK文件，读取到内存，不能乱码
	// 手动读取GBK文件，读取到内存，不能乱码(<jdk11)
	private static void demo1() throws IOException {
		InputStreamReader isr=
				new InputStreamReader(new FileInputStream("src//dustbin//GBK.txt"), "GBK");
		int ch;
		while((ch=isr.read()) != -1) {
			System.out.print((char)ch);
		}
		isr.close();
	}

jdk11后使用：FileReader fr=new FileReader("src//dustbin//GBK.txt", Charset.forName("GBK"));


(2) 指定编码写出文件，如GBK

	// jdk11 新增构造函数 FileWriter(file, charsetName);
	private static void demo2() throws IOException {
		OutputStreamWriter osw = new OutputStreamWriter(
				new FileOutputStream("src//dustbin//GBK2.txt"), "GBK");
		osw.write("良辰美景,good");
		osw.close();		
	}


(3) 综合练习：本地GBK文件，转存为 utf-8 格式 
	// 综合练习：本地GBK文件，转存为 utf-8 格式
	private static void demo3() throws IOException {
		//打开文件
		String src="src//dustbin//GBK.txt";
		String des="src//dustbin//UTF-8.txt";
		InputStreamReader isr=new InputStreamReader(new FileInputStream(src), "GBK");
		OutputStreamWriter osw=new OutputStreamWriter(new FileOutputStream(des), "UTF-8");
		
		//转码
		char[] chars=new char[24];
		int len;
		while((len=isr.read(chars)) != -1) {
			osw.write(chars, 0, len);
		}
		
		//关闭资源
		osw.close();
		isr.close();
	}

	//jdk11支持参数2 FileWriter fw=new FileWriter("des", Charset.forName("UTF-8"));

(4) 使用字节流读取文件，一次读取一整行的内容，而且不能出现乱码

	// 利用字节流读取文件，一次读取一行，不能乱码
	private static void demo1() throws IOException {
		/*
		 * 字节流读取文件: FileInputStream
		 * 一次读取一行 readLine，只有 BufferedReader 才有该方法
		 * 两个之间的桥梁: InputSstreamReader
		 * */
		String src="src//dustbin//GBK.txt";
		InputStreamReader isr=
				new InputStreamReader(new FileInputStream(src), "GBK");
		BufferedReader br=new BufferedReader(isr);
		String line;
		while((line=br.readLine()) != null) {
			System.out.println("> " + line);
		}
		
		br.close();
		isr.close();
	}



小结：
转换流的名字是什么？
	字符转换输入流 InputStreamReader 
	字符转换输出流 OutputStreamWriter

转换流的作用是什么？
	指定字符集读写数据(jdk11之后已经淘汰)
	字节流想使用字符流的方法




========================================
|-- 序列化流 与 反序列化流: 属于字节流
----------------------------------------
1. 继承结构
应用场景
游戏存档，为了防止用户看懂，就使用二进制形式保存。

序列化流   ObjectOutputStream 把Java对象保存为二进制文件
反序列化流 ObjectInputStream 从二进制文件读取对象

(1). 序列化流 /对象操作输出流
把java中的对象写到本地文件中。

构造方法：把基本流包装成高级流
	public ObjectOutputStream(OutputStream out); 

成员方法：把对象序列化(写到)文件中
	public final void writeObject(Object obj);

(2). 反序列化流 /对象操作输入流 
把序列化到本地文件的对象，读取到程序中。
构造方法：把基本流变成高级流
	public ObjectInputStream(InputStream out);
把序列化到本地文件中的对象，读取到内存中
	public Object readObject();


2. 示例

(1) 定义java对象
package chapter8;

import java.io.Serializable;

public class Student implements Serializable{
	private static final long serialVersionUID = 1L;
	
	String name;
	int age;
	Student(String name, int age){
		this.name=name;
		this.age=age;
	}
	
	@Override
	public String toString() {
		return String.format("class Student[name:%s, age:%d]",this.name, this.age);
	}
}

1)序列化接口，没有抽象类。这种接口叫做 标记 接口。
可以认为是一个合格证，贴上就可以序列化。没有贴上就不能序列化。
2)序列化后会自动计算一个版本号，可能导致读取和写入的时候不一样而报错。
可以通过手动定义版本号，来固定版本号。
3)如果一个属性不想序列化，可以加上关键字 transient，比如 
	private transient String address;
表示该属性不会被序列化，也就不会保存到文件中。

(2)写对象到文件
	private static void demo1() throws IOException {
		Student stu1=new Student("张三", 20);
		//新建流
		String root="src//dustbin//temp//";
		ObjectOutputStream oos=
				new ObjectOutputStream(new FileOutputStream(root + "Stu1.obj"));
		oos.writeObject(stu1);
		// 报错:  java.io.NotSerializableException
		oos.close();
	}


(3)从文件读取对象
	private static void demo2() throws IOException, ClassNotFoundException {
		String root="src//dustbin//temp//";
		ObjectInputStream ois=
				new ObjectInputStream(new FileInputStream(root+"Stu1.obj"));
		Student stu1 = (Student)ois.readObject();
		System.out.println(stu1);
	}
输出: class Student[name:张三, age:20]



(4) 序列化多个对象
就是多次调用 oos.writeObject(s1); 写入文件。
读取时可能忘记需要读取几次 ois.readObject()，怎么办？

最好是把对象放到集合框架中。

	//写多个对象
	private static void demo3() throws IOException {
		Student s1=new Student("张三", 20);
		Student s2=new Student("李斯", 21);
		Student s3=new Student("王二", 22);
		//放到集合中
		ArrayList<Student> arr=new ArrayList<>();
		arr.add(s1);
		arr.add(s2);
		arr.add(s3);
		//新建流
		String root="src//dustbin//temp//";
		ObjectOutputStream oos=
				new ObjectOutputStream(new FileOutputStream(root + "stus.txt"));
		oos.writeObject(arr);
		oos.close();
	}

	//读多个对象
	private static void demo4() throws IOException, ClassNotFoundException {
		String root="src//dustbin//temp//";
		ObjectInputStream ois=
				new ObjectInputStream(new FileInputStream(root+"stus.txt"));
		ArrayList<Student> arr = (ArrayList<Student>) ois.readObject();
		/*for(int i=0; i<arr.size(); i++) {
			System.out.println(arr.get(i));			
		}*/
		for(Student stu: arr) {
			System.out.println(stu);
		}
	}

总结：
- 想序列化，该类必须实现 序列化接口 
- 序列化流写到文件中的数据是不能修改的，一旦修改就无法读取
- 序列化后，修改javaBean类，再反序列化会报错？
	需要固定 javaBean 类的 serialVersionUID 版本号。
- java类中某个成员变量不想保存在文件，可以添加 transient 关键字。






========================================
|-- 打印流：只有输出 PrintStream, PrintWriter 两个类
----------------------------------------
1. 打印流

分类：打印字符和字节
- 只有写，没有读
- 按字面量写出

特点1：打印流只操作文件目的地，不操作数据源

特点2：特有的写出方法可以实现，数据原样写出
	例如 打印 97， 文件中 97
		打印 true，文件中 true

特点3: 特有的写出方法，可以实现自动刷新，自动换行
	打印一次数据 = 写出 + 换行 + 刷新



2. 字节打印流
(1) 构造方法
public PrintStream(OutputStream/File/String); 关联字节输出流/文件/文件路径
public PrintStream(String fileName, Charset charset) 指定字符集
public PrintStream(OutputStream out, boolean autoFlush) 自动刷新
public PrintStream(OutputStream out, boolean autoFlush, String encoding) 指定字符编码，并自动刷新

字节流底层没有缓冲区，开不开自动刷新都一样。那这个 autoFlush 没啥用？ //todo

(2) 成员方法
public void write(int b)  常规方法：规则跟之前一样，将指定的字节写出

public void println(Xxx xx); 特有方法: 打印任意数据，自动刷新，自动换行
public void print(Xxx xx);   特有方法: 打印任意数据，不换行
public void printf(String format, Object... args) 特有方法: 带有占位符的打印语句，不换行 

后三个方法能实现数据的原样写出。


(3). 实例: 字节打印流: 输出字面量

	private static void demo1() throws IOException {
		PrintStream ps= new PrintStream(new FileOutputStream("myio//a.txt"), true);
		ps.println(97); //自动换行
		ps.print(false); //不会换行
		ps.printf("-%s:%d", "Tom", 20); //和C语言 printf() 用法类似
		ps.close();
	}

文件中是: 
97
false-Tom:20



3. 字符打印流 PrintWriter()
(1) 构造方法和 字节打印流类似。
字符流底层有缓冲区，想要自动刷新需要主动开启。

(2) 成员方法，也类似。

(3) 实例: 字符流写到文件
	private static void demo2() throws IOException {
		PrintWriter pw=new PrintWriter(new FileWriter("myio//a2.txt"), true);
		pw.println("陌上花开，可迟迟归矣。"); //不关流，也能保存，因为设置了 autoFlush=true
		pw.print(false);
		pw.printf("-%s:%d", "Tom", 20);
		pw.close();
	}



4. 打印流和控制台输出语句的关系?
控制台输出语句，就是一个关联标准输出的打印流。

	private static void demo3() throws IOException {
		System.out.println(System.out); //java.io.PrintStream@6bf2d08e
		
		//可以把常规的控制台输出拆分成2句话:
		PrintStream ps = System.out; //系统启动时自动创建，指向标准输出流
		ps.println("hello, 世界"); //println 三个功能：写出数据，自动环行，自动刷新
		//ps.close(); //该流不能关闭，否则接下来的输出语句失效
		
		//手动创建 指向标志输出的流
		PrintStream ps2=new PrintStream(new FileOutputStream("/dev/stdout"), true);
		ps2.println("the 3rd line");
	}

输出:
java.io.PrintStream@6bf2d08e
hello, 世界
the 3rd line




========================================
|-- 解压缩流和压缩流(zip 压缩)
----------------------------------------
1. 使用场景
数据量比较大时，先压缩，再传输，传输完再解压。

在IO流中的位置：属于字节流
	解压缩流 父类是 InputStream
	压缩流   父类是 OutputStream

(2) 压缩包细节
- 必须是zip压缩，java只识别这种格式。
- 压缩包中的每一个文件，是一个 ZipEntry 对象。(*重要概念*)
- 解压本质: 把每一个 ZipEntry 按照层级拷贝到本地另一个文件夹中。
- 压缩本质: 把每一个文件或文件夹，看做ZipEntry对象，放到zip压缩文件中。



2. 解压缩zip文件

(1)新建压缩文件
$ zip my.zip java_code/learn/myio/*
  adding: java_code/learn/myio/a00.txt (stored 0%)
  adding: java_code/learn/myio/a2.txt (stored 0%)
  adding: java_code/learn/myio/box/ (stored 0%)

加上-r表示递归，会包含子文件夹的内容：
$ zip -r my_r.zip java_code/learn/myio/*
  adding: java_code/learn/myio/a00.txt (stored 0%)
  adding: java_code/learn/myio/a2.txt (stored 0%)
  adding: java_code/learn/myio/box/ (stored 0%)
  adding: java_code/learn/myio/box/a.txt (stored 0%)

$ ls -lth
total 68K
-rw-rw-r-- 1 tom tom  815 Jun 13 12:29 my_r.zip
-rw-rw-r-- 1 tom tom  782 Jun 13 12:25 my.zip


(2)解压缩流
	private static void demo1() throws IOException {
		//1 创建一个 File 表示要解压的压缩包
		File src = new File("myio//my_r.zip");
		//2. 解压到的目的地
		File desc = new File("myio2//");
		
		// 解压缩
		unzip(src, desc);
	}
	
	public static void unzip(File src, File desc) throws IOException {
		//解压的本质：把压缩包中的每一个文件或文件夹读取出来，按照层级拷贝到目的地
		ZipInputStream zip=new ZipInputStream(new FileInputStream(src));
		//获取压缩包里面的每一个 zipentry 对象
//		for(int i=0; i<100; i++) {
//			ZipEntry entry = zip.getNextEntry();
//			System.out.println(entry); //读取结束后，输出的都是 null
//		}
		
		byte[] buffer = new byte[2048];
		
		// 获取压缩包中每个文件或文件夹
		ZipEntry entry=null;
		while ((entry=zip.getNextEntry()) != null) {
			System.out.println(entry);
			// 目的地文件或文件夹
			File file=new File(desc, entry.toString());
			if(entry.isDirectory()) {
				//如果是文件夹，则在目的地新建文件夹
				file.mkdirs();
			}else {
				//如果目的地文件夹不存在，新建路径
				File fileParent=new File(file.getParent());
				if(! fileParent.exists() ) {
					fileParent.mkdirs();
				}
				//如果是文件，需要读取压缩包中的文件，并复制到desc文件夹中
				FileOutputStream fos = new FileOutputStream(new File(desc, entry.toString()));
				// 写文件1
//				int b;
//				while((b=zip.read()) != -1) {
//					//写到目的地
//					fos.write(b);
//				}
				// 写文件2
				int len;
				while((len=zip.read(buffer)) != -1) {
					fos.write(buffer, 0, len);
				}
				fos.close();
				//压缩包中一个文件处理完毕
				zip.closeEntry();
			}
		}
		zip.close();
	}




4. 压缩文件

(1) 把一个文件压缩为zip格式
	// 压缩单个文件
	private static void demo1() throws IOException {
		File src=new File("myio//a2.txt");
		File dest=new File("myio//");
		toZip(src, dest);
	}

	/*
	 * 压缩文件
	 * 文件
	 * 目的地
	 * */
	private static void toZip(File src, File dest) throws IOException {
		//1. 创建压缩流关联压缩包
		ZipOutputStream zos = 
				new ZipOutputStream(new FileOutputStream(new File(dest, "a2.zip")));
		//2. 创建ZipEntry对象，表示压缩包里面的每一个文件和文件夹
		ZipEntry entry=new ZipEntry("a3.txt"); //在压缩包中的名字，可以修改
		//3. 把ZipEntry对象写入压缩文件，只是文件结构
		zos.putNextEntry(entry);
		//4.把src文件中的数据写入压缩包中，这是文件内容
		FileInputStream fis = new FileInputStream(src);
		int b;
		while((b=fis.read()) != -1) {
			zos.write(b);
		}
		
		//5. 关闭文件
		zos.closeEntry();
		zos.close();
	}


(2) 压缩一个文件夹
	private static void demo2() throws IOException {
		//1. 要压缩的文件夹
		File src = new File("myio//box//");
		//2. 目的地: 上一个文件夹的根目录
		File destParent = src.getParentFile();
		//System.out.println(destParent);
		//3.创建压缩包的路径
		File dest=new File(destParent, src.getName() + ".zip");
		//System.out.println(dest); //myio/box.zip
		
		//4.压缩流
		ZipOutputStream zos =new ZipOutputStream(new FileOutputStream(dest));
		//5.获取src中的每个文件，作为 ZipEntry对象，放到压缩包中
		System.out.println("src.getName=" + src.getName()); 
		// src.getName() 丢弃前面的路径，只留下最后一个文件夹或文件名
		toZip2(src, zos, src.getName()); //递归
		//6.释放资源
		zos.close();
		System.out.println("End");
	}

	/*
	 * 作用: 获取 src 里面的每一个文件，变成 ZipEntry 对象，放入压缩包当中
	 * 参数1: 数据源
	 * 参数2: 压缩流
	 * 参数3: 压缩包内部的路径
	 **/
	private static void toZip2(File src, ZipOutputStream zos, String name) throws IOException {
		//1.进入 src 文件夹，得到文件or目录列表
		File[] files=src.listFiles();
		//2.遍历数组
		for(File file: files) {
			if(file.isFile()) {
				//3. 判断-文件
//				ZipEntry entry=new ZipEntry(file.toString());
				//最难得部分: 压缩包中的路径名怎么写？
				ZipEntry entry=new ZipEntry(name + "/" + file.getName()); 
				zos.putNextEntry(entry);
				//读取文件，写入压缩包
				FileInputStream fis = new FileInputStream(file);
				int b;
				while((b=fis.read()) != -1) {
					zos.write(b);
				}
				fis.close();
				zos.closeEntry(); //当前文件写入完毕，而不是这个流关闭				
			}else {
				//4. 文件夹?递归
				toZip2(file, zos, name+"/"+file.getName());
			}
		}
	}











========================================
Java IO 工具库
----------------------------------------



========================================
|-- Commons-io 是 apache 提供的一组有关IO操作的开源工具包
----------------------------------------
1. 简介
https://commons.apache.org/proper/commons-io/

commons 有很多针对性的jar包，针对io的就叫做 commons-io。

和src并列位置新建 lib/ 文件夹，以后所有的jar包都放到这里。


(1) 下载
下载地址: https://mvnrepository.com/artifact/commons-io/commons-io

	<!-- https://mvnrepository.com/artifact/commons-io/commons-io -->
	<dependency>
		<groupId>commons-io</groupId>
		<artifactId>commons-io</artifactId>
		<version>2.13.0</version>
	</dependency>

或者
wget https://repo1.maven.org/maven2/commons-io/commons-io/2.13.0/commons-io-2.13.0.jar
源码
wget https://dlcdn.apache.org//commons/io/source/commons-io-2.13.0-src.zip


(2) 示例代码
	private static void demo1() throws IOException {
		File src=new File("myio//a2.txt");
		File dest=new File("myio//a2-copy.txt");
		
		FileUtils.copyFile(src, dest); //复制文件
	}


	private static void demo2() throws IOException {
		File src=new File("myio//box/");
		File dest=new File("myio//box2/");
		
		//FileUtils.copyDirectory(src, dest); //复制文件夹 中的内容
		FileUtils.copyDirectoryToDirectory(src, dest); //拷贝文件夹 到另一个文件夹中
	}

	private static void demo3() throws IOException {
		File src=new File("myio//box2//box");
		FileUtils.deleteDirectory(src); //把整个文件夹都删除，包括文件夹及其内容
	}

	private static void demo4() throws IOException {
		File src=new File("myio//box2");
		FileUtils.cleanDirectory(src); //删除文件夹内的东西，文件夹保留
	}




========================================
|-- Hutool 工具包: 一个综合的工具包(日期时间、反射、计时器、泛型、字符串、分页、16进制、数字、hash算法等)
----------------------------------------
本文学习其 io 工具类。

1. 处理io
(1) 官网

源码: https://github.com/dromara/hutool
官网: https://hutool.cn/
API文档: https://apidoc.gitee.com/dromara/hutool/

(2) 处理 office
POI: Office 文档的 Java 处理包

Apache POI 是基于 Office Open XML 标准（OOXML）和 Microsoft 的 OLE 2 复合文档格式（OLE2）处理各种文件格式的开源项目。 简而言之，您可以使用 Java 读写 MS Excel 文件，可以使用 Java 读写 MS Word 和 MS PowerPoint 文件。



2. 使用
(1) 下载
  包: https://repo1.maven.org/maven2/cn/hutool/hutool-all/5.8.19/hutool-all-5.8.19.jar
源码: https://repo1.maven.org/maven2/cn/hutool/hutool-all/5.8.19/hutool-all-5.8.19-sources.jar


(2) 报告bug
	//Hutool 获取路径
	private static void demo1() {
		File file = FileUtil.file("myio//", "box", "a.txt");
		System.out.println(file); // /home/tom/java_code/learn/bin/myio/box/a.txt
		// 这里不对，多两个前缀 bin/
		
		File file2 = new File("myio//box//a.txt");
		System.out.println(file2); // myio/box/a.txt
		
		String absolutePath = file2.getAbsolutePath();
		System.out.println(absolutePath); // /home/tom/java_code/learn/myio/box/a.txt
	}


	// 创建新文件
	private static void demo2() throws IOException {
		File touch = FileUtil.touch("myio//box//c.txt");
		System.out.println(touch); ///home/tom/java_code/learn/bin/myio/box/c.txt
		// 位置不太对
		
		File touch2=new File("myio//box//c.txt");
		touch2.createNewFile();
		System.out.println(touch2); // 和 src/ 并列的位置 myio/: myio/box/c.txt
	}


(3)把集合写入文件
	private static void demo3() {
		ArrayList<String> list=new ArrayList<>();
		list.add("aaa");
		list.add("aaa2");
		list.add("aaa3");
		File file1 = FileUtil.writeLines(list, 
				"/home/tom/java_code/learn/myio/box/c.txt", "UTF-8" );
		System.out.println(file1);
	}

	// 追加若干行
	private static void demo4() {
		ArrayList<String> list=new ArrayList<>();
		list.add("b");
		list.add("bb2");
		list.add("bbb3");
		File file = FileUtil.appendLines(list,
				"/home/tom/java_code/learn/myio/box/c.txt", "UTF-8" );
		System.out.println(file);
	}

(4) 读取，文件到集合
	// 从文件读取到集合
	private static void demo5() {
		List<String> list = FileUtil.readLines(
				"/home/tom/java_code/learn/myio/box/c.txt", "UTF-8");
		for(String str: list) {
			System.out.println(str);
		}
	}




https://www.bilibili.com/video/BV1n3411Q7gi/?p=44





========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------

