JSP使用

http://www.runoob.com/jsp/jsp-tutorial.html

========================================
JSP大纲
----------------------------------------
1.
Tomcat服务器配置参考Servlet中相关章节。

2.JSP简介
JSP与PHP、ASP、ASP.NET等语言类似，运行在服务端的语言。
JSP（全称Java Server Pages）是由Sun Microsystems公司倡导和许多公司参与共同创建的一种使软件开发者可以响应客户端请求，而动态生成HTML、XML或其他格式文档的Web网页的技术标准。
JSP技术是以Java语言作为脚本语言的，JSP网页为整个服务器端的Java库单元提供了一个接口来服务于HTTP的应用程序。
JSP文件后缀名为(*.jsp)。
JSP开发的WEB应用可以跨平台使用，既可以运行在Linux上也能运行在Window上。


3.eclipse 的 market place怎么用？
2016-12-23安装了Eclipse Java EE Developer Tools 3.8
http://download.eclipse.org/releases








========================================
JSP里ContentType ，charset和pageEncoding的理解与区别
----------------------------------------
http://blog.csdn.net/autumn20080101/article/details/51371732

名词解释及其作用  
    1. contentType: <%@ page contentType="text/html; charset=UTF-8"%>   

    2. pageEncoding:<%@ page pageEncoding="UTF-8"%>   

    3. html页面charset:<META http-equiv="Content-Type" content="text/html; charset=UTF-8">   

    4. setCharacterEncoding:request.setCharacterEncoding(),response.setCharacterEncoding()  

    5. setContentType:response.setContentType()  

    6. setHeader: response.setHeader()  

    7. jsp页面编码: jsp文件本身的编码  

    8. web页面显示编码:jsp的输出流在浏览器中显示的编码  

    9. web页面输入编码: 输入框输入的字体编码  

    10. web服务器输入的请求流: web Server相应浏览器的请求数据  

    11. web服务器输出的响应流: web Server相应浏览器的输出数据  

总结：通常我们在JSP页面设定<%@ page contentType="text/html;charset=GB2312"%>即可。

========================================
hello.jsp
----------------------------------------
1.配置虚拟目录，直接指向jsp文件所在文件夹即可。
在tomcat/conf/server.xml中的</Host>之前添加Context标签。如下第一行。
可以设置多个Context，第二行是设置图片资源的位置。

<Context path="/myjsp" docBase="F:\gitHub\learngit\Java\JSP" ></Context>
<Context path="/img" docBase="C:\Users\Administrator\Pictures" ></Context><!--ok http://localhost:8080/360/1.jpg -->

重启tomcat。

目录结构：
JSP/ 这个文件夹的绝度路径放到comcat\conf\server.xml的Context标签的docBase中。
 |-xx.jsp 这里直接放jsp文件。以及图片、文本等资源。
 |-WEB-INF
    |-web.xml 部署class文件
    |-classes 部署class文件。包括Servlet对应的class文件及其调用的class文件。


2.文件hello.jsp 
<%@ page contentType="text/html; charset=UTF-8" %>
<html>
    <head>
           <title>第一个JSP程序</title>
    </head>
    <body>
           <%
              out.println("Hello World！你好。");
           %>
    </body>
</html>




3.运行url：http://localhost:8080/myjsp/hello.jsp
可看到：
Hello World！你好。


4.jsp的编译过程
1)首次访问，则jsp生成java文件(Servlet)，再编译成class文件。
所以首次访问比较慢。
文件位置：tomcat\work\Catalina\localhost\myjsp\org\apache\jsp
	hello_jsp.class
	hello_jsp.java

2)接着再次访问的话，就直接运行class文件，就很快了。


一般情况下，JSP引擎会检查JSP文件对应的servlet是否已经存在，并且检查JSP文件的修改日期是否早于servlet。如果JSP文件的修改日期早于对应的servlet，那么容器就可以确定JSP文件没有被修改过并且servlet有效。这使得整个流程与其他脚本语言（比如PHP）相比要高效快捷一些。

总的来说，JSP网页就是用另一种方式来编写servlet而不用成为Java编程高手。除了解释阶段外，JSP网页几乎可以被当成一个普通的servlet来对待。





========================================
hellojsp.jsp 
----------------------------------------

理解JSP底层功能的关键就是去理解它们所遵守的生命周期。
JSP生命周期就是从创建到销毁的整个过程，类似于servlet生命周期，区别在于JSP生命周期还包括将JSP文件编译成servlet。

以下是JSP生命周期中所走过的几个阶段：
1.编译阶段：
servlet容器编译servlet源文件，生成servlet类
2.初始化阶段：
加载与JSP对应的servlet类，创建其实例，并调用它的初始化方法
3.执行阶段：
调用与JSP对应的servlet实例的服务方法
4.销毁阶段：
调用与JSP对应的servlet实例的销毁方法，然后销毁servlet实例


<%@ page language="java" contentType="text/html; charset=utf-8"
    pageEncoding="utf-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>jsp test</title>
</head>
<body>




<%! 
  private int initVar=0;
  private int serviceVar=0;
  private int destroyVar=0;
%>
  
<%!
  public void jspInit(){
    initVar++;
    System.out.println("jspInit(): JSP被初始化了"+initVar+"次");
  }
  public void jspDestroy(){
    destroyVar++;
    System.out.println("jspDestroy(): JSP被销毁了"+destroyVar+"次");
  }
%>

<%
  serviceVar++;
  System.out.println("_jspService(): JSP共响应了"+serviceVar+"次请求");

  String content1="初始化次数 : "+initVar;
  String content2="响应客户请求次数 : "+serviceVar;
  String content3="销毁次数 : "+destroyVar;
%>
<h1> JSP 测试实例</h1>
<p><%=content1 %></p>
<p><%=content2 %></p>
<p><%=content3 %></p>



</body>
</html>

访问 http://localhost:8080/myjsp/hellojsp.jsp 可见到：
	JSP 测试实例
	初始化次数 : 1
	响应客户请求次数 : 2
	销毁次数 : 0

========================================
jsp版计算器
----------------------------------------
1.myCalc.jsp 第一版：通过url传递变量
<%@ page contentType="text/html; charset=UTF-8" %>

<%
//获取参数
String s1=request.getParameter("num1");
String s2=request.getParameter("num2");

if(s1==null)s1="0";
if(s2==null)s2="0";

int n1=Integer.parseInt(s1);
int n2=Integer.parseInt(s2);
int n=n1+n2;

out.println(s1+"与"+s2+"的和是"+n);

//http://localhost:8080/myjsp/myCalc.jsp?num1=10&num2=2
//10与2的和是12
%>







2.myCalc.jsp 第二版：完善版本。

<%@ page contentType="text/html; charset=UTF-8" %>

<script>
function check(){
	var num1=document.forms[0].num1.value;
	var num2=document.forms[0].num2.value;
	var flag=document.forms[0].flag.value;
	
	//如果num1或num2为空，则提示输入，并阻止提交
	if(num1=="" || num2==""){
		alert("不能留空！请输入数字");
		if(num1==""){
			document.forms[0].num1.focus();
		}else{
			document.forms[0].num2.focus();
		}
		return false;
	}
	
	//如果不是数字也不行
	if(isNaN(num1) || isNaN(num2)){
		alert("不是数字！请输入数字");
		if(isNaN(num1)){
			document.forms[0].num1.focus();
		}else{
			document.forms[0].num2.focus();
		}
		return false;
	}
}
</script>


<%
//获取参数
String s1=request.getParameter("num1");
String s2=request.getParameter("num2");
String flag=request.getParameter("flag");

if(s1==null)s1="0";
if(s2==null)s2="0";
if(flag==null)flag="1";

int n1=Integer.parseInt(s1);
int n2=Integer.parseInt(s2);
int n=0;

if(flag.equals("1")){n=n1+n2;}
if(flag.equals("2")){n=n1-n2;}
if(flag.equals("3")){n=n1*n2;}
if(flag.equals("4")){n=n1/n2;}
%>
<h1>jsp版计算器</h1>
<form action="" method="get">
	第一个数字 <input type="text" name=num1 value="<%=n1 %>"><br>
	操作符 <select name=flag>
		<option value='1' <% if(flag.equals("1")) out.println("selected"); %>>+</option>
		<option value='2' <% if(flag.equals("2")) out.println("selected"); %>>-</option>
		<option value='3' <% if(flag.equals("3")) out.println("selected"); %>>*</option>
		<option value='4' <% if(flag.equals("4")) out.println("selected"); %>>/</option>
	</select><br>
	第二个数字 <input type="text" name=num2 value="<%=n2 %>"><br>
	<input type="submit" value="计算" onclick="return check()">
</form>
<hr />

<%
String[] flagCN={"加","减","乘","除"};
out.println(s1+flagCN[Integer.parseInt(flag)-1]+s2+" 结果是： "+n);

//http://localhost:8080/myjsp/myCalc.jsp?num1=10&num2=2
//10与2的和是12

//http://localhost:8080/myjsp/myCalc.jsp?num1=230&flag=1&num2=23
%>






========================================
jstl标签库
----------------------------------------

目的：减少jsp中的java片段。严格的要求是jsp中没有java片段。

jstl的好处：提高可读性，节省代码，促进各工种的合作。

分类：
一般标签、条件标签、迭代标签、url相关的标签（xml，sql）
1.一般标签 








jstl标签的应用。



========================================
----------------------------------------

========================================
----------------------------------------


========================================
----------------------------------------




========================================
----------------------------------------


========================================
----------------------------------------

========================================
----------------------------------------


========================================
----------------------------------------




========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------
