Python103-OOP


Python类提供了基本功能：
 - 类的继承机制允许多个基类
 - 派生类可以覆盖基类中的任何方法
 - 方法中可以调用基类中的同名方法




========================================
****** Python面向对象基础 ******
----------------------------------------

类：一组事物共有的属性和方法的集合（有时也叫属性集合：数据属性，方法属性），可理解为蓝图、模板。


1.基础
https://www.cnblogs.com/wuxiaobo/articles/10306790.html

面向对象(OO)是思想
类和对象
属性和方法

静态属性与@Property
类方法
静态方法

抽象与抽象类
接口
继承
组合
多态
封装




========================================
1. 类的定义与使用： 类和对象、属性和方法
----------------------------------------
1.定义类
class MyClass(object):
    i=2
    def fn(self):
        return "hello, Python class"

#实例化类
mc=MyClass()
print(mc.i) #2
print( mc.fn() ) #hello, Python class


定义时要用class关键词，加上类名，括号内是父类。
属性就是类的变量，比如 i 。
方法就是类的函数，比如 fn()。方法至少有一个参数self。

实例化直接用类名加小括号即可，有参数了传入参数。
调用属性和方法使用点号，方法名后面还要加上小括号，和运行函数类似。





2. 类的属性操作
class Student():
    country ="China"
    
    def __init__(self, name,score):
        self.name=name
        self.score=score
    def info(self):
        print('学生: %s, 分数: %s' % (self.name, self.score))

#属性的增删改查

print(Student.country) #China
s1=Student("小明", 95)
print(s1.country ) #China
s1.info() #学生: 小明, 分数: 95
print(s1.__dict__)  #{'name': '小明', 'score': 95}

#结论： .操作符 在本对象中__dict__查找，没有 找类

Student.age=15
print(Student.__dict__) #新增 'age': 15
print(s1.age) #15 同样找到了age

#修改
Student.country="US"
print(Student.country, s1.country) #US US

def sleep(self):
    print('%s is sleeping.' % self.name)
#添加一个方法
Student.sleep=sleep
s1.sleep() #小明 is sleeping.

#结论： Python对OOP 方面的语法不是严格控制，需要程序员自行控制　






3.对象的属性操作

class Student():
    country ="China"
    
    def __init__(self, name,score):
        self.name=name
        self.score=score
    def info(self):
        print('学生: %s, 分数: %s' % (self.name, self.score))

#实例化一个对象
s2=Student("Tom", 55)
print(s2.__dict__) #{'name': 'Tom', 'score': 55}

s2.hobby="抽烟"
print(s2.__dict__) #{'name': 'Tom', 'score': 55, 'hobby': '抽烟'}
print(Student.__dict__) #没有hobby

def lie(self):
    print("%s 就是爱撒谎." % self.name)
s2.lie=lie
#s2.lie() #报错 缺少参数 TypeError: lie() missing 1 required positional argument: 'self'
s2.lie(s2) #Tom 就是爱撒谎.
#上述对象函数与类无关，业余和其他对象无关，仅语法可以，没有实际意义

print(s2.__dict__)
print(Student.__dict__) #没有 lie

#（移民了）修改实例属性，会覆盖该实例在类定义中的静态属性
s2.country="Japan"
print(s2.__dict__)
#{'name': 'Tom', 'score': 55, 'hobby': '抽烟', 'lie': <function lie at 0x000001CCF80E3E18>, 'country': 'Japan'}
#print(Student.__dict__) #'country': 'China' 没有被修改

#删除属性（遣返回国）
del s2.country
print(s2.__dict__) #实例中已经没有country属性了
#{'name': 'Tom', 'score': 55, 'hobby': '抽烟', 'lie': <function lie at 0x0000016E1C9A3E18>}
print(s2.country) #China 还可以读取类中的定义

#结论：对象的属性单独维护在对象中，独立于类的属性。对象查找属性时先从本对象__dict__中查找，没有在到类__dict__中查找





========================================
2. 构造方法__init__ (和 __new__ 的对比)
----------------------------------------
1.
初始化构造函数__init__，用于对象实例化且被隐式调用，有如下特性：
	名称唯一：__init__
	至少有一个参数self，表示实例本身且在对象实例化时自动传入对象名（地址）
	没有返回值

Python类中定义多个初始化函数时，只有最后一个执行，前面的既不能在初始化类时执行，也不能被调用。所以建议一个类最多定义1个构造方法。



class Animal(object):
    def __init__(self,name): #被最后一个__init__()覆盖了
        self.name=name
    def __init__(self):
        self.name="Default name" #实例化时会自动执行该方法
        
#animal=Animal("Dog") #TypeError: __init__() takes 1 positional argument but 2 were given
animal=Animal() #Default name
print(animal.name)






2.构造方法包括创建对象和初始化对象，在python当中，分为两步执行：先执行__new__方法，然后执行__init__方法；

__new__是在实例创建之前被调用的，因为它的任务就是创建实例然后返回该实例，是个静态方法。

__init__是当实例对象创建完成后被调用的，然后设置对象属性的一些初始值。

也就是，__new__在__init__之前被调用，__new__的返回值（实例）将传递给__init__方法的第一个参数，然后__init__给这个实例设置一些参数。


class Media():
    pass

class Book(Media):
    def __init__(self, name):
        print('  2> self=',self)
        print("  2> This is init()")
        self.name=name
    def __new__(cls2, name): #参数个数要和init一致，即便函数内部用不到该参数。
        # 第一个参数是啥？
        print(">>>>", cls2)
        print(' 1> id(cls)=',id(cls2))
        print(" 1> This is new()")
        
        ret=object.__new__(cls2)
        print(" 1> ", ret)
        return ret; #这个obj就是init中的参数self
    

print('0> id(Book)  = ', id(Book))

book=Book('Learn Python3')
print(type(book))
print(type(Book)) #竟然是type
    
###
0> id(Book)  =  1912632305896
>>>> <class '__main__.Book'>
 1> id(cls)= 1912632305896
 1> This is new()
 1>  <__main__.Book object at 0x000001BD51D90CC0>
  2> self= <__main__.Book object at 0x000001BD51D90CC0>
  2> This is init()
<class '__main__.Book'>
<class 'type'>


注释:
(1). __new__至少要有一个参数cls，代表要实例化的类，此参数在实例化时由Python解释器自动提供
(2).__new__必须要有返回值，返回实例化出来的实例，这点在自己实现__new__时要特别注意，
    可以return父类__new__出来的实例，
    或者直接是object的__new__出来的实例
(3). __init__有一个参数self，就是这个__new__返回的实例，__init__在__new__的基础上
    可以完成一些其它初始化的动作，__init__不需要返回值
(4). 我们可以将类比作制造商，__new__方法就是前期的原材料购买环节，__init__方法就是在有原材料的基础上，加工，初始化商品环节
"""







========================================
3. 封装、访问权限（私有属性/公共属性、私有方法/公共方法）
----------------------------------------
封装的目的就是隐藏复杂性。
所谓封装，就是把变量和函数包装到类内部，只需要调用公共属性和方法，而不用知道内部实现细节。
封装的最终结果做到内外有别，仅给出对方需要的数据，不少也不多。


Python 对封装没有提供特有的关键字，仅通过变量名和约定来完成

_foo：保护的方法/属性 protect
__foo：私有方法/属性，只允许类的内部访问 private
foo：普通变量名，可以被外部访问  public


Python 中封装功能都是不强制，讲究约定俗称　　




1.一般变量都是公有的，直接可以访问
前面加上双下划线，就变成私有属性了。

class Student():
    country ="China"
    
    def __init__(self, name,score):
        self.name=name #公有属性
        self.__score=score #前加双下划线，就是私有属性(private)
    def getScore(self):
        return self.__score
    def setScore(self,score):
        #可以在set中检查参数，避免传入无效的参数
        if 0<=score<=100: 
            self.__score=score
        else:
            print("请输入0-100之间的数字")
    
    def info(self):
        print('学生: %s, 分数: %s' % (self.name, self.__score))

s3=Student("Tony", 80)
s3.info() #学生: Tony, 分数: 80
print(s3.name) #Tony

#print(s3.__score)  #无法从外部直接访问私有属性
#AttributeError: 'Student' object has no attribute '__score'
#但是可以通过方法获取
print("Tony老师得分 :", s3.getScore()) #80


# 如果非要看，也是可以做到的
print(s3._Student__score) #80


s3.setScore(90) #调用方法修改私有属性
print("Tony老师得分 :", s3.getScore(),'[修改后]') #90

s3.setScore(950) #不小心多数了个0
print("Tony老师得分 :", s3.getScore(),'[修改失败]') #100





2. 私有/公共方法
class Student():
    country ="China"
    
    def __init__(self, name,score):
        self.name=name
        self.score=score 
    def __add(self): #前加双下划线，就是私有方法(private)
        self.score+=10
        if self.score>100:
            self.score=100
    
    def info(self):
        print('学生: %s, 分数: %s' % (self.name, self.score))
        
    def more(self):
        print("调用私有方法begin")
        self.__add() #私自加分
        print("调用私有方法End")
        return self.score

s4=Student("Lucy", 98)
s4.info() #学生: Lucy, 分数: 98
#s4.__add() #AttributeError: 'Student' object has no attribute '__add'
print(s4.more()) #100


私有方法和私有变量类似，不能通过外部调用。









========================================
4.继承(super关键字)、多重继承(ClassName.__mro__)
----------------------------------------

即抽象的逆过程。 对象与类 '延续共有属性' 叫 ： 实例化； 类与类 '延续共有属性 '叫继承，存在父-子关系。
#继承的好处是： 子类获得父类全部的非私有功能。
所以，继承机制是实现代码重用的重要方法之一。另一个是组合。


1. Python继承的特点：
(1).基类的构造方法(__init__()方法)不会自动调用，需要在子类中手动调用。
(2).调用基类的方法是需要加上基类的类名前缀，并带上self参数。普通函数不需要带self参数。
(3).当前类中找不到的方法，才到父类中查找。


例子1： 
class Animal():
    def __init__(self):
        print("==Animal init")
    def run(self):
        print("Animal is running...")

class Dog(Animal):
    def __init__(self):
        print("==Dog init")

class Cat(Animal):
    def __init__(self):
        Animal.__init__(self) #想调用父类的构造函数，需要手动指定。
        print("==Cat init")
    def run(self):
        print("Cat is running...")

a=Animal() #==Animal init
dog=Dog() #==Dog init
cat=Cat() 
#==Animal init
#==Cat init

dog.run() #Animal is running... #自动继承父类方法
cat.run() #Cat is running...  #在当前类找到的方法，则直接执行，找不到则在父类中查找





2. 子类不能继承父类的私有方法，也不能调用父类的私有方法。

class Animal():
    def bar(self):
        self.__foo()
    def __foo(self):
        print("Animal.__foo()")


class Dog(Animal):
    def dog_bar(self):
        self.__foo()
    def __foo(self):
        print("Dog.__foo()") #没反应

a=Animal() #==Animal init
a.bar() #Animal.__foo()

dog=Dog() 
#子类没有该方法，则在父类中查找。
dog.bar() #Animal.__foo()
#不能调用父类的私有方法
dog.__foo() #AttributeError: 'Dog' object has no attribute '__foo'

dog.dog_bar() #Dog.__foo()






3.Python支持多重继承

单继承是最简单的继承关系，多继承过于复杂，而且使用起来容易出错。因此一些高级语言完全摒弃了多继承，只支持单继承；一些高级语言虽然支持多继承，但也不推荐使用多继承。Python也是一样，在不能完全掌握多继承时，最好不好使用，单继承能满足绝大部分的需求。

class xxClassName(Base1, Base2, Base3):
	statement1
	statement2
如果子类没有某个属性或方法，则从父类中查找，查找顺序是从左到右。


#定义类
class Animal():
    def run(self):
        print("Animal run")

#大类
class Mammal(Animal):
    pass
class Bird(Animal):
    pass

#定义接口
class Runnable():
    def run(self):
        print("Running...")

class Flyable():
    def fly(self):
        print("Flying......")

#多重继承
class Dog(Mammal, Runnable):
    pass
class Bat(Mammal, Flyable):
    pass

print(Dog.__mro__)
#(<class '__main__.Dog'>, <class '__main__.Mammal'>, <class '__main__.Animal'>, <class '__main__.Runnable'>, <class 'object'>)
print(Bat.__mro__)
#(<class '__main__.Bat'>, <class '__main__.Mammal'>, <class '__main__.Animal'>, <class '__main__.Flyable'>, <class 'object'>)

dog=Dog()
#子类没有run方法，从左到右在父类Mammal-Animal中找到了
dog.run() #Animal run

bat=Bat()
#子类没有fly方法，从左到右在父类Mammal-Animal中没有找到，接着向右找Flyable类中有定义
bat.fly() #Flying......


========================================
|--Python面向对象中super用法与MRO机制(ClassName.__mro__ 方法解析顺序MRO)
----------------------------------------

1.类的__mro__属性是方法的解析顺序
MRO是一个元祖，记录继承顺序。

class Animal():
    def run(self):
        print("Animal is running...")

class Mammal(Animal):#哺乳类
    def run(self):
        print("Mammal is running...")

class Bird(Animal):
    def fly(self):
        print("Bird is flying......")

class Dog(Mammal):
    def run(self):
        print("Dog is running...")
class Parrot(Bird):
    def fly(self):
        print("Parrot is flying......")
#
dog=Dog()
parrot=Parrot()

dog.run() #Dog is running...
parrot.fly() #Parrot is flying......

parrot.run() #Animal is running... 
#鹦鹉类没有定义run()，其父类Bird也没有定义，再往上Animal类有run()方法

print(Dog.__mro__)
#(<class '__main__.Dog'>, <class '__main__.Mammal'>, <class '__main__.Animal'>, <class 'object'>)

print(Bird.__mro__)
#(<class '__main__.Bird'>, <class '__main__.Animal'>, <class 'object'>)

print(list.__mro__) #(<class 'list'>, <class 'object'>)







2. super关键字
super(Type, CurrentClass)返回CurrentClass的MRO中Type的下一个类的代理

子类引用父类内容，使用super关键字
或者直接 Animal.foo(self)  #注意别漏掉了self参数。

class Animal():
    def __init__(self):
        print("Animal init...")
    def foo(self):
        print("Animal.bar()")

class Dog(Animal):
    def foo(self):
        print("Dog.bar()")
    def bar(self):
        super(Dog, self).foo() #调用父类的方法1
    def test(self):
        #Animal.__init__(self) #调用父类方法2
        Animal.foo(self)

dog=Dog()
dog.foo() #Dog.bar()
dog.bar() #Animal.bar()
dog.test() #Animal.bar()

print(Dog.__mro__) #(<class '__main__.Dog'>, <class '__main__.Animal'>, <class 'object'>)
#其实 super(Dog, self) 表示self的MRO链条上Dog的下一个类，就是Animal。
#所以 super(Dog, self).foo() 就等价于 Animal.foo(self)




## 实例2:
class Animal:
    def say(self):
        return "This is an Animal"
    def __str__(self):
        return "Clazz Animal"

class Bird(Animal):
    def say(self):
        return "->This is a Bird"

class Parrot(Bird):
    def say(self):
        print("1.-->This is a Parrot")
        print('2:', super().say() ) #默认是 当前类Parrot 的上一级
        print('2!', super(Parrot, self).say() ) #Parrot 上一级是Bird
        
        print('3:', super(Bird, self).say() ) #Bird上一级是Animal
        print('4:', super(Animal, self) ) #Animal上一级是Object, 没有 say()方法

p=Parrot()
p.say()

输出:
1.-->This is a Parrot
2: ->This is a Bird
2! ->This is a Bird
3: This is an Animal
4: <super: <class 'Animal'>, <Parrot object>>





refer: https://www.cnblogs.com/crazyrunning/p/7095014.html



========================================
|-- 抽象与抽象类
----------------------------------------
抽象：现实生活中首先识别到一个个具体的对象，在对象的基础上提取共有属性。这个动作也叫泛化

OOA（面向对象分析）步骤<简述>:
	识别一个个对象
	提取对象特征，对象间的关系
	抽象特征，组成类
	循环第三步骤，形成类的层级关系图

抽象类：类的抽象，更抽象地描述事物


import abc
#抽象类，不能被实例化，只能被继承使用
class Shape_2D(metaclass=abc.ABCMeta):
    type = "二维图形"
    #初始化方法被抽象定义，so 不能实例化一个Shape_2D 对象
    @abc.abstractmethod
    def __init__(self):
        '''
        #抽象方法
        '''
        pass
 
class Circle(Shape_2D):
    type="圆"
    def __init__(self,x,y,radius):
        pass
 
class Line(Shape_2D):
    type = "线"
    def __init__(self,x1,y1,x2,y2):
        pass
 
c1 = Circle(1,2,3)
print(c1.type) # 圆






========================================
|-- 接口
----------------------------------------
语法与抽象类相同，表示一组特定功能提供统一的对外功能

抽象类 vs 接口

抽象类：还是一个类，仅对类进一步抽象；接口：特定功能的规范性描述
抽象类：描述什么是什么关系，例：战斗机、民用机是飞机，麻雀是鸟；接口：描述什么有什么功能的关系，例：飞机，鸟都有飞翔的功能
注意：在OO中所有概念（类，抽象类，接口等）都是在特定场景下，而非绝对



import  abc
class I_Pay(metaclass=abc.ABCMeta):
    #支付
    @abc.abstractmethod
    def pay(self):
        pass
     
    #退款
    @abc.abstractmethod
    def refund(self):
        pass

#实现接口
class AppleMobile(I_Pay):
    def pay(self):
        print("苹果手机支付")
    def refund(self):
        print("苹果手机退款")

class AndroidMobile(I_Pay):
    def pay(self):
        print("安卓手机支付")
    def refund(self):
        print("安卓手机退款")
        
#
def buy(i_Pay):
    i_Pay.pay()
def refund(i_Pay):
    i_Pay.refund()

buy(AppleMobile()) #苹果手机支付
refund(AndroidMobile()) #安卓手机退款










========================================
5.多态
----------------------------------------

1.功能函数参数采用父类类型定义，调用时根据传入不同的子类对象实际调用其子类自身的方法，从而同一函数看起来呈现不同的形态。
没有继承就没有多态。


class Animal():
    def run(self):
        print("Animal is running...")

class Dog(Animal):
    def run(self):
        print("Dog is running...")

class Bird(Animal):
    def run(self):
        print("Bird is running...")

#定义一个函数，让动物跑两次
def run_twice(animal):
    animal.run()
    animal.run()
#
dog1=Dog()
bird1=Bird()
run_twice(dog1)
run_twice(bird1)
#Dog is running...
#Dog is running...
#Bird is running...
#Bird is running...


多态的意思，对于一个变量，就是我们只需要知道它是Animal类型，无须确切知道它的子类型，就可以放心调用run_twice()方法。
具体的run()方法，在运行时的子类型中找，找不到的再到其父类中查找。


多态的真正威力在于，调用方只管调用，不用关心细节。当我们增加一种新的Animal子类时，只要确保run()方法编写正确即可，不用对原有的run_twice()函数做任何修改。这就是注明的“开闭原则”：对于扩展开放，允许新增Animal子类；对于修改封闭，不允许修改依赖于Animal类型的run_twice()等函数。





========================================
|-- 获取对象信息(is/type/isinstance/dir 函数)
----------------------------------------
尽量不要显式判断子类，依赖多态程序更稳健，只要代码能运行即可。
获取对象信息的三种途径
 - type()函数
 - isinstance()函数
 - dir()函数 



1. 我们定义一个类，实际上就是定义了一种数据类型，和Python自带的str,list,dict没什么两样。
如何判断一个变量是不是某个类型？type和isinstance函数。
a2=[1,2,3]
print(type(a2)) #<class 'list'>
print('a<list>', isinstance(a2, list)) #True
#
print('dog1<Dog>', isinstance(dog1, Dog)) #True
print('dog1<Animal>', isinstance(dog1, Animal)) #True
print('dog1<Bird>', isinstance(dog1, Bird)) #False
#dog1 即是Dog类，也是Animal类，但不是Bird类。


#is 仅能判断类和实例的直接关系，不能判断实例与其类的父类的关系
print(type(1) is int) #True
print(type(dog1) is Dog) #True
print(type(dog1) is Animal) #False


# 判断类之间的继承
print(issubclass(Dog,Animal)) #True 判断两个类的关系,可传递




2.判断两者其中的一种类别？
print( isinstance([1,2,3], (list,tuple)) ) #True
print( isinstance((1,2,3), (list,tuple)) ) #True


3.判断数据是哪种类别？
简单的直接比较
复杂的借助于types模块

print(a1,a2,a3,a4) #True True True True
print( type(123)==type(456) ) #True
print( type(123)==type( "aa") ) #False

print( type(123)==int ) #True
print( type(123)==str ) #False


#复杂的
import types
def fn():
    pass

a1=type(fn)==types.FunctionType
a2=type(abs)==types.BuiltinFunctionType
a3=type(lambda x:x)==types.LambdaType
a4=type( (x for x in range(10)) )==types.GeneratorType






========================================
6. 组合
----------------------------------------
类与类的关系除了继承，还有组合、聚合、关联


组合：一个类是其中一个类的组成部分，且紧密相关。例：Linux硬盘操作模块与LinuxOS内核，独立于Linux内核硬盘操作这个模块无法使用

聚合：一个类是一个类的一部分，但是可独立使用。例：发动机与汽车，发动机可以独立出来使用

关联：最常用，两个类都是独立的，但存在某种关系。例如：学校老师绩效考核系统中，学校是一个类，老师是一个类，但这里的老师与学校存在关联






========================================
7. 定制类(类的专有方法、魔术方法)(__str__ / __iter__ __next__ / __getitem__ / __getattr__ /)
----------------------------------------

1. __str__ 直接打印类时，输出看不懂，使用这个可以自定义输出
__repr__()方法返回程序猿看到的字符串，是为调试服务的。
代码一样，一般可以偷懒写。

class Cat():
    def __init__(self,name):
        self.name=name
    def __str__(self):
        return "class Cat: "+self.name
    __repr__ = __str__ #偷懒写法 #注释掉这行，则交互模式cat输出<__main__.Cat at 0x7f2541876ac8>

cat=Cat("Xiaohua")
print(cat) #class Cat: Xiaohua
cat #这样在交互模式下也能如上输出了






2. __iter__
如果想将一个类用于for...in循环，类似list或tuple一样，就必须实现一个__iter__()方法。
该方法返回一个迭代对象，Python的for循环会不断调用迭代对象的__next__()方法，获得循环的下一个值，直到遇到StopIteration错误退出循环。

class Fib(object):
    def __init__(self):
        self.a, self.b=0,1 #初始化两个计数器
    def __iter__(self):
        return self #实例化本身就是迭代对象，故返回自己
    def __next__(self):
        #self.a, self.b=self.b, self.a+self.b #这一句怎么理解
        tmp=self.a
        self.a=self.b #a是旧的b
        self.b=tmp+self.b #b是旧的a加上旧的b
        #
        #print("a,b= ",self.a, self.b)
        if self.a>100: #退出循环的条件
            raise StopIteration();
        return self.a
        

for n in Fib():
    print(n)
#1
#1
#2
#3
#...
#89




3. __getitem__
想把Fib实例当做list使用，比如获取第4个元素，直接报错：
Fib()[3] #TypeError: 'Fib' object does not support indexing

实现__getitem__方法即可。


class Fib(object):
    def __getitem__(self,n):
        a,b=1,1
        for x in range(n):
            a,b=b,a+b
        return a
fib=Fib()
print(fib[3]) #3
print(fib[10]) #89




4. __getattr__ 处理不存在的属性

class Man():
    name="Default name"
    def __getattr__(self,attri):
        if attri=="age": #已有属性不会在 __getattr__ 查找
            return 20
        else:
            return None; #这样定义，能防止报错

man=Man()
print(man.name)
print(man.age) #20
#如果没有__getattr__则报错
#AttributeError: 'Man' object has no attribute 'age'

print(man.height) #None




5. __call__ 直接调用实例本身

class Cat():
    def eat(self):
        print("Cat likes eating fish")
    def __call__(self):
        print("This is a cat")

cat=Cat()
cat.eat() #常规操作
cat() #直接调用实例本身



还可以为__call__方法设置参数。这就导致函数和对象行为一致，模糊了其界限。
怎么判断一个变量是函数还是对象呢？

print('max:', callable(max) ) #True
print('"aa":',  callable('aa') ) #False

print( callable(cat.eat) ) #True
print( callable(cat) ) #True

class Dog():
    pass
dog=Dog()
print( callable(dog) ) #False


使用callable()函数可以判断一个对象是否是可调用的。






========================================
****** Python面向对象进阶 ******
----------------------------------------

进阶
https://www.cnblogs.com/wuxiaobo/articles/10325113.html

一切皆对象
元类
类的内置属性
描述符
类的装饰器
再看@property
反射


元类 -> 生成类 -> 实例化为对象;

能够生成类的结构叫“元类”，生成的类本身也是对象所以也叫类对象
元类也可以继承。类也可以继承。


========================================
1.类的动态创建
----------------------------------------

类代码定义在函数中，动态调用函数
使用内部函数 type(name, bases, dict)动态创建


#方法一、函数内部定义类，动态调用函数创建
def choose_class(class_name):
    if class_name == 'foo':
        class Foo:
            pass
        return Foo
    if class_name == 'bar':
        class Bar:
            pass
        return Bar
 
foo = choose_class('foo')
print(foo) # <class '__main__.choose_class.<locals>.Foo'>
#分析：类的代码还需要提前书写



#方法二、type(name, bases, dict) -> a new type
# class MyClass:
#     bar = True
#两者等价 //todo 等号左侧的类名和type第一个参数不一样怎么办？
MyClass2 = type('MyClass',(object,),{'bar':True})
print(MyClass2,MyClass2.bar) # <class '__main__.MyClass'> True
print(type(MyClass2)) #<class 'type'>
#
mc=MyClass2()
print(mc.bar) #True




#方法二、定义方法的例子
#先定义方法
def fn(self,name="world"):
    print("Hello, %s." % name)

#使用type()定义类
MyClass = type('MyClass',(object,),{'bar':True, 'hello':fn})

mc=MyClass()
mc.hello("Python3") #Hello, Python3.
print(mc.bar) #True

print(type(MyClass)) #<class 'type'>


通过type()函数创建的类和直接写class是完全一样的，因为Python解释器遇到class定义时，仅仅是扫描一下class定义的语法，然后调用type()函数创建出class。

正常情况下，我们都用class Xxx...来定义类，但是，type()函数也允许我们动态创建出类来，也就是说，动态语言本身支持运行期动态创建类。




========================================
元类
----------------------------------------
创建类这种对象的类，type为Python中的内建元类

自定义元类

class UpperAttrMetaclass(type): #建议继承内部元类创建自己元类
    def __new__(cls, name, bases, dct):
 
        attrs = ((name, value) for name, value in dct.items() if not name.startswith('__'))
        uppercase_attr = dict((name.upper(), value) for name, value in attrs)
        return super(UpperAttrMetaclass, cls).__new__(cls, name, bases, uppercase_attr)
 
class Foo(object,metaclass=UpperAttrMetaclass):
    #__metaclass__ = UpperAttrMetaclass #3.7测试无效的
    bar = 'bip'
    name="小强"

foo=Foo()

print(Foo.__dict__) # {'BAR': 'bip'...} 类的属性名被转换为大写
print(type(UpperAttrMetaclass)) #元类本身就是type类型的
print(type(Foo))
###
{'BAR': 'bip', 'NAME': '小强', '__module__': '__main__', '__dict__': <attribute '__dict__' of 'Foo' objects>, '__weakref__': <attribute '__weakref__' of 'Foo' objects>, '__doc__': None}
<class 'type'>
<class '__main__.UpperAttrMetaclass'>




========================================
内置属性
----------------------------------------
由于一切皆对象，python中的内置函数和操作符号(例如：.、 [] 、（）、with 等）都对应类（对象）中的内置方法

内置方法很杂，按OOP思想要调用应该把内置方法封装为接口，由用户来实现（个人理解）

内置数据属性
	__doc__ :类文档，子类不继承
	__module__：类的模块名(含包名)
	__dict__：类属性，含数据和方法属性，对象不显示类中的属性
	__bases__:父类，多个用元祖组成
	__class__：当前类名

内置方法属性
	__str__ ：显示对象打印格式
	__repr__：同上，区别：命令行下，执行repr(对象名)打印，一般用作程序调试
	__enter__ :进入with 代码块被执行
	__exit__　: 退出with 代码块前被执行
	__next__ : 定义可迭代对象
	__iter__： 定义迭代器
	

1.
	__new__ 创建对象，静态方法，类() 触发
	__init__  初始化对象，由__new__返回本类对象时触发

示例:
class A():
    pass
class B(A):
    def __init__(self):
        print(">> init")
        self.name="Default name"
    #默认为类方法，cls 内容由解释器自动传入，args 为父类元祖，kwargs 为类属性字典
    def __new__(cls,*args, **kwargs):
        print("> new %s"%cls)
        #return object.__new__(cls, *args, **kwargs) 
        return object.__new__(A, *args, **kwargs) #返回一个对象可以是自己的也可以是其他的类，
 
b=B() # new <class '__main__.B'> #根本没执行B的init
print(type(b)) #<class '__main__.A'>


2. __del__： del 对象时触发
示例:
class A():
    def __del__(self):
        print('__del__被执行了')
 
a = A()
del a # __del__被执行了。对象的内存释放由解释器来完成，程序员不用考虑


3.
__getattr__ :对象取属性（不包含方法属性调用）触发
__setattr__:对象属性被修改时（包含方法属性调用）触发
__delattr__:删除对象属性时触发
__getattribute__："对象名."  形式就会触发，不区分赋值还是取值，删除等操作。属性拦截器。可以作为日志记录用。

示例代码
class Foo:
    x = 1
    def __init__(self, y):
        self.y = y #会触发 setattr

    #属性访问拦截器。属性调用，都会触发
    def __getattribute__(self, item):
        print('---->属性拦截器 from getattribute')
        return object.__getattribute__(self,item)

    def __getattr__(self, item):
        print('----> from getattr:你找的属性不存在')

    def __setattr__(self, key, value):
        print('----> from setattr')
        # self.key = value  #错误，引发死循环
        self.__dict__[key] = value #这种写法

    def __delattr__(self, item):
        print('----> from delattr')
        # del self.item #无限递归了
        self.__dict__.pop(item)

# __setattr__添加/修改属性会触发它的执行
print('*'*20)
f1 = Foo(10)
print('1>> ',f1.__dict__)  # 因为你重写了__setattr__,凡是赋值操作都会触发它的运行,
# 你啥都没写,就是根本没赋值,除非你直接操作属性字典,否则永远无法赋值


print('*'*20)
f1.z = 3
print('2>> ',f1.__dict__)


# __delattr__删除属性的时候会触发
print('*'*20)
f1.__dict__['a'] = 300  # 直接修改属性字典,不触发
del f1.z
print('3>> ',f1.__dict__)
#
# __getattr__只有在使用点调用属性且属性不存在的时候才会触发
print('*'*20)
print('4>> ', f1.x, type(f1), f1.xxx)

#####
********************
----> from setattr
---->属性拦截器 from getattribute
---->属性拦截器 from getattribute
1>>  {'y': 10}
********************
----> from setattr
---->属性拦截器 from getattribute
---->属性拦截器 from getattribute
2>>  {'y': 10, 'z': 3}
********************
---->属性拦截器 from getattribute
----> from delattr
---->属性拦截器 from getattribute
---->属性拦截器 from getattribute
3>>  {'y': 10, 'a': 300}
********************
---->属性拦截器 from getattribute
---->属性拦截器 from getattribute
----> from getattr:你找的属性不存在
4>>  1 <class '__main__.Foo'> None
[Finished in 0.2s]






4.
__getitem__:同__getattr__，不过不是采用"."来操作而是"[ ]" 切片
__setitem__
__delitem__


class Foo:
    def __init__(self,name):
        self.name=name
 
    def __getitem__(self, item):
        print(self.__dict__[item])
 
    def __setitem__(self, key, value):
        print('  set obj[key]时,我执行')
        self.__dict__[key]=value
    def __setattr__(self, key, value):
        print('  set obj.key时,我执行')
        self.__dict__[key]=value
    
    def __delitem__(self, key):
        print('del obj[key]时,我执行')
        self.__dict__.pop(key)
    def __delattr__(self, item):
        print('del obj.key时,我执行')
        self.__dict__.pop(item)
 
f1=Foo('sb')
f1.age=18
f1['age1']=19
print(f1.__dict__)

del f1.age1
del f1['age']

f1['name']='alex'
print(f1.__dict__)


######
#   set obj.key时,我执行
#   set obj.key时,我执行
#   set obj[key]时,我执行
# {'name': 'sb', 'age': 18, 'age1': 19}
# del obj.key时,我执行
# del obj[key]时,我执行
#   set obj[key]时,我执行
# {'name': 'alex'}






5.
__call__:对象名() 时被触发

示例 
class Meta(type):
    #2. 生成类对象
    def __new__(cls, name, bases, dct):
        print("calling Meta's __new__", cls)
        return type.__new__(cls, name, bases, dct)
    #4.类对象调用触发元类的__call__ 方法
    def __call__(cls, *args, **kwargs):
        print("calling Meta's __call__", cls)
        #5.类对象，从自己的对象角度看也是一个类，可以直接调用自己的静态方法 __new__ 生成自己对象
        i = cls.__new__(cls)
        #6.类对象生成的对象初始化
        i.__init__(*args, **kwargs)
        return i
 
class A(metaclass=Meta): # 1. 类对象的创建使用 元类的__new__
    def __new__(cls, *args, **kwargs):
        print("calling A's __new__")
        return object.__new__(cls)
 
    def __init__(self, *args, **kwargs):
        print("calling A's __init__")
#3.类对象调用 
a=A()
# calling Meta's __new__ <class '__main__.Meta'>
# calling Meta's __call__ <class '__main__.A'>
# calling A's __new__
# calling A's __init__

print('\n',type(a)) # <class '__main__.A'>
print(A.__dict__) 
#{'__module__': '__main__', '__new__': <staticmethod object at 0x000001E3859314E0>, ...










========================================
描述符
----------------------------------------
描述符本质就是一个新式类（Python3都是新式类）,在这个新式类中,至少实现了__get__(),__set__(),__delete__()中的一个。其作用是用来代理另外一个类的类属性。

分类
	描述符中仅定义__get__，称 非数据描述符
	定义了__set__或者__del__之一 ，称 数据描述符　　

优先级（从高到低）
	类属性
	数据描述符
	实例属性
	非数据描述符
	__getattr__（没有属时调用）

示例：
#描述符Str
class Str:
    def __get__(self, instance, owner):
        print('Str调用')
    def __set__(self, instance, value):
        print('Str设置...')
    def __delete__(self, instance):
        print('Str删除...')
 
#描述符Int
class Int:
    def __get__(self, instance, owner):
        print('Int调用')
    def __set__(self, instance, value):
        print('Int设置...')
    def __delete__(self, instance):
        print('Int删除...')
 
class People:
    name=Str()
    age=Int()
    def __init__(self,name,age): #name被Str类代理,age被Int类代理,
        self.name=name
        self.age=age
 
 
p1=People('alex',18)
#Str设置...
# Int设置...
print(p1.__dict__) # {}
print(People.name) # Str调用，自动触发描述符__get__ 方法
print(People.__dict__)
# 'name': <__main__.Str object at 0x000001CC5EAD2208>, 'age': <__main__.Int object at 0x000001CC5EAD2240>






========================================
类的属性： obj.__dict__.update(dictObj)
----------------------------------------

1. 对象的动态属性都保存在 obj.__dict__ 中
class A():
    name="Class A" #这是静态属性
    pass

a=A()
print(a)
a.__dict__.update({"apple":20, "water":2})
a

print(a.apple) # 20
print(a.__dict__) #{'apple': 20, 'water': 2}
a.name #'Class A'
A.name #'Class A'


(2) 
class Vertex:
    def __init__(self, vid, cid, nodes):
        self._vid=vid
        self._cid=cid
        self._nodes=nodes

new_vertex = Vertex(2, 3, set())

>>> new_vertex
<__main__.Vertex object at 0x7fa0925225f8>

>>> new_vertex._nodes
set()

更新 nodes 内容，求并集
>>> nodes={1:{2:1}, 3:{1:1, 3:1, 5:1, 7:1}}
>>> nodes[3]
{1: 1, 3: 1, 5: 1, 7: 1}

>>> new_vertex._nodes.update( nodes[3] )
>>> new_vertex._nodes
{1, 3, 5, 7}
仅仅是把 key 加进来了。















2. 还可以更新方法

class Dog:
    def bark(self, some=""):
        return "bark"+some

class A:
    pass

dog=Dog()
a=A()
print(1, a.__dict__)

a.__dict__.update( dict(say=dog.bark) ) #更新方式1
print(2, a.__dict__)
print(3, a.say())

a.__dict__.update( {'say2': dog.bark} ) #更新方式2
print(4, a.say2()) #不带参数调用
print(5, a.say2(" to you !!!")) #带参数调用
print(6, a.__dict__)

输出:
1 {}
2 {'say': <bound method Dog.bark of <__main__.Dog object at 0x7f52fb30d2b0>>}
3 bark
4 bark
5 bark to you !!!
6 {'say': <bound method Dog.bark of <__main__.Dog object at 0x7f52fb30d278>>, 'say2': <bound method Dog.bark of <__main__.Dog object at 0x7f52fb30d278>>}




========================================
运行过程中给类添加方法 types.MethodType //todo
----------------------------------------







========================================
****** 23种设计模式 ******
----------------------------------------


ref:https://blog.csdn.net/jason0539/article/details/44956775


更多内容，记录在 Python/py设计模式。







========================================
python: cls self的区别？
----------------------------------------
1. The distinction between "self" and "cls" is defined in PEP 8 . As Adrien said, this is not a mandatory. 

It's a coding style. PEP 8 says:Function and method arguments:
- Always use self for the first argument to instance methods.（用 self 作为实例方法的第一个参数）
- Always use cls for the first argument to class methods.（用 cls 作为类方法的第一个参数）并非强制，只是一种编程习惯。



2. 实例方法，类方法。
class A(object):
    a = 'a'
    @staticmethod
    def foo1(name):
        print 'hello', name
        print A.a # 正常
        print A.foo2('mamq') # 报错: unbound method foo2() must be called with A instance as first argument (got str instance instead)
    def foo2(self, name):
        print 'hello', name
    @classmethod
    def foo3(cls, name):
        print 'hello', name
        print A.a
        print cls().foo2(name)

#






ref:
https://www.zhihu.com/question/49660420/answer/1120580138




========================================
----------------------------------------




========================================
----------------------------------------


========================================
----------------------------------------




========================================
----------------------------------------


========================================
----------------------------------------




========================================
----------------------------------------


========================================
----------------------------------------

