Py-pkgs




========================================
包的导入： __init__.py的作用?
----------------------------------------
https://www.cnblogs.com/tp1226/p/8453854.html


一个包是一个带有特殊文件 __init__.py 的目录。
__init__.py 文件定义了包的属性和方法。其实它可以什么也不定义；可以只是一个空文件，但是必须存在。
如果 __init__.py 不存在，这个目录就仅仅是一个目录，而不是一个包，它就不能被导入或者包含其它的模块和嵌套包。

python的每个模块的包中，都有一个__init__.py文件，有了这个文件，我们才能导入这个目录下的module。
那么，__init__.py还有什么别的功能呢？



1 目录结构
└── mypackage
    ├── __init__.py
    ├── subpackage_1
    │   ├── test11.py
    │   └── test12.py
    ├── subpackage_2
    │   ├── test21.py
    │   └── test22.py
    └── subpackage_3
        ├── test31.py
        └── test32.py
#
如果我们使用最直接的导入方式，将整个文件拷贝到工程目录下，然后直接导入：
from mypackage.subpackage_1 import test11
from mypackage.subpackage_1 import test12
from mypackage.subpackage_2 import test21
from mypackage.subpackage_2 import test22
from mypackage.subpackage_3 import test31
from mypackage.subpackage_3 import test32



(2)我们在导入一个包时，实际上运行了它的__init__.py文件。
mypackage/__init__.py 里面加一个print，如果执行了该文件就会输出：
print("You have imported mypackage")

下面直接用交互模式进行 import
>>> import mypackage
You have imported mypackage
很显然，__init__.py 在包被导入时会被执行。



(3) 批量引入
我们可以再__init__.py文件中再导入其他的包，或者模块。
# __init__.py
import re
import urllib
import sys
import os
这样，当我们导入这个包的时候，__init__.py文件自动运行。帮我们导入了这么多个模块，我们就不需要将所有的import语句写在一个文件里了，也可以减少代码量。
不需要一个个去导入module了。

# a.py
import mypackage
print(mypackage.re, mypackage.urllib, mypackage.sys, mypackage.os)



(4)__init__.py中还有一个重要的变量，all, 它用来将模块全部导入
# __init__.py
__all__ = ['os', 'sys', 're', 'urllib']
# a.py
from mypackage import *


(5)可以被import语句导入的对象是以下类型：
- 模块文件（.py文件）
- C或C++扩展（已编译为共享库或DLL文件）
- 包（包含多个模块）
- 内建模块（使用C编写并已链接到Python解释器中）

模块通常为单独的.py文件，可以用import直接引用，可以作为模块的文件类型有.py、.pyo、.pyc、.pyd、.so、.dll


(6)关于.pyc 文件 与 .pyo 文件
py文件的汇编,只有在import语句执行时进行，当.py文件第一次被导入时，它会被汇编为字节代码，并将字节码写入同名的.pyc文件中。后来每次导入操作都会直接执行.pyc 文件（当.py文件的修改时间发生改变，这样会生成新的.pyc文件），在解释器使用-O选项时，将使用同名的.pyo文件，这个文件去掉了断言（assert）、断行号以及其他调试信息，体积更小，运行更快。（使用-OO选项，生成的.pyo文件会忽略文档信息）


(7) py路径
当导入模块时，解释器按照sys.path列表中的目录顺序来查找导入文件。
>>> import sys
>>> print(sys.path)
['', '/home/wangjl/software/anoconda3/lib/python36.zip', '/home/wangjl/software/anoconda3/lib/python3.6', '/home/wangjl/software/anoconda3/lib/python3.6/lib-dynload', '/home/wangjl/.local/lib/python3.6/site-packages', '/home/wangjl/software/anoconda3/lib/python3.6/site-packages', '/home/wangjl/software/anoconda3/lib/python3.6/site-packages/qapa-1.1.0-py3.6.egg', '/home/wangjl/software/anoconda3/lib/python3.6/site-packages/pybedtools-0.7.10-py3.6-linux-x86_64.egg', '/home/wangjl/software/anoconda3/lib/python3.6/site-packages/biopython-1.70-py3.6-linux-x86_64.egg', '/data4/wangjl/software/anoconda3/lib/python3.6/site-packages']
其中list第一个元素空字符串代表当前目录。





2.  控制模块导入

在 mypackage/__init__.py 添加以下语句：
from subpackage_1 import test11 ## 报错: ImportError: No module named 'subpackage_1'

原来，在我们执行import时，当前目录是不会变的（就算是执行子目录的文件），还是需要完整的包名。
from mypackage.subpackage_1 import test11

综上，我们可以在__init__.py 指定默认需要导入的模块　　





3. 偷懒的导入方法: __all__ 变量

有时候我们在做导入时会偷懒，将包中的所有内容导入
from mypackage import *

这是怎么实现的呢？ __all__ 变量就是干这个工作的。
__all__ 关联了一个模块列表，当执行 from xx import * 时，就会导入列表中的模块。我们将 __init__.py 修改为:
__all__ = ['subpackage_1', 'subpackage_2']

这里没有包含 subpackage_3，是为了证明 __all__ 起作用了，而不是导入了所有子目录。

>>> from mypackage import *
__init__.py is runing.
>>> dir()
['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'subpackage_1', 'subpackage_2']
>>> dir(subpackage_1)
['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']

子目录的中的模块没有导入！！！

该例子中的导入等价于
from mypackage import subpackage_1, subpackage_2

因此，导入操作会继续查找 subpackage_1 和 subpackage_2 中的 __init__.py 并执行。（但是此时不会执行 import *）
我们在 subpackage_1 下添加 __init__.py 文件:

__all__ = ['test11', 'test12']
# 默认只导入test1
from mypackage.subpackage_1 import test11


再来导入试试
>>> from mypackage import *
>>> dir()
['__builtins__', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'subpackage_1', 'subpackage_2']
>>> 
>>> dir(subpackage_1)
['__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__spec__', 'test11']
>>> dir(subpackage_1.test11)
['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'fn'] #定义的fn函数也出现了
>>> subpackage_1.test11.fn()  ## 运行该函数
sub1-t1



如果想要导入子包的所有模块，则需要更精确指定。

>>> from mypackage.subpackage_1 import *
>>> dir()
['__builtins__', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'test11', 'test12']
>>> test11.fn() ## 运行该函数
sub1-t1




(2) 如果想全部导入 from PackageName import * ，则如何写该包的__init__.py文件呢？
__all__ = ["Module1", "Module2", "subPackage1", "subPackage2"]








4. 配置模块的初始化操作
在了解了 __init__.py 的工作原理后，应该能理解该文件就是一个正常的python代码文件。

因此可以将初始化代码放入该文件中。








refer:
Python杂谈: __init__.py的作用  https://www.cnblogs.com/tp1226/p/8453854.html







========================================
python 包的写法
----------------------------------------
1. 基本流程

(1) 目录结构
$ cd /home/wangjl/data/test/testPy/pkg/

$ ls -lt
__init__.py 
f1.py 
f2.py 



(2) 文件内容
$ cat f1.py 
def show():
	print("in pkg f1.show()")

$ cat f2.py 
def show():
	print("in pkg f2.show()")


$ cat __init__.py 
__all__ = ['f1', 'f2']


(3) 测试
$ cd ..
$ python3

>>> import pkg
>>> from pkg import f1
>>> f1.show()
in pkg f1.show()
>>> f2.show()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'f2' is not defined

>>> dir(pkg)
['__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__spec__', 'f2']


>>> from pkg.f2 import show
>>> show()
in pkg f2.show()

>>> dir(pkg)
['__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__spec__', 'f1', 'f2']

>>> help(pkg)
Help on package pkg:

NAME
    pkg

PACKAGE CONTENTS
    f1
    f2

DATA
    __all__ = ['f1', 'f2']

FILE
    /data/wangjl/test/testPy/pkg/__init__.py


>>> exit()
$ python3
>>> from pkg import *
>>> f1.show()
in pkg f1.show()

>>> f2.show()
in pkg f2.show()


>>> dir()
['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'f1', 'f2']







2. 建立安装包

(1) 上层目录建立一个 setup.py 

$ mv pkg mypkg1
$ touch setup.py
$ ls -lth
total 16K
-rw-rw-r-- 1 wangjl wangjl  221 Sep 16 20:54 setup.py
drwxrwxr-x 3 wangjl wangjl 4.0K Sep 16 20:53 cmdParams
drwxrwxr-x 3 wangjl wangjl 4.0K Sep 16 20:33 mypkg1



$ cat setup.py
from distutils.core import setup

setup(
	name='mypkg1',
	version='1.0',
	description='This is a test of the setup',
	author='wjl',
	author_email='314649593@qq.com',
	url='https://www.biomooc.com',
	packages=['mypkg1']
)



(2) build
$ python -V
Python 3.7.0

$ python3 setup.py build

输出:
running build
running build_py
creating build
creating build/lib
creating build/lib/mypkg1
copying mypkg1/f2.py -> build/lib/mypkg1
copying mypkg1/__init__.py -> build/lib/mypkg1
copying mypkg1/f1.py -> build/lib/mypkg1

(3) 打包
$ python3 setup.py sdist

输出 
running sdist
running check
warning: sdist: manifest template 'MANIFEST.in' does not exist (using default file list)

warning: sdist: standard file not found: should have one of README, README.txt, README.rst

writing manifest file 'MANIFEST'
creating mypkg1-1.0
creating mypkg1-1.0/mypkg1
making hard links in mypkg1-1.0...
hard linking setup.py -> mypkg1-1.0
hard linking mypkg1/__init__.py -> mypkg1-1.0/mypkg1
hard linking mypkg1/f1.py -> mypkg1-1.0/mypkg1
hard linking mypkg1/f2.py -> mypkg1-1.0/mypkg1
creating dist
Creating tar archive
removing 'mypkg1-1.0' (and everything under it)


多了一个文件
$ cat MANIFEST 
# file GENERATED by distutils, do NOT edit
setup.py
mypkg1/__init__.py
mypkg1/f1.py
mypkg1/f2.py

产生的文件
$ ls -lth dist/
total 4.0K
-rw-rw-r-- 1 wangjl wangjl 600 Sep 16 20:56 mypkg1-1.0.tar.gz





3. 安装和使用
(1) 使用
$ cd dist/

$ tar -zxvf mypkg1-1.0.tar.gz
mypkg1-1.0/
mypkg1-1.0/PKG-INFO
mypkg1-1.0/mypkg1/
mypkg1-1.0/mypkg1/__init__.py
mypkg1-1.0/mypkg1/f1.py
mypkg1-1.0/mypkg1/f2.py
mypkg1-1.0/setup.py


$ cd mypkg1-1.0
$ python setup.py install

输出:
running install
running build
running build_py
creating build
creating build/lib
creating build/lib/mypkg1
copying mypkg1/f2.py -> build/lib/mypkg1
copying mypkg1/__init__.py -> build/lib/mypkg1
copying mypkg1/f1.py -> build/lib/mypkg1
running install_lib
creating /home/wangjl/anaconda3/lib/python3.7/site-packages/mypkg1
copying build/lib/mypkg1/f2.py -> /home/wangjl/anaconda3/lib/python3.7/site-packages/mypkg1
copying build/lib/mypkg1/__init__.py -> /home/wangjl/anaconda3/lib/python3.7/site-packages/mypkg1
copying build/lib/mypkg1/f1.py -> /home/wangjl/anaconda3/lib/python3.7/site-packages/mypkg1
byte-compiling /home/wangjl/anaconda3/lib/python3.7/site-packages/mypkg1/f2.py to f2.cpython-37.pyc
byte-compiling /home/wangjl/anaconda3/lib/python3.7/site-packages/mypkg1/__init__.py to __init__.cpython-37.pyc
byte-compiling /home/wangjl/anaconda3/lib/python3.7/site-packages/mypkg1/f1.py to f1.cpython-37.pyc
running install_egg_info
Writing /home/wangjl/anaconda3/lib/python3.7/site-packages/mypkg1-1.0-py3.7.egg-info

这样就安装到本地的目录里面。
当然也可以在作为git 项目直接upload 到git repo，然后再git clone 去分发。



(2) 查询包

$ pip3 list | grep mypkg
mypkg1                            1.0



(3) 使用包
$ python3
Python 3.7.0 (default, Jun 28 2018, 13:15:42) 
>>> from mypkg1 import *  #或者 from mypkg1 import f1,f2
>>> f1.show()
in pkg f1.show()
>>> f2.show()
in pkg f2.show()
>>> exit()
$





4. 升级包
(1) 修改下源码
$ cd /home/wangjl/data/test/testPy/
$ cat mypkg1/f2.py
def show():
	print("in pkg f2.show() v2")


$ cat setup.py  #修改版本号为 2.0
from distutils.core import setup

setup(
	name='mypkg1',
	version='2.0',
	description='This is a test of the setup',
	author='wjl',
	author_email='314649593@qq.com',
	url='https://www.biomooc.com',
	packages=['mypkg1']
)


本地测试:
$ python3
>>> from mypkg1 import f1,f2
>>> f1.show()
in pkg f1.show()
>>> f2.show()
in pkg f2.show() v2  #已经是最新版了




(2) 制作安装包，并安装
重新 build, sdist ,install ,setup
$ python setup.py build
$ python setup.py sdist


安装该包
$ tar -zxvf dist/mypkg1-2.0.tar.gz
$ cd mypkg1-2.0/
$ python setup.py install


查看版本号，已经是最新版了
$ pip3 list | grep mypkg
mypkg1                            2.0



(3) 测试
退出 python 终端，不然仍然使用 cache 里面的1.0包版本

$ python3
Python 3.7.0 (default, Jun 28 2018, 13:15:42) 
>>> from mypkg1 import f1,f2
>>> f1.show()
in pkg f1.show()
>>> f2.show()
in pkg f2.show() v2   #这确实打印了最新版的
>>> exit()
$




(4) 如何卸载该安装包
$ pip3 uninstall mypkg1
Found existing installation: mypkg1 2.0
ERROR: Cannot uninstall 'mypkg1'. It is a distutils installed project and thus we cannot accurately determine which files belong to it which would lead to only a partial uninstall.

搜索该错误: 
直接全局搜索对应文件，具体包括 "package name" 文件夹 和 "package name".egg-info ，找到后直接删除即可

找前面的输出 
$ python setup.py install
...
copying build/lib/mypkg1/f2.py -> /home/wangjl/anaconda3/lib/python3.7/site-packages/mypkg1
byte-compiling /home/wangjl/anaconda3/lib/python3.7/site-packages/mypkg1/f2.py to f2.cpython-37.pyc
running install_egg_info
Writing /home/wangjl/anaconda3/lib/python3.7/site-packages/mypkg1-2.0-py3.7.egg-info


写下来这些地址:
/home/wangjl/anaconda3/lib/python3.7/site-packages/mypkg1
/home/wangjl/anaconda3/lib/python3.7/site-packages/mypkg1/f2.py to f2.cpython-37.pyc
/home/wangjl/anaconda3/lib/python3.7/site-packages/mypkg1-2.0-py3.7.egg-info

相关记录:
$ ls -lth /home/wangjl/anaconda3/lib/python3.7/site-packages/ | head
total 7.1M
-rw-rw-r--  1 wangjl wangjl  219 Sep 16 21:09 mypkg1-2.0-py3.7.egg-info
drwxrwxr-x  3 wangjl wangjl 4.0K Sep 16 21:09 mypkg1
-rw-rw-r--  1 wangjl wangjl  219 Sep 16 21:00 mypkg1-1.0-py3.7.egg-info

删掉这2个文件一个文件夹，
$ pip3 list | grep mypkg
$
已经查不到该包了。





5. 如何直接使用该包的函数呢？
(1) 在 __init__.py 中添加需要执行的语句

$ /home/wangjl/data/test/testPy/
$ vim mypkg1/__init__.py
from mypkg1 import f1
from mypkg1 import f2


(2) 导入包
$ python3
>>> import mypkg1
>>> dir(mypkg1)
['__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__spec__', 'f1', 'f2']

>>> mypkg1.f1.show()
in pkg f1.show()
>>> mypkg1.f2.show()
in pkg f2.show() v2



(3) 如果要去掉前面的包名，可以这么写:
>>> from mypkg1 import *
>>> dir()
['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'f1', 'f2', 'mypkg1']
>>> f1.show()
in pkg f1.show()
>>> f2.show()
in pkg f2.show() v2





========================================
ctypes 包: python 调用C函数
----------------------------------------

1. 简单示例
https://www.geeksforgeeks.org/how-to-call-a-c-function-in-python/?ref=lbp
(1)写一个C函数，并编译成动态共享库
$ vim a1.c 

int myFunction(int num){
    if (num == 0) 
        // if number is 0, do not perform any operation.
        return 0;
    else
        // if number is power of 2, return 1 else return 0
        return ((num & (num - 1)) == 0 ? 1 : 0) ;
}

$ gcc -std=c11 -fPIC -c a1.c -o a1.o

$ gcc -std=c11 -shared -o libfun.so a1.o

$ ls -lth
total 24K
-rwxrwxr-x 1 wangjl wangjl  16K Sep 16 21:54 libfun.so
-rw-rw-r-- 1 wangjl wangjl 1.4K Sep 16 21:53 a1.o
-rw-rw-r-- 1 wangjl wangjl  239 Sep 16 21:51 a1.c


(2) 在C中测试 
$ cat test.c
#include<stdio.h>

int myFunction(int);

int main(){
  int a=4, b=5;
  printf("result: %d %d\n", myFunction(a), myFunction(b));
  return 0;
}

$ gcc test.c -L. -lfun
$ ./a.out 
./a.out: error while loading shared libraries: libfun.so: cannot open shared object file: No such file or directory

$ export LD_LIBRARY_PATH=$PWD:$LD_LIBRARY_PATH
$ ./a.out 
result: 1 0




(3) 在python中调用
Using ctypes(foreign function interface) library to call C function from Python

import ctypes
NUM = 16
# libfun loaded to the python file using fun.myFunction(),
# C function can be accessed, but type of argument is the problem.

>>> fun = ctypes.CDLL("libfun.so") # Or full path to file 
# Now whenever argument will be passed to the function ctypes will check it.

>>> fun.myFunction.argtypes = [ctypes.c_int]
 
# now we can call this function using instant (fun) 
# returnValue is the value return by function written in C code
>>> returnVale = fun.myFunction(NUM)
>>> returnVale
1

>>> fun.myFunction(3)
0
>>> fun.myFunction(4)
1





========================================
|-- 一个更复杂的动态链接库: 用到C的指针、数组指针、结构体
----------------------------------------
1. 用C代码编译成一个动态共享库

$ cat work.c
#include <math.h>

// 求最大公约数：辗转相除法
int gcd(int x, int y) {
    int g = y;
    while (x > 0) {
        g = x;
        x = y % x;
        y = g;
    }
    return g;
}

// 除法：返回整除，通过指针返回余数
int divide(int a, int b, int * remainder){
    int quot = a / b;
    *remainder = a % b;
    return quot;
}

// 平均数：第一个是指针，表示数组；第二个参数是个数
double avg(double * a, int n){
    int i;
    double total = 0.0;
    for (i = 0; i < n; i++){
        total += a[i];
    }
    return total / n;
}

// 定义结构体：一个点的坐标
typedef struct Point{
    double x, y;
} Point;


//求点的距离
double distance(Point * p1, Point * p2)
{
    return hypot(p1->x - p2->x, p1->y - p2->y);
}


以上体现了C的语言特性
gcd()
divide() – returning multiple values, one through a pointer argument
avg() – performing a data reduction across a C array
Point and distance() – involve C structures.

编译成动态共享库:
gcc -std=c11 -fPIC -c a1.c -o a1.o
gcc -std=c11 -shared -o libfun.so a1.o

也可以一步法
$ gcc -std=c11 -fPIC -shared -o libwork.so work.c

$ ls -lth
total 68K
-rwxrwxr-x 1 wangjl wangjl  16K Sep 17 10:17 libwork.so
-rw-rw-r-- 1 wangjl wangjl  776 Sep 17 10:17 work.c



(2) 使用C测试

$ vim test2.c
#include<stdio.h>
int gcd(int x, int y);
int divide(int a, int b, int * remainder);

typedef struct Point{
    double x, y;
} Point;
double distance(Point * p1, Point * p2);

int main(){
	int x=42, y=12;
	printf("1>>gcd of (%d, %d) is %d\n", x, y, gcd(x, y));

	int i=0, *pi=&i;
	int rs=divide(x, y, pi);
	printf("2>>%d devide %d = %d ... %d\n", x, y, rs, *pi);

	Point p1={0.0,3.0}, p2={4.0,0.0};
	printf("3>> distance:%f\n", distance(&p1, &p2) );

	return 0;
}

编译
$ gcc -std=c11 test2.c -L. -lwork -lm -o out

运行
$ ./out 
./out: error while loading shared libraries: libwork.so: cannot open shared object file: No such file or directory

添加共享库路径
$ export LD_LIBRARY_PATH=$PWD:$LD_LIBRARY_PATH

再次运行：
$ ./out 
1>>gcd of (42, 12) is 6
2>>42 devide 12 = 3 ... 6
3>> distance:5.000000




2. 在 py 中使用

(1) 在py中载入动态链接库
$ cd /data/wangjl/test/testPy/mypkg2/
$ cat work.py
import ctypes
import os
  
# locating the 'libwork.so' file in the same directory as this file
_file = 'libwork.so'
_path = os.path.join(*(os.path.split(__file__)[:-1] + (_file, )))
_mod = ctypes.cdll.LoadLibrary(_path)



交互式测试:
>>> os.getcwd()+"/libwork.so"
'/data/wangjl/test/testPy/mypkg2/libwork.so'
>>> _mod = ctypes.cdll.LoadLibrary(os.getcwd()+"/libwork.so")
>>> _mod
<CDLL '/data/wangjl/test/testPy/mypkg2/libwork.so', handle 5573e41c5120 at 0x7ff154bed160>





(2) 在py中加载C函数

#1) int gcd(int, int)
gcd = _mod.gcd #函数名
gcd.argtypes = (ctypes.c_int, ctypes.c_int) #参数类型
gcd.restype = ctypes.c_int #返回值类型



#2) int divide(int, int, int *)
_divide = _mod.divide
_divide.argtypes = (ctypes.c_int, ctypes.c_int,
                    ctypes.POINTER(ctypes.c_int)) #参数3是指针

_divide.restype = ctypes.c_int #返回值类型

# 重新定义函数，重新定义一个指针指向的类型；返回2个int组成的tuple
def divide(x, y):
    rem = ctypes.c_int()
    quot = _divide(x, y, rem)
    return quot, rem.value



#3) void avg(double *, int n) # 对于数组参数
# Define a special type for the 'double *' argument
class DoubleArrayType:
    def from_param(self, param):
        typename = type(param).__name__
        if hasattr(self, 'from_' + typename):
            return getattr(self, 'from_' + typename)(param)
        elif isinstance(param, ctypes.Array):
            return param
        else:
            raise TypeError("Can't convert % s" % typename)
    #
    # Cast from array.array objects
    def from_array(self, param):
        if param.typecode != 'd':
            raise TypeError('must be an array of doubles')
        ptr, _ = param.buffer_info()
        return ctypes.cast(ptr, ctypes.POINTER(ctypes.c_double))
    #
    # Cast from lists / tuples
    def from_list(self, param):
        val = ((ctypes.c_double)*len(param))(*param)
        return val
    #
    from_tuple = from_list
    #
    # Cast from a numpy array
    def from_ndarray(self, param):
        return param.ctypes.data_as(ctypes.POINTER(ctypes.c_double))

DoubleArray = DoubleArrayType() #自定义类，挺复杂，从py的array, list, tuple 转为需要的类型: double*
_avg = _mod.avg #函数名
_avg.argtypes = (DoubleArray, ctypes.c_int) #参数类型
_avg.restype = ctypes.c_double #返回值类型
  
def avg(values): #新函数
    return _avg(values, len(values))




#4) struct Point { }  结构体作为参数
#定义结构体
class Point(ctypes.Structure):
    _fields_ = [('x', ctypes.c_double), ('y', ctypes.c_double)]

# double distance(Point *, Point *)
distance = _mod.distance #函数名
distance.argtypes = (ctypes.POINTER(Point), ctypes.POINTER(Point)) #参数类型，指向 Point 的指针
distance.restype = ctypes.c_double #返回值类型




(3) 在py中调用C函数
如果把之前的文件保存为 work.py

import work
  
print ("GCD : ", work.gcd(35, 42))
  
print ("\ndivide : ", work.divide(42, 8))
  
print ("\navg : ", work.avg([1, 2, 3]))
  
p1 = work.Point(0, 2)
p2 = work.Point(4, 5)
print ("\ndistance : ", work.distance(p1, p2))

输出:
GCD : 7

divide : (5, 2)

avg : 2.0

distance : 5.0


(4) 问题
为了让py在运行时能找到共享库，可以把 so 文件放到py代码同名文件夹下。
One possibility is to put the resulting libsample.so file in the same directory as the supporting Python code

如果是作为标准库，则可以使用 ctypes.util.find_library() 函数。

from ctypes.util import find_library
find_library('m')
find_library('pthread')
find_library('work')


输出 output:
/usr/lib/libm.dylib
/usr/lib/libpthread.dylib
/usr/local/lib/libsample.so

我的输出:
'libm.so.6'
'libpthread.so.0'



如果无法定位动态链接库，也就无法载入它: _mod = ctypes.cdll.LoadLibrary(_path)

$ python3
Python 3.7.0 (default, Jun 28 2018, 13:15:42) 
>>> from ctypes.util import find_library
>>> _path=find_library('m')
>>> import ctypes
>>> ctypes.cdll.LoadLibrary(_path)
<CDLL 'libm.so.6', handle 7f2daa9f19e0 at 0x7f2da9f5c0b8>








========================================
|-- py调用C++代码的方法
----------------------------------------
1. py调用C的优点
- C速度快，可以克服 python的 Global Interpreter Lock(GIL)
- 有很多 a large, stable and tested library in C/C++
- 使用 Python test tools 进行测试


2. 写C++函数 

$ cat Book.cpp
#include <iostream>

class Book{
    public:
        void myFunction(){
            std::cout << "Hello, this is a Book!" << std::endl;
        }
};


int main(){
    Book t;
    t.myFunction();
    return 0;
}

// 必须声明编译为C的符号体系，因为 ctypes 只能和C的函数交互。
extern "C" {
    Book* Book_new(){ return new Book(); }
    void Book_myFunction(Book* book){ book -> myFunction(); }
}


编译和运行
$ g++ Book.cpp -o out
$ ./out 
Hello, this is a Book!



(2) 为什么要用C规则编译C++代码呢？
除函数重载外，extern “C”不影响C++其他特性。

因为C和C++的编译规则不一样，主要区别体现在编译期间生成函数符号的规则不一致。

两段代码的区别仅在于函数 Function(int a, int b) 编译后对应的符号不同

C：Function
C++：_Z8Functionii

C++编出来的函数符号明显比C的多出了一些信息（如ii），这里多出来的后缀信息就是形参列表的参数类型信息。


https://blog.csdn.net/sinat_36817189/article/details/110423243
https://en.cppreference.com/w/cpp/language/language_linkage
https://isocpp.org/wiki/faq/mixing-c-and-cpp






3. 编译成共享库
$ g++ -c -fPIC Book.cpp -o Book.o
$ g++ -shared -Wl,-soname,libbook.so -o libbook.so Book.o

$ ls -lht
total 140K
-rwxrwxr-x 1 wangjl wangjl  17K Sep 17 14:03 libbook.so
-rw-rw-r-- 1 wangjl wangjl 3.8K Sep 17 14:03 Book.o



4. 写py包装函数

# import the module
from ctypes import cdll
  
# load the library
lib = cdll.LoadLibrary('./libbook.so')
  
# create a Geek class
class Book(object):
    # constructor
    def __init__(self):
        # attribute
        self.obj = lib.Book_new()
    # define method
    def myFunction(self):
        lib.Book_myFunction(self.obj)

# create a Geek class object
f = Book()
  
# object method calling
f.myFunction()

输出:
Hello, this is a Book!






ref: 
https://www.geeksforgeeks.org/how-to-call-c-c-from-python/?ref=lbp



========================================
|-- py官方资料: Extending Python with C or C++ [ctypes / cffi]
----------------------------------------
https://docs.python.org/3/extending/extending.html#

不建议写 python 的扩展，因为只适用于 CPython。
建议使用 ctypes module or the cffi library 访问C库函数或者系统调用，这样更好移植。

For example, if your use case is calling C library functions or system calls, you should consider using the ctypes module or the cffi library rather than writing custom C code. These modules let you write Python code to interface with C code and are more portable between implementations of Python than writing and compiling a C extension module.


1. ctypes
https://docs.python.org/3/library/ctypes.html#module-ctypes

https://reptate.readthedocs.io/developers/python_c_interface.html




2. cffi
https://cffi.readthedocs.io/en/latest/











========================================
----------------------------------------



========================================
----------------------------------------




========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------





========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------




========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------




========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------





========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------




========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------




========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------





========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------




========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------




========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------

