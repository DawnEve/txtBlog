Python3快速入门 [准备]

版本号：
C:\Users\Administrator>python
Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:01:18) [MSC v.1900 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.

python自带的文档在：开始-Python3.6-Python3.6 Manual


python命名规范：https://www.cnblogs.com/wangcp-2014/p/4608265.html
一定不能与模块名字重叠，否则会调用自己，而不是调用需要的模块。







========================================
Python 环境搭建
----------------------------------------




========================================
|-- CentOS7.9 无root 编译安装 Python3.7，带参数 --enable-shared
----------------------------------------
据我的经验，很多生信 R 包和 anaconda 冲突。
不用 anaconda 后，很多 R 包就很容易安装了。
原因可能是 anaconda 内置的一些 动态链接库 so 文件和系统自带的冲突，一个同名文件只能有一个版本，多个版本则会导致报错。
解决方法似乎也简单，就是彻底放弃 anaconda，把它从 ~/.bashrc 中注释掉，并重新登录系统。
然后重新编译安装 python3。


1. 基础应该是 centOS7.9

$ cat /etc/redhat-release
CentOS Linux release 7.9.2009 (Core)

(1)这一步 安装依赖需要sudo
$ sudo yum install gcc openssl-devel bzip2-devel libffi-devel -y
$ rpm -qa | grep openssl-devel
openssl-devel-1.0.2k-26.el7_9.x86_64

(2) 无root安装 (跳过，直接看3)
$ mkdir ~/Downloads
$ cd ~/Downloads
$ wget https://mirrors.huaweicloud.com/python/3.7.17/Python-3.7.17.tgz
$ tar -xzf Python-3.7.17.tgz
$ cd Python-3.7.17/

$ gcc --version
gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44)
Copyright (C) 2015 Free Software Foundation, Inc.
$ which gcc
/usr/bin/gcc

$ mkdir /home/$USER/soft/python3/
$ cd /home/wangjl/Downloads/Python-3.7.17
$ ./configure --enable-optimizations --prefix=/home/$USER/soft/python3/
$ make -j 16  #耗时步骤 16：00 -> 
1:39:07 load avg: 0.85 [211/416] test_macpath -- test_lzma skipped
test test_macpath failed

$ make install



(3) 添加路径到 PATH 
$ vim ~/.bashrc
export PATH=/home/wangjl/soft/python3/bin:$PATH
$ source ~/.bashrc


(4) 查看效果： 
$ python3 -V
Python 3.7.17
$ pip3 -V
pip 23.0.1 from /home/wangjl/soft/python3/lib/python3.7/site-packages/pip (python 3.7)

$ which python3
~/soft/python3/bin/python3
$ which pip3
~/soft/python3/bin/pip3






2. 安装 jupyter
(1)添加 pip 的配置文件
$ mkdir ~/.pip/
$ vim ~/.pip/pip.conf 
配置文件内容如下，源地址可以自行修改。 

[global] 
index-url=http://mirrors.aliyun.com/pypi/simple/ 
trusted-host=mirrors.aliyun.com

否则要手动指定国内源
$ pip3 install --user -i https://pypi.douban.com/simple/ snakemake
Or:
$ pip3 install snakemake -i https://pypi.douban.com/simple/


(2) 安装py包
$ pip3 install --upgrade pip #升级
$ pip3 list | grep pip
pip                  24.0


$ pip3 install jupyter

$ pip3 install numpy
$ pip3 install pandas
$ pip3 install matplotlib

$ pip3 install snakemake
$ pip3 list | grep snakemake
snakemake            7.32.4


$ snakemake --version
Traceback (most recent call last):
  File "/home/wangjl/soft/python3/bin/snakemake", line 8, in <module>
    sys.exit(main())
  File "/home/wangjl/soft/python3/lib/python3.7/site-packages/snakemake/__init__.py", line 2736, in main
    parser = get_argument_parser()
  File "/home/wangjl/soft/python3/lib/python3.7/site-packages/snakemake/__init__.py", line 1607, in get_argument_parser
    lp_solvers = pulp.list_solvers(onlyAvailable=True)
AttributeError: module 'pulp' has no attribute 'list_solvers'

解释： 
	downgrading pulp==2.7.0 fixed it for me： https://github.com/snakemake/snakemake/issues/2607
	$ pip3 install pulp
	Requirement already satisfied: pulp in ./python3/lib/python3.7/site-packages (2.8.0)
	$ pip3 list | grep pulp #没输出，那就是内置模块了

$ pip3 install pulp==2.7.0
$ snakemake -v
7.32.4


(3) 开服务
$ python3 -m http.server 8890 # 使用默认IP地址
访问： http://10.10.118.143:8890

$ jupyter notebook --no-browser --port 8888 --ip=0.0.0.0
访问： http://localhost:8888/tree










3. 重新编译py，加上参数 --enable-shared
因为 reticulate 指定py报错

(0) 环境变化： 相比上次编译
现在使用最新的 gcc 12
$ gcc --version
gcc (GCC) 12.3.0
Copyright (C) 2022 Free Software Foundation, Inc.
$ which gcc
~/soft/gcc-12.3.0/bin/gcc


$ yum search lzma
$ yum install lzma lzma-devel
$ rpm -qa | grep lzma
xz-lzma-compat-5.2.2-2.el7_9.x86_64
pyliblzma-0.5.3-11.el7.x86_64
lzma-devel-4.32.7-12.el7.nux.x86_64
lzma-libs-4.32.7-12.el7.nux.x86_64


yum -y install zlib zlib-devel
yum -y install bzip2 bzip2-devel
yum -y install ncurses ncurses-devel
yum -y install readline readline-devel
yum -y install openssl openssl-devel
yum -y install openssl-static
yum -y install xz lzma xz-devel
yum -y install gdbm gdbm-devel
yum -y install tk tk-devel
yum -y install libffi libffi-devel




(1) 重新编译
重新解压并进入
$ cd ~/Downloads/
$ tar -xzf Python-3.7.17.tgz
$ cd Python-3.7.17

$ make clean

之前使用的编译句子：
	$ ./configure --enable-optimizations --prefix=/home/$USER/soft/python3/
现在使用的：
$ ./configure --enable-optimizations --enable-shared --prefix=/home/$USER/soft/python3/

$ make -j 32  #耗时步骤 22:32
$ make install



(2) 调用报错
$ python3 -V
python3: error while loading shared libraries: libpython3.7m.so.1.0: cannot open shared object file: No such file or directory
妥协吗：不添加 --enable-shared 无法在R中调用。

解释：
	https://byzer.csdn.net/657155d2b8e5f01e1e443ef1.html
	https://blog.csdn.net/whatday/article/details/98052518
	添加--enable-shared后，调用会报错，因为动态链接库找不到，需要添加到检索目录。
	如果使用自己手动生成的动态链接库.so文件，但是这个.so文件，没有加入库文件搜索路劲中，程序运行时可能会出现找不到动态链接库的情形。
	# 全局配置： 跳过
	$ echo "/opt/python3.7/lib/" >> /etc/ld.so.conf
	$ ldconfig


查找该文件位置：
	#没有locate命令
	$ sudo yum -y install mlocate 
	更新数据库
	$ sudo updatedb
	$ locate libpython3.7m.so.1.0
	没结果
	$ find ~/soft/python3/ | grep "libpython3.7m.so.1.0"
	/home/wangjl/soft/python3/lib/libpython3.7m.so.1.0
	已经有了，只是找不到。


(3) 添加路径到 PATH: 可执行文件及动态链接库的路径
配置局部环境变量
	$ vim ~/.bashrc #添加一行
	export PATH=/home/wangjl/soft/python3/bin:$PATH
	export LD_LIBRARY_PATH=/home/wangjl/soft/python3/lib/:$LD_LIBRARY_PATH

	$ source ~/.bashrc


(4) 测试：
$ python3 -V
Python 3.7.17
$ pip3 -V
pip 23.0.1 from /home/wangjl/soft/python3/lib/python3.7/site-packages/pip (python 3.7)

$ which python3
~/soft/python3/bin/python3

$ which pip3
~/soft/python3/bin/pip3



回到上步骤2，安装py包。









========================================
|-- CentOS7.9 无root 编译安装 OpenSSL 1.1.1
----------------------------------------
1. 下载和安装 依赖的 openssl 1.1.1
(1) 下载和安装
https://www.openssl.org/source/
https://github.com/openssl/openssl/releases?page=3 (2024.4.23)

$ cd ~/Downloads/
$ wget https://github.com/openssl/openssl/releases/download/OpenSSL_1_1_1u/openssl-1.1.1u.tar.gz #下载失败
Or
$ wget https://www.openssl.org/source/openssl-1.1.1u.tar.gz

$ tar -zxvf openssl-1.1.1u.tar.gz
$ cd openssl-1.1.1u/
$ ./config --prefix=/home/wangjl/.local/
	安装到独立文件夹不好，因为编译不好找到: $ rm -rf /home/wangjl/.local/lib/openssl-1.1.1u/
$ make -j16
$ make install

测试：
$ ~/.local/bin/openssl version
OpenSSL 1.1.1u  30 May 2023

配置
$ vim ~/.bashrc
#添加2行
export LD_LIBRARY_PATH=~/.local/lib/:$LD_LIBRARY_PATH
export PATH=$HOME/.local/bin:$PATH


测试2：
$ source ~/.bashrc
或者推出，重新登录系统。

$ which openssl
~/.local/bin/openssl
$ openssl version
OpenSSL 1.1.1u  30 May 2023




(2) 让 pkg-config 能找到.pc文件

$ pkg-config --cflags openssl #返回空行，说明编译时还是找不到

查看.pc文件：新增了前三个
$ ls -lth ~/.local/lib/pkgconfig/
total 2.5K
-rw-r--r--. 1 wangjl jinlab 301 Apr 23 12:06 libcrypto.pc
-rw-r--r--. 1 wangjl jinlab 280 Apr 23 12:06 libssl.pc
-rw-r--r--. 1 wangjl jinlab 234 Apr 23 12:06 openssl.pc
-rw-r--r--. 1 wangjl jinlab 337 Feb  3 21:45 libevent.pc
-rw-r--r--. 1 wangjl jinlab 382 Feb  3 21:45 libevent_pthreads.pc 

配置环境变量 PKG_CONFIG_PATH
$ vim ~/.bashrc
添加一行，指定.pc文件的位置
export PKG_CONFIG_PATH=~/.local/lib/pkgconfig:$PKG_CONFIG_PATH

退出再次登录系统，测试：
$ pkg-config --cflags openssl
-I/home/wangjl/.local//include

$ pkg-config --libs openssl
-L/home/wangjl/.local//lib -lssl -lcrypto




(没做)还可以写到配置文件中：
export CFLAGS="$CFLAGS $(pkg-config --cflags openssl11)"
export LDFLAGS="$LDFLAGS $(pkg-config --libs openssl11)"



==>尝试：
sudo yum groupinstall "Development Tools" -y
sudo yum install openssl11-devel libffi-devel bzip2-devel xz-devel -y

$ sudo yum install openssl11-devel

https://stackoverflow.com/questions/65531567/on-centos-how-do-i-build-python-3-9-from-source-while-incorporating-my-openssl



ref:
修改源码版本: https://www.cnblogs.com/miyuanbiotech/p/12307875.html





========================================
|-- CentOS7.9 无root 编译安装 Python3.10，带参数 --enable-shared，然后安装 tensorflow GPU 版本 2.16.1
----------------------------------------
1. 编译安装

python3.12 总是报错：ModuleNotFoundError: No module named 'distutils'。解决不了。

(1) 下载
$ cd ~/Downloads

https://www.python.org/downloads/source/
$ version="3.10.14"
$ wget https://www.python.org/ftp/python/${version}/Python-${version}.tgz
$ tar -xzf Python-${version}.tgz
$ cd Python-${version}/


(2) 编译与安装

a)依赖的 gcc12
$ which gcc
~/soft/gcc-12.3.0/bin/gcc
$ gcc --version
gcc (GCC) 12.3.0
Copyright (C) 2022 Free Software Foundation, Inc.


b) 设置编译依赖的 openssl 1.1.1
见上文。


c) 开始编译安装
$ mkdir /home/$USER/soft/python3/python-${version}
$ cd /home/wangjl/Downloads/Python-${version}
$ ./configure --enable-optimizations --enable-shared --prefix=/home/$USER/soft/python3/python-${version}/
$ make -j 64  #耗时步骤 ~20min

$ make install

测试：
$ /home/wangjl/soft/python3/python-${version}/bin/python3 -V
Python 3.10.14
$ /home/wangjl/soft/python3/python-${version}/bin/pip3 -V
pip 23.0.1 from /home/wangjl/soft/python3/python-3.10.14/lib/python3.10/site-packages/pip (python 3.10)



(3) 添加路径到 PATH: 可执行文件及动态链接库的路径
$ echo $version
3.10.14

配置局部环境变量
	$ vim ~/.bashrc #添加3行
	version="3.10.14"
	export PATH=/home/wangjl/soft/python3/python-${version}/bin:$PATH
	export LD_LIBRARY_PATH=/home/wangjl/soft/python3/python-${version}/lib/:$LD_LIBRARY_PATH

	$ source ~/.bashrc

$ which python3
~/soft/python3/python-3.10.14/bin/python3
$ pip3 -V
pip 23.0.1 from /home/wangjl/soft/python3/python-3.10.14/lib/python3.10/site-packages/pip (python 3.10)




(4)排错
1) 之前安装 python3.12.3
编译中提示:
	Could not build the ssl module!
	Python requires a OpenSSL 1.1.1 or newer

编译最后提示：
	The necessary bits to build these optional modules were not found:
	_hashlib              _ssl                  _tkinter           
	To find the necessary bits, look in configure.ac and config.log.

	Could not build the ssl module!
	Python requires a OpenSSL 1.1.1 or newer

	Checked 111 modules (31 built-in, 76 shared, 1 n/a on linux-x86_64, 0 disabled, 3 missing, 0 failed on import)
	make[1]: Leaving directory `/picb/jinlab/wangjl/Downloads/Python-3.12.3'
	make: warning:  Clock skew detected.  Your build may be incomplete.

解释1:
_hashlib is the OpenSSL implementations behind the hashlib module. In absense of it, slower built-in implementations will be used.
You’ll need to look in the build logs to see why compilation of _hashlib.so failed.

[我没试] 如果有问题，试试这个: https://discuss.python.org/t/failed-to-build-these-modules-hashlib/235
	$ ./configure --enable-optimizations --enable-shared \
	--with-openssl \
	--prefix=/home/$USER/soft/python3/python-${version}/

因为不兼容 tf and/or cuda，放弃了。太新。
	同一个机器上有用 py3.8 的，还有conda py3.7 的。


2) 安装 python3.10.14
编译最后提示：
	The following modules found by detect_modules() in setup.py, have been
	built by the Makefile instead, as configured by the Setup files:
	_abc                  pwd                   time               


	Failed to build these modules:
	_hashlib              _ssl                                     


	Could not build the ssl module!
	Python requires a OpenSSL 1.1.1 or newer

无root手工编译 openssl，并暴漏环境变量后，不再报错。









2. 安装 tensorflow

(1) 安装方法：最新的是合并了，加不加gpu后缀都是一样的。
# For GPU users
pip install tensorflow[and-cuda]
# For CPU users
pip install tensorflow


我的语句：
$ pip3 install --upgrade pip

直接安装GPU版本：
$ pip3 install tensorflow[and-cuda]

$ pip3 list | grep -in tensorflow
34:tensorflow                   2.16.1
35:tensorflow-io-gcs-filesystem 0.36.0


(2) 测试
# CPU 版本
$ python3 -c "import tensorflow as tf; print(tf.reduce_sum(tf.random.normal([1000, 1000])))"

# GPU 版本
$ python3 -c "import tensorflow as tf; print(tf.config.list_physical_devices('GPU'))"
2024-04-23 12:56:45.122953: I tensorflow/core/util/port.cc:113] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2024-04-23 12:56:45.190108: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX512F AVX512_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
2024-04-23 12:56:47.200066: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT
2024-04-23 12:56:49.185400: W tensorflow/core/common_runtime/gpu/gpu_device.cc:2251] Cannot dlopen some GPU libraries. Please make sure the missing libraries mentioned above are installed properly if you would like to use GPU. Follow the guide at https://www.tensorflow.org/install/gpu for how to download and setup the required libraries for your platform.
Skipping registering GPU devices...
[]


(3) 上文说没有安装 TensorRT，现在安装
You need to install TensorRT separately. It's not bundled with tensorflow.
这是一个优化包，不同显卡有不同的匹配，N厂提供。

$ pip3 install TensorRT
$ python3 -c "import tensorflow as tf; print(tf.config.list_physical_devices('GPU'))"

还不行，卸载了，在(7)后重新安装
$ pip3 uninstall TensorRT
$ pip3 uninstall tensorrt-libs
$ pip3 uninstall tensorrt-bindings



(4) GPU 驱动
$ nvidia-smi
Tue Apr 23 13:42:23 2024       
NVIDIA-SMI 535.154.05             Driver Version: 535.154.05   CUDA Version: 12.2

NVIDIA A800 80GB PCIe

表示显卡驱动安装过了，cuda版本是 12.2



(5) cuda 设置
$ locate cuda | grep  nvcc
/usr/local/cuda-12.2/bin/__nvcc_device_query
/usr/local/cuda-12.2/bin/nvcc

$ vim ~/.bashrc
export PATH=/usr/local/cuda-12.2/bin/:$PATH

$ nvcc --version
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2023 NVIDIA Corporation
Built on Tue_Jun_13_19:16:58_PDT_2023
Cuda compilation tools, release 12.2, V12.2.91
Build cuda_12.2.r12.2/compiler.32965470_0



(6) nvidia.cudnn 位置

a)【似乎不用安装，第(7)会自动安装】先安装 cuDNN: https://developer.nvidia.com/rdp/cudnn-archive
NVIDIA cuDNN is a GPU-accelerated library of primitives for deep neural networks.
$ cd ~/Downloads/
需要注册：poster469 at 163/Nn16wcnm，只好先下载，再上传到服务器了。
Download cuDNN v8.9.7 (December 5th, 2023), for CUDA 12.x
https://developer.nvidia.com/downloads/compute/cudnn/secure/8.9.7/local_installers/12.x/cudnn-linux-x86_64-8.9.7.29_cuda12-archive.tar.xz/
$ scp cudnn-linux-x86_64-8.9.7.29_cuda12-archive.tar.xz wangjl@j3.biomooc.com:/home/wangjl/Downloads/


b)配置
$ python3 -c "import nvidia.cudnn;print(nvidia.cudnn.__file__)"
/home/wangjl/soft/python3/python-3.10.14/lib/python3.10/site-packages/nvidia/cudnn/__init__.py

$ vim ~/.bashrc #添加
CUDNN_PATH=$(dirname $(python3 -c "import nvidia.cudnn;print(nvidia.cudnn.__file__)"))
export LD_LIBRARY_PATH=$CUDNN_PATH/lib:$LD_LIBRARY_PATH



(7) 重新安装
参照 https://www.tensorflow.org/install/pip

Python 3.10 GPU support	https://storage.googleapis.com/tensorflow/versions/2.16.1/tensorflow-2.16.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl

$ python3 -m pip install tensorflow[and-cuda]
$ pip3 install TensorRT

报错:
2024-04-23 14:07:27.111998: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT

删了重新来



(100) 终极测试
$ python3 -c "import tensorflow as tf; print(tf.config.list_physical_devices('GPU'))"

To enable the following instructions: AVX2 AVX512F AVX512_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
2024-04-23 16:17:04.799339: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT
[PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU')]














3. 手写数字测试实例

import tensorflow as tf
mnist = tf.keras.datasets.mnist

(x_train, y_train),(x_test, y_test) = mnist.load_data()
x_train, x_test = x_train / 255.0, x_test / 255.0

model = tf.keras.models.Sequential([
  tf.keras.layers.Flatten(input_shape=(28, 28)),
  tf.keras.layers.Dense(128, activation='relu'),
  tf.keras.layers.Dropout(0.2),
  tf.keras.layers.Dense(10, activation='softmax')
])

model.compile(optimizer='adam',
  loss='sparse_categorical_crossentropy',
  metrics=['accuracy'])

model.fit(x_train, y_train, epochs=5)
	# $ nvidia-smi 查看GPU确实在运行
model.evaluate(x_test, y_test)











========================================
|-- pycharm(windows) //改用 vs code
----------------------------------------

1.下载
https://www.jetbrains.com/pycharm/download/#section=windows


(2) 激活(2020版失效)
https://www.cnblogs.com/crystalpig/p/10971988.html

打开激活窗口
选择 Activate new license with: License server （用license server 激活）
在 License sever address 处填入 http://xidea.online  or http://idea.liyang.io
点击 Activate 进行认证。
认证完成就可以使用了。
如上面注册码没有解决就使用点击这个链接获取注册码： http://idea.lanyus.com/

填入注册码后就可以启用Pycharm

(3) 点击链接 https://pan.baidu.com/s/1v4g_fNTZse7piY9aPXNN9g 下载补丁文件 jetbrains-agent.jar

将补丁放在\lib目录
将刚才下载的补丁文件 jetbrains-agent.jar 放置在Pycharm安装目录里面的\lib目录里面，不是\bin目录，不是\bin目录，不是\bin目录。

点击试用
将补丁 jetbrains-agent.jar 放置到\lib目录后，我们就可以启动软件了。

如果没有弹出这个选择框或者软件打不开，说明你之前打开过软件，可以删除用户目录下的.PyCharm2019目录(是个隐藏目录)，再重启软件就可以看到了！


算了，还是使用免费的vs code吧，很好很强大！



========================================
|-- Eclipse和PyDev搭建完美Python开发环境（Windows篇）
----------------------------------------

十一长假在家闲着没事儿，准备花点时间学习一下Python。 
今儿花了一个下午搭建Python的开发环境，不禁感叹————开源的东西就是麻烦啊··· 

为什么不用别的IDE呢？ 
Eclipse+PyDev插件是最主流的Python开发环境了。


1.准备工作：
下载32位的JDK1.7 Java的开发包  我也不想装这玩意儿，但是Eclipse依赖他，没办法。
下载32位的Eclipse （注1）
下载Python 3.5 （注2）

2.安装JDK1.7
JDK的安装很容易的，一般一直点下一步即可
多数教程都说，安装完JDK需要设置环境变量，
但如今的IDE已经不再通过环境变量来查找JDK的路径了，所以这个不设也罢。 

3.安装Eclipse和Python 
Eclipse是绿色软件，找个地方解压一下就OK了 
Python的安装就更不用说了

4.给Eclipse安装PyDev插件 
启用Eclipse————如果前面的步骤都正确无误的话，那么Eclipse就该能够正常启动了。 
第一次启动会让你选择一个工作空间，按缺省设置，勾选一下不再提醒，就可以了。

在Help菜单中，选择Install New Software···， 
选择Add按钮，Name：PyDev（这个随便起），Location：http://pydev.org/updates（PyDev的更新地址），OK

选择PyDev下的PyDev for Eclipse，别的都不要选，否则依赖检查那关过不去。 （注3）

点下一步，下一步安装 
中间会问你是否信任Aptana、Pydev什么的，信任就可以了

最后重启Eclipse
 

5.配置PyDev插件 
在Window菜单中选Preference，
1、PyDev->Interpreter - Python，New一个Python解释器，填上解释器名字和路径，路径选相应的python.exe。 

以下几步Python 3.x必选，Python 2随意。我比较习惯Unicode，所以一次性在这儿设定了。
(提示该选项没有安装)2、General->Editors->Text Editors->Spelling，Encoding改成Other:UTF-8

3、General->Workspace，Text file encoding改成Other:UTF-8

(我没做)4、找到安装目录下的\plugins\org.python.pydev.debug_x.x.x.yyyymmddhh\pysrc\pydevd.py， 
920行的 encoding = Non 改成 encoding = "UTF-8"，保存

5、防止中文显示太小：
General->Appearance->Colors and Fonts, 左侧Basic->Text Font双击，选择中欧字体、四号字。

至此，PyDev的配置就完成了。
 

6.测试下
File->New->Project，选PyDev下的PyDev Project，Grammer和Interpreter选相应的版本，Finish。 
在PyDev Package Explorer的项目上右键，New->PyDev Module，随便写个名字，Finish。
然后随便写几行代码，Run
在弹出的对话框中选择Python Run ，
OK 

 
注释： 
注1：这里说明一下，JDK和Eclispse好像得同为32位或者64位的，否则有可能遇到问题。我第一次尝试是用的64位JDK+32位Eclipse的组合，就碰到了和这里http://superuser.com/questions/186001/eclipse-failed-to-load-the-jni-shared-library一样的问题，于是果断换了32位JDK。

注2：我想做GAE的开发，所以选了版本2.6.6，一般情况下选最新版即可。

注3：PyDev Mylyn Integration (optional)：这个依赖于PyDev for Eclipse，你得装完后者就可以装了。 
    PyDev Django Templates Editor：这个需要Aptana Studio 3。
	
http://www.cnblogs.com/Realh/archive/2010/10/04/1841907.html






========================================
|-- ubuntu 安装 python3
----------------------------------------
$sudo apt-get install python3
因为Ubuntu很多底层采用的是Python2.*，Python3和Python2是互相不兼容的，所以此时不能卸载Python2.


方法1：修改链接指向
http://www.cnblogs.com/windinsky/archive/2012/09/25/2701851.html

需要将默认Python的指向Python3。
刚才的Python3是被默认安装带usr/local/lib/python3.2目录中，

首先，删除usr/bin/目录下的默认python link文件。
然后打开终端输入如下命令行，建立新的连接关系
sudo ln -s /usr/bin/python3.2 /usr/bin/python
成功
然后测试一下python版本是否正确
命令行输入 python 即可




方法2：两个版本并行，使用新版本则用python3命令
http://www.cnblogs.com/yasmi/p/4832461.html

1.安装python3
apt-get install python3

2.安装pip3
apt-get install python3-pip

3.为python3添加包
pip3 install packagename

4.安装pillow
　　首先安装支持包
apt-get install libjpeg-dev libfreetype6-dev zlib1g-dev libpng12-dev
　　安装pillow
pip3 install pillow

5.创建python3的虚拟环境
virtualenv -p /usr/bin/python3 环境名称
或者
virtualenv -p python3 环境名称

6.如果不能安装python3-pip（比如低版本ubuntu），如何使用pip安装python3 库
python3 -m pip install 包

7.另一个安装pip3方法:
aptitude install python3-setuptools #安装 easy_install3工具
easy_install3 pip    #安装pip3

8.配置python编程环境，使用git，git-flow：
9.安装bash-it,可以美化bash环境
10.安装 Sublime Text 2，很好代码编辑器
11.安装vim,ubuntu中一般必备的编辑器。
12.安装emacs





========================================
|-- python3 在sublime中文乱码怎么办？
----------------------------------------
添加编码头，指定utf8编码

$ cat typeDemo.py
#!/usr/bin/python3
# -*- coding: utf-8 -*-

if __name__=='__main__':
	print(1+3000,"好的");
	import sys
	print(sys.stdin.encoding)
	print(sys.stdout.encoding)






========================================
|-- python3 乱码提示: UnicodeEncodeError: 'gbk' codec can't encode character '\u028c' in position 21: illegal multibyte sequence 
----------------------------------------
git bash 在win7下运行python flask时报错的。


解决：
在文件开始位置添加
import io,sys
sys.stdout = io.TextIOWrapper(sys.stdout.buffer,encoding='utf8') 


ref:
https://blog.csdn.net/jim7424994/article/details/22675759








========================================
pip - Python包管理器：指定版本号
----------------------------------------
windows版的Python在3.4版本后自带pip，不过需要

1.先进入Python目录：
D:\Program Files\Python\Python36-32\Scripts>pip -V
pip 9.0.1 from d:\program files\python\python36-32\lib\site-packages (python 3.6)

或者用添加环境变量的方法摆脱文件夹限制，在PATH最后添加：
D:\Program Files\Python\Python36-32\Scripts;




2.安装命令式pip install Pillow，安装后出现成功提示，
Successfully installed Pillow-4.2.1 olefile-0.44

3.安装好的文件位置为D:\Program Files\Python\Python36-32\Lib\site-packages
refer:http://blog.csdn.net/qq_32706121/article/details/72283054?locationNum=11&fps=1




如果pip版本太老，会有更新提示。

1.快速示例
在win的cmd中输入 pip install Pillow 安装该包
You are using pip version 8.1.1, however version 8.1.2 is available.
You should consider upgrading via the 'python -m pip install --upgrade pip' command.

upgrade pip 
	1)On Linux or macOS:pip install -U pip
	2)On Windows:python -m pip install -U pip

#先用pip安装库
#要安装一个第三方库，必须先知道该库的名称，可以在官网或者pypi上搜索，
#pip install Pillow
#引入库
from PIL import Image

im = Image.open('test.jpg')
print(im.format, im.size, im.mode)

#缩小2倍
im.thumbnail((im.size[0]/2, im.size[0]/2))
im.save('thumb2.jpg', 'JPEG')

#缩小4倍
im.thumbnail((im.size[0]/4, im.size[0]/4))
im.save('thumb4.jpg', 'JPEG')


2.官网
https://pypi.python.org/pypi/pip/

Image包的帮助文档：
https://pypi.python.org/pypi/image/1.5.7




3.查看已经安装的包及版本号
pip list
或者 pip freeze


4. 升级pip3
$pip3 install --upgrade pip 


5. 搜索可用的安装包
$pip search json 


6. 安装包时，指定版本号
$ pip install wsgidav==2.4.1
$ pip install rpy2==2-2.1
报错: llecting rpy2==2-2.1
  ERROR: Could not find a version that satisfies the requirement rpy2==2-2.1 (from versions: 2.0.8, 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.1.8, 2.1.9, 2.2.0, 2.2.1, 2.2.2, 
2.2.3, 2.2.4, 2.2.5, 2.2.6, 2.2.7, 2.3.0a1, 2.3.0b1, 2.3.0, 2.3.1, 2.3.2, 2.3.3, 2.3.4, 2.3.5, 2.3.6, 2.3.7, 2.3.8, 2.3.9, 2.3.10, 2.4.0, 2.4.1, 2.4.2, 2.4.3, 2.4.4, 2.5.0, 2.5.1, 2.5.2, 2.5.
3, 2.5.4, 2.5.5, 2.5.6, 2.6.0, 2.6.1.dev0, 2.6.1, 2.6.2, 2.6.3, 2.7.0, 2.7.1, 2.7.2, 2.7.3, 2.7.4, 2.7.5, 2.7.6, 2.7.7, 2.7.8, 2.7.9, 2.8.0, 2.8.1, 2.8.2, 2.8.3, 2.8.4, 2.8.5, 2.8.6, 2.9.0, 2
.9.1, 2.9.2, 2.9.3, 2.9.4, 2.9.5, 2.9.6b0, 3.0.0, 3.0.1, 3.0.2, 3.0.3, 3.0.4, 3.0.5, 3.1.0, 3.2.0, 3.2.1, 3.2.2, 3.2.3, 3.2.4, 3.2.5, 3.2.6, 3.2.7, 3.3.0, 3.3.1, 3.3.2, 3.3.3, 3.3.4, 3.3.5, 3
.3.6, 3.4.0, 3.4.1, 3.4.2, 3.4.3, 3.4.4)
ERROR: No matching distribution found for rpy2==2-2.1 

看来有这那么多个版本可供选择，随便选择一个

$ pip install rpy2==2.8.1 --user ##可以了





========================================
|-- [更换镜像] pip安装时下载太慢怎么办？指定国内的源
----------------------------------------
0. 设置方法
(1) 临时设置
使用国内的代理，速度会更快一些
如豆瓣：pip install -i https://pypi.doubanio.com/simple/ jupyter


(2) 配置文件法
设置国内的源：
$ mkdir ~/.pip
$ cat ~/.pip/pip.conf
[global]
index-url = https://pypi.tuna.tsinghua.edu.cn/simple
[install]
trusted-host = https://pypi.tuna.tsinghua.edu.cn

版本2：
[global]
index-url=https://mirrors.aliyun.com/pypi/simple/
[install]
trusted-host = mirrors.aliyun.com






## 以下可以跳过

1. 实例
pip install -i https://pypi.doubanio.com/simple/ ggplot

from ggplot import *
报错 
ImportError: cannot import name 'Timestamp' from 'pandas.lib' (/home/wangjl/software/anaconda3/lib/python3.7/site-packages/pandas/lib.py)
ImportError: cannot import name 'Timestamp'

方案:
Please go to .../site-packages/ggplot/stats/smoothers.py and change
from pandas.lib import Timestamp
to
from pandas import Timestamp
and save.



(2) 直接永久改变源
修改文件~/.pip/pip.conf，默认是没有这个文件的，要自己建立~/.pip目录和新建对应的文本文件，内容为：

[global]
timeout = 6000
index-url = https://pypi.tuna.tsinghua.edu.cn/simple
trusted-host = pypi.tuna.tsinghua.edu.cn

## 这里使用了清华大学的镜像服务器。

然后安装包时就自动使用设置的镜像了
$ pip3 install sympy
Looking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple






2. 更多国内镜像
http://pypi.douban.com/simple/ 豆瓣  douban.com 改为 doubanio.com
http://mirrors.aliyun.com/pypi/simple/ 阿里
http://pypi.hustunique.com/simple/ 华中理工大学
http://pypi.sdutlinux.org/simple/ 山东理工大学
http://pypi.mirrors.ustc.edu.cn/simple/ 中国科学技术大学
https://pypi.tuna.tsinghua.edu.cn/simple 清华









========================================
|-- win7安装py的MySQL驱动
----------------------------------------
顺序 
pip install --upgrade pip
pip install --upgrade wheel
pip install mysql-connector-python-rf


细节
C:\Users\Administrator>pip install --upgrade wheel
Collecting wheel
  Downloading wheel-0.29.0-py2.py3-none-any.whl (66kB)
    45% |██████████████▊                 | 30kB 157kB/s eta 0:00:
    61% |███████████████████▋            | 40kB 171kB/s eta
    76% |████████████████████████▌       | 51kB 184kB/s
    91% |█████████████████████████████▍  | 61kB 21
   100% |████████████████████████████████| 71kB
 243kB/s
Installing collected packages: wheel
Successfully installed wheel-0.29.0

C:\Users\Administrator>pip install mysql-connector-python-rf
Collecting mysql-connector-python-rf
  Using cached mysql-connector-python-rf-2.2.1.tar.gz
Building wheels for collected packages: mysql-connector-python-rf
  Running setup.py bdist_wheel for mysql-connector-python-rf ... done
  Stored in directory: C:\Users\Administrator\AppData\Local\pip\Cache\wheels\a2\
4a\19\243e207fe1dcde2fb24f1dede834a1b1af5b3294a8f90e1cdf
Successfully built mysql-connector-python-rf
Installing collected packages: mysql-connector-python-rf
Successfully installed mysql-connector-python-rf-2.2.1

C:\Users\Administrator>




使用方法：
#!/usr/bin/python
# -*- coding: utf-8 -*-

# ======== ========== ===========
# Environment Preview
# System: Windows 7 x86_64
# IDE: Eclipse for PHP Developers Version: Neon.1 Release (4.6.1) Build id: 20160913-0900
# SQL: mysql in XAMPP   => ../bin/mysqld.exe  SELECT version() 5.6.11
# Driver: mysql-connector-python-rf
# ../Python35/Scripts> pip -V
# pip 8.1.2 from c:\program files (x86)\python35-32\lib\site-packages (python 3.5)
# ../Python35/Scripts> pip install --upgrade pip
# ../Python35/Scripts> pip install --upgrade wheel
# ../Python35/Scripts> pip install mysql-connector-python-rf
# ======== =========== ==========

# 导入MySQL驱动
import mysql.connector

# 创建连接
conn = mysql.connector.connect(user='root', password='', database='test')

# 后面的忽略吧
# 本文件仅用作创建连接===============在另一个文件内使用

print(dir(conn))

#输入：建表、插入
cursor = conn.cursor()
cursor.execute('drop table if exists `python_user` ')
cursor.execute('create table python_user (id int(20) primary key AUTO_INCREMENT, name varchar(20))')
cursor.execute('insert into python_user (id, name) values (%s, %s)', ['1', 'Michael'])
cursor.execute('insert into python_user (id, name) values (%s, %s)', ['2', 'Tom'])
cursor.execute('insert into python_user (id, name) values (%s, %s)', ['3', 'Lilei'])
row_count = cursor.rowcount
conn.commit()
cursor.close()

#输出：查询
cursor = conn.cursor()
# cursor.execute('select * from python_user where id = %s', ('1',))
cursor.execute('select * from python_user where id > %s', ('1',))
values = cursor.fetchall()

#print(values)    #全部输出       # [('1', 'Michael')]
#[('2', 'Tom'), ('3', 'Lilei')]

for value in values: #逐条输出
    print(value)
    print(type(value)) #<class 'tuple'>
	
cursor.close()
conn.close()



========================================
|-- windows 专属编译的包list
----------------------------------------

1.只需要三步
(1)下载rpy2 .whl安装文件http://www.lfd.uci.edu/~gohlke/pythonlibs/#rpy2 
(2)安装pip，若已安装就算了。
(3)在cmd下运行 pip install ”.whl位置“。




ref:https://www.cnblogs.com/yezuhui/p/6853280.html


========================================
|-- pip3升级，及升级失败自动被卸载后如何恢复
----------------------------------------
1. pip upgrade 更新

$ python -m pip install --upgrade pip -i  https://pypi.doubanio.com/simple/  --trusted-host pypi.doubanio.com

解析：
- 以管理员身份升级pip ：python -m pip install --upgrade pip
- 用豆瓣源，速度快 ：-i  https://pypi.doubanio.com/simple/
- 将豆瓣源添加为信任主机host ：--trusted-host pypi.doubanio.com


$ python3 -m pip install --upgrade pip

$ pip3 install --upgrade pip --user
$ pip -V
pip 21.3 from /usr/local/lib/python3.6/site-packages/pip (python 3.6)



(2) 如果提示有旧版本，可能是没有删除干净。WARNING: pip is being invoked by an old script wrapper.
https://stackoverflow.com/questions/60029215/warning-pip-is-being-invoked-by-an-old-script-wrapper/69035028#69035028

找到全部版本：# show all the locations for pip and pip3

$ type -a pip pip3
pip is /usr/local/bin/pip
pip3 is /usr/local/bin/pip3
pip3 is /usr/bin/pip3

$ python3 -m pip -V
pip 21.3 from /usr/local/lib/python3.6/site-packages/pip (python 3.6)

$ /usr/local/bin/pip -V
pip 21.3 from /usr/local/lib/python3.6/site-packages/pip (python 3.6)

$ /usr/local/bin/pip3 -V
pip 21.3 from /usr/local/lib/python3.6/site-packages/pip (python 3.6)

$ /usr/bin/pip3 -V
WARNING: pip is being invoked by an old script wrapper. This will fail in a future version of pip.
Please see https://github.com/pypa/pip/issues/5599 for advice on fixing the underlying issue.
To avoid this problem you can invoke Python with '-m pip' instead of running pip directly.
pip 21.3 from /usr/local/lib/python3.6/site-packages/pip (python 3.6)
把这个不好的重命名一下
$ sudo mv /usr/bin/pip3 /usr/bin/pip3.back
然后重新登录即可。

$ type -a pip pip3
pip is /usr/local/bin/pip
pip3 is /usr/local/bin/pip3






2. 本来是pip18，提示pip19可用了，结果使用升级语句报错，退回到pip10了。

(1) 
https://blog.csdn.net/elite666/article/details/83541602
$ curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
$python get-pip.py
其中，如果是python3对应的pip3，则需要使用python3，如下：
$ python3 get-pip.py # 报错，最后使用的是 $ python ./get-pip.py --user
更新完毕，便可使用pip或者pip3

$ pip -V
pip 19.1.1 from /home/wangjl/.local/lib/python3.7/site-packages/pip (python 3.7)

使用pip list会报错，感觉好脆弱。


(2) http://www.cnblogs.com/51ma/p/9467839.html
$ python -m pip install --user --upgrade pip==19.1.1


(3) 
$ find ~/.local/ -name  "*METADATA*" | grep pip
$ find ~/.local/ -name  "*site-packages*" | grep site-packages
## /home/wangjl/.local/lib/python3.7/site-packages 很奇怪，删除该文件夹内的全部内容后，再回到下载好的software目录执行
$ python ./get-pip.py --user #终于一切太平了。pip list也不报错了。
$ pip -V
pip 19.1.1 from /home/wangjl/.local/lib/python3.7/site-packages/pip (python 3.7)








========================================
|-- pip on windows10 崩了，怎么重装？ ModuleNotFoundError: No module named 'pip'
----------------------------------------
> pip -V 
...
ModuleNotFoundError: No module named 'pip'



1. 查了一圈，都不能解决；
2. 有人说重装pip可以
https://blog.csdn.net/kingyuan666/article/details/81346379

1) 强制重装pip
> curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
> python3 get-pip.py 

2) 再查版本号
> pip -V
pip 19.2.2 from d:\program files\python36\lib\site-packages\pip (python 3.6)





========================================
|-- 怎么为jupyter添加目录？
----------------------------------------

1. win10和CentOS7都可以。

(1)> pip install jupyter_contrib_nbextensions

(2)关掉jupyter（win10要在任务管理器找到jupyter_notebook.exe，并关闭），接着运行命令:
> jupyter contrib nbextension install --user --skip-running-check

(3)打开jupyter，在主页面 Files/Running/Clusters/后多了一个Nbextensions选项卡。
点击，勾选Table of Contents (有的版本是toc2). 

打开一个 .ipynb 文件，顶部工具栏就会出现目录选项，点击就会生成目录。





2. 在Ubuntu1804 安装，失败。
(1)
是因为 setuptools 版本过低?
pip install --upgrade pip
pip install -U setuptools -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com


pip install -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com jupyter_contrib_nbextensions

(2)(3) 同上。









========================================
|-- pip3 show 查看某已安装包的信息：版本、位置、依赖等
----------------------------------------

$ pip3 show umap-learn

Name: umap-learn
Version: 0.3.9
Summary: Uniform Manifold Approximation and Projection
Home-page: http://github.com/lmcinnes/umap
Author: None
Author-email: None
License: BSD
Location: /data/jinwf/wangjl/software/anaconda3/lib/python3.7/site-packages
Requires: numpy, scikit-learn, numba, scipy
Required-by:








========================================
内置的虚拟环境创建方法 | python 原生环境管理 python3 -m venv alphaFold-env
----------------------------------------
一个文件夹对应一个环境。

1. 基本语句
创建环境
$ python3 -m venv alphaFold-env

激活环境
$ source alphaFold-env/bin/activate

安装包
$ python3 -m pip install novas

关闭环境
$ deactivate


(2) R包创建python环境的实例
R包CytoTRACE包加载时需要py环境，注意+开头的语句
Would you like to create a default python environment for the reticulate package? (Yes/no/cancel) no
Using Python: /usr/bin/python3.6
Creating virtual environment 'r-reticulate' ... 
+ /usr/bin/python3.6 -m venv /home/wangjl/.virtualenvs/r-reticulate
Done!
Installing packages: pip, wheel, setuptools
+ /home/wangjl/.virtualenvs/r-reticulate/bin/python -m pip install --upgrade pip wheel setuptools

You should consider upgrading via the 'pip install --upgrade pip' command.
Installing packages: numpy
+ /home/wangjl/.virtualenvs/r-reticulate/bin/python -m pip install --upgrade --no-user numpy
Virtual environment 'r-reticulate' successfully created.








2. 测试
(1) 环境 
$ python3 -V
Python 3.9.5

(2) 查看帮助文档
$ python3 -m venv --help
usage: venv [-h] [--system-site-packages] [--symlinks | --copies] [--clear] [--upgrade] [--without-pip] [--prompt PROMPT]
            [--upgrade-deps]
            ENV_DIR [ENV_DIR ...]

Creates virtual Python environments in one or more target directories.
...

(1) 创建环境
$ python3 -m venv alphaFold-env

发现新建了一个文件夹
$ ls -lth
total 36K
drwxrwxr-x 5 wang wang 4.0K Sep 24  2021 alphaFold-env

内容是一份python
$ ls -lth alphaFold-env/
total 16K
drwxrwxr-x 2 wang wang 4.0K Sep 24  2021 bin
drwxrwxr-x 2 wang wang 4.0K Sep 24  2021 include
drwxrwxr-x 3 wang wang 4.0K Sep 24  2021 lib
lrwxrwxrwx 1 wang wang    3 Sep 24  2021 lib64 -> lib
-rw-rw-r-- 1 wang wang  100 Sep 24  2021 pyvenv.cfg


(2) 激活环境 source <环境名称>/bin/activate
注意，命令行前面有变化。
wang@wangVM:~$ source alphaFold-env/bin/activate
(alphaFold-env) wang@wangVM:~$

$ which python3
/home/wang/alphaFold-env/bin/python3

$ which pip3
/home/wang/alphaFold-env/bin/pip3

$ pip3 list
Package    Version
---------- -------
pip        21.1.1
setuptools 56.0.0

可以看到虚拟环境中的 Package 只有最基础的 pip、setuptools



(3) 关闭环境 $ deactivate

(alphaFold-env) wang@wangVM:~$ deactivate
wang@wangVM:~$

注意到命令行前的括号消失了。





3. 环境的转移
(1)在激活虚拟环境下敲
$ pip3 freeze > requirements.txt

$ pip3 freeze | grep "==" | head
argon2-cffi==21.1.0
attrs==21.2.0
backcall==0.2.0
bleach==4.1.0
brotlipy==0.7.0
certifi==2021.5.30
conda==4.10.3
debugpy==1.4.3
decorator==5.1.0
defusedxml==0.7.1


生成的 requirements.txt 文件就只包含虚拟环境中已安装的依赖包了


(2) 安装包: 使用列表
$ pip3 install -r requirements.txt -i https://pypi.douban.com/simple/












========================================
使用virtualenv在linux下安装和切换多个Python版本
----------------------------------------
更多内容参考: https://www.biomooc.com/linux/conda-guide.html


bashrc 里面设置alias调用不同版本。
或者使用虚拟空间 virtualenv。

1. 安装pip，windows一般新版本都随python安装pip。
# apt-get install python3

$ python3 --version
Python 3.5.2
$ pip3 --version
pip 8.1.1 from /usr/lib/python3/dist-packages (python 3.5)

$ pip3 install --upgrade pip #最后使用pip3会报错
$ pip3 --version #pip3更新成功
pip 9.0.1 from /home/wangjl/.local/lib/python3.5/site-packages (python 3.5)


$ virtualenv -p python3 env1
Already using interpreter /usr/bin/python3
Using base prefix '/usr'
New python executable in /home/wangjl/env1/bin/python3
Also creating executable in /home/wangjl/env1/bin/python
Installing setuptools, pkg_resources, pip, wheel...done.


$ pip3 --version
pip 9.0.1 from /home/wangjl/.local/lib/python3.5/site-packages (python 3.5)
$ pip --version
pip 9.0.1 from /home/wangjl/.local/lib/python3.5/site-packages (python 3.5)




2.创建python3的虚拟环境 virtualenv - create virtual Python instances

(1) 安装虚拟环境
## sudo apt install virtualenv
## sudo apt remove virtualenv

py包建议使用pip管理。
$ pip3 install virtualenv


(2) 假定我们要开发一个新的项目，需要一套独立的Python运行环境，可以这么做：
step1:创建目录
$ mkdir myproject
$ cd myproject
step2:创建并进入虚拟环境1
$ virtualenv -p python3 env2
Already using interpreter /usr/bin/python3
Using base prefix '/usr'
New python executable in /home/wangjl/myproject/env2/bin/python3
Also creating executable in /home/wangjl/myproject/env2/bin/python
Installing setuptools, pkg_resources, pip, wheel...done.
$ ls
env2

$ source env2/bin/activate #进入虚拟环境1
#注意到命令提示符变了，有个(venv)前缀，表示当前环境是一个名为venv的Python环境。
(env2) wangjl@ubt16:~/myproject$ pip3 --version
pip 9.0.1 from /home/wangjl/myproject/env2/lib/python3.5/site-packages (python 3.5)

(env2) wangjl@ubt16:~/myproject$ pip3 freeze
pkg-resources==0.0.0
 #当前什么包都没有安装，就是个干净的python系统

(env2) wangjl@ubt16:~/myproject$ python --version
Python 3.5.2
(env2) wangjl@ubt16:~/myproject$ python3 --version
Python 3.5.2
(env2) wangjl@ubt16:~/myproject$

# 安装jinja2包
(env2) wangjl@ubt16:~/myproject$ pip3 install jinja2
Collecting jinja2
  Using cached Jinja2-2.9.6-py2.py3-none-any.whl
Collecting MarkupSafe>=0.23 (from jinja2)
Installing collected packages: MarkupSafe, jinja2
Successfully installed MarkupSafe-1.0 jinja2-2.9.6

(env2) wangjl@ubt16:~/myproject$ pip3 freeze #再次查看有哪些包
Jinja2==2.9.6
MarkupSafe==1.0
pkg-resources==0.0.0


step3:退出当前的env2环境 
(env2) wangjl@ubt16:~/myproject$ deactivate
wangjl@ubt16:~/myproject$

此时就回到了正常的环境，现在pip或python均是在系统Python环境下执行。
wangjl@ubt16:~/myproject$ python -V
Python 2.7.12
wangjl@ubt16:~/myproject$ python3 -V
Python 3.5.2


完全可以针对每个应用创建独立的Python运行环境，这样就可以对每个应用的Python环境进行隔离。

virtualenv是如何创建“独立”的Python运行环境的呢？原理很简单，就是把系统Python复制一份到virtualenv的环境，用命令source env1/bin/activate进入一个virtualenv环境时，virtualenv会修改相关环境变量，让命令python和pip均指向当前的virtualenv环境。


小结: virtualenv为应用提供了隔离的Python运行环境，解决了不同应用间多版本的冲突问题。

好处：为项目创建一个干净的开发环境




========================================
The Zen of Python, by Tim Peters 最佳实践
----------------------------------------
1.
>>> import this
The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!






2.Jupyter Notebook 最佳实践

- 对任何程序员而言都是最重要的事情之一——总是确保你为你的代码添加了适当的注释！
- 确保你的代码有所需的文档。
- 考虑一个命名方案并贯彻始终。这能让其他人更容易遵循。
- 不管你的代码需要什么库，都在你的笔记本起始处导入它们。（并在旁边添加注释说明你载入它们的目的）
- 确保你的代码有适当的行距。你不要将你的循环和函数放在同一行——否则如果后面要引用它们，会让人抓狂的！
- 有时候你的文件中有非常大量的代码。看看能不能将你认为不重要的某些代码隐藏起来，之后再引用。这能让你的笔记本看起来整洁清晰，这是非常可贵的。
- 查看这个在 matplotlib 上的笔记本，看看可以如何简练地进行呈现 http://nbviewer.jupyter.org/github/jrjohansson/scientific-python-lectures/blob/master/Lecture-4-Matplotlib.ipynb






========================================
用jupyter notebook 学习python3
----------------------------------------
jupyter notebook可以在浏览器中很容易的编辑、运行、块状代码。
个人认为，这对于学习和尝试代码是一个好工具。

pip3 --version
pip 10.0.1 from d:\program files\python36\lib\site-packages\pip (python 3.6)


1.安装 Install IPython and Jupyter:
https://jupyter.org/install.html

(1.1)with conda:
conda install ipython jupyter

(1.2)with pip:
# first, always upgrade pip!
pip3 install --upgrade pip
pip3 install --upgrade ipython jupyter

(2)Start the notebook in the tutorial directory:
cd ipython-in-depth
jupyter notebook

windows用户直接在cmd窗口中输入：
jupyter notebook

可以看到一个浏览器窗口弹出来，就可以在cell里编码了。


(3)IPython notebook（Jupyter notebook）指定IP和端口运行
jupyter notebook --no-browser --port 7000 --ip=192.168.2.120
访问：http://y.biomooc.com:7000/?token=a04884fc3c0046ff4c34fdf13b69792bdcd46aa1bf2994ec


(4)另一台没有root权限的CentOS 7主机无法登陆Jupyter：
$ netstat -luntp #查端口号哪些可用
$ jupyter notebook --no-browser --port 10000 --ip=10.20.57.27


从其他机器扫描这一台电脑的端口，就开了两个：
$ sudo nmap -sS -p 9915-10015 10.20.57.27

Starting Nmap 7.60 ( https://nmap.org ) at 2018-09-28 14:41 CST
Nmap scan report for 10.20.57.27
Host is up (0.0056s latency).
Not shown: 99 closed ports
PORT      STATE SERVICE
9999/tcp  open  abyss
10001/tcp open  scp-config

Nmap done: 1 IP address (1 host up) scanned in 14.78 seconds




(5)如果还是不能访问服务器上的jupyter，可能是端口都没开。
在服务器上开一个端口20180，允许ip为10.21.127.192的客户端访问。
$ sudo iptables -I INPUT -p tcp -s 10.21.127.192 --dport 20180 -j ACCEPT




(6)cookie过期，需要在服务器上查找token：
$ jupyter notebook list
## Currently running servers:
## http://172.18.5.193:8889/?token=ee58e196b138ca5ea8f9321d1cf05a943c5b5de8c613b74d :: /data/jinwf/wangjl/apa  






2.使用
(1)可以直接在cell中输入代码； 
点击左上角+符号，可以开一个新cell；

(2)点击上方的Run即可运行当前cell的代码，
快捷键是 shift+Enter

(3)自动补齐的快捷键是Tab

(4)快捷键是: 鼠标点击但是没有光标时，
	点击A键，在上面新增一个cell; B在 below 下面新增一个cell;
	点击2次D键，删除当前cell;
	z键，回撤上一个删除操作

光标位置:
    #mode依赖的编辑器，类似vim;
    从有光标的编辑模式，到无光标的命令模式，ESC键;
    回到有光标的状态，Enter键;
    移动光标: 上下键
#

复制粘贴：
	C键，复制当前cell;
	X键，剪切掉当前cell；
	V键，粘贴到当前cell下面；


Cell的性质变更:
	M键 由pytyhon变markdown;
	Y键 由md变py;

#执行代码:
	ctrl+enter 立刻执行;
	shift+enter 立刻执行并焦点移动到下一个cell，没有下一个就新建一个cell;

#忘记快捷键怎么办？
	在jupyterlab左侧commands标签顶部输入run，就找到运行相关的快捷键;
#






更多快捷方式：
https://www.sohu.com/a/322960148_671965
https://mp.weixin.qq.com/s?__biz=MzIyNzU1OTI2NA==&mid=2247484631&idx=1&sn=1bbbafccf0f4e792f56789112083f69d
https://blog.csdn.net/QimaoRyan/article/details/76022038





3.漂亮的效果图
A gallery of interesting Jupyter Notebooks
https://github.com/jupyter/jupyter/wiki/A-gallery-of-interesting-Jupyter-Notebooks

(1)Introduction to Machine Learning in Python with scikit-learn by Cyrille Rossant, a free recipe from the IPython Cookbook, a comprehensive guide to Python for Data Science.
https://ipython-books.github.io/81-getting-started-with-scikit-learn/

(2)A Primer on Bayesian Methods for Multilevel Modeling
https://nbviewer.jupyter.org/github/fonnesbeck/multilevel_modeling/blob/master/multilevel_modeling.ipynb






========================================
|-- 有些包在命令行(黑窗口)能运行，在jupyter web页面不能运行怎么办？ 无法导入包？
----------------------------------------
要么环境不一致，要么是缓存的锅，特别是新升级的包。

1.解决缓存：
重启 jupyter 试试行不行？
打开新的命令行，重新 jupyter 行不行？
在 jupyter 中输入 help("modules")，网页会崩溃，崩溃了之后重启 jupyter，看行不行？


还不行，就关掉jupyter，出去休息一下，吃个饭，再回来可能缓存就失效了。就好了！








2.解决运行环境不一致：
(1)查看运行环境
which pip, which python 和which jupyter,看路径是否一致？
如果不一致，按照行的来，比如 python 命令行能运行成功，则使用该目录下的 jupyter 绝对地址运行；

当前使用的其实是使用 whereis python 和 whereis jupyter 查看的。



(2)查看python查找包的路径和顺序
import sys 
print(sys.path)

看命令行和网页是否一致。

jupyter模式下实用的python编译路径与其他模式下的python编译路径是不一样的
在 jupyter 模式下,使用sys包的自省模式,找到自己的编译路径....(我没发现这个问题)

import sys
sys.path 
['',
 '/home/wangjl/anaconda3/lib/python36.zip',
 '/home/wangjl/anaconda3/lib/python3.6',
 '/home/wangjl/anaconda3/lib/python3.6/lib-dynload',
 '/home/wangjl/.local/lib/python3.6/site-packages',
 '/home/wangjl/anaconda3/lib/python3.6/site-packages',
 '/home/wangjl/.local/lib/python3.6/site-packages/IPython/extensions',
 '/home/wangjl/.ipython']
(我测试发现和下面是一样的！除了多了最后两行。)


输出结果可以发现,jupyter模式下python的编译器路径与Python其他编译器路径完全不一样.
jupyter编译默认路径是在 anaconda3/enves 目录下,
但是原生python默认的路径在
['', 
'/home/wangjl/anaconda3/lib/python36.zip', 
'/home/wangjl/anaconda3/lib/python3.6', 
'/home/wangjl/anaconda3/lib/python3.6/lib-dynload', 
'/home/wangjl/.local/lib/python3.6/site-packages', 
'/home/wangjl/anaconda3/lib/python3.6/site-packages']

所以,在通过termial/shell模式下安装的是在python默认路径,因此需要通过命令模式

$ cd /home/zhangll/anaconda3/envs/ipykernel_py3/bin
$ ./pip install packageName
这样才能在jupyter下正常使用
当然可以修改shell的命令路径的配置来修改pip命令
这个按揭不表//todo?

重新把环境写入jupyer的kernel：
python -m ipykernel install --user --name 环境名称 --display-name "Python (环境名称)"




2) 如果提示已经安装过该包，可以考虑强制升级包(没有什么问题是升级解决不了的！大不了连Ubuntu系统/python/pip都重装/升级)
ref: https://blog.csdn.net/qq_29579431/article/details/99236119

$ which pip
/home/hou/anaconda3/bin/pip

$ sudo /home/hou/anaconda3/bin/pip install --ignore-installed matplotlib
然后重新进入python重试 import matplotlib


实例: 
$ which pip
/home/wangjl/anaconda3/bin/pip

$ /home/wangjl/anaconda3/bin/pip install --ignore-installed jupyter




## 查看可执行文件的位置
import sys
sys.executable
# '/home/wangjl/anaconda3/bin/python'
# '/home/wangjl/anaconda3/bin/python'



(3)查看已经加载的包的方法，是否完全一样？
import flask
dir(flask)


(4)查看加载的包的版本号
//todo




========================================
|-- 怎么运行conda版本的jupyter?(Ubuntu Yi): 已经pip3 install sklearn 但是jupyter找不到; (重装就好了)
----------------------------------------
原因: 在Ubuntu 上， jupyter和cmd下的 sys.path 输出结果差异很大。
解决: ?


1. 已经安装了 sklearn
$ pip3 install sklearn 
Requirement already satisfied: sklearn in /home/wangjl/anaconda3/lib/python3.6/site-packages (0.0)
Requirement already satisfied: scikit-learn in /home/wangjl/anaconda3/lib/python3.6/site-packages (from sklearn) (0.22.2.post1)
Requirement already satisfied: numpy>=1.11.0 in /home/wangjl/anaconda3/lib/python3.6/site-packages (from scikit-learn->sklearn) (1.18.3)
Requirement already satisfied: scipy>=0.17.0 in /home/wangjl/anaconda3/lib/python3.6/site-packages (from scikit-learn->sklearn) (1.4.1)
Requirement already satisfied: joblib>=0.11 in /home/wangjl/anaconda3/lib/python3.6/site-packages (from scikit-learn->sklearn) (0.14.1)


jupyter中的报错:
from sklearn import manifold, datasets
## ModuleNotFoundError: No module named 'sklearn'









2. 检查路径
$ pip --version
pip 20.2.1 from /home/wangjl/anaconda3/lib/python3.6/site-packages/pip (python 3.6)

$ which pip
/home/wangjl/anaconda3/bin/pip

$ which pip3
/home/wangjl/anaconda3/bin/pip3

$ which jupyter notebook
/home/wangjl/.local/bin/jupyter



(1). 黑窗口下运行的python，包路径在conda下;
$ python3 --version
Python 3.6.3 :: Anaconda, Inc.

$ which python3 
/home/wangjl/anaconda3/bin/python3

$ python3
Python 3.6.3 |Anaconda, Inc.| (default, Oct 13 2017, 12:02:49) 
[GCC 7.2.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> import sys
>>> sys.path
['', '/home/wangjl/anaconda3/lib/python36.zip', '/home/wangjl/anaconda3/lib/python3.6', '/home/wangjl/anaconda3/lib/python3.6/lib-dynload', '/home/wangjl/.local/lib/python3.6/site-packages', '/home/wangjl/anaconda3/lib/python3.6/site-packages']
>>> 



(2). 但是，jupyter内执行，包路径还是不对，都不在conda下。
根据这句话
WARNING: You are using pip version 20.1; however, version 20.2.1 is available.
You should consider upgrading via the '/home/wangjl/anaconda3/bin/python -m pip install --upgrade pip' command.

$ /home/wangjl/anaconda3/bin/python -m jupyter --version
jupyter core     : 4.6.3
jupyter-notebook : 6.0.3
qtconsole        : 4.7.3
ipython          : 7.13.0
ipykernel        : 5.2.1
jupyter client   : 6.1.3
jupyter lab      : 0.27.0
nbconvert        : 5.6.1
ipywidgets       : 7.5.1
nbformat         : 5.0.6
traitlets        : 4.3.3


#这两个启动jupyter的方式，path路径一致
$ jupyter notebook --no-browser --port 7000 --ip=192.168.2.120 
$ /home/wangjl/anaconda3/bin/python -m jupyter notebook --no-browser --port 7000 --ip=192.168.2.120
http://192.168.2.120:7000/?token=fdfff4152e19a0589a5fb51b5c5ac1ad9a00d9947332a0fa

网页中:
import sys
sys.path
['',
 '/usr/lib/python36.zip',
 '/usr/lib/python3.6',
 '/usr/lib/python3.6/lib-dynload',
 '/home/wangjl/.local/lib/python3.6/site-packages',
 '/usr/local/lib/python3.6/dist-packages',
 '/usr/lib/python3/dist-packages',
 '/home/wangjl/.local/lib/python3.6/site-packages/IPython/extensions',
 '/home/wangjl/.ipython']



2. 是不是找不到conda的jupyter的启动位置？ 如果是，那把包装到能用的python目录下吧。
找jupyter用的python的pip在哪里？

$ /home/wangjl/anaconda3/bin/python -m pip install sklearn
不行，找不到。







3. 把cmd中运行得到的conda路径，加到jupyter中的python中呢？
import sys
sys.path =sys.path + ['/home/wangjl/anaconda3/lib/python36.zip', '/home/wangjl/anaconda3/lib/python3.6', '/home/wangjl/anaconda3/lib/python3.6/lib-dynload', '/home/wangjl/.local/lib/python3.6/site-packages', '/home/wangjl/anaconda3/lib/python3.6/site-packages']
sys.path





4. 删除jupyter再重新安装吧
$ which pip3
/home/wangjl/anaconda3/bin/pip3

$ pip3 uninstall jupyter notebook # 删除
$ pip3 install jupyter notebook
# Successfully installed jupyter-client-6.1.6 jupyter-core-4.6.3

$ which jupyter notebook
/home/wangjl/anaconda3/bin/jupyter

$ jupyter notebook --no-browser --port 7000 --ip=192.168.2.120 

好了，都在 /home/wangjl/anaconda3 下了，天下太平。






========================================
|-- 日常在tmux中后台运行jupyter <=========
----------------------------------------
$ tmux
$ jupyter notebook --no-browser --port 7000 --ip=192.168.2.120
复制链接，替换IP为域名 y.biomooc.com, 
http://y.biomooc.com:7000/?token=2fba21e8e4852f2b38730039f176ba13beaf6ae3cc4ab1df
粘贴到浏览器中即可登录 notebook。
在tmux中输入 ctrl+B, 按D 退出tmux窗口，让其后台运行。


$ tmux
$ jupyter notebook --no-browser --port 8889 --ip=172.18.5.193





========================================
|-- 把 jupyter转变为py脚本、html网页
----------------------------------------
1. nb to python
jupyter nbconvert --to python <YourNotebook>.ipynb

实例：
$ jupyter nbconvert --to python eT4_interectWith_poly_DB3.ipynb
[NbConvertApp] Converting notebook eT4_interectWith_poly_DB3.ipynb to python
[NbConvertApp] Writing 6378 bytes to eT4_interectWith_poly_DB3.py


https://nbconvert.readthedocs.io/en/latest/execute_api.html




2. nb to html 
(1) 使用菜单生成
顶部菜单 File - Download as - HTML(.html)

(2) 命令行生成 
jupyter nbconvert --to html <YourNotebook>.ipynb

$ jupyter nbconvert --to html a2_recluster_PBMC10k.R.ipynb
报错：ModuleNotFoundError: No module named 'jupyter_contrib_nbextensions'

错误原因，没有jupyter_contrib_nbextensions，可尝试下面的解决方案
python3 -m pip install --user jupyter_contrib_nbextensions
jupyter contrib nbextension install --user --skip-running-check
python3 -m pip install --user jupyter_nbextensions_configurator
jupyter nbextensions_configurator enable --user

再次执行
$ jupyter nbconvert --to html a2_recluster_PBMC10k.R.ipynb
[NbConvertApp] Converting notebook a2_recluster_PBMC10k.R.ipynb to html

$ ls -lth a2* | head
-rw-rw-r-- 1 wangjl wangjl 6.6M Sep  8 10:44 a2_recluster_PBMC10k.R.html
-rw-rw-r-- 1 wangjl wangjl 6.0M Feb 19  2021 a2_recluster_PBMC10k.R.ipynb



ref:
https://www.cnblogs.com/study-/p/13029182.html





========================================
|-- 在jupyter中显示服务器上的图片
----------------------------------------
1. 查看路径对应的gif图片
from IPython.display import Image

PATH = "/home/wangjl/web/"
Image(filename = PATH + "a3.gif",width=500)


2.



https://vimsky.com/article/3721.html





========================================
|-- 谷歌逆天在线编辑器 colab: 在线版的 jupyter notebook 
----------------------------------------
1.网址:
https://colab.research.google.com

貌似，保存的内容每天会被自动重置。



2.使用方法：
https://blog.csdn.net/dQCFKyQDXYm3F8rB0/article/details/90149883


###
(1) py相关命令
1)检查py版本号
!python -V
!pip -V
## Python 3.6.8
## pip 19.1.1 from /usr/local/lib/python3.6/dist-packages/pip (python 3.6)

2) 检查安装的包
!pip list
可以看到，colab默认安装了大量的Python第三方库，就数据科学方面的库而言，colab的自带库应该会比Anaconda更加完善。





###
(2) 了解当前环境，探索更多可能
! 后跟着linux命令
除了python库之外，使用这种方式还可以执行其他linux指令来部署你自己的云端环境，别忘了在指令前加一个“!”号就好。


1)查看当前目录多大空间
!fdisk -l # 被禁止使用
!du -sh * 
## 55M	sample_data

2)当前目录
!pwd
## /content

3)查看目录结构
import os
path=os.getcwd()
print(path)
print(os.listdir())

执行结果：
/content
['.config', 'sample_data']

4) 查看gcc版本号
import subprocess

def exeShell(cmd):
  (status, output)=subprocess.getstatusoutput(cmd)
  return output

cmd="gcc --version"
rs=exeShell(cmd)
print(rs)
输出： 
gcc (Ubuntu 7.4.0-1ubuntu1~18.04.1) 7.4.0
Copyright (C) 2017 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.



5) 查看R版本号
rs=exeShell("Rscript --version") #2.4 自定义的函数
print(rs)
输出:
R scripting front-end version 3.6.1 (2019-07-05)

rs=exeShell("which R")
print(rs) #/usr/local/bin/R


6)运行js代码
%%javascript
console.log("Hello, js")
a=1+200
a
可以看F12控制台输出了：Hello, js


7) 安装程序
# 查找nginx
rs=exeShell("sudo apt-get search nginx")
print(rs) 






100) 执行失败的
#查看服务器ip地址
rs=exeShell("ifconfig") 
print(rs)  #/bin/sh: 1: ifconfig: not found











3.尝试编译运行一个c代码。网速太慢了，一个步骤要反复尝试才能通过
1)代码写入到文件
code1="""
#include <stdio.h>
int main ()
{
  printf("hello, c");
  return 0;
}
"""
print(code1)
fw=open("a1.c",'w')
fw.write(code1)
fw.close()


2) 编译代码
rs=exeShell("gcc a1.c -o a1")
print(rs)

或者，直接使用
!gcc a1.c -o a1


3) 执行代码
rs=exeShell("./a1")
print(rs) #hello, c

或者，直接使用
!./a1









========================================
|-- kaggle: 免费的GPU、数据、代码
----------------------------------------
Kaggle offers a no-setup, customizable, Jupyter Notebooks environment. Access free GPUs and a huge repository of community published data & code.

https://www.kaggle.com/




========================================
|-- jupyterLab是jupyter的综合版本
----------------------------------------
1.安装
pip install jupyterlab




2. 在命令行使用jupyter-lab或jupyter lab命令
$ /home/wangjl/anaconda3/bin/jupyter lab --ip 192.168.2.120 --port 8888

然后浏览器查看。





3. 在jupyter中编辑和运行R脚本
详情见R/R杂项。




4.在jupyter中直接执行shell命令，在前面加上感叹号即可。
! pwd
/home/wangjl/test

好像只有python可用，R中不行。



5. 快捷键
ctrl+shift+] 下一个标签页
ctrl+shift+[ 上一个标签页



========================================
|-- How to install jupyter notebook using docker
----------------------------------------
目的: 找到带 jupyter 的镜像，并运行和使用。设置端口映射、文件映射。
最佳实践：看 3.4


1. jupyter notebook 的优缺点
(1) 优点
- 可视化
- 分享代码：附带运行结果、图片
- 制作文档方便：可另存为html、pdf等
- 方便交互式修改代码

(2) 局限性
- Sometimes It is very hard to test long tasks.
- Running Jupiter notebook standalone is Less secure.
- If you run any cell multiple times, cell will be out of order.
- There is no support for any IDE integration, or lining or code-style correction.


2. 搜索可用的镜像
(1) 搜索1
$ docker search notebook
NAME                                 DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED
ipython/notebook                     Deprecated IPython Notebook image. See https…   102                  [OK]


(2) 搜索2: 这个貌似用的人多
$ docker search jupyter
NAME                                    DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED
jupyter/datascience-notebook            Jupyter Notebook Data Science Stack from htt…   872                  
jupyter/all-spark-notebook              Jupyter Notebook Python, Scala, R, Spark, Me…   363                  
jupyter/scipy-notebook                  Jupyter Notebook Scientific Python Stack fro…   318                  
jupyterhub/jupyterhub                   JupyterHub: multi-user Jupyter notebook serv…   296                  [OK]
jupyter/tensorflow-notebook             Jupyter Notebook Scientific Python Stack w/ …   282                  
jupyter/pyspark-notebook                Jupyter Notebook Python, Spark, Mesos Stack …   211                  
jupyter/base-notebook                   Small base image for Jupyter Notebook stacks…   151                  
jupyter/minimal-notebook                Minimal Jupyter Notebook Stack from https://…   143                  
jupyterhub/singleuser                   single-user docker images for use with Jupyt…   42                   [OK]
jupyter/r-notebook                      Jupyter Notebook R Stack from https://github…   40                   
mikebirdgeneau/jupyterlab               Jupyterlab based on python / alpine linux wi…   27                   [OK]
jupyter/nbviewer                        Jupyter Notebook Viewer                         26                   [OK]


这几个可能相关，同时用户较多:
jupyter/datascience-notebook
jupyter/scipy-notebook
jupyter/tensorflow-notebook
jupyter/all-spark-notebook
jupyterhub/jupyterhub


For the people who are not aware of scipy, it is basically an open-source python library mainly used for scientific and technical computing.SciPy contains optimization, linear algebra, integration, interpolation, special functions, FFT, signal and image processing, ODE solvers, and other tasks common in science and engineering. To get more information about scipy, visit this link.





3. 尝试一下 jupyter/datascience-notebook

https://hub.docker.com/r/jupyter/datascience-notebook
https://github.com/jupyter/docker-stacks
https://jupyter-docker-stacks.readthedocs.io/en/latest/

(1) 我的docker版本
$ docker --version
Docker version 19.03.8, build afacb8b #centOS系统
Docker version 20.10.7, build 20.10.7-0ubuntu1~20.04.2 #ubuntu硬盘不够了，用centOS测试。

(2) 拉取镜像
$ docker pull jupyter/datascience-notebook

查看大小: 4G 多。
$ docker images
REPOSITORY                     TAG                 IMAGE ID            CREATED             SIZE
jupyter/datascience-notebook   latest              f42c78e12f59        21 hours ago        4.09GB



(3) 尝试启动，探索内部文件结构 [实际使用直接看(4)]
$ docker run -p 18888:8888 jupyter/datascience-notebook

打来浏览器，把IP换成服务器的IP，端口换成冒号前面的端口
http://127.0.0.1:18888/?token=a93489a9261e8caaa340318601ca71c88f2f44efc6a51236
1)点右上角 New，发现支持 Julia1.6.3, Python3, R。
2) 新建 python，探索工作目录

import os
os.getcwd()
输出: '/home/jovyan

!pwd
输出: /home/jovyan

!ls -lth
total 4.0K
-rw-r--r--. 1 jovyan users 1.6K Oct 19 01:57 Untitled.ipynb
drwsrwsr-x. 2 jovyan users    6 Oct 17 00:21 work

!ls work #该文件夹下啥也没有。


py包的安装位置
!pip freeze | head
anyio @ file:///home/conda/feedstock_root/build_artifacts/anyio_1633972074008/work/dist
numpy @ file:///home/conda/feedstock_root/build_artifacts/numpy_1622014603188/work
pandas==1.3.4


3) 版本号。
操作系统 是 ubuntu
!apt search tree

!python -V
Python 3.9.7
!which python
/opt/conda/bin/python

!pip -V
pip 21.3 from /opt/conda/lib/python3.9/site-packages/pip (python 3.9)
!which pip
/opt/conda/bin/pip


包的版本
!pip list | grep pandas
numpy                         1.20.3
pandas                        1.3.4
matplotlib                    3.4.3
matplotlib-inline             0.1.3
scipy                         1.7.1
sympy                         1.9

seaborn                       0.11.2

ipython                       7.28.0
jupyter-client                7.0.6
jupyter-core                  4.8.1
jupyter-server                1.11.1

scikit-learn                  1.0


退出: ctrl+C
$ docker ps -a #查刚关掉容器的id
$ docker rm 744 #删除容器文件



4) docker的更多参数
带上-d detach参数，带上 --name 名字，带上文件映射 -v
# docker run -d -P --name notebook jupyter/datascience-notebook
参数解释：
-d 表示 detach，该命令执行完返回，不会一直等待docker的输出。
--name 被容器定义一个名字，方便后续操作
-P 表示使用随机端口。外部端口随机，内部端口是容器主动暴露的
$ docker port notebook 8888 #查询容器 notebook 端口 8888 对应的外部端口
0.0.0.0:32769


# 文件映射
This command pulls the jupyter/r-notebook image tagged 33add21fab64 from Docker Hub if it is not already present on the local host.
# docker run --rm -p 10000:8888 -v "${PWD}":/home/jovyan/work jupyter/r-notebook:33add21fab64 #最后这个是镜像的id
参数解释：
--rm 表示容器停止就删除自己
-p 宿主机端口:容器端口
-v 宿主机目录:容器目录





(4) 推荐命令

1) 启动容器
$ docker run --rm -d --name notebook -p 18888:8888 -v "${PWD}":/home/jovyan/work jupyter/datascience-notebook
由于添加了 --rm 参数，容器停止后，容器内文件全部销毁，除了 ~/work/ 目录做过文件映射，保留。

其中 -v 参数的 "${PWD}" 表示宿主机当前文件，也可以根据自己的需要，改为另一个绝对路径。

2) 获取登录信息
# get the notebook token from the logs
$ docker logs --tail 3 notebook
可以打开网页登录了，替换宿主机IP和端口：
http://127.0.0.1:18888/?token=85b143209647f56f7412a3fe6d4ae71e40b9058c047d8031

3) stop the container
$ docker stop notebook
notebook

4) remove the container permanently
由于启动参数写了 --rm, 本容器会自动销毁。
该步骤在 stop 时已执行过。
$ docker rm notebook
notebook

5) 查看容器
$ docker ps
$ docker ps -a #查看全部容器，包括已经停止的容器










========================================
|-- 在流程中使用 jupyter notebook, 并传递参数
----------------------------------------

嵌入到流程中的脚本，要满足2个基本要求：可以使用命令行运行，可以接收参数。

1. 测试实例
有一个 jupyter notebook，需要传入参数才能运行。
另一个py函数，启动该 notebook，其原理是在 notebook 最前面插入一个 cell，就是传入的变量(只支持基本类型，不支持pandas等复杂类型的数据，复杂类型可以通过json或csv等文件的文件名传递数据)。
输出是一个新的 notebook。



(1) 模板 notebook: 接收参数，打印参数，并画饼图
$ cat test_fig_param.ipynb #有两个 cell 
#1 settings
#n=2
#filename="a1_"+str(n)
#msg="this is test1"
print(msg)


#2  figure
import matplotlib.pyplot as plt

labels=['Clothes', 'Food', 'Housing', 'Travel', 'Others']
data=[0.1, 1.45, 0.3, 0.1, 0.05] #可以不是百分比，直接放原始数据，自动计算百分比

print(filename)

# plt.pie(data, labels=labels) #没有显示百分比
plt.pie(data[0:n], labels=labels[0:n], autopct="%1.1f%%") #加2个百分号就能正常显示百分号了

plt.savefig(f"{filename}.pdf") #先保存，再显示
plt.show()





(2) 使用脚本运行该 notebook，需要使用 papermill 包。
$ pip3 install papermill

==> 然后使用如下代码运行 第一个 notebook 
调用格式: papermill.execute_notebook(input_path, output_path, parameters=None)
前2个是文件名，字符串类型；最后一个参数，是字典类型。



import datetime
import papermill as pm
#dir(pm.execute_notebook)
#help(pm.execute_notebook)
# input_path, output_path, parameters=None,

output="result"

import os
if not os.path.exists(output):
    os.mkdir(output)


#2
for i in range(1,5):
    book=f"book1/book{str(i)}.txt"
    params={
        "n":i,
        "filename": f"nb_test_{str(i)}",
        "msg":"xxtest"
    }

    #3
    pm.execute_notebook(
        input_path="test_fig_param.ipynb",
        output_path="{0}/{1}_{2}.ipynb".format(output,
            book.split("/")[-1].split(".")[0],
            datetime.datetime.now().strftime("%Y%m%d%H%M"),
        ),
        parameters=params
    )

print("end")





(3) 输出结果: 一部分是新生成的 notebook，另一部分是 notebook 生成的 pdf 图片。
result/
	book1_202204242248.ipynb
	book2_202204242248.ipynb
	book3_202204242248.ipynb
	book4_202204242248.ipynb

./ 
nb_test_1.pdf
nb_test_2.pdf
nb_test_3.pdf
nb_test_4.pdf








ref:
https://my.oschina.net/u/4411942/blog/3632024
https://github.com/IndustrialDataops/notebook-as-pipeline/blob/main/executor.py 如何脚本化 notebook，接收参数
画图时怎么保存 https://blog.csdn.net/tianxinyiru/article/details/121403165





========================================
|-- 新建notebook报错，重装 jupyter [2022.5.5]
----------------------------------------
$ pip3 install --upgrade nbconvert
$ pip3 install --upgrade jupyter_contrib_nbextensions

$ pip3 list | grep nbconvert
nbconvert                          6.5.0

$ pip3 list | grep tornado
tornado                            6.1



降低版本号 https://github.com/ipython-contrib/jupyter_contrib_nbextensions/issues/1529
$ pip3 uninstall nbconvert
$ pip3 install nbconvert==5.6.1

$ pip3 uninstall jinja2

$ pip3 list | grep jupyter
jupyter                            1.0.0
jupyter-client                     7.2.2
jupyter-console                    5.2.0
jupyter-contrib-core               0.3.3
jupyter-contrib-nbextensions       0.5.1
jupyter-core                       4.10.0
jupyter-highlight-selected-word    0.2.0
jupyter-latex-envs                 1.4.6
jupyter-nbextensions-configurator  0.4.1
jupyterlab                         0.34.9
jupyterlab-launcher                0.13.1
jupyterlab-pygments                0.2.2


$ pip3 uninstall jupyter 
$ pip3 uninstall jupyter_contrib_nbextensions 
$ pip3 uninstall jupyter-client jupyter-console jupyter-contrib-core
$ pip3 uninstall jupyter-core jupyter-highlight-selected-word jupyter-latex-envs jupyter-nbextensions-configurator 
$ pip3 uninstall jupyterlab jupyterlab-launcher jupyterlab-pygments

$ pip3 install jupyter==5.6.1

$ pip3 install jupyter
$ pip3 uninstall terminado  #https://stackoverflow.com/questions/64940102/kedro-install-cannot-uninstall-terminado
$ pip3 list | grep terminado
terminado                          0.8.1
###$ pip3 install asteroid --ignore-installed terminado


$ pip3 install tornado --user --ignore-installed
$ pip3 install jupyter
$ pip3 install jupyter --ignore-installed terminado


ERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.
twisted 18.7.0 requires PyHamcrest>=1.9.0, which is not installed.
scvelo 0.2.4 requires matplotlib>=3.3.0, but you have matplotlib 3.1.1 which is incompatible.
scanpy 1.8.2 requires matplotlib>=3.1.2, but you have matplotlib 3.1.1 which is incompatible.
tensorflow 2.1.0 requires scipy==1.4.1; python_version >= "3", but you have scipy 1.7.3 which is incompatible.


$ pip3 install --upgrade matplotlib==3.3.0
$ pip3 install twisted
$ pip3 install jupyter --ignore-installed terminado


ERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.
tensorflow 2.1.0 requires scipy==1.4.1; python_version >= "3", but you have scipy 1.7.3 which is incompatible.

$ pip3 uninstall tensorflow tensorflow-estimator
$ pip3 install jupyter --ignore-installed terminado
















========================================
使用 anaconda 在centOS无root权限安装python3
----------------------------------------
more文档：https://docs.anaconda.com/anaconda/user-guide/getting-started
Anaconda使用总结: http://python.jobbole.com/86236/


1.下载
使用清华大学的镜像安装：https://mirror.tuna.tsinghua.edu.cn/help/anaconda/
https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-5.0.1-Linux-x86_64.sh

$ axel -n 30 https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-5.0.1-Linux-x86_64.sh



2.安装
https://docs.anaconda.com/anaconda/install/linux

md5sum 和 网页一致。
https://docs.anaconda.com/anaconda/install/hashes/Anaconda3-5.0.1-Linux-x86_64.sh-hash

(1)运行
$ bash ~/software/Anaconda3-5.0.1-Linux-x86_64.sh

Choose “Install Anaconda as a user”
设置安装目录：
[/home/wangjl/anaconda3] >>> /home/wangjl/software/anoconda3/
PREFIX=/home/wangjl/software/anoconda3
几分钟的安装时间。

Do you wish the installer to prepend the Anaconda3 install location
to PATH in your /home/wangjl/.bashrc ? [yes|no]
输入yes

载入设置：
$ source ~/.bashrc



(2)检查结果
$ python -V
Python 3.6.3 :: Anaconda, Inc.

$ pip -V
pip 9.0.1 from /home/wangjl/software/anoconda3/lib/python3.6/site-packages (python 3.6)


#####
#如果安装出错，不要忘了升级pip自己
$ pip install --upgrade pip







========================================
|-- 用conda切换python版本
----------------------------------------
conda可以很方便的切换python的不同版本： 请参考官方文件 https://conda.io/docs/_downloads/conda-cheatsheet.pdf
https://blog.csdn.net/lyy_buu/article/details/78214325

1)列出现有可用的python虚拟环境，一般默认安装会有一个python3、一个python2。
$ conda env list
# conda environments:
#
# base * /home/wangjl/software/anoconda3
# py27   /home/wangjl/software/anoconda3/envs/py27

# To activate this environment, use: 激活该
# > source activate py27
#
# To deactivate an active environment, use:
# > source deactivate



#############################
# conda 常见操作语句
#############################
查看有哪些虚拟环境
$ conda env list

创建pyton3环境
$ conda create -n py3test python=3*

激活环境
$ source activate py3test 

安装 snakemake
$ conda install snakemake 

关闭环境
$ source deactivate






2)如果想自定义一个py版本号：
如果先装了anaconda3想使用python2,那么基于 python2.7 创建一个名为py2.7 的环境
$ python -V
Python 3.6.3 :: Anaconda custom (64-bit)


$ conda create --name test_py2 python=2.7
回车开始安装十几个包。



激活 python2.7 环境
$ source activate test_py2

输入这个命令之后会发现，terminal命令行前面多了test_py2的字样，实际上，此时系统做的事情就是把默认3.6环境从PATH中去除，再把2.7对应的命令加入PATH

(test_py2) [wangjl@nih_jin tmp]$ python -V  #查看当前版本，确实已经是2.7了。
Python 2.7.15 :: Anaconda, Inc. 



回到python3版本：
$ source deactivate
$ python -V #已经回到python3版本了
Python 3.6.3 :: Anaconda custom (64-bit)




最后，如果想要删除一个已有的环境：
$ conda remove --name test_py2 --all







========================================
|-- 用conda下载和安装jupyter包（尽量用pip安装，用conda安装可能会有未知副作用）
----------------------------------------
(2)安装包
https://conda.io/docs/user-guide/cheatsheet.html

$ conda install jupyter
Install a new package (Jupyter Notebook)
in the active environment

$ pip install boltons
Install a package directly from PyPI into the current active
environment using pip


(3)设置国内镜像
https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/

$ conda info

# 添加Anaconda的TUNA镜像
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/
# TUNA的help中镜像地址加有引号，需要去掉
 
# 设置搜索时显示通道地址
conda config --set show_channel_urls yes

$ conda search jupyter
搜索包







附录：
win10上安装python3 和 eclipse
1.下载java8
https://docs.oracle.com/javase/8/docs/

2.安装python3；

3.安装eclipse；






========================================
|-- bioconda 安装R on CentOS7.5 #推荐使用编译R
----------------------------------------

添加源
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda
conda config --set show_channel_urls yes # 生成 ~/.condarc 文件
conda config --show

conda clean -i #清除索引缓存，保证用的是镜像站提供的索引。

conda create -n myenv numpy #测试
conda search bwa
## OR a new environment can be created:
conda create -n aligners bwa bowtie hisat star

conda search r #最新的版本是4.0，R官方说4.0.3
conda search R=4.0
conda install r=4.0








========================================
如何在shell脚本中调用python脚本并传递参数 -- (打造pipeline必备技能)
----------------------------------------
1. shell中调用python脚本，并传递参数，是常规操作
在py中args变量的值是一个字符串列表，接收到sys.argv数组中。
sys.argv[0] 是py脚本本身，后面依次是参数。


$ cat my.py 
import sys
def add(n1,n2):
	return n1+n2;

print("传入的参数： ",sys.argv)
print("result=", add(sys.argv[1], sys.argv[2]) ," default is string" );
print("result=", add( int(sys.argv[1]), int(sys.argv[2])), " now is number" );

输出 
$ python my.py 500 20
传入的参数：  ['my.py', '500', '20']
result= 50020  default is string
result= 520  now is number

注意： 传入的参数默认是字符串，如果需要数字，需要手动转换。





2. 在shell脚本中调用python脚本，并传递参数。
$ cat test2.sh 
#!/bin/bash
#source /etc/profile
echo "start: `date`"
python my.py $1 $2 $3
echo "end:`date`"

输出： 
$ bash test2.sh 500 20 1
start: Thu Jul 18 04:31:29 EDT 2019
传入的参数：  ['my.py', '500', '20', '1']
result= 50020  default is string
result= 520  now is number
end:Thu Jul 18 04:31:30 EDT 2019






3.在shell脚本中调用python脚本，并在shell中接收返回值，判断是否成功执行

//todo





========================================
|-- Python 命令行参数的3种传入方式: sys.argv, argparse, click 包
----------------------------------------

当python与命令行结合使用时，参数能增加脚本的灵活性。

我使用过的命令行参数模块主要分为两类，
第一种当然就是 Python 内置的命令行模块，主要就是 sys.argv 和 argparse，
第二种是第三方模块，比较有名的是 click 模块。


1.命令行参数模块
$ python t1.py arg1 arg2 arg3

在t1.py内部，通过sys.argv列表接收参数，下标为0的是脚本文件名本身，下标为1的是第一个参数arg1.
$ cat t1.py
import sys
arr=sys.argv;
print("paras:", arr[0], arr[1],arr[2]);

$ python t1.py 1 2 3
paras: t1.py 1 2  #脚本只打印前2个参数。

$ python t1.py 120 /home/xxx/raw/xx.data
paras: t1.py 120 /home/xxx/raw/xx.data


$ python t1.py 120
Traceback (most recent call last):
  File "t1.py", line 3, in <module>
    print("paras:", arr[0], arr[1],arr[2]);
IndexError: list index out of range
如果给出的参数比需要的参数少，则报错。


小结：sys.argv 形式传入参数的方式比较简单，但是也很死板，因为传入的参数是一个有序的列表，所以在命令行中必须按照脚本规定的顺序去输入参数，这种方法比较适合脚本中需要的参数个数很少且参数固定的脚本。




2.argparse 模块
argparse 模块也是 Python 自带的一个命令行参数模块，这个模块才是真的为了命令行参数而生的模块，相较之下 sys.argv 只是碰巧可以用在命令行参数上面而已。

$ cat t2.py
import argparse

parser = argparse.ArgumentParser(description='Test for argparse')  #首先需要构建一个参数实例

# 之后就可以给对象添加一些参数属性
parser.add_argument('--name', '-n', help='name 属性，非必要参数')
parser.add_argument('--year', '-y', help='year 属性，非必要参数，但是有默认值', default=2022)
parser.add_argument('--body', '-b', help='body 属性，必要参数', required=True)
args = parser.parse_args()

# 最后只需要从属性从提取传入的参数进行使用即可。
print(args)
print("name=", args.name)
print("year=", args.year)
print("body=", args.body)

--name 和 -n 都可以用来在命令行中设置name属性。可以改变参数顺序。使用--双斜线规定参数完整名字。
还会自动生成“帮助”，显示只有body是必须参数。
$ python t2.py --help
usage: t2.py [-h] [--name NAME] [--year YEAR] --body BODY

Test for argparse

optional arguments:
  -h, --help            show this help message and exit
  --name NAME, -n NAME  name 属性，非必要参数
  --year YEAR, -y YEAR  year 属性，非必要参数，但是有默认值
  --body BODY, -b BODY  body 属性，必要参数
#

运行结果
$ python t2.py -y 2019 -n Tom -b "this is body part"
Namespace(body='this is body part', name='Tom', year='2019')
name= Tom
year= 2019
body= this is body part

## 省略year参数，会使用默认参数
year= 2022

## 省略name参宿，会传入None，但不报错。
name= None

## 省略body参宿，报错。
$ python t2.py -y 2019 -n Tom
usage: t2.py [-h] [--name NAME] [--year YEAR] --body BODY
t2.py: error: the following arguments are required: --body/-b


更多的参数介绍和使用可以查看官方文档：Python 官方文档：argparse (https://docs.python.org/zh-cn/3/library/argparse.html?highlight=argparse#module-argparse)


小结：其实我非常喜欢这个内置的命令行参数模块，因为它不仅方便使用，更重要的是它就是内置的，不需要单独安装依赖。





3.click 库

Click 是 Flask 的团队 pallets 开发的优秀开源项目，它为命令行工具的开发封装了大量方法，使开发者只需要专注于功能实现。这是一个第三方库，专门为了命令行而生的非常有名的 Python 命令行模块。

$ cat t3.py 
# -*- coding:utf-8 -*-
# @Date  : 2019/7/30

import click

@click.command()
@click.option('--name',default='Leijun',help='name 参数，非必须，有默认值')
@click.option('--year',help='year 参数',type=int)
@click.option('--body',help='body 参数')
def test_for_sys(year, name, body):
    print('the year is', year+10)
    print('the name is', name)
    print('the body is', body)

if __name__ == '__main__':
    test_for_sys()

#获取帮助
$ python t3.py --help
Usage: t3.py [OPTIONS]

Options:
  --name TEXT     name 参数，非必须，有默认值
  --year INTEGER  year 参数
  --body TEXT     body 参数
  --help          Show this message and exit.

#运行
$ python t3.py --year 2019 --body "a lot of text"
the year is 2029
the name is Leijun
the body is a lot of text

可以看到 click 是使用装饰器的方式给函数添加命令行属性，比较特殊的是最后调用函数的时候是没有带上参数的，因为参数会自动通过命令行的形式传入。其他设置参数的属性跟前面的 argparse 的方式非常相似，具体的参数可以参考文档和其他的教程用法，这里就不做过多的说明。

小结：click 库也是一个非常人性化的命令行参数模块，它其实非常强大，强大到把所有的命令行参数可能涉及的情况都考虑到了，需要自己去探索。




总结
以上就是我接触和使用到的三种给 Python 脚本设置命令行参数的方法，其中第一种是我在工作中见到的其他同事写的脚本中的方式，但是我并不喜欢这种方式，因为它真的太死板了；

我最喜欢的是 argparse 模块，这个模块是内置模块，但是功能完全够用，非常方便。

功能最全面的的是click，数据格式检查、转换都自动化完成了。



refer: https://tendcode.com/article/python-shell/






========================================
|-- python和R语言的优劣比较，与互相调用
----------------------------------------
http://www.360doc.com/content/16/0507/10/31913486_556962620.shtml

数据科学家就是这样一种人：软件工程师中最懂统计学，统计学家中最会编程的人。 - josh_wills在推特上这样说到。

由于这两种语言各自提供大量独特的库资源，对能够利用这两种语言的相对优势的数据科学家的需求正在不断增长。


1. Python与R的对比
(1)在以下领域中，Python 比R 更有优势：
网络爬虫和数据抓取：虽然R中的rvest已经简化了网页抓取， Python的beautifulsoup和Scrapy更加成熟，并提供更多的功能。

数据库连接：虽然R有大量的用于连接到数据库的选项， Python的sqlachemy只用了一个程序包就提供了所有的数据库连接功能，并可广泛用于生产环境。



(2)而在以下领域中，R比Python更有优势：
统计分析选项：尽管Python的SciPy和 Pandas以及 statsmodels的组合提供了很大的一套统计分析工具，而R是专门围绕着统计分析应用等创建的，因此提供了更多的相关工具。

交互式图像或控制板：bokeh， plotly和intuitics最近都把Python的图形使用扩展到了Web浏览器，但是举个使用shiny的例子，R中的shiny 控制面板运行速度更快，而且往往需要更少的代码。

此外，由于数据科学团队现在拥有一个比较广泛的技能库，任何应用程序所选择的编程语言都可能用到以前的知识和经验。对于一些应用，特别是原型设计和开发应用，人们使用他们已知的工具则速度会更快。



(3)纯文本 的“Air Gap（网闸）”策略

指在完全断开网络物理连接的基础上，实现合法信息的共享。本文中指用纯文本文件实现两种语言间代码的共享——译者注。

使用纯文本作为两种语言之间的物理隔离，你需要按如下步骤进行。

1)从命令行中重构你的R和Python脚本，并接受命令行参数。
2)输出共享数据到公共文件格式。
3)在一种语言中执行另一种语言，按要求传递参数。


优势：
最简单的方法，通常最快
可以轻松查看中间输出结果
已有常见文件格式，如： CSV ， JSON ， YAML的解析器


劣势：
需要事先商定一个共同的模式或文件格式
如果流程变长的话，难以管理中间输出结果和路径
如果数据量变大，本地磁盘读写将成为瓶颈


(4)命令行脚本
通过Windows 或Linux终端环境命令行运行R和Python脚本类似。要运行的命令被分解成: 脚本、空格分隔的参数列表。
$ Rscript path/to/myscript.R arg1 arg2 arg3
$ python path/to/myscript.py arg1 arg2 arg3


所有的参数需要以字符串的形式传递，因此有必要在脚本内部转换为所期望的数据类型。


1)R语言中访问命令行参数
上面的例子中，arg1，arg2 和 arg3是用来解析可执行R脚本的参数，可以使用commandArgs函数访问
##myscript.py #获取命令行参数
myArgs <- commandargs(T) ## myArgs是所有参数的特征向量
print(myArgs) print(class(myArgs))

通过设置trailingOnly 为TRUE，myArgs向量中只包含添加到命令行的参数。
如果默认设置为FALSE ，myArgs向量中还包含其它参数，比如刚被执行的脚本路径。


2)Python脚本中访问命令行参数
通过在Python脚本中导入sys模块访问arg1, arg2 和arg3参数。 sys.argv属性是所有被传递到当前正在执行脚本的参数列表。表中的第一个元素是正在被执行的脚本的完整路径。

# myscript.py
import sys
my_args = sys.argv  # 获取命令行参数
# my_args 是一个列表，其中的第一个元素是执行的脚本
print(type(my_args))
print(my_args)

## 如果你只希望保留传递到脚本的参数，你可以使用列表切片来选择除了第一个元素以外的所有参数。
# 使用切片，选择除第一个以外的所有元素
my_args = sys.argv[1:]




(4)将输出结果写入文件
通过中间文件共享R和Python之间的数据有几种选择: csv, txt, json, yaml等。

在R语言中推荐下面的程序包：
- 对于CSV文件，使用readr
- 对于JSON文件，使用jsonlite
- 对于YAML文件，使用yaml

Python中推荐：
- 对于CSV文件，使用csv
- 对于JSON文件，使用json
- 对于YAML文件，使用PyYAML

csv 和json模块是Python标准的库文件，是Python内置模块，而Py YAML需要额外安装程序包。所有的R程序包均需要安装。






2. 互相调用






========================================
|-- python 单行模式
----------------------------------------

$ python3 -c "a=2;b=3; print(a+b)"
5



R的单行模式:
$ Rscript -e "head(iris,2)"
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4         0.2  setosa








========================================
|-- python 非阻塞的调用shell子程序
----------------------------------------
$ cat a.sh
sleep 3
echo "hello,"


$ bash a.sh #需要等待3s，才打印hello
hello,




1.py阻塞的调用shell子程序。
(1)
$ cat t5.py 
import os
os.system("bash a.sh")

print(" world.")

$ python t5.py 
hello,
 world.
#我们执行t5，需要等待3s，屏幕上才打印出hello, world。


(2) subprocess.call.  #start and block until done
subprocess.call([data["om_points"],">", diz['d']+"/points.xml"])




2.非阻塞的调用shell子程序 #start and process things, then wait

$ cat t6.py 
import subprocess

p=subprocess.Popen('bash a.sh', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
# subprocess.run(['bash', 'a.sh'])

#for line in p.stdout.readlines():
#    print(line);

print(", world. after subprocess"); #立刻显示

#retval = p.wait() # #now wait。有人推荐使用p.communicate(); 测试效果差不多。
p.communicate();
# As stated in the documentation, wait can deadlock, so communicate is advisable.

print("next cmd after wait", p);



#运行
$ python t6.py 
, world. after subprocess #这一行立刻显示
#这里有3s等待
next cmd after wait <subprocess.Popen object at 0x7f04346e5128>


http://outofmemory.cn/code-snippet/1516/python-call-waibumingling-get-execution-result&sa=U&ei=qr
https://www.cnblogs.com/songzhenhua/p/9312764.html



========================================
Python调用C语言 //todo
----------------------------------------

(数据结构课设)基于Web的英汉字典，数据来自六级必背词汇，词汇量约15000 
https://github.com/d4smart/MyDict
底层用C编写，并将其编译成了Python库文件




========================================
为什么Python 3.6.3抛出AttributeError：模块'enum'没有属性'IntFlag'？
----------------------------------------
1.
>>> import re
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/wangjl/anaconda3/lib/python3.6/re.py", line 142, in <module>
    class RegexFlag(enum.IntFlag):
AttributeError: module 'enum' has no attribute 'IntFlag'


这可能是由包enum34引起的。从python 3.4开始，有一个标准库enum模块，所以你应该卸载enum34，因为在python 3.6中添加了enum.IntFlag，所以PLACEHOLDER_FOR_CODE_2不再与标准库中的枚举兼容。

$ pip3 uninstall enum34

如果你需要代码在python版本上运行< = 3.4和> 3.4，你可以尝试将enum-compat作为一个要求。它只为旧版本的python安装enum34。 https://pypi.python.org/pypi/enum-compat/0.0.2






2. 然后再加载 re 就不会报错了。

wangjl@sustc-HG:~/anaconda3/lib/python3.6/site-packages$ pip3 uninstall enum34
Found existing installation: enum34 1.1.6
Uninstalling enum34-1.1.6:
  Would remove:
    /home/wangjl/anaconda3/lib/python3.6/site-packages/enum/*
    /home/wangjl/anaconda3/lib/python3.6/site-packages/enum34-1.1.6.dist-info/*
Proceed (y/n)? y
  Successfully uninstalled enum34-1.1.6

wangjl@sustc-HG:~/anaconda3/lib/python3.6/site-packages$ /home/wangjl/anaconda3/bin/python3
Python 3.6.3 |Anaconda, Inc.| (default, Oct 13 2017, 12:02:49) 
[GCC 7.2.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> import re
>>> import sklearn








========================================
python 调用 R，使用rpy2 //todo
----------------------------------------
https://www.cnblogs.com/yezuhui/p/6853280.html










========================================
----------------------------------------

========================================
----------------------------------------





========================================
----------------------------------------





========================================
----------------------------------------

========================================
----------------------------------------




========================================
----------------------------------------

========================================
----------------------------------------

========================================
----------------------------------------





========================================
----------------------------------------


