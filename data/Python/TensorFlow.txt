深度学习与 tensorflow


CS231n Convolutional Neural Networks for Visual Recognition
	https://cs231n.github.io/convolutional-networks/


https://tyang816.github.io/categories/stanford-cs329p/



========================================
名词解释: 卷积层、池化层和全连接层
----------------------------------------


1. two convolutional layers 和 one dense layer 

https://pubmed.ncbi.nlm.nih.gov/31530582/
Fig4: The input DNA sequence is one hot encoded and fed into a CNN composed of two convolutional layers and one dense layer with a final output of a single neuron with linear activation (Methods). 

(1) 卷积层 convolutional layer:

Convolutional layers, which apply a specified number of convolution filters to the image. For each subregion, the layer performs a set of mathematical operations to produce a single value in the output feature map. Convolutional layers then typically apply a ReLU activation function to the output to introduce nonlinearities into the model.

卷积层，就是使用一系列filter对图片做卷积计算，提取特征。并且典型的卷积层会使用ReLU激活函数来引入非线性因数。

卷积的计算过程方法如下图，也就是用filter扫描整个图片，并做wx+b计算：


一般要用激活函数，如 ReLu，引入非线性。
引入非线性的作用：
  a)减少计算 b)避免梯度消失 c)网络的稀疏性，避免过拟合
  引入非线性是为了提取特征的，线性变换的结果还是线性的，没有意义的。


(2) Pooling layers 池化层
池化这个概念相对简单，类似于压缩图片。
max pool即取设定矩形里最大的值作为输出数据。


(3) Dense(fully connected) Layer 稠密层(全连接层) 

通过卷积和池化，然后得到了众多特征，稠密层的每一个节点都与这些特征节点相连构成稠密层(全连接层)。

稠密层的作用就是分类。

简单的说就是每一个特征节点手里握着一定的权重来决定输入是属于那个分类，最终全部特征的权重共同决定了输入所属分类的权重或概率。

也有反对意见: dense 应该不是分类，它的作用是将所有的数据连接在一起，说白了就是把所有的分开的小的感受野组合成整体的感受野。
分类一般是用后面的softmax来实现的。









ref:
https://blog.csdn.net/fenjiehuang/article/details/79247215





========================================
简介: Keras 与 TensorFlow
----------------------------------------
1. Keras: 基于 Python 的深度学习库
Keras 的开发重点是支持快速的实验。能够以最小的时延把你的想法转换为实验结果，是做好研究的关键。

官网 
	https://keras.io/
	https://keras.io/zh/ 中文教程
	
	https://keras.io/getting_started/
	https://keras.io/api/
	https://keras.io/guides/
	https://keras.io/examples/

中文教程
	http://www.uml.org.cn/ai/202011042.asp

英文教程
	https://www.manning.com/books/deep-learning-with-python-second-edition 书。keras 首页推荐。




2. tensorflow
官网 
	https://www.tensorflow.org/ 打不开，被墙了

https://docs.microsoft.com/en-us/azure/databricks/applications/machine-learning/train-model/tensorflow






========================================
安装 TensorFlow
----------------------------------------
1. 官网
https://github.com/tensorflow/tensorflow

To install the current release, which includes support for CUDA-enabled GPU cards (Ubuntu and Windows):

$ pip3 install tensorflow -i https://pypi.douban.com/simple/

查看版本号
$ pip3 freeze | grep -i tensorflow
tensorflow==2.7.0
tensorflow-estimator==2.7.0
tensorflow-io-gcs-filesystem==0.22.0

升级
To update TensorFlow to the latest version, add --upgrade flag to the above commands.


测试 
$ python3 

>>> import tensorflow as tf
>>> tf.add(1, 2).numpy()
2021-11-14 13:04:57.201315: E tensorflow/stream_executor/cuda/cuda_driver.cc:271] failed call to cuInit: CUDA_ERROR_NO_DEVICE: no CUDA-capable device is detected
2021-11-14 13:04:57.201445: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:156] kernel driver does not appear to be running on this host (sustc-HG): /proc/driver/nvidia/version does not exist
2021-11-14 13:04:57.202959: I tensorflow/core/platform/cpu_feature_guard.cc:151] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.

3
>>> hello = tf.constant('Hello, TensorFlow!')
>>> hello.numpy()
b'Hello, TensorFlow!'
>>> quit()
$


(2) 看提示 no CUDA-capable device is detected
显卡支持
https://www.tensorflow.org/install/gpu


查看显卡
$ lspci | grep NVIDIA
65:00.0 VGA compatible controller: NVIDIA Corporation GP106GL [Quadro P2000] (rev a1)
65:00.1 Audio device: NVIDIA Corporation GP106 High Definition Audio Controller (rev a1)

该显卡需要的驱动
$ ubuntu-drivers devices
WARNING:root:_pkg_get_support nvidia-driver-390: package has invalid Support Legacyheader, cannot determine support level
== /sys/devices/pci0000:64/0000:64:00.0/0000:65:00.0 ==
modalias : pci:v000010DEd00001C30sv00001028sd000011B3bc03sc00i00
vendor   : NVIDIA Corporation
model    : GP106GL [Quadro P2000]
driver   : nvidia-driver-460-server - distro non-free
driver   : nvidia-driver-418-server - distro non-free
driver   : nvidia-driver-390 - distro non-free
driver   : nvidia-driver-470-server - distro non-free
driver   : nvidia-driver-450-server - distro non-free
driver   : nvidia-driver-470 - distro non-free recommended
driver   : nvidia-driver-495 - distro non-free
driver   : nvidia-driver-460 - distro non-free
driver   : xserver-xorg-video-nouveau - distro free builtin


（没做）去NVDIA driver search page搜索你的显卡需要的驱动型号并下载
https://www.nvidia.com/Download/Find.aspx
https://www.nvidia.com/download/driverResults.aspx/177149/en-us


禁用nouveau。
打开终端，输入：
$ sudo vim /etc/modprobe.d/blacklist.conf
在blacklist.conf文件末尾加上这两行，并保存：
blacklist nouveau
options nouveau modeset=0

然后执行命令：
$ sudo update-initramfs -u  //应用更改


直接安装显卡驱动
$ sudo apt-get install nvidia-driver-460 #很慢
最后一条输出 update-initramfs: Generating /boot/initrd.img-5.4.0-90-generic


$ sudo lspci -nn | grep NVIDIA
65:00.0 VGA compatible controller [0300]: NVIDIA Corporation GP106GL [Quadro P2000] [10de:1c30] (rev a1)
65:00.1 Audio device [0403]: NVIDIA Corporation GP106 High Definition Audio Controller [10de:10f1] (rev a1)


重启系统
$ sudo reboot

执行下面的命令，查看驱动的安装状态
$ sudo nvidia-smi
$ sudo nvidia-settings


查看NVIDIA版本检验是否安装完成

没重启时
$ nvidia-smi
NVIDIA-SMI has failed because it couldn't communicate with the NVIDIA driver. Make sure that the latest NVIDIA driver is installed and running.



ref:
https://blog.csdn.net/flowrush/article/details/80254301





========================================
怎么入门深度学习？至少必须会 pytorch
----------------------------------------
1.简单分成几步
基础：Python 、 Numpy、 Pandas 、 Pytorch
理论：简单了解 MLP，CNN 、 Transformer 为主，再考虑 RNN 的基础
模型：AlexNet、 VGG 、 ResNet、 Yolo 、 SSD 是里任选两个自己手写代码，标记数据、训练一下就好了。如果你真的有志于此，那我建议你手写完整的 Transformer 模型，这现在看是未来的所有。

完成上面几步，这样你就是一个不错的入门选手了。再看看书，就是一个只需要你部就班就能成为高手的路！

(2)在深度学习框架方面，PyTorch 和 TensorFlow 是两个主流选择。
* PyTorch：由于其易于理解的编程风格和动态计算图，PyTorch 在研究领域特别受欢迎。它的直观性使得开发新算法和实验新想法变得简单。

* TensorFlow：相比之下，TensorFlow 在工业界更为流行，尤其是在需要大规模部署的场景中。TensorFlow 提供了一个全面的生态系统，包括用于生产部署的工具和资源。

这其中 Pytorch 是必须的，这东西有无数人的无数论文都是基于它的，最新的东西如果你不会 Pytorch，那肯定是不成的。



2. 理论（完全以编码为假想条件）
简单了解 MLP，CNN 、 Transformer ，再考虑 RNN 的基础。至少你要懂下面的东西。

(1) 多层感知机（MLP）：
基础：MLP是神经网络的最基本形式，包含输入层、若干隐藏层和输出层。每一层都由一系列神经元组成，这些神经元与上一层的每个神经元相连接。

(2)卷积神经网络（CNN）：
核心：CNN在图像处理和计算机视觉领域非常成功。它的关键在于使用卷积层来自动和有效地提取图像的特征。
结构：一个典型的CNN包括卷积层、池化层和全连接层。卷积层通过卷积核提取局部特征；池化层则负责降低特征的空间维度；最后，全连接层用于分类或回归任务。
应用：CNN广泛应用于图像识别、视频分析和自然语言处理等领域。


(3)Transformer：
创新：Transformer模型在自然语言处理领域引起了革命。其核心是“自注意力”（Self-Attention）机制，允许模型在处理序列数据时关注序列中的任何部分。
优势：与RNN和LSTM相比，Transformer在处理长距离依赖方面更有效，且计算更可并行化。
应用：它是许多现代NLP模型的基础，如BERT、GPT、 LLaMa系列等。


(4)循环神经网络（RNN）：
特点：RNN是处理序列数据的一种经典方法。它通过在序列的每个步骤传递隐藏状态来保存过去信息。
局限：标准的RNN在处理长序列时遇到梯度消失或爆炸问题，这限制了其在长序列上的性能。
改进：LSTM（长短期记忆）和GRU（门控循环单元）是改进的RNN变体，设计用来解决这些问题。



3. 模型与实际操作
在深度学习和计算机视觉领域，AlexNet、VGG、ResNet、Yolo和SSD都是极为重要的模型，各自代表了图像识别和对象检测领域的重要进展。为了深入理解这些模型的工作原理和应用，手写代码并亲自进行数据标记和训练是一个非常有效的学习方法。

(1) AlexNet 和 VGG 是两个很好的起点：
AlexNet：作为深度学习历史上的里程碑，AlexNet 在2012年的ImageNet挑战赛中大放异彩。它的结构相对简单，包含5个卷积层和3个全连接层。手写AlexNet并在数据集上进行训练，可以帮助你理解卷积神经网络的基本构件和工作原理。

VGG：VGG网络以其简单和高效著称，特别是VGG-16和VGG-19。这些网络通过重复使用相同大小的小卷积核，展示了深层网络结构的强大能力。尝试手写VGG并训练它，将加深你对网络深度如何影响性能和特征学习的理解。


(2) 手写Transformer模型：
如果你对深入学习人工智能有长远的打算，那么手写完整的Transformer模型将是一个有意思的挑战。Transformer自2017年被提出以来，已经成为自然语言处理领域的核心模型，并且其影响力也扩展到其他领域如计算机视觉和音频处理。

Transformer模型的核心在于自注意力机制，这使得模型能够在处理序列数据时捕捉长距离依赖关系。此外，Transformer的层次结构和并行处理能力使其在处理大型数据集时更为高效。

手写Transformer模型不仅需要理解其复杂的架构和自注意力机制，还需要深入掌握如何有效地训练这样的大型模型。这个过程将极大地提升你在深度学习领域的理解和技能。

如果你懂了前三点，那你的 Transformer 的理解真是很到位了。

无论选择哪种模型，关键是通过实际操作来深入理解模型的工作原理。这包括了解模型的架构、学习如何处理和准备数据、了解训练过程以及如何调整参数以获得最佳性能。这种实践经验对于深入理解深度学习的原理和发展是非常宝贵的。

同时还有最重要的一点！如果你不看书，那还是对于这些是一个片面的认知，所以坚持 看书吧。李沐的《Dive into Deep Learning》、或者《understanding deep learning》从头看到尾就好了，但是不动手是真的不成啊。




========================================
pytorch 怎么学？环境 + 图书/视频资料
----------------------------------------
1. 学习哪个版本？
@J3 server
$ jupyter notebook list
Currently running servers:
http://10.10.117.158:8201/?token=f516dc29a0ef855f6b16d050fdbcc5c423e7b4dcfaf73fc7 :: /picb/jinlab/wangjl/web/docs/code/learnDL

$ python3 -V
Python 3.10.14

$ pip3 list | grep -in torch
184:torch                        2.2.2


PyTorch是一个流行的深度学习框架，由Facebook开发。它提供了动态计算图和强大的GPU加速，使得模型的定义和调试更加直观和便捷。

* 推荐直接看pytorch官网的tutorial即可，在github上面也有对应的example。一定要多动手，多总结，很快即可入门，然后再选择一个自己喜欢的方向深入学习即可。torch相对tf上手还是容易很多的。

* 撸n遍transformer源码，弄懂每一个点，入门的话暂时就够用了。有条件的再去跟一遍李沐的系列课及网站代码。





2.图书目录
(1) PyTorch 2.0 深度学习从零开始学，王晓华 著
https://www.zhihu.com/pub/book/120439544
PyTorch 概述、开发环境搭建
基于 PyTorch 的 MNIST 分类实战、深度学习理论基础、MNIST 分类实战、数据处理与模型可视化
基于 PyTorch 卷积层的分类实战、PyTorch 数据处理与模型可视化、实战 ResNet 卷积网络模型
有趣的 Word Embedding、基于循环神经网络的中文情感分类实战、自然语言处理的编码器
站在巨人肩膀上的预训练模型 BERT、自然语言处理的解码器
基于 PyTorch 的强化学习实战、基于 MFCC 的语音唤醒实战、基于 PyTorch 的人脸识别实战。


(2) PyTorch 深度学习实战，[美]伊莱·史蒂文斯 等著
https://www.zhihu.com/pub/book/120284551
由于像苹果、Facebook 和摩根大通这样的公司都使用 PyTorch，所以当你掌握了 PyTorth，就会拥有更多的职业选择。 本书是教你使用 PyTorch 创建神经网络和深度学习系统的实用指南。它帮助读者快速从零开始构建一个真实示例：肿瘤图像分类器。
本书主要内容： 
1）训练深层神经网络；
2）实现模块和损失函数；
3）使用 PyTorch Hub 预先训练的模型；
4）探索在 Jupyter Notebooks 中编写示例代码。
本书适用于对深度学习感兴趣的 Python 程序员。了解深度学习的基础知识对阅读本书有一定的帮助，但读者无须具有使用 PyTorch 或其他深度学习框架的经验。


(3) 细说 PyTorch 深度学习：理论、算法、模型与编程实现, 凌峰 等著
https://www.zhihu.com/pub/book/120430658
第一篇为基础知识，主要介绍 PyTorch 的基本知识、构建开发环境、卷积网络、经典网络、模型保存和调用、网络可视化、数据加载和预处理、数据增强等内容；
第二篇为高级应用，主要介绍数据分类、迁移学习、人脸检测和识别、生成对抗网络、目标检测、ViT 等内容。本书内容涵盖 PyTorch 从入门到深度学习的各个方面，是一本基础应用与案例实操相结合的参考书。


- 《PyTorch深度学习实战》：入门到进阶介绍了PyTorch的API，还从头到尾做了一个项目。
- 《动手学深度学习·PyTorch》：新版还引入了模型领域的一些最新成果，如Transformer架构。
- 《从零开始大模型开发与微调》：从最近点的卷积神经网络开始讲起，实现了一些经典的网络。再逐步过渡到最新的模型，transformer，bert，chatglm上。
- 如果想补充一些些数学基础，可以看看《机器学习的数学理论》和《深度学习》花书。




3. 入门教程

	1. 教程
	2. 练习
	3. pytorch 60题 （datawhale出品）
	4. 比赛中练习，在没有答案的打榜中学习。（强推）
	5. pytorch模型实现大全（作为练习强推）

概念介绍：https://mp.weixin.qq.com/s/cTVblMQ0EdrMF6Adn6mIHA

(1) 莫烦pytorch系列教程
https://mofanpy.com/tutorials/machine-learning/torch/

莫烦的这套视频一集最长也就15min，大多都是5分钟左右，莫烦哥哥风趣幽默，内容浅显易懂，直接上手，适合对pytorch有个基本了解。一天即可刷完并练习完。

pytorch简介
	- pytorch神经网络基础
	- 建立第一个神经网络
	- 高级神经网络结构
	- 高阶内容

(2) 新手如何入门pytorch？
第一步 github的 tutorials 尤其是那个60分钟的入门。只能说比tensorflow简单许多, 我在火车上看了一两个小时就感觉基本入门了. 另外jcjohnson 的Simple examples to introduce PyTorch 也不错
第二步 example 参考 pytorch/examples 实现一个最简单的例子(比如训练mnist )。
第三步 通读doc PyTorch doc 尤其是autograd的机制，和nn.module ,optim 等相关内容。文档现在已经很完善，而且绝大部分文档都是作者亲自写的，质量很高。
第四步 论坛讨论 PyTorch Forums 。论坛很活跃，而且质量很高，pytorch的维护者(作者)回帖很及时的。

Tutorials
	https://pytorch.org/tutorials/ 60分钟教程，2小时入门
	https://github.com/jcjohnson/pytorch-examples 入门示例
示例 https://pytorch.org/examples/
	https://github.com/pytorch/examples 官方示例
文档 documentation https://pytorch.org/docs/stable/index.html
	https://pytorch.org/docs/master/notes/autograd.html
	https://pytorch.org/docs/stable/nn.html
	https://pytorch.org/docs/stable/optim.html
论坛：https://discuss.pytorch.org/


(3)网友教程：
https://github.com/chenyuntc/pytorch-book


《Pytorch深度学习实践》完结合集：代码完全讲解，循序渐进。
	https://www.bilibili.com/video/BV1Y7411d7Ys/?vd_source=826befc4ac0d0fa3b98deaa3efc7f800

* pytorch官方的60分钟入门pytorch和pytroch官方doc。然后20天吃透Pytorch。
强推这个20天吃透pytorch，深入浅出，把pytorch常用的知识都讲了，看完直接手鲁各类网络
https://www.pytorchmaster.com/




========================================
----------------------------------------


========================================
----------------------------------------





========================================
----------------------------------------





========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------





========================================
----------------------------------------





========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------


========================================
----------------------------------------


