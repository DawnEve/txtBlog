Python3基础详解

There should be one—--and preferably only one –--obvious way to do it.
----摘自The Zen of Python, by Time Peters







========================================
Python模仿强类型 :类型声明
----------------------------------------

Python虽然生产力高，语法强大，具备动态语言的灵活性，但是也正是因为这样，估计每个人写的代码有很大差别，那有没有什么办法尽可能的避免这种情况呢？

在Python3.6之后，推出了"Python类型注释"。



1. 声明方法
name: str="Tom"
age: int=18
price:float=6.66
gender:bool=True

## lists
age_list: List[int]=[18,40,-10]

## Dicts
stu_dict :Dict[int, str]={101:"Tom", 102:"Robin"}


## class 

class Student():
	def __init__(self, name:str, age:int):
		self.name=name
		self.age=age


def getStudentName(student:Student):
	return student.name

s1=Student("Tom", 20)
getStudentName(s1) #'Tom'



## 函数 
def getX() -> str:
	return "XYZ"

getX()





2. test
def setInfo(name: str, age: int):
    print(name.upper(), age)

setInfo("Tom", 'SS20')
## TOM SS20
为什么没有报错呢？



ref:
https://zhuanlan.zhihu.com/p/214365737




========================================
函数探究、高级函数
----------------------------------------




========================================
|-- 不定参数: *args, **argDict
----------------------------------------
python自定义函数中有两中不定长参数，第一种是*name，第二种是**name。加了星号 * 的参数会以元组(tuple)的形式导入，存放所有未命名的变量参数。加了两个星号 ** 的参数会以字典的形式导入。

第一种形式的不定长参数，在传入额外的参数时可以不用指明参数名，直接传入参数值即可，第二种因为返回的是字典，所以传入时需要指定参数名。



1. 一个星号的不定参数

def fnA(a,b,*args):
    print('a=',a)
    print('b=',b)
    print('args=',args)
    print(args[0])

fnA(1,2,3,4,5,6)
#a= 1
#b= 2
#args= (3, 4, 5, 6)

可见，前两个参数传给了a和b，其余的作为一个元组传给了args。
既然是元组，就可以按照元组取用，比如只打印一个值 print(args[0])




2. 两个星号的不定参数

def fnB(a,b,**argsDict):
    print('a=',a)
    print('b=',b)
    print('argsDict=',argsDict)
    print(argsDict['name'])

fnB(1,2,name="旺财", age=3)
#a= 1
#b= 2
#argsDict= {'name': '旺财', 'age': 3}
#旺财



3.根据情况使用吧。

第一种指定参数名字会报错。
fnA(1,2,3,4,5,6, length=100)
## TypeError: fnA() got an unexpected keyword argument 'length'

第二种不指定参数名会报错！



4. 还可以同时使用，注意命名参数要放到最后

def fnC(a, *args, **argDict):
	print(a)
	print(args)
	print(argDict)

fnC(1,2,3,4,5, name="Wangcai", age=3, color='black')
#1
#(2, 3, 4, 5)
#{'name': 'Wangcai', 'age': 3, 'color': 'black'}






========================================
|-- Python的lambda, filter, reduce 和 map
----------------------------------------
https://www.cnblogs.com/reanote/p/python_lambda.html

Lambda操作或者lambda函数是一种创建小型匿名函数的方式，即：函数都没有函数名。这些函数都是投掷(throw-away)函数，即：它们只会在我们需要的地方创建，Lambda函数大部分时间都是与filter(), map() 和 reduce()函数混合使用。Lambda特性被添加到Python是因为Lisp 程序员的强烈要求。



1.Lambda函数通常的语法是十分简单的：
lambda argument_list: expression

参数列表(argument_list)是由逗号分隔的参数列表组成，而上面这个表达式（expression）是一个可以使用这些参数的算术表达式。你能通过把这个函数赋给一个变量来给这个lambda函数一个名字。

下面这个lambda函数的例子返回的是这两个参数的和：
f=lambda x,y:x+y
f(1,2) #3





2.map() 函数
当与map函数混合使用的时候，lambda操作的优势就能体现出来了。

map()是一个带有两个参数的函数：
r = map(func, seq)
第一个参数func是一个函数名，第二个seq是一个序列（如：list)。map()将会这个函数应用在序列seq的每一个元素上，然后返回一个被这个函数func改变后的元素的列表
def add(T):
    return 1+T
temp = (1, 50, 35,9)
rs=map(add, temp)

#打印结果，简写: list(rs)
for i in temp:
    print(next(rs))
#2
#51
#36
#10

使用lambda则可以避免先定义函数：
rs2=map(lambda x:1+x, temp)

map()能够应用多个列表，但这些列表必须有相同的长度。
对列表的下标为0的同时传入，然后下标为1的同时传入，直到n。
a = [1,2,3,4]
b = [17,12,11,10]
c = [-1,-4,5,9]
rs3=map(lambda x,y:x+y, a,b)

list(rs3)
#[18, 102, 113, 14]





3. Filtering 
filter(func, list) 函数提供了一种优雅的方式去把函数func返回值为True的元素过滤出来。

filter(f, l) 需要一个函数f作为它的第一个参数。f返回一个布尔型的值，如：True或者False。这个函数将会应用在列表l的每一个元素上。只有当f返回True的时候，这个列表中的元素才会包含在结果列表中。
a=[1,2,3,4,5]
rs=filter(lambda x:x%2, a) #只要奇数。
list(rs) #[1, 3, 5]
list(filter(lambda x:x%2==0, a)) #只要偶数 [2, 4] 




(2)filter(function or None, iterable) --> filter object
Return an iterator yielding those items of iterable for which function(item) is true. If function is None, return the items that are true.

temp=range(10)
list(temp) #[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

show=filter(lambda x:x%3,temp) #1-10 除以3，则为false的就是为0的被过滤掉了
list(show) #[1, 3, 5, 7, 9]

show=filter(None,temp) #如果第一个参数是None，则返回第二个参数中为true的部分
list(show) #所以0没有了
#[1, 2, 3, 4, 5, 6, 7, 8, 9]


#第一个参数也可以是函数
def odd(x):
    return x%2
show=filter(odd,temp)
list(show) #[1, 3, 5, 7, 9]





4.Reducing a List
函数reduce(func, seq)持续的应用函数func在序列上。它将会返回一个值。

一个序列 seq = [ s1, s2, s3, ... , sn ], 调用reduce(func, seq)的工作像这样：
func(s1,s2)
func(func(s1, s2),s3)
..
直到只剩下一个元素，然后作为reduce的结果返回这个元素

#累加求和
from functools import reduce
reduce(lambda x,y: x+y, [47,11,42,13]) #113
#累加求和2
print( list(range(3)) ) #[0, 1, 2]
reduce(lambda x,y:x+y, range(101)) #5050

#使用reduce来查找一列数字中的最大值
f = lambda a,b: a if (a > b) else b
reduce(f, [47,11,42,102,13]) #102





========================================
|-- Python列表生成式(List Comprehensions)
----------------------------------------
https://www.cnblogs.com/reanote/p/python_list_comprehension.html

列表生成式即List Comprehensions，是Python内置的非常简单却强大的可以用来创建list的生成式。

对于函数map(), filter(), 和reduce()，递推式构造列表（List comprehension）是一个完整的lambda替代者。对于大部分人们，递推式构造列表（List comprehension）的语法更容易被人们掌握。 



#1. 生成1到10.
list(range(1, 11)) #[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

#2. 如果生成1^2,2^2,3^2,...10^2等。可以用循环
L=[]
for i in range(11):
    L.append(i*i)
print(L)
#也可以用列表生成式
[x*x for x in range(11)]
#[0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]



#3. 获取华氏温度
#可以用map和lambda函数
D= [39.2, 36.5, 37.3, 37.8]
F=map(lambda x:(float(9)/5)*x + 32, D)
list(F)
#也可以用列表生成式
[ ((float(9)/5)*x + 32) for x in D ]
#[102.56, 97.7, 99.14, 100.03999999999999]



#4.(if的使用)用递推式构造列表（list comprehension）创建了毕达哥拉斯三元组：
[(x,y,z) for x in range(1,30) for y in range(x,30) for z in range(y,30) if x**2 + y**2 == z**2]
#[(3, 4, 5), (5, 12, 13), (6, 8, 10), (7, 24, 25), (8, 15, 17), (9, 12, 15), (10, 24, 26), (12, 16, 20), (15, 20, 25), (20, 21, 29)]


### 把list中所有的字符串变成小写：
#字符串时
L = ['Hello', 'World', 'IBM', 'Apple']
[x.lower() for x in L]
# 有非字符串元素时，由于非字符串没有lower()方法，会报错，所以需要用if过滤出字符串。
L1 = ['Hello', 'World', 18, 'Apple', None]
[s.lower() for s in L1 if isinstance(s, str)] #['hello', 'world', 'apple']








#5.两个集合的交叉乘积
colours = [ "red", "green"]
things = [ "house", "car", "tree" ]
coloured_things = [ (x,y) for x in colours for y in things ]
coloured_things
#[('red', 'house'),  ('red', 'car'),('red', 'tree'), ('green', 'house'), ('green', 'car'), ('green', 'tree')]

#或者字符串全排列
[m + n for m in 'ABC' for n in 'XYZ']
# ['AX', 'AY', 'AZ', 'BX', 'BY', 'BZ', 'CX', 'CY', 'CZ']




#6.递推式构造生成器(Generator Comprehension)
x=(x **2 for x in range(20))
print(x) #<generator object <genexpr> at 0x7fd9ec94a938>
list(x)



################
#更高级的例子
################
1.列出当前目录下的所有文件和目录名，可以通过一行代码实现：
import os
print(os.getcwd()) #当前工作目录
[d for d in os.listdir('.')] # os.listdir可以列出文件和目录



2.同时迭代出字典的key和value
d = {'x': 'A', 'y': 'B', 'z': 'C' }
#常规是用循环
for k, v in d.items():
    print(k, '=', v)
#x = A
#y = B
#z = C

#也可以用列表生成式
[x+"="+y for x,y in d.items()]
#['x=A', 'y=B', 'z=C']



3.利用埃拉托斯特尼筛法(Sieve of Eratosthenes)计算1到100的质数：
import math
n=100
noprimers = [j for i in range( 2, int(math.sqrt(n))+1 ) for j in range(i*2, n, i)]
print(noprimers)
primers=[x for x in range(2,n) if x not in noprimers]
print(primers)
##[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

使用[]在noprimers中会有很多重复，使用set可以解决这个问题。
noprimers = {j for i in range( 2, int(math.sqrt(n))+1 ) for j in range(i*2, n, i)}
其他代码不变。







========================================
|-- Python中的装饰器(decorator)
----------------------------------------
http://www.cnblogs.com/Jerry-Chou/archive/2012/05/23/python-decorator-explain.html
https://www.runoob.com/w3cnote/python-func-decorators.html


我的测试代码: https://github.com/DawnEve/learngit/tree/master/Python3/pythonCodeGit/day4-Fn-adv/decorator_demo dev分支




想理解Python的decorator首先要知道在Python中函数也是一个对象，所以你可以
	将函数赋值给变量
	将函数当做参数
	返回一个函数

函数在Python中给变量的用法一样也是一等公民，也就是高阶函数(High Order Function)。所有的魔法都是由此而来。



1，起源
我们想在函数login中输出调试信息，我们可以这样做

def login():
    print('in login')
 
def printdebug(func):
    print('enter the login')
    func()
    print('exit the login')
 
printdebug(login)

这个方法讨厌的是每次调用login时，都通过printdebug来调用，但毕竟这是可行的。








2，让代码变得优美一点
既然函数可以作为返回值，可以赋值给变量，我们可以让代码优美一点。

def login():
    print('in login')
 
def printdebug(func):
    def __decorator():
        print('enter the login')
        func()
        print('exit the login')
    return __decorator  #function as return value
 
debug_login = printdebug(login)  #function assign to variable
debug_login()  #execute the returned function

这样我们每次只要调用debug_login就可以了，这个名字更符合直觉。我们将原先的两个函数printdebug和login绑定到一起，成为debug_login。这种耦合叫内聚:-)。

或者更简单粗暴的覆盖掉原函数：
login = printdebug(login) 
login()










3，让代码再优美一点
printdebug和login是通过debug_login = printdebug(login)这一句来结合的，这一句似乎也是多余的，能不能在定义login是加个标注，从而将printdebug和login结合起来？

上面的代码从语句组织的角度来讲很难再优美了，Python的解决方案是提供一个语法糖(Syntax Sugar)，用一个@符号来结合它们。

def printdebug(func):
    def __decorator():
        print('enter the login==')
        func()
        print('exit the login--')
    return __decorator  
 
@printdebug  #combine the printdebug and login
def login():
    print('in login')

# @decoratorXX 仅仅是以下语句的简写
# login = decoratorXX(login) #省略了赋值这一句。

login()  #make the calling point more intuitive

可以看出decorator就是一个：使用函数作参数并且返回函数的函数。通过改进我们可以得到：
	更简短的代码，将结合点放在函数定义时
	不改变原函数的函数名

在Python解释器发现login调用时，他会将login转换为printdebug(login)()。也就是说真正执行的是__decorator这个函数。


更高级的应用：
http://stackoverflow.com/questions/739654/how-to-make-a-chain-of-function-decorators-in-python/1594484#1594484
如带参数，给装饰器加上装饰器。






(4) 这时，装饰器装饰之后，函数名字改变了，这不是我们期望的。

print(login.__name__) #__decorator

# 怎么保证函数名字在装饰器之后不变呢？
################
print('\n使用 functools.wraps');
print('=='*10)

from functools import wraps

def printdebug2(func):
    @wraps(func)
    def __decorator():
        print('enter the login3-')
        func()
        print('exit the login3-')
    return __decorator  #function as return value
#2. 定义被装饰函数
@printdebug2
def login():
    print('in login')
#3. 执行装饰后的函数
login()
print('-'*10)
print('function name: ',login.__name__) #login 返回的是被装饰函数名本身








4. 带参数的函数怎么写装饰器？
#蓝本规范:
#@wraps接受一个函数来进行装饰，并加入了复制函数名称、注释文档、参数列表等等的功能。这可以让我们在装饰器里面访问在装饰之前的函数的属性。

from functools import wraps
def decorator_name(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        if not can_run:
            return "Function will not run"
        return f(*args, **kwargs)
    return decorated
 
@decorator_name
def func():
    return("Function is running")
 
can_run = True
print(func())
# Output: Function is running
 
can_run = False
print(func())
# Output: Function will not run



##############  使用场景
## 授权(Authorization)
from functools import wraps
 
def requires_auth(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        auth = request.authorization
        if not auth or not check_auth(auth.username, auth.password):
            authenticate()
        return f(*args, **kwargs)
    return decorated
#















5. 带参数的装饰器？
//todo








refer:
1.
[Python入门及进阶笔记]Python-decorator装饰器小结 【深入浅出】
http://blog.csdn.net/wklken/article/details/8118942

2.
decorator注意事项
https://my.oschina.net/laugh2last/blog/493393
	python2.4及其以上版本有此功能
	装饰器使代码执行的效率变低了
	一旦一个函数已经被装饰好了，就定下来了，不能变了
	装饰器decorator在函数之间包装起来了，比较难debug
python自己也提供了几个装饰器，property，staticmethod等。Django用装饰器来管理缓存和视图权限，能够把python的decorator玩透，将会帮你解决很多事情。

3.
http://thecodeship.com/patterns/guide-to-python-function-decorators/
http://blog.csdn.net/azhao_dn/article/details/7638882
http://www.cnblogs.com/vamei/archive/2013/02/16/2820212.html



========================================
I/O - 文件读写 
----------------------------------------


如果文件很小，read()一次性读取最方便；
如果不能确定文件大小，反复调用read(size)比较保险；
如果是配置文件，调用readlines()最方便：

for line in f.readlines():
    print(line.strip()) # 把末尾的'\n'删掉
	
# 默认读写方式是GBK，打开显示是ansi。也可以指定encoding='utf-8'
with open("C:\\Tools\\test.txt", 'r', encoding='GBK') as f:
    print(f.read())


文件打开方式：
 - r 以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。
 - rb 以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。
 - r+ 打开一个文件用于读写。文件指针将会放在文件的开头。
 - rb+ 以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。
 - w 打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。
 - wb 以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。
 - w+ 打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。
 - wb+ 以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。
 - a 打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。
 - ab 以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。
 - a+ 打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。
 - ab+ 以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。


小结

在Python中，文件读写是通过open()函数打开的文件对象完成的。使用with语句操作文件IO是个好习惯。






========================================
os 包 -- os.path 操作目录: 文件夹是否存在、创建文件夹
----------------------------------------
1. os包简介
Python 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:01:18) [MSC v.1900 32 bit (Intel)] on win32

python在安装的时候，就自带了很多模块，我们把这些模块称之为标准库，其中，有一个是使用频率比较高的，就是 os 。这个库中方法和属性众多，有兴趣的看官可以参考

官方文档：https://docs.python.org/3.5/library/os.html，或者在交互模式中，用dir(os)看一看。
Source code: Lib/os.py

代码如下:
>>> import os   #这个动作很重要，不能缺少 
>>> dir(os) 
['F_OK', 'MutableMapping', 'O_APPEND', 'O_BINARY', 'O_CREAT', 'O_EXCL', 'O_NOINHERIT', 'O_RANDOM', 'O_RDONLY', 'O_RDWR', 'O_SEQUENTIAL', 'O_SHORT_LIVED', 'O_TEMPORARY', 'O_TEXT', 'O_TRUNC', 'O_WRONLY', 'P_DETACH', 'P_NOWAIT', 'P_NOWAITO', 'P_OVERLAY', 'P_WAIT', 'R_OK', 'SEEK_CUR', 'SEEK_END', 'SEEK_SET', 'TMP_MAX', 'W_OK', 'X_OK', '_DummyDirEntry', '_Environ', '__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__','_dummy_scandir', '_execvpe', '_exists', '_exit', '_get_exports_list', '_putenv', '_unsetenv', '_wrap_close', 'abort', 'access', 'altsep', 'chdir', 'chmod', 'close', 'closerange', 'cpu_count', 'curdir', 'defpath', 'device_encoding', 'devnull', 'dup', 'dup2', 'environ', 'errno', 'error', 'execl', 'execle', 'execlp', 'execlpe', 'execv', 'execve', 'execvp', 'execvpe', 'extsep', 'fdopen', 'fsdecode','fsencode', 'fstat', 'fsync', 'ftruncate', 'get_exec_path', 'get_handle_inheritable', 'get_inheritable', 'get_terminal_size', 'getcwd', 'getcwdb', 'getenv', 'getlogin', 'getpid', 'getppid', 'isatty', 'kill', 'linesep', 'link', 'listdir', 'lseek', 'lstat', 'makedirs', 'mkdir', 'name', 'open', 'pardir', 'path', 'pathsep', 'pipe', 'popen', 'putenv', 'read', 'readlink', 'remove', 'removedirs', 'rename', 'renames', 'replace', 'rmdir', 'scandir', 'sep', 'set_handle_inheritable', 'set_inheritable', 'spawnl', 'spawnle', 'spawnv', 'spawnve', 'st', 'startfile', 'stat', 'stat_float_times', 'stat_result', 'statvfs_result', 'strerror', 'supports_bytes_environ', 'supports_dir_fd', 'supports_effective_ids', 'supports_fd', 'supports_follow_symlinks', 'symlink', 'sys', 'system', 'terminal_size', 'times', 'times_result', 'truncate', 'umask', 'uname_result', 'unlink', 'urandom', 'utime', 'waitpid', 'walk', 'write']

在这么多的东西中，本讲只关注os.path，真所谓“弱水三千，只取一瓢”，为什么这么偏爱它呢？因为它和前面已经讲过的文件操作进行配合，就能够随心所欲操作各个地方的文件了。
关于os.path的属性也不少，依然可以用dir(os.path)查看：
代码如下:




(2) os.path 模块

>>> dir(os.path) 
['__all__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', '_get_bothseps', '_getfinalpathname', '_getfullpathname', '_getvolumepathname', 'abspath', 'altsep', 'basename', 'commonpath', 'commonprefix', 'curdir', 'defpath', 'devnull', 'dirname', 'exists', 'expanduser', 'expandvars', 'extsep', 'genericpath', 'getatime', 'getctime', 'getmtime', 'getsize', 'isabs', 'isdir', 'isfile', 'islink', 'ismount', 'join', 'lexists', 'normcase', 'normpath', 'os', 'pardir', 'pathsep', 'realpath', 'relpath', 'samefile', 'sameopenfile', 'samestat', 'sep', 'split', 'splitdrive', 'splitext', 'splitunc', 'stat', 'supports_unicode_filenames', 'sys']

这么多属性，看官可以用help()逐个查看有关信息，并了解其使用方法。下面列出常见的几个使用方法，为看官减轻一点阅读英文的障碍，不过，如果看官英语足够好，请直接看原文档。就像这样：
代码如下:

>>> help(os.path.split)
Help on function split in module ntpath:

split(p)
    Split a pathname.

    Return tuple (head, tail) where tail is everything after the final slash.
    Either part may be empty.

以下将一些典型举例说明：

特别说明，下面的所有操作，均是进入到如下的目录（C:\python_data）中进行的。
代码如下:
>>> import os.path
>>> os.path.abspath('1.py')
'C:\\python_data\\1.py'

文件 1.py 是否真实存在上述路径中，都能得到该文件的相对该文件夹的绝对路径。
这里不妨理解为，如果要建立这个文件，它即将被放在那个位置。


但是，如何区别文件是否存在于这个目录中？
>>> os.path.isfile('1.py')
True
>>> os.path.isfile('100.py') #不存在的文件
False



分开目录和文件名
>>> pt=os.path.abspath('1.py')
>>> pt
'C:\\python_data\\1.py'
>>> os.path.split(pt)
('C:\\python_data', '1.py')

>>> path,filename=os.path.split(pt)
>>> path
'C:\\python_data'
>>> filename
'1.py'



os.path.split(),参数是目录加文件名，就可以将路径和文件名分开。其实，我看这个功能不是很智能，你看
>>> os.path.split('/home/wjl')
('/home', 'wjl')
>>> os.path.split('/home/wjl/')
('/home/wjl', '')
它就是将最后一组认为是文件名了，即最后一个/后面的就是文件名，所以第二个实验中，文件名是空了。是不是有点傻呢？

同样，参数中的文件或者目录，不一定是你的电脑中真实存在的，请看：
>>> os.path.split('/home/wjl/a.gif')
('/home/wjl', 'a.gif')
只要符合目录书写结构，就可以分解了。该命令不关心这个文件或者路径是否真实存在。




有另外两个属性，是os.path.split()的分别执行，即可以分别获得路径和文件名，这样让操作更简单了。
>>> os.path.dirname('/home/wjl/a.gif')
'/home/wjl'
>>> os.path.basename('/home/wjl/a.gif')
'a.gif'


判断 - 路径是否存在
前面稍微提到了os.path.isfile()可以用来判断一个文件是否存在，那么判断目录路径是否存在，可否？可：
>>> os.path.exists('d:/R_code')
True
>>> os.path.exists('d:/R_code2')
False



应用：python在创建文件之前检查目录是否存在，若不存在则创建目录。下面是最优实现：
import os
if not os.path.exists(directory):
    os.makedirs(directory)
这里要用os.makedirs()方法，这个方法可以创建多层级的目录




组合路径
将两个或多个对象组合起来，是常见的事情，那么如何将多个路径组合呢？如下：
>>> os.path.join("/home/python","/BasicsPython","226.md")
'/BasicsPython\\226.md'
>>> os.path.join("/home/python","./BasicsPython","226.md")
'/home/python\\./BasicsPython\\226.md'
不同对象之间的分隔符是按照操作系统选择的。
特别提醒，第一个例子中属性的返回值，将第一个绝对路径忽略。







========================================
|-- glob 包: 返回所有文件名, 类似shell ls
----------------------------------------

1. glob 包

import glob
help(glob.glob)
glob.glob("/home/wangjl/data/*.pdf")

输出: 
['/home/wangjl/data/03_dotPlot.pdf',
 '/home/wangjl/data/02_DoHeatmap.pdf',
 '/home/wangjl/data/01_cell_cluster-large.pdf',
 '/home/wangjl/data/01_cell_cluster.pdf',
 '/home/wangjl/data/02_dotPlot.pdf']
#

如果想获取文件名，则可以替换掉前面的路径
for w in arr:
	w=w.replace("/home/wangjl/data/", "", 1)
#






========================================
|-- 设置和查看工作目录
----------------------------------------
1.设置工作目录
https://bbs.csdn.net/topics/390534850
path="C:\\Tools"
os.chdir(path)


2.自动设置当前运行py文件所在目录为工作目录
import os,sys
#sys.argv[0] 就是脚本自身路径
os.chdir(os.path.dirname(sys.argv[0]))
//todo


3.查看工作目录
import os
os.getcwd()



========================================
|-- python获取环境变量 os.environ 模块：从python获取环境参数的值
----------------------------------------
官方的解释，environ是一个字符串所对应环境的映像对象。这是什么意思呢？举个例子来说，environ[‘HOME’]就代表了当前这个用户的主目录。

1. 对于Ubuntu 
>>> import os 
>>> dict(os.environ).keys()
dict_keys(['CONDA_SHLVL', 'LC_ALL', 'LS_COLORS', 'CONDA_EXE', 'SSH_CONNECTION', 'LESSCLOSE', 'LANG', 'OLDPWD', 'S_COLORS', 'LLVM_CONFIG', '_CE_M', 'XDG_SESSION_ID', 'USER', 'PWD', 'HOME', 'CONDA_PYTHON_EXE', 'SSH_CLIENT', 'TMUX', 'XDG_DATA_DIRS', '_CE_CONDA', 'SSH_TTY', 'LC_TYPE', 'MAIL', 'TERM', 'SHELL', 'TMUX_PANE', 'SHLVL', 'LANGUAGE', 'LOGNAME', 'DBUS_SESSION_BUS_ADDRESS', 'XDG_RUNTIME_DIR', 'PATH', 'LESSOPEN', '_'])

>>> os.environ['PWD']
'/data/wangjl/ATAC/fq'

>>> os.environ['HOME']
'/home/wangjl'

>>> os.environ['LANGUAGE']
'en_US.UTF-8'

>>> os.environ['USER']  #当前用户
'wangjl'


# 设置一个临时的变量
>>> os.environ.get("dog", "dog1")
'asdsad'
# 设置
>>> os.environ["dog"]="this is not a dog"
>>> os.environ.get("dog", "dog1")
'this is not a dog'


# 修改
os.environ["PWD"] = "test"
 
# 删除
del(os.environ["dog"])

# 检查
dict(os.environ).keys()



2. shell 定义的系统变量，想变成环境变量，必须使用 export关键字。
(1)测试发现，在shell 中交互式添加的变量，还是在 .bashrc中定义的变量，都无法在 os.environ 中获取。

$ vim ~/.bashrc
添加一行 
wjl="wangjl002"
$ source ~/.bashrc
$ echo $wjl
wangjl002


再进入 python 
$ python3 
>>> import os 
>>> os.environ['wjl']
KeyError: 'wjl'
还是找不到这个变量。



(2) 使用 export 暴露变量

quit() 退出python，在shell 添加 $ export wjl
再进入py,
这时候能找到了。
>>> os.environ['wjl']
'wangjl002'










========================================
Python yield 使用浅析：生成器 generator
----------------------------------------
1. 带有 yield 的函数在 Python 中被称之为 generator（生成器），何谓 generator ？

(1) 'yield' 必须在函数内
for i in range(0,5):
    yield i 
# SyntaxError: 'yield' outside function



(2)我们先抛开 generator，以一个常见的编程题目来展示 yield 的概念。

def fn1():
    for i in range(0,3):
        print(i)
fn1()
#0
#1
#2

仅仅把 print(i) 改为了 yield i。

def fn1():
    for i in range(0,3):
        yield(i) 
		#yield i  # 两种写法效果一样
x1=fn1()
x1
# <generator object fn1 at 0x7f6fec0c80f8> 这样x1就是一个生成器对象了。

可以先把yield看做return，就是在程序中返回某个值，返回之后程序就不再往下运行。



(3) 怎么输出具体值呢？
for x in x1:
    print(x)
#0
#1
#2

或者使用 next(g)
x2=fn1()
print( next(x2) )
print( x2.send(None) )
print( next(x2) )
print( next(x2) )
0
1
2
如果最后一个也输出完了，则抛出异常 StopIteration: 





ref:
Python中的yield：迭代器和生成器：http://www.cnblogs.com/tqsummer/archive/2010/12/27/1917927.html




========================================
命令行启动py脚本时的参数传入
----------------------------------------
1.基础版本
(1)脚本内容 sayID.py
#!/usr/bin/env python3

import sys
print(sys.argv)
#print(sys.argv[-1])

def test():
        args=sys.argv
        print("From function test()")

if __name__=='__main__':
        test()

(2)测试结果
1)直接传递参数
$ ./sayID.py abc.txt
['./sayID.py', 'abc.txt']
From function test()

2)传入文本中的参数
$ cat > id.txt
c1-1
c2-2
c2-3
c3-1
^C

$ cat id.txt | ./sayID.py
['./sayID.py']
From function test()

$ cat id.txt | xargs ./sayID.py
['./sayID.py', 'c1-1', 'c2-2', 'c2-3', 'c3-1']
From function test()

还是只传入一个参数好了。
然后通过Linux循环，提交后台运行。




2. 改进版本1:从命令行传入cellID，然后后续使用该变量
(1)代码
#!/usr/bin/env python3

import sys

cellId=""
if __name__=='__main__':
        args=sys.argv
        assert len(args)>=2, 'please input the Cell ID'
        print(args[1])
        cellId=args[1]


print("The cell file is : ",cellId+".bed") #这里依旧可以使用

(2)测试结果
$ ./sayID.py c12-01
c12-01
The cell file is :  c12-01.bed

$ ./sayID.py c12-03
c12-03
The cell file is :  c12-03.bed

符合预期





========================================
python数组、列表、字典、集合等的操作
----------------------------------------
1.列表
https://blog.csdn.net/litao_243/article/details/80484082

sm = ['cat','dog','bat','spider']
sm.append('fox') #结尾添加元素
sm.insert(2，'fox') #在位置2插入元素




2.集合的添加。集合能保证唯一性。
a=set() #新建空集合
a.add(3)
a

sm = {'cat','dog','bat','spider'}
sm.add('fox')


========================================
|-- 字典遍历的几种方法（for in 用法）
----------------------------------------
1、遍历key值，value值（下面写法完全等价）：
a = {'a': '1', 'b': '2', 'c': '3'}

方式一：
for key in a:
    print(key+':'+a[key])

方式二：
for key in a.keys():
    print(key+':'+a[key])

方式三：
for key,value in a.items():
    print(key+':'+value)

方式四：
for (key,value) in a.items():
    print(key+':'+value)
打印结果：
a:1
b:2
c:3



2、遍历value值：
for value in a.values():
    print(value)
打印结果：
1
2
3



3、遍历字典项
for kv in a.items():
    print(kv)
打印结果：
('a', '1')
('b', '2')
('c', '3')








========================================
文件头部惯例：python3路径和utf-8编码声明
----------------------------------------

#!/usr/bin/python3
# -*- coding: utf-8 -*-

import os

if __name__=='__main__':
    print('Parent process %s.' % os.getpid())



========================================
|-- python如何使用base64、base32、base16编码解码
----------------------------------------
1.Base64编码转换 简介
https://www.qqxiuzi.cn/bianma/base64.htm



2.ZG9uZ3dlaW1pbmdAZG91YmFuLmNvbQ== 代表一个邮箱？
#base32解码
import base64
print base64.b32decode("输入要解密的密文")

#base64解码
import base64
print(base64.b64decode("ZG9uZ3dlaW1pbmdAZG91YmFuLmNvbQ==") )
## b'dongweiming@douban.com'



3.base64编码
>>> print(base64.b64encode(b'I love you'))
## b'SSBsb3ZlIHlvdQ=='


4.其他就是把64换成32或16即可。


refer:
https://blog.csdn.net/pdsu161530247/article/details/74840422
https://blog.csdn.net/just_h/article/details/72795088



========================================
|-- Python3-中把图片进行-base64-编码
----------------------------------------
# -*- coding: utf-8 -*-
# https://blog.csdn.net/CoderPai/article/details/80222947

import base64

#输入图片路径，返回突变的base64编码字符串
def getBase64ByImg(ImgFile):
    with open(ImgFile,"rb") as f:
        # b64encode是编码，b64decode是解码
        base64_data = base64.b64encode(f.read())
        # base64.b64decode(base64data)
        img_base64=str(base64_data,'utf-8') # 重新编码数据
        #print(base64_data)
        return img_base64;

img_base64=getBase64ByImg(r"C:\Users\admin\Desktop\blog_pics\英语读报logo\\lotus_ZH-CN12081917194_1920x1080.jpg")

#前端html中如何直接调用base64编码呢？
#<img src="data:image/jpg;base64,这里是base64的编码"/>
print("<img src='data:image/jpg;base64,%s'>" % (img_base64))

#结果保存为 xx.html 文件，用浏览器打开就能看到图片了。



========================================
休眠随机时间、时间戳、耗时分析、获取当前日期和时间
----------------------------------------
1.显示时间戳
(1)简单写法
#1
import time
time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()) 
#'2018-09-27 21:15:01'




#2
time.strftime("%Y%m%d-%H%M%S", time.localtime()) 
##'20190517-140223'

例:
import time
start=time.time();

#do sth;
time.sleep(1.45)

timeString=time.strftime("%Y%m%d-%H%M%S", time.localtime());
print('耗时',round(time.time()-start,2),'s; ', timeString, sep='')
# 耗时1.46s; 20190929-110648





#3
import datetime
now_time = datetime.datetime.now()
print(now_time) #2019-06-26 15:40:58.101466







(2)复杂写法
import time

#返回时间戳
def getDateTimeStamp():
    def t(d): #不够两位则补齐两位
        if(d<10):
            return "0"+str(d)
        return str(d)
    year = time.localtime().tm_year
    month = time.localtime().tm_mon
    day = time.localtime().tm_mday
	#
    hour = time.localtime().tm_hour
    minute = time.localtime().tm_min
    second = time.localtime().tm_sec
	#
    rs="".join([t(year),t(month),t(day),"-",t(hour),t(minute),t(second)])
    return(rs)

getDateTimeStamp() 
##'20190517-135751'




2. for 循环中显示时间条 / 进度条
#循环中进度条写法1:过去n秒处理m行
import time
time_start=time.time()

fr=open("manyLines.txt","r")

i=0
lines=fr.readlines()
for lineR in lines:
    i=i+1
    #if i>2200:
        #pass;
    #    break;
	#if i% round(len(lines)/10)==0: #限制显示10次进度
    if i%3000 ==0: #进度条和时间
        print("line ", i, ', elapse = ', time.time()-time_start, 'seconds')


#循环中进度条写法2:在某时分秒处理了m行
######################
#进度条
######################
if debug and i% 100000==0:
	tstr=time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
	print( tstr+" Processing line:",i)



3.休眠随机时间
import random,time
rt=1+2*random.random() #0-1之间
print(rt) #[1,3]s
time.sleep(rt)


refer:
https://www.cnblogs.com/general-seven/p/5893744.html




========================================
|-- 时间戳和时间日期的转换、格式化显示时间：在 mysql 的存取
----------------------------------------
在编写代码时，往往涉及时间、日期、时间戳的相互转换。

# 引入模块
import time, datetime



1.str类型的日期转换为时间戳
# 字符类型的时间
tss1 = '2019-6-26 18:40:00'
# 转为时间数组
timeArray = time.strptime(tss1, "%Y-%m-%d %H:%M:%S")
print(1, timeArray )
# timeArray可以调用tm_year等
print(2, timeArray.tm_year)   # 2019
# 转为时间戳
timeStamp = int(time.mktime(timeArray))
print(3, timeStamp)  # 1561545600

# 结果如下
1 time.struct_time(tm_year=2019, tm_mon=6, tm_mday=26, tm_hour=18, tm_min=40, tm_sec=0, tm_wday=2, tm_yday=177, tm_isdst=-1)
2 2019
3 1561545600




2.更改str类型日期的显示格式
tss2 = "2019-6-26 18:40:00"
# 转为数组
timeArray = time.strptime(tss2, "%Y-%m-%d %H:%M:%S")
# 转为其它显示格式
otherStyleTime = time.strftime("%Y/%m/%d %H:%M:%S", timeArray)
print(1, otherStyleTime)  # 2019/06/26 18:40:00

tss3 = "2019/6/26 18:40:00"
timeArray = time.strptime(tss3, "%Y/%m/%d %H:%M:%S")
otherStyleTime = time.strftime("%Y-%m-%d %H:%M:%S", timeArray)
print(2, otherStyleTime)  # 2019-06-26 18:40:00





3.时间戳转换为指定格式的日期
# 使用time
timeStamp = 1561545600
timeArray = time.localtime(timeStamp)
otherStyleTime = time.strftime("%Y--%m--%d %H:%M:%S", timeArray)
print(1, otherStyleTime)   # 2019--06--26 18:40:00
# 使用datetime
timeStamp = 1561545600
dateArray = datetime.datetime.utcfromtimestamp(timeStamp)
otherStyleTime = dateArray.strftime("%Y--%m--%d %H:%M:%S")
print(2, otherStyleTime)   # 2019--06--26 10:40:00






4.获取当前时间并且用指定格式显示
# time获取当前时间戳
now = int(time.time())     # 1533952277
timeArray = time.localtime(now)
print(1,timeArray)
otherStyleTime = time.strftime("%Y--%m--%d %H:%M:%S", timeArray)
print(2, otherStyleTime)

# 结果如下
#time.struct_time(tm_year=2019, tm_mon=6, tm_mday=26, tm_hour=19, tm_min=4, tm_sec=27, tm_wday=2, tm_yday=177, tm_isdst=0)
#2019--06--26 19:04:27


# datetime获取当前时间，数组格式
now = datetime.datetime.now()
print(3, now) #2019-06-26 19:04:27.752980
otherStyleTime = now.strftime("%Y--%m--%d %H:%M:%S")
print(4, otherStyleTime ) #2019--06--26 19:04:27



# 程序进度条，显示当前时间
def time_now():#return time
    curr_time = datetime.datetime.now()
    return curr_time.strftime("%c")

print( "[%s] Start Analysis ..." % time_now() )
输出:
[Fri Jun  4 10:38:46 2021] Start Analysis ...
怎么感觉这个格式怪怪的，年放到最后?





5. mysql 中保存为 bigint。存取时进行转换。

import time
print(time.time(), int(time.time()))
# 1689146143.618874 1689146143


# fn1: stamp int 2 human str
def timeStamp2human(timeStamp):
    timeArray = time.localtime(timeStamp)
    return time.strftime("%Y.%m.%d %H:%M:%S", timeArray)
#test
timeStamp2human(time.time())
# '2023.07.12 15:09:52'



# fn2: human str 2 stamp int
def human2TimeStamp(time_str, time_format):
    time_array = time.strptime(time_str, time_format)
    return int(time.mktime(time_array))
#test
human2TimeStamp("2023.07.12 14:56:22", "%Y.%m.%d %H:%M:%S")
# 1689144982



refer: https://www.cnblogs.com/jfl-xx/p/8024596.html
https://www.jquery-az.com/python-strftime/






========================================
文档编写 Docstring 
----------------------------------------
1. Docstring 是Python文档字符串的英文缩写。Docstring是三重双引号 """ 中，在所定义模块，函数，类或方法的第一个陈述。

(1)这是函数中docstring的最小示例。
 
def foo():
    """This function doesnothing."""
    passprint(foo.__doc__) # Thisfunction does nothing.


函数的文档字符串应包含（一行）对目的的简短介绍，后面的段落描述了函数调用约定。

(2) 样式多种多样，但这是我最喜欢的模板之一：
 
def sum_of_squares(nums):
    """
    Compute the sum of squares  of a list of numbers.
    Args:
        nums (`list` of `int` or  `float`): A `list` of numbers.
    Returns:
        ans (`int` or `float`):  Sum of squares of `nums`.
    Raises:
        AssertionError: If  `nums` contain elements that are not floats nor ints.
    """
    try:
        ans =sum([x**2 for x in nums])
    except:
        raise AssertionError('Input should be a list of floats or ints.')
    return ans

if __name__ == "__main__":
  help(sum_of_squares)
  rs=sum_of_squares([3,4])
  print(rs)


输出:
Help on function sum_of_squares in module __main__:

sum_of_squares(nums)
    Compute the sum of squares  of a list of numbers.
    Args:
        nums (`list` of `int` or  `float`): A `list` of numbers.
    Returns:
        ans (`int` or `float`):  Sum of squares of `nums`.
    Raises:
        AssertionError: If  `nums` contain elements that are not floats nor ints.

25
[Finished in 0.3s]








2. f-string(格式化字符串） 进行输出

(1) 你可能习惯于使用以下命令格式化字符串，即％或者format().
 
name ='World'
'Hello %s' % name        # Hello World
'Hello {}'.format(name)  # Hello World

抛弃它们。 一旦你需要在更长的字符串中打印多个变量，该代码将很快变得混乱且难以理解。无论如何，这些格式化方法并不简单。
 
Python f-string是Python 3.6的引入的改变游戏规则的工具。这是一种可读且高级的字符串格式句法，将表达式嵌入字符串。这是通过语句f'{expr}'完成的; 其中表达式用f字符串内的大括号括起来。表达式在开头带有f，位于单引号之前。
 
示例：
name ='World' print(f'Hello{name}')   # Hello World

可以在大括号内写任何在语法上有效的表达。还可以在表达式中调用函数！

a =[1,2.2,3]
print(f'Sum of squares of {a} is {sum_of_squares(a)}')
# Sum of squares of [1, 2.2, 3] is 14.84




========================================
|-- sphinx: 许多英文世界的Python库文档托管在readthedoc.org上,是如何做的?
----------------------------------------
https://segmentfault.com/q/1010000004977611

1.注册/登陆
2.学习 http://docs.readthedocs.org/en/latest/getting_started.html
3.写文档
4.发微博显摆


sphinx 生成文档
https://www.jianshu.com/p/78e9e1b8553a


readthedocs.org

https://zh-sphinx-doc.readthedocs.io/en/latest/contents.html




========================================
Python错误提示：[Errno 24] Too many open files的分析与解决
----------------------------------------
https://www.cnblogs.com/Antiver/p/8196531.html


通过搜索引擎我找到了关于系统限制的介绍，执行

$ ulimit -n
1024
得到的结果是1024，系统限制为同时打开1024个文件，这显然是太少了。

解决
这个问题的解决方法很简单，直接修改下面的文件
sudo vim /etc/security/limits.conf

最这个文件的最后添加两行代码
* soft nofile 10240
* hard nofile 10240

当然这个数字根据自己的需要进行修改即可，保存后注销重新登录就好了。


查看打开的文件：
$ lsof | grep python|wc

这么多文件，目前不知道怎么处理，除了杀掉后台进程：
ps -ef | grep jupyter
ps -ef查看本机所有的进程；grep xxxx代表过滤找到条件xxxx的项目

kill掉进程
kill -9 具体的PID


========================================
我写过的 bug 总结
----------------------------------------

通过排查 bug ，找原因，举一反三，避免再犯类似错误。




========================================
|-- 数组、字典相关bug
----------------------------------------

1. 剔除数组1中和数组2重合的元素

(1) 错误写法
arr1=["a1", 'a2','a3','a4','a5','a6','a7','a8']
arr2=["a1","a3","a4", "B0"]

print('lenght=', len(arr1))

i=0
for item in arr1:
    i+=1
    if item in arr2:
        print("==>[in 2]", item, item)
        arr1.pop( arr1.index(item));
    print(i, arr1)
print(arr1)
输出:
['a2', 'a4', 'a5', 'a6', 'a7', 'a8']
问题: 为什么 "a4" 没有去掉呢？
原因：

教训：最好不要在循环内操作被循环的数组！

(2) 不好的写法
arr1=["a1", 'a2','a3','a4','a5','a6','a7','a8']
arr2=["a1","a3","a4", "B0"]

i=0
arr1_copy=arr1.copy() #循环内操作的数组，和被循环的数组是独立的
for item in arr1_copy:
    i+=1
    if item in arr2:
        print("==>[in 2]", item, item)
        arr1.pop( arr1.index(item));
    print(i, arr1)
print(arr1)
输出:
['a2', 'a5', 'a6', 'a7', 'a8']

缺点：如果元素 arr1 特别大，比如20G，则copy后占用内存也double。



(3) 优秀的写法
arr1=["a1", 'a2','a3','a4','a5','a6','a7','a8']
arr2=["a1","a3","a4", "B0"]

print('lenght=', len(arr1))

for j in range(len(arr1)-1, -1, -1):
    item = arr1[j]

    if item in arr2:
        print("==>[in 2]", j, item)
        arr1.pop(j);
    print(j, arr1)
print(arr1)

输出:
['a2', 'a5', 'a6', 'a7', 'a8']

倒序输出元素，并在循环内操作。
既快，又节省内存。











========================================
|-- 文件IO bug
----------------------------------------

写文件时候忘了 fw.close() ，
导致结果总是少一部分。
原因：没有关闭文件，则最后buffer中的内容有可能没写入文件。




========================================
----------------------------------------




========================================
----------------------------------------


========================================
----------------------------------------



========================================
----------------------------------------


