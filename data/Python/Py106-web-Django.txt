Django 使用实例


https://www.djangoproject.com/

测试：centOS7.9, python3.10


========================================
Django 框架 课程概述：v5
----------------------------------------

1. django 5 安装与使用
(1) 安装
@J3$ python3 -V
Python 3.10.14

$ pip3 install django

$ pip3 list | grep -in django
47:Django                        5.1.1


(2) 文档
https://docs.djangoproject.com/en/5.1/


(3) Django的优势
最早接触Django，在我心中的形象是：Web框架界的变形金刚
Django的MVT架构、自带ORM、强大的Admin后台管理、自带数据库、还自带开发测试用的服务器、不得不说服务周到。
如此大而全，重量级的Django给开发者提供了超高的开发效率。
淌着Python血液
	MVT三大轮子 连接浏览器 数据库开跑
	一身装备 可变形 可扩展
	多领域 跨平台 协调作战
	自我测试 自我管理 自我保护
	友好 开放 国际化
	装备很多：用户认证 缓存 日志 邮件 组织 分页 消息 序列化 会话 网站地图 静态文件处理 数据验证
Django支持第三方扩展：比如 富文本编辑器  缓存 全文检索  celery等
Django项目布署 用nginx做静态资源代理、负载均衡 可以提高高并发能力。

一些Web项目开发 无论用户量、服务群体、上来总谈高并发。没用户 天天愁高并发问题 还没解决也许项目已经黄了。
项目有了、业务有了、用户有了、性能优化、高并发顺势解决嘛。
当然一些大型网站，在高性能的要求下，框架的各个部分往往都需要自己定制，这样用Django也就没有太大优势。




========================================
Django 入门教程
----------------------------------------

Part 1: Requests and responses
Part 2: Models and the admin site
Part 3: Views and templates
Part 4: Forms and generic views
Part 5: Testing
Part 6: Static files
Part 7: Customizing the admin site
Part 8: Adding third-party packages




========================================
|-- 1.设置app路由，创建第一个视图(view)
----------------------------------------

2. 简单调查软件
入门 https://docs.djangoproject.com/en/5.1/intro/tutorial01/ 

python3 -m django --version #5.1.1
本教程适合 Django 5.1, Python >= 3.10 

path: /home/wangjl/data4/web/docs/dustbin/django/

(1) 生成代码框架：
$ django-admin startproject mysite
$ tree
.
└── mysite     根目录文件夹，可以改名字。
    ├── manage.py  命令行交互工具
    └── mysite     项目的真实Python包，改名字也是内部引用时使用，如 mysite.urls
        ├── __init__.py  空文件，标志这是一个python包
        ├── settings.py 配置文件，参考 https://docs.djangoproject.com/en/5.1/topics/settings/
        ├── urls.py  声明项目的url，是一个目录。参考 https://docs.djangoproject.com/en/5.1/topics/http/urls/
        ├── asgi.py  兼容ASGI服务器入口文件
        └── wsgi.py  兼容WSGI服务器入口文件

2 directories, 6 files


(2) 运行服务 A: 升级 SQLite 版本号
进入外部的mysite/ 文件夹，执行：
$ python3 manage.py runserver
# 报错 django.db.utils.NotSupportedError: deterministic=True requires SQLite 3.8.3 or higher

$ pip3 list | grep -in SQLite #没有

$ sqlite3 --version
3.7.17 2013-05-20 00:56:22 118a3b35693b134d56ebd780123b7fd6f1497668
确实版本不够：CentOS都是老旧版本

https://www.sqlite.org/
	2013-05-20	3.7.17 十年前的版本！
	选上一个版本的最新子版本：2024-04-15	3.45.3
	@J3$ cd ~/Downloads/
	$ wget https://github.com/sqlite/sqlite/archive/refs/tags/version-3.45.3.tar.gz
	$ mv version-3.45.3.tar.gz sqlite-3.45.3.tar.gz
	解压
	$ tar zxvf sqlite-3.45.3.tar.gz
	编译
	$ cd sqlite-version-3.45.3/
	$ ./configure prefix=/home/wangjl/.local/
	$ make -j16  #gcc (GCC) 12.3.0
	
	安装
	$ make install
	Libraries have been installed in:
      /home/wangjl/.local/lib

	/usr/bin/install -c -d /usr/share/tcl8.5/sqlite3
	/usr/bin/install: cannot change permissions of ‘/usr/share/tcl8.5/sqlite3’: No such file or directory
	make: *** [tcl_install] Error 1	报错
	
	使用绝对路径：
	$ pwd #/home/wangjl/Downloads/sqlite-version-3.45.3
	$ ./sqlite3 --version
	3.45.3 2024-04-15 13:34:05 8653b758870e6ef0c98d46b3ace27849054af85da891eb121e9aaa537f1e8355 (64-bit)

	尝试安装新版本失败：
		新建软连接
		$ ln -s /home/wangjl/Downloads/sqlite-version-3.45.3/sqlite3 ~/.local/bin/
		$ which sqlite3
		~/.local/bin/sqlite3
		$ sqlite3 
		SQLite header and source version mismatch
		删除软连接
		$ rm ~/.local/bin/sqlite3
		原来的老版本也不能用了，可能是 ~/.loal/lib 有相关文件？删除或，老版本能继续用了 $ rm ~/.local/lib/libsql*

	新版本使用绝对路径吧：依旧报错 django.db.utils.NotSupportedError: deterministic=True requires SQLite 3.8.3 or higher
	$ alias sqlite3=/home/wangjl/Downloads/sqlite-version-3.45.3/sqlite3
	$ sqlite3 --version
	$ sqlite3
	SQLite version 3.45.3 2024-04-15 13:34:05

	再次试试软连接
	$ ln -s /home/wangjl/Downloads/sqlite-version-3.45.3/sqlite3 ~/bin/


	二进制版: https://www.sqlite.org/2024/sqlite-tools-linux-x64-3460100.zip 没有尝试


另一个解决方法：
https://stackoverflow.com/questions/66380006/django-deterministic-true-requires-sqlite-3-8-3-or-higher-upon-running-python
	$ pip3 install pysqlite3  #0.5.3
	$ pip3 install pysqlite3-binary  #0.5.3.post1

	修改代码
	$ which python3
	~/soft/python3/python-3.10.14/bin/python3
	$ pip3 -V
	pip 24.0 from /home/wangjl/soft/python3/python-3.10.14/lib/python3.10/site-packages/pip (python 3.10)

	$ vim /home/wangjl/soft/python3/python-3.10.14/lib/python3.10/site-packages/django/db/backends/sqlite3/base.py
	# from sqlite3 import dbapi2 as Database # annotation
	from pysqlite3 import dbapi2 as Database # import pysqlite3
	restart django server and it works.


(3) 再次启动服务
$ cd /home/wangjl/data4/web/docs/dustbin/django/mysite
$ python3 manage.py runserver
Error: That port is already in use.

命令行临时修改默认端口:
	$ python3 manage.py runserver 0.0.0.0:8080

查看网页: http://j3.biomooc.com:8080/
	报错：DisallowedHost at /
	Invalid HTTP_HOST header: 'j3.biomooc.com:8080'. You may need to add 'j3.biomooc.com' to ALLOWED_HOSTS.

修改：
	$ vim mysite/settings.py
	# ALLOWED_HOSTS = []
	ALLOWED_HOSTS = ["j3.biomooc.com"]
再次启动：
	$ python3 manage.py runserver 0.0.0.0:8080
浏览器查看，终于显示成功了
	http://j3.biomooc.com:8080/
	The install worked successfully! Congratulations!


(4) 使用配饰文件修改默认端口
$ vim manage.py
if __name__ == '__main__':
    from django.core.management.commands.runserver import Command as Runserver
    Runserver.default_addr="0.0.0.0"
    Runserver.default_port="8080"
    main()

再次启动： $ python3 manage.py runserver
Starting development server at http://0.0.0.0:8080/



(5) 创建poll app
项目下可有很多应用。

$ python3 manage.py startapp polls

查看文件结构：
$ tree polls/
polls/
├── admin.py
├── apps.py
├── __init__.py
├── migrations
│   └── __init__.py
├── models.py
├── tests.py
└── views.py


(6) 写第一个视图

$ vim polls/views.py
from django.http import HttpResponse

def index(request):
    return HttpResponse("Hello, world. You're at the polls index.")

这是最基本的视图。为了在浏览器访问，需要定义URL，就是每个app的 urls.py文件。

$ vim polls/urls.py
from django.urls import path

from . import views

urlpatterns = [
    path("", views.index, name="index"),
]

接着，在项目路径中包含 polls.urls 中的 URL 配置。
$ vim mysite/urls.py
from django.contrib import admin
from django.urls import include, path

urlpatterns = [
    path("polls/", include("polls.urls")),
    path("admin/", admin.site.urls),
]

函数 include() 可以包含其他URL配置文件。
当Django遇到include()时，它会截断URL中匹配到该点的任何部分，并将剩下的字符串发送到包含的URLconf中进行进一步处理。

include()是为了更容易实现插件。
URLconf 在 polls/urls.py，也可以放在 /polls/, 或者 /fun_polls/，或 /content/polls/ 下，或者其他路径跟下。
除了 admin.site.urls 之外的url模式，都可以包含到 include()中。


启动服务: $ python manage.py runserver
浏览器查看：http://j3.biomooc.com:8080/polls/
	Hello, world. You're at the polls index.


(7) 函数 path() 接收四个参数
两个必须：route, view; 两个不是必须的：kwargs, name.

route 参数，字符串，是url模式。有请求过来时，Django从头检索 urlpatterns 列表，返回第一个匹配的。
	模式不搜索 GET 和 POST 的参数和域名。
	https://www.example.com/myapp/, URLconf 搜索 myapp/. 
	https://www.example.com/myapp/?page=3, URLconf 也是搜索 myapp/.

view 参数，当匹配到url时，调用视图函数，HttpResponse 对象是第一个参数，捕获的其余路径是关键词参数。

kwargs 参数，任意关键词参数，字典形式，可传入视图中。

name 参数，给URL命名，防止从其他地方指向它时模糊化。主要是模板中引用它。
	该功能允许你在全局修改url模式时，只需要修改一个文件。







========================================
|-- 2.设置数据库，创建第一个模型(model)
----------------------------------------
1. 数据库设置

(1) mysite/settings.py 模块级别的变量设置

DATABASES 默认是 sqlite3。

真实项目，换成更容易缩放的 PostgreSQL，避免数据库更换带来的头疼问题。

更多数据库配置问题：https://docs.djangoproject.com/en/5.1/topics/install/#database-installation

mysite/settings.py 中
	设置 TIME_ZONE 时区。
	INSTALLED_APPS 中设置激活的实例。一个app可以用在多个项目中，也可以打包和分发到别人的项目中使用。默认包含：
		'django.contrib.admin', admin 站点，马上用到
		'django.contrib.auth', 授权系统
		'django.contrib.contenttypes', 内容类型
		'django.contrib.sessions', 会话框架
		'django.contrib.messages', 消息框架
		'django.contrib.staticfiles', 管理静态文件的框架
	常规这些都会默认包含，以上app有些会用到数据库表格，所以用前要创建表。
	如果不需要哪个模块，可以删除或者注释掉。

(2) 创建数据表
$ python3 manage.py migrate
	Operations to perform:
	  Apply all migrations: admin, auth, contenttypes, sessions
	Running migrations:
	  Applying contenttypes.0001_initial... OK
	  Applying auth.0001_initial... OK
	  Applying admin.0001_initial... OK
	  ...

migrate 命令查找INSTALLED_APPS 中的app，创建对应的表。每个表一条消息。

查看数据库中的表：
	mysql> show tables
	sqlite> .tables


(3) 创建模型
定义模型 - 主要是数据库结构，及额外的metadata。

哲学：
	一个模型，就是一个单一、确定的数据信息。包含必要的域和数据。
	遵循 不要重复自己的原则：Don’t repeat yourself (DRY)。目标是：一处定义，其他地方自动获取。
	
	这包括迁移——例如，与Ruby On Rails不同的是，迁移完全是从你的模型文件中派生出来的，并且本质上是一个历史记录，Django可以通过它来更新你的数据库模式以匹配你当前的模型。

本poll app中，两个模型：问题和选项。
	一个问题包含一个问题和一个公开日期。
	一个选项包含2个域：文本和投票计数。
	每个选项和一个问题关联。

这个概念可以用Python类表示，修改
$ vim polls/models.py
from django.db import models

class Question(models.Model):
    question_text = models.CharField(max_length=200)
    pub_date = models.DateTimeField("date published")

class Choice(models.Model):
    question = models.ForeignKey(Question, on_delete=models.CASCADE)
    choice_text = models.CharField(max_length=200)
    votes = models.IntegerField(default=0)

解释：
	每个model继承自 django.db.models.Model。

	另一个博客app，其中的文章需要的模型包括：
	class Article(models.Model):
		#文章的唯一ID
		article_id = models.AutoFiled(primary_key=True)
		# 文章标题
		title = models.TextField()
		# 文章的摘要
		brief_content = models.TextField()
		# 文章的内容
		content = models.TextFiled()
		# 文章的发布日期
		publish_date = models.DateTimeField(auto_now=True)
	#
	//todo






(4) 激活模型
model 代码很小，但是作用很大：
- 创建数据库结构(CREATE TABLE语句)
- 创建访问 Question 和 Choice 对象的API

还需要通知项目，polls app 安装好了。

* 哲学：Django app是插件式的。一个app可以在多个项目中使用，而不是绑定到某个项目了。

1) INSTALLED_APPS 中添加。
polls/apps.py 中的 PollsConfig 类的写法是：“polls.apps.PollsConfig”

$ vim mysite/settings.py
INSTALLED_APPS = [
    'polls.apps.PollsConfig',  #新添加的
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]


2) 生成迁移文件
$ python3 manage.py makemigrations polls
Migrations for 'polls':
  polls/migrations/0001_initial.py
    + Create model Question
    + Create model Choice

makemigrations 命令告诉Django 你修改了模型(本例中是新增一个模型)，数据库需要改变。
	根据models(也就是 数据库 schema)修改存储方式：硬盘上的数据库文件。
	迁移文件是：polls/migrations/0001_initial.py

自动运行 迁移文件 的命令是 migrate。下面会见到。
	先看看migrate运行时的sql语句，sqlmigrate 命令输入 迁移文件，输出sql语句：
	$ python3 manage.py sqlmigrate polls 0001
	BEGIN;
	--
	-- Create model Question
	--
	CREATE TABLE "polls_question" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "question_text" varchar(200) NOT NULL, "pub_date" datetime NOT NULL);
	--
	-- Create model Choice
	--
	CREATE TABLE "polls_choice" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "choice_text" varchar(200) NOT NULL, "votes" integer NOT NULL, "question_id" bigint NOT NULL REFERENCES "polls_question" ("id") DEFERRABLE INITIALLY DEFERRED);
	CREATE INDEX "polls_choice_question_id_c5b4b260" ON "polls_choice" ("question_id");
	COMMIT;

注释：
* 输出依赖你选择的数据库。
* sqlmigrate 不运行sql语句，仅是打印到屏幕上。

$ python3 manage.py check #检查问题，不做改变，不接触数据库。
System check identified no issues (0 silenced).



3)使用 migrate 创建数据表
$ python3 manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, polls, sessions
Running migrations:
  Applying polls.0001_initial... OK

解释：
* 执行还没执行过的迁移。Django使用数据库 django_migrations 记录执行过的表。
* 迁移文件和强大，修改模型后，不用直接更改数据库即可更新表格。而且不损失数据。
* 后续还会遇到，这里记住修改模型的3个步骤：
	- 修改模型文件 models.py 
	- python3 manage.py makemigrations 创建这些修改的迁移文件: 会提示位置和主要操作
	- python3 manage.py migrate 应用迁移文件，修改数据库

使用迁移文件，是为了依赖版本控制系统记录变化。不但使开发容易，而且方便合作。

> manage.py 的使用文档 https://docs.djangoproject.com/en/5.1/ref/django-admin/





========================================
|-- 使用 Django shell，用于交互式的Python编程
----------------------------------------

为什么需要 Django shell:
	* 临时性操作使用 Django Shell 更加方便
	* 小范围Debug更简单，不需要运行整个项目来测试
	小结：方便开发、方便调试、方便Debug

怎么使用？
	$ python3 manage.py shell

新建文章：
	>>> from blog.models import Article
	>>> a = Article()
	>>> a.title="Test Django shell"
	>>> a.brief_content="Test Django shell - brief"
	...
	>>> a.save() #保存到数据库中

查询:
	>>> articles = Articles.objects.all() #查询数据库中的所有文章
	>>> article = articles[0]
	>>> print(article.title)





(5)调试API：使用 Django shell，用于交互式的Python编程

跳到交互式 python shell 中，感受Django提供的自由的API。
	$ python3 manage.py shell

相比直接使用python 进入交互式，manage.py 设置了 DJANGO_SETTINGS_MODULE 环境变量，
它给 Django 提供了mysite/settings.py 文件的python导入路径。


在shell中探索 数据库 API:
	>>> from polls.models import Choice, Question  # Import the model classes we just wrote.

	# No questions are in the system yet.
	>>> Question.objects.all()
	<QuerySet []>

	# Create a new Question.
	# Support for time zones is enabled in the default settings file, so
	# Django expects a datetime with tzinfo for pub_date. Use timezone.now()
	# instead of datetime.datetime.now() and it will do the right thing.
	>>> from django.utils import timezone
	>>> q = Question(question_text="What's new?", pub_date=timezone.now())

	# Save the object into the database. You have to call save() explicitly.
	>>> q.save()

	# Now it has an ID.
	>>> q.id
	1

	# Access model field values via Python attributes.
	>>> q.question_text
	"What's new?"
	>>> q.pub_date
	datetime.datetime(2012, 2, 26, 13, 0, 0, 775217, tzinfo=datetime.timezone.utc)

	# Change values by changing the attributes, then calling save().
	>>> q.question_text = "What's up?"
	>>> q.save()

	# objects.all() displays all the questions in the database.
	>>> Question.objects.all()
	<QuerySet [<Question: Question object (1)>]>


等等，<Question: Question object (1)>不是这个对象的一个好的表示，修改一下 Question 和 Choice 模型的 __str__()方法。
	当print() python 对象时，默认调用的魔术方法就是该类中的__str__() 方法。

$ vim polls/models.py
from django.db import models

class Question(models.Model):
    # ...
    def __str__(self):
        return self.question_text

class Choice(models.Model):
    # ...
    def __str__(self):
        return self.choice_text

添加 __str__() 方法很重要，不仅开发者看着直接，而且 Django 自动生成admin时也依赖该方法。

给 Question 类添加一个方法：
$ vim polls/models.py
import datetime

from django.db import models
from django.utils import timezone

class Question(models.Model):
    # ...
    def was_published_recently(self):
        return self.pub_date >= timezone.now() - datetime.timedelta(days=1)

时区(time zone)的python处理方式：https://docs.djangoproject.com/en/5.1/topics/i18n/timezones/




再次进入新的python交互模式
$ python3 manage.py shell
	>>> from polls.models import Choice, Question

	# Make sure our __str__() addition worked.
	>>> Question.objects.all()
	<QuerySet [<Question: What's up?>]>

	# Django provides a rich database lookup API that's entirely driven by
	# keyword arguments.
	>>> Question.objects.filter(id=1)
	<QuerySet [<Question: What's up?>]>
	>>> Question.objects.filter(question_text__startswith="What")
	<QuerySet [<Question: What's up?>]>

	# Get the question that was published this year.
	>>> from django.utils import timezone
	>>> current_year = timezone.now().year
	>>> Question.objects.get(pub_date__year=current_year)
	<Question: What's up?>

	# Request an ID that doesn't exist, this will raise an exception.
	>>> Question.objects.get(id=2)
	Traceback (most recent call last):
		...
	DoesNotExist: Question matching query does not exist.

	# Lookup by a primary key is the most common case, so Django provides a
	# shortcut for primary-key exact lookups.
	# The following is identical to Question.objects.get(id=1).
	>>> Question.objects.get(pk=1)
	<Question: What's up?>

	# Make sure our custom method worked.
	>>> q = Question.objects.get(pk=1)
	>>> q.was_published_recently()
	True

	# Give the Question a couple of Choices. The create call constructs a new
	# Choice object, does the INSERT statement, adds the choice to the set
	# of available choices and returns the new Choice object. Django creates
	# a set (defined as "choice_set") to hold the "other side" of a ForeignKey
	# relation (e.g. a question's choice) which can be accessed via the API.
	>>> q = Question.objects.get(pk=1)

	# Display any choices from the related object set -- none so far.
	>>> q.choice_set.all()
	<QuerySet []>

	# Create three choices.
	>>> q.choice_set.create(choice_text="Not much", votes=0)
	<Choice: Not much>
	>>> q.choice_set.create(choice_text="The sky", votes=0)
	<Choice: The sky>
	>>> c = q.choice_set.create(choice_text="Just hacking again", votes=0)

	# Choice objects have API access to their related Question objects.
	>>> c.question
	<Question: What's up?>

	# And vice versa: Question objects get access to Choice objects.
	>>> q.choice_set.all()
	<QuerySet [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]>
	>>> q.choice_set.count()
	3

	# The API automatically follows relationships as far as you need.
	# Use double underscores to separate relationships.
	# This works as many levels deep as you want; there's no limit.
	# Find all Choices for any question whose pub_date is in this year
	# (reusing the 'current_year' variable we created above).
	>>> Choice.objects.filter(question__pub_date__year=current_year)
	<QuerySet [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]>

	# Let's delete one of the choices. Use delete() for that.
	>>> c = q.choice_set.filter(choice_text__startswith="Just hacking")
	>>> c.delete()

* 模型关系(model relations): https://docs.djangoproject.com/en/5.1/ref/models/relations/
* 使用双下划线进行API查找：https://docs.djangoproject.com/en/5.1/topics/db/queries/#field-lookups-intro
* 数据库查询：https://docs.djangoproject.com/en/5.1/topics/db/queries/









========================================
|-- 介绍 Django Admin 模块：Django提供的后台管理模块
----------------------------------------

* 哲学：admin 模块很复杂，且没有创造性。所以适合自动生成。
	admin 为不同模块的更新提供了一个统一的接口。
	admin 不是给普通访问者用的，是为了管理网站。


(1) 创建超级管理员用户
$ python3 manage.py createsuperuser
输入用户名 admin，邮箱 admin@ex.com，设置密码 123456!


(2) 启动服务器
$ python3 manage.py runserver


(3) 进入管理模块
浏览器访问：http://j3.biomooc.com:8080/admin/
	输入超级管理员信息后，看到界面。

可编辑内容：groups，users。这是 django.contrib.auth 模块提供的，官方自带的权限模块。
	为什么没有自己定义的 polls 应用？因为没有注册。


(4) 让poll app在admin中可见、可编辑
但是admin后台没看到 poll app！
要告诉admin，Question 对象需要有 admin 接口：

$ vim polls/admin.py
from django.contrib import admin

from .models import Question
admin.site.register(Question)



(5) 探索admin的功能
再次查看后台，看到了 POLLS 下的 Questions。
	单击 Questions，可以看到问题：What’s up?
	单击该问题，可以修改问题和时间。
	修改后保存，单击 history，可以看到修改历史：谁修改的，修改了什么。
#





========================================
|-- 3. 视图与模板(Views and templates)
----------------------------------------
1. 视图就是网页，对应一个模板

一个博客app应该有如下视图:
	主页 Blog homepage – displays the latest few entries.
	详情 Entry “detail” page – permalink page for a single entry.
	年度存档 Year-based archive page – displays all months with entries in the given year.
	月份存档 Month-based archive page – displays all days with entries in the given month.
	天存档 Day-based archive page – displays all entries in the given day.
	评论动作 Comment action – handles posting comments to a given entry.

poll app 将要有4个视图：
	主页 Question “index” page – displays the latest few questions.
	详情 Question “detail” page – displays a question text, with no results but with a form to vote.
	结果 Question “results” page – displays results for a particular question.
	投票动作 Vote action – handles voting for a particular choice in a particular question.

Django 中，网页和内容对应视图。每个视图对应一个Python函数/方法。
	Django 根据请求URL模式选择一个视图。
	一个URL模式是一个URL的通常形式，比如 /newsarchive/<year>/<month>/
	URL 分发细节：https://docs.djangoproject.com/en/5.1/topics/http/urls/



2. 写更多视图
(1)添加几个函数，都带有一个参数
$ vim polls/views.py
def detail(request, question_id):
    return HttpResponse("You're looking at question %s." % question_id)

def results(request, question_id):
    response = "You're looking at the results of question %s."
    return HttpResponse(response % question_id)

def vote(request, question_id):
    return HttpResponse("You're voting on question %s." % question_id)


(2) 添加URL模式
$ vim polls/urls.py
from django.urls import path

from . import views

urlpatterns = [
    # ex: /polls/
    path("", views.index, name="index"),
    # ex: /polls/5/
    path("<int:question_id>/", views.detail, name="detail"),
    # ex: /polls/5/results/
    path("<int:question_id>/results/", views.results, name="results"),
    # ex: /polls/5/vote/
    path("<int:question_id>/vote/", views.vote, name="vote"),
]

打开浏览器：
	/polls/34/ 对应的是 detail() 函数
	/polls/34/results/ 展示 results()
	/polls/34/vote/ 展示 vote()

匹配顺序： /polls/34/
	先看 mysite/settings.py 中的 ROOT_URLCONF = 'mysite.urls'
	加载 mysite.urls.py，匹配urlpatterns中的 "polls/"，遇到 include("polls.urls")
	根据 polls/urls.py，继续匹配 "<int:question_id>/"，对应的函数是 views.detail
	加载 polls/views.py 中的函数并传入参数 detail(request, question_id=34)
	注意：url匹配中<>用于匹配参数，前面的int表示会自动转换为int数据类型。





(3) 视图中实现功能
每个视图要做两件事中的一个：
	* 返回一个 HttpResponse 对象，包含请求的页面
	* 抛出异常，比如 Http404

视图中怎么做，程序员决定：
	可访问数据库。
	可使用Django模板，或第三方模板。
	可以长生pdf文件、XML、在线ZIP文件，等等

这里使用第二章中的数据库API。新版本index()视图，展示系统中的5个问题，按公开日期，逗号隔开。

$ cat polls/views.py
from django.http import HttpResponse

from .models import Question

def index(request):
    latest_question_list = Question.objects.order_by("-pub_date")[:5]
    output = ", ".join([q.question_text for q in latest_question_list])
    return HttpResponse(output)

缺点：页面内容硬编码到python中了。
解耦？使用默认的模板系统。
1) 新建文件夹 polls/templates/，默认模板位置是 已安装app下的 templates 子文件夹
2) 新建文件 polls/templates/polls/index.html，引用方式是 "polls/index.html"
	也可以都放到 polls/templates/ 下，但是新建子文件夹更清晰，不容易混淆。
	Django会寻找并返回第一个匹配的的模板，如果同名但是不同作用，则会分发错误。
	推荐新建子文件夹。
3) 模板内容
$ cat polls/templates/polls/index.html
{% if latest_question_list %}
    <ul>
    {% for question in latest_question_list %}
        <li><a href="/polls/{{ question.id }}/">{{ question.question_text }}</a></li>
    {% endfor %}
    </ul>
{% else %}
    <p>No polls are available.</p>
{% endif %}

注意：为了缩短篇幅，使用了不完整html。实际项目中建议使用完整html: https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Getting_started#anatomy_of_an_html_document


4) 修改视图函数
$ cat polls/views.py
from django.http import HttpResponse
from django.template import loader

from .models import Question


def index(request):
    latest_question_list = Question.objects.order_by("-pub_date")[:5]
    template = loader.get_template("polls/index.html")
    context = {
        "latest_question_list": latest_question_list,
    }
    return HttpResponse(template.render(context, request))



5) 快捷方式：render() 函数

不需要import loader and HttpResponse。

$ cat polls/views.py
from django.shortcuts import render

from .models import Question

def index(request):
    latest_question_list = Question.objects.order_by("-pub_date")[:5]
    context = {"latest_question_list": latest_question_list}
    return render(request, "polls/index.html", context)







(4) 抛出404错误

如果访问了不存在的页面，要抛出异常：

$ cat polls/views.py

from django.http import Http404
from django.shortcuts import render

from .models import Question

# ...
def detail(request, question_id):
    try:
        question = Question.objects.get(pk=question_id)
    except Question.DoesNotExist:
        raise Http404("Question does not exist!")
    return render(request, "polls/detail.html", {"question": question})
#

新概念：如果请求的ID不存在，则抛出 Http404 异常。

补充模板:
$ cat polls/templates/polls/detail.html
{{ question }}

测试：
	http://j3.biomooc.com:8080/polls/1/
	http://j3.biomooc.com:8080/polls/2/






(5) 快捷方式：get_object_or_404()

$ cat polls/views.py
from django.shortcuts import get_object_or_404, render

from .models import Question

# ...
def detail(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    return render(request, "polls/detail.html", {"question": question})

=> 哲学：为什么不自动捕获 ObjectDoesNotExist 异常，或者在模型API抛出 Http404 而不是 ObjectDoesNotExist？
是为了model和view解耦。Django 最重要的设计目标是保持松耦合。
被控制的耦合见：https://docs.djangoproject.com/en/5.1/topics/http/shortcuts/#module-django.shortcuts


还有一个 get_list_or_404() 函数，类似 get_object_or_404()，但是前者使用 filter() 代替 get(). 如果list是空，抛出 Http404 异常。







========================================
|-- 使用模板系统
----------------------------------------

(6) 重新回到 detail.html 模板文件，修改为：

$ cat polls/templates/polls/detail.html
<h1>{{ question.question_text }}</h1>
<ul>

{% for choice in question.choice_set.all %}
    <li>{{ choice.choice_text }}</li>
{% endfor %}
</ul>

解释：
* 模板系统使用 . 获取属性变量。
* {{ question.question_text }} 中，Django 在对象 question 中按字典查找 question_text；如果字典查找失败，接着尝试按list索引查找。
* {% for choice in question.choice_set.all %} 循环查找。question.choice_set.all 返回 Choice 对象。

模板指导：https://docs.djangoproject.com/en/5.1/topics/templates/





(7) 移除模板中的硬编码URL
polls/index.html 中：
	<li><a href="/polls/{{ question.id }}/">{{ question.question_text }}</a></li>

修改url时（比如polls/ 改为 votes/），这里是紧密耦合的，模板也都要修改。
解决方法：
	使用 polls.urls.py 的 path() 函数中定义的 name 属性：
		path("<int:question_id>/", views.detail, name="detail"),
	使用模板标签 {% url %}，修改为：
		<li><a href="{% url 'detail' question.id %}">{{ question.question_text }}</a></li>

修改实例：
	从 polls/12/ 修改为 polls/specifics/12/，只需要修改路由 polls/urls.py:
	# added the word 'specifics'
	path("specifics/<int:question_id>/", views.detail, name="detail"),

	测试：
		点击前 http://j3.biomooc.com:8080/polls/
		点击后 http://j3.biomooc.com:8080/polls/specifics/1/




(8) URL 命名空间
本例只有一个 polls app，真实项目可能包含很多app，怎么区分这些不同app下的URL名字呢？
比如同项目的 blog app 也有一个 detail 视图，怎么指定 {% url %} 创建哪个app的视图？

答案是在 polls/urls.py 中添加URL的命名空间：在 urlpatterns 前一行加上 app_name = "polls"。

修改 polls/index.html 模板：
$ cat polls/templates/polls/index.html
<li><a href="{% url 'detail' question.id %}">{{ question.question_text }}</a></li>
修改为：
<li><a href="{% url 'polls:detail' question.id %}">{{ question.question_text }}</a></li>


报错：Reverse for 'detail' not found. 'detail' is not a valid view function or pattern name.
是因为我把修改前模板语句(没有'pools:'前缀的 detail )的版本移动到html注释<!---->中了，但是Django还能识别到它。
	解决方法：删除修改前的模板语句。
	加注释#也报错：Invalid block tag on line 6: '#url', expected 'empty' or 'endfor'. Did you forget to register or load this tag?


小结：
	模板中 {% url 'namespace:url_name' obj.k %} 
		namespace需要在 urls.py 中的 app_name="" 中一致；
		url_name 需要和 path() 函数中参数 name="" 定义的一致。



ref:
https://docs.djangoproject.com/en/5.1/intro/tutorial03/
https://stackoverflow.com/questions/45724006/django-reverse-for-not-found-is-not-a-valid-view-function-or-pattern-na




========================================
|-- 4. 表单和通用视图(Forms and generic views)
----------------------------------------
1. 写一个简单表单

$ cat polls/templates/polls/detail.html
<form action="{% url 'polls:vote' question.id %}" method="post">
{% csrf_token %}
<fieldset>
    <legend><h1>{{ question.question_text }}</h1></legend>
    {% if error_message %}<p><strong>{{ error_message }}</strong></p>{% endif %}
    {% for choice in question.choice_set.all %}
        <input type="radio" name="choice" id="choice{{ forloop.counter }}" value="{{ choice.id }}">
        <label for="choice{{ forloop.counter }}">{{ choice.choice_text }}</label><br>
    {% endfor %}
</fieldset>
<input type="submit" value="Vote">
</form>

解释：
* 每个choice 对应一个单选框(radio)。
	value 是choice的id。
	name是统一的 choice，表示一个分组，多选一。发送到后台的就是 choice=#id，也就是radio的value值。
* form表单的 action 是 "{% url 'polls:vote' question.id %}" method="post"
	method="get" 一般用于获取信息，而 post 一般用于修改服务器端数据。
* forloop.counter 表示for标签的循环次数。目测是从1开始计数的。
* 怎么预防 "跨域伪造请求"（cross site request forgeries，XSRF）？
	Django 提供了 {% csrf_token %}，放到post请求的头部。查看发现是多了一个隐藏表单：
	<input type="hidden" name="csrfmiddlewaretoken" value="afAcYXfL2NaTyD9M1Llf2OPtgLZA4EyBVl4fml3zICLFPL3euJp1AoXU14TwgfOz">




2. 创建视图，处理提交的数据

(1) 表单提交的地址：<form action="/polls/1/vote/" method="post">
(2) 之前路由 polls/urls.py 设置过 path("<int:question_id>/vote/", views.vote, name="vote"),

(3) 实现这个vote()函数
$ cat polls/views.py
from django.db.models import F
from django.http import HttpResponse, HttpResponseRedirect
from django.shortcuts import get_object_or_404, render
from django.urls import reverse

from .models import Choice, Question

# ...
def vote(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    try:
        selected_choice = question.choice_set.get(pk=request.POST["choice"])
    except (KeyError, Choice.DoesNotExist):
        # Redisplay the question voting form.
        return render(
            request,
            "polls/detail.html",
            {
                "question": question,
                "error_message": "You didn't select a choice.",
            },
        )
    else:
        selected_choice.votes = F("votes") + 1
        selected_choice.save()
        # Always return an HttpResponseRedirect after successfully dealing
        # with POST data. This prevents data from being posted twice if a
        # user hits the Back button.
        return HttpResponseRedirect( reverse("polls:results", args=(question.id,)) )
#

新的知识点：
* request.POST 是一个字典。request.POST["choice"] 返回选定选项的id，默认是返回字符串。
	request.GET 类似，处理get请求。
* request.POST["choice"] 如果找不到key，将会抛出 KeyError 异常。
* F("votes") + 1 让 数据库中 vote 计数列增加1:
	https://docs.djangoproject.com/en/5.1/ref/models/expressions/#avoiding-race-conditions-using-f
* choice count 递增后，返回 HttpResponseRedirect 而不是 HttpResponse。
	HttpResponseRedirect 接受单一参数：重定向的 URL
	通用建议：post 成功后返回一个 重定向。
* HttpResponseRedirect 中使用了 reverse()函数。
	该函数避免硬编码url。使用视图名字和变量作为输入，使用之前设置的 URLconf，会返回字符串 "/polls/3/results/"
	该重定向 会使用 results 视图作为最终页面。

ch3说过， request 是一个 HttpRequest 对象。
	==> 请求和响应：https://docs.djangoproject.com/en/5.1/ref/request-response/



==> bug提醒1：vote()最后一行中 reverse()的参数 args 中第一个参数后面必须有逗号！
	否则报错：Value after * must be an iterable, not int

==> bug 提醒2: 如果不选择，直接提交后报错：join() argument must be str, bytes, or os.PathLike object, not 'dict'
	检查发现，vote()中 render()函数第一个参数 request 漏写了。补上，页面正常提示了。




(4) 写 results() 视图

$ cat polls/views.py
from django.shortcuts import get_object_or_404, render

def results(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    return render(request, "polls/results.html", {"question": question})

这和ch3的detail()几乎一模一样，就差模板不同了。这个冗余后续来解决。




(5) 创建 results模板:
$ at polls/templates/polls/results.html
<h1>{{ question.question_text }}</h1>

<ul>
{% for choice in question.choice_set.all %}
    <li>{{ choice.choice_text }} -- {{ choice.votes }} vote{{ choice.votes|pluralize }}</li>
{% endfor %}
</ul>

<a href="{% url 'polls:detail' question.id %}">Vote again?</a>



(6) 检查效果
浏览器打开 /polls/1/
- 投票提交，能看到结果
- 不投票，直接提交，url不变，多了一条提示：You didn't select a choice.






3. 使用 泛型视图：少编码

视图中 detail() 和 results() 都很短，且很像，index()也是。

以上视图共性是：根据参数，从数据库获取数据，加载模板，渲染返回。
Django 为这一类提供了快捷方式，教 泛型视图 系统。

泛型视图抽象到无需写代码，比如  ListView 和 DetailView，分别是列举对象，展示某个对象。

使用方法：
	1. 修改 URLconf
	2. 删掉不需要的视图
	3. 基于 Django 泛型视图 引入新视图

实际项目中，可以根据规划，一开始就是用泛型视图。本示例仅用于教学。

(1) 修改 URLconf

$ cat polls/urls.py
from django.urls import path

from . import views

app_name = "polls"
urlpatterns = [
    path("", views.IndexView.as_view(), name="index"),
    path("<int:pk>/", views.DetailView.as_view(), name="detail"),
    path("<int:pk>/results/", views.ResultsView.as_view(), name="results"),
    path("<int:question_id>/vote/", views.vote, name="vote"),
]

注意，第二个和第三个的匹配参数从 question_id 变为 pk。
这是必要的，因为我们使用 DetailView 泛型视图去代替 detail() 和 results() 视图，它需要从url捕获的叫做pk的主键。




(2) 修改视图

接着，删除旧的 index, detail, results 视图，使用Django的泛型视图。

$ cat polls/views.py
from django.db.models import F
from django.http import HttpResponseRedirect
from django.shortcuts import get_object_or_404, render
from django.urls import reverse
from django.views import generic

from .models import Choice, Question


class IndexView(generic.ListView):
    template_name = "polls/index.html"
    context_object_name = "latest_question_list"

    def get_queryset(self):
        """Return the last five published questions."""
        return Question.objects.order_by("-pub_date")[:5]


class DetailView(generic.DetailView):
    model = Question
    template_name = "polls/detail.html"


class ResultsView(generic.DetailView):
    model = Question
    template_name = "polls/results.html"


def vote(request, question_id):
    # same as above, no changes needed.
    ...


解释：
* 每个泛型视图需要知道属于哪个模型：
	直接使用 model = shuxing 
	或者定义方法 get_queryset()
* 默认，DetailView 泛型视图使用模板位置"<app name>/<model name>_detail.html"，本例中是 "polls/question_detail.html"
	不是用默认，则使用 template_name 指定。
	这俩(DetailView, ResultsView)都继承自 generic.DetailView。
* 类似的， ListView 泛型视图也是默认使用"<app name>/<model name>_list.html"
	本例指定 template_name="polls/index.html" 模板
* 之前的模板包含参数 question 和 latest_question_list 上下文变量。
	DetailView 中默认提供 question 变量，因为引入了模型 model=Question，Django 能自动决定一个合适的上下文变量。
	然而，对于 ListView 泛型视图，自动变量名字是 question_list。
	为了修改默认变量名，可设置 context_object_name 变量名。
	也可以修改模板中的变量名。

=> 泛型视图：https://docs.djangoproject.com/en/5.1/topics/class-based-views/






ref:
https://docs.djangoproject.com/en/5.1/intro/tutorial04/




========================================
|-- 5. 测试(Testing) //todo
----------------------------------------
1. 自动化测试简介

(1) 什么是自动化测试？

手动测试：使用shell，或者运行系统，手动输入和查看结果。

自动测试：系统自动进行，一次设置，以后修改代码后自动测试。


(2) 创建测试的前提

测试会节省时间：复杂系统中，组件之间交互也很复杂。

任意一个组件的变动都可能导致整个应用的异常行为。
	完整测试需要花费很多时间。
	自动化测试直需要几秒。如果有些错误，测试将会辅助定位出错的代码。


测试不仅能定位问题，还能预防问题。

测试让代码更有吸引力。
	没有测试的代码不敢用。

测试有利于团队合作。





2. 基本的测试策略

TDD: https://en.wikipedia.org/wiki/Test-driven_development
	先写测试，再写实现。

先写代码，再写测试。常规做法。

修改时，立刻写一个测试。




3. 写第一个测试

(1) 识别bug
poll 应用中，如果 Question 发表日期是昨天，则 Question.was_published_recently() 返回True，这没问题。
如果 pub_date 是未来的日期，依旧返回 True，这肯定不对。

使用 shell 确定这个bug:

$ python3 manage.py shell

>>> import datetime
>>> from django.utils import timezone
>>> from polls.models import Question
>>> # create a Question instance with pub_date 30 days in the future
>>> future_question = Question(pub_date=timezone.now() + datetime.timedelta(days=30))
>>> # was it published recently?
>>> future_question.was_published_recently()
True

这是未来的日期，不能认为是“最近”，显然是错的。


(2) 创建测试暴漏该问题
刚才 shell 中的检测，可以在自动化测试中完成。

放测试文件的常规地点是 tests.py 文件，系统默认在 test 开头的文件中找测试语句。

$ cat polls/tests.py
import datetime

from django.test import TestCase
from django.utils import timezone

from .models import Question


class QuestionModelTests(TestCase):
    def test_was_published_recently_with_future_question(self):
        """
        was_published_recently() returns False for questions whose pub_date
        is in the future.
        """
        time = timezone.now() + datetime.timedelta(days=30)
        future_question = Question(pub_date=time)
        self.assertIs(future_question.was_published_recently(), False)

这里新建了子类 QuestionModelTests，包含一个方法：
	创建一个 Question 对象，日期是未来某天。
	检查方法 was_published_recently() 的输出，应该是False。


(3) 运行测试
$ python3 manage.py test polls
输出：
	Found 1 test(s).
	Creating test database for alias 'default'...
	System check identified no issues (0 silenced).
	F
	===============
	FAIL: test_was_published_recently_with_future_question (polls.tests.QuestionModelTests)
	was_published_recently() returns False for questions whose pub_date is in the future
	---------------
	Traceback (most recent call last):
	  File "/datapool/wangjl/web/docs/dustbin/django/mysite/polls/tests.py", line 16, in test_was_published_recently_with_future_question
		self.assertIs(future_questioin.was_published_recently(), False)
	AssertionError: True is not False

	---------------
	Ran 1 test in 0.002s

	FAILED (failures=1)
	Destroying test database for alias 'default'...

解释：
* manage.py test polls 是在 polls 应用中寻找测试。
* 它找到 django.test.TestCase 的一个子类
* 它为测试新建一个特别的数据库
* 它寻找测试方法 - test 开头的方法。
* 在 test_was_published_recently_with_future_question 方法中，它用未来30天作为 pub_date 参数新建 Question 实例。
* 使用 assertIs() 方法，发现 was_published_recently() 返回 True，但是我们期望返回False。

测试告诉我们测试失败，及行号。



(4) 修复bug

我们已经指导问题了：如果日期是未来，Question.was_published_recently()应该返回False。

$ cat polls/models.py
def was_published_recently(self):
    now = timezone.now()
    return now - datetime.timedelta(days=1) <= self.pub_date <= now

再次运行测试:
$ python3 manage.py test polls
	Found 1 test(s).
	Creating test database for alias 'default'...
	System check identified no issues (0 silenced).
	.
	---------------
	Ran 1 test in 0.001s

	OK
	Destroying test database for alias 'default'...


发现问题，写测试，修改问题，测试通过。




(5) 更复杂的测试

为了防止修复一个bug同时引入更多bug，需要更完备的测试。
再增加两个测试：
$ cd polls/tests.py
def test_was_published_recently_with_old_question(self):
    """
    was_published_recently() returns False for questions whose pub_date
    is older than 1 day.
    """
    time = timezone.now() - datetime.timedelta(days=1, seconds=1)
    old_question = Question(pub_date=time)
    self.assertIs(old_question.was_published_recently(), False)


def test_was_published_recently_with_recent_question(self):
    """
    was_published_recently() returns True for questions whose pub_date
    is within the last day.
    """
    time = timezone.now() - datetime.timedelta(hours=23, minutes=59, seconds=59)
    recent_question = Question(pub_date=time)
    self.assertIs(recent_question.was_published_recently(), True)

运行测试，全部通过。










4. 测试一个视图

该应用不区分 pub_date ，都展示了，肯定不对。
应该是那一天公开了，到那一天才能展示。

(1) 测试一个视图

修复bug时，先写测试，再修改代码。这就是测试驱动的开发，顺序无所谓。

第一个测试中，关心内在行为，因为用户通过浏览器查看其行为。

1) Django 测试客户端
可用于 tests.py 或者 shell 中。

$ python manage.py shell
>>> from django.test.utils import setup_test_environment
>>> setup_test_environment() #模板渲染需要的 response.context 
注意：没有测试数据库。
	如果 settings.py 中 TIME_ZONE 设置不对，结果可能也不对。最好检查一下再继续。

接着，引入测试客户端类(后面，在 tests.py中我们将使用 django.test.TestCase类，自带自己的客户端，所以这一步不是必须的)
>>> from django.test import Client
>>> # create an instance of the client for our use
>>> client = Client()


继续：
>>> # get a response from '/'
>>> response = client.get("/")
Not Found: /
>>> # we should expect a 404 from that address; if you instead see an
>>> # "Invalid HTTP_HOST header" error and a 400 response, you probably
>>> # omitted the setup_test_environment() call described earlier.
>>> response.status_code
404
>>> # on the other hand we should expect to find something at '/polls/'
>>> # we'll use 'reverse()' rather than a hardcoded URL
>>> from django.urls import reverse
>>> response = client.get(reverse("polls:index"))
>>> response.status_code
200
>>> response.content
b'\n    <ul>\n    \n        <li><a href="/polls/1/">What&#x27;s up?</a></li>\n    \n    </ul>\n\n'
>>> response.context["latest_question_list"]
<QuerySet [<Question: What's up?>]>



(2) 提升视图









5. 测试代码：越多越好



6. 进一步测试




https://docs.djangoproject.com/en/5.1/intro/tutorial05/









========================================
Django 视频课程
----------------------------------------
https://www.imooc.com/video/19091






========================================
----------------------------------------




========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------




========================================
----------------------------------------




========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------



========================================
----------------------------------------




