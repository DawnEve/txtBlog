Mysql命令大全：mysql常用命令手册、mysql命令行大全、查询工具(保证能用)

mysql优化指南：http://c.biancheng.net/cpp/u/mysql_yh/



MySQL是一个关系型数据库管理系统，由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，一般中小型网站的开发都选择MySQL作为网站数据库。由于其社区版的性能卓越，搭配PHP和Apache可组成良好的开发环境。

该手册主要介绍常用的MySQL命令，包括连接数据库，修改密码，管理用户，操作数据库，操作数据表，数据库备份等，每个命令都配有实例说明，让大家更容易理解。最后，通过两个实例来总结前面的内容。

我们会不断更新教程内容。


========================================
mysql 参考资料
----------------------------------------

1.《MySQL 必知必会》
https://juejin.im/post/5d2335846fb9a07f021a2509






2. Sql执行顺序
1). FROM 子句 组装来自不同数据源的数据
2). WHERE 子句 基于指定的条件对记录进行筛选
3). GROUP BY 子句 将数据划分为多个分组
4). 使用聚合函数进行计算MAX,COUNT等
5). 使用HAVING子句筛选分组
6). 计算所有的表达式
7). 使用ORDER BY对结果集进行排序
8). select 获取相应列(竖列)
9). limit截取结果集(横行)




3.在docker中运行的mysql实例:

## YiHuiman with sudo shell user
$ mysql -h y.biomooc.com -u root -P 7070 -p


## LinYanling with no shell user
$ mysql -h 10.21.2.83 -u root -P 7070 -p





4. 查mysql变量设置
mysql> show variables like '%auto%';
+---------------- ------------+-------+
| Variable_name               | Value |
+--------------- -------------+-------+
| auto_increment_increment    | 1     |
| auto_increment_offset       | 1     |
| autocommit                  | ON    |
| automatic_sp_privileges     | ON    |
| innodb_autoextend_increment | 64    |
| innodb_autoinc_lock_mode    | 1     |
| innodb_stats_auto_recalc    | ON    |
| sql_auto_is_null            | OFF   |
+--------------- -------------+-------+
8 rows in set (0.01 sec)



========================================
|-- mysql8 的登录: 8 vs 5的变化？
----------------------------------------
1. 错误类型
https://blog.csdn.net/mingzaiwang/article/details/128727470
语法错误；
输入密码正确，但就是进不去；
就算跳过密码，改密码的时候，没法改。（仅针对MySQL8.0版本）

(2)解决方法：很简单，改密码。

密码改了还不行的原因：
　　- MySQL8.0版本不能通过直接修改mysql.user表来更改密码；
　　- authentication_string字段下只能是MySQL加密后的43位字符串密码；


(3) 密码在
$ sudo vim /etc/mysql/debian.cnf
user     = debian-sys-maint
password = rer3wCY50360EyBQ


(4) 登录
$ mysql -h localhost -u debian-sys-maint -p
Enter password: 
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 51
Server version: 8.0.32-0ubuntu0.20.04.2 (Ubuntu)

Copyright (c) 2000, 2023, Oracle and/or its affiliates.


(5) 查看密码
mysql> use mysql;
mysql> select * from user limit 1 \G

查看安装后随机生成的密码。
mysql> select Host, User, authentication_string from user;
+-----------+-------- ---------+------------------ ----------------- ------------------ ----------------+
| Host      | User             | authentication_string                                                  |
+-----------+-------- ---------+------------------------------------ ------------------ ----------------+
| %         | root             | $A$005$v5%j,.St`AB?axx<HOf8r/UVudOZ/dDV4Kn5ki6IvQq9nJoZ8iOXH2x1be9 |     这个是我加的，功能不大对
| localhost | debian-sys-maint | *9D5F8267A62A2F2CC52F116A2750C696C44F5F39                              |
| localhost | mysql.infoschema | $A$005$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED |
| localhost | mysql.session    | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE                              |
| localhost | mysql.sys        | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE                              |
| localhost | root             |                                                                        |
+-----------+--------- --------+----------------- ------------------- ---------------- -----------------+
6 rows in set (0.00 sec)

'%'表示所有ip都可以连接，相当于0.0.0.0



(6) 添加新用户

mysql> insert into user(Host, User) values('%', 'tom');
ERROR 1364 (HY000): Field 'ssl_cipher' doesn't have a default value
mysql> insert into user(Host, User, ssl_cipher) values('%', 'tom', '0x');
ERROR 1364 (HY000): Field 'x509_issuer' doesn't have a default value
mysql> insert into user(Host, User, ssl_cipher, x509_issuer) values('%', 'tom', '0x', '0x');
ERROR 1364 (HY000): Field 'x509_subject' doesn't have a default value
mysql> insert into user(Host, User, ssl_cipher, x509_issuer,x509_subject) values('%', 'tom', '0x', '0x', '0x'); #这个可以
Query OK, 1 row affected (0.01 sec)

设置密码
mysql> ALTER USER 'tom'@'%' IDENTIFIED WITH mysql_native_password BY "123456";
ERROR 1396 (HY000): Operation ALTER USER failed for 'tom'@'%'
mysql> ALTER USER 'tom'@"%" IDENTIFIED WITH mysql_native_password BY "123456";
Query OK, 0 rows affected (0.01 sec)

mysql> select Host, User, authentication_string,plugin from user;
| Host      | User             | authentication_string                                                  |
| %         | root             | $A$005$v5%j,.St`AB?axx<HOf8r/UVudOZ/dDV4Kn5ki6IvQq9nJoZ8iOXH2x1be9 |
| %         | tom              | *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 


> update user set host='%',plugin='mysql_native_password',authentication_string='' where user='tom';
Query OK, 1 row affected (0.01 sec)
Rows matched: 1  Changed: 1  Warnings: 0

> flush privileges;



还是无法登陆
$ mysql -h 192.168.2.120 -u tom -p
Enter password: 
ERROR 2003 (HY000): Can't connect to MySQL server on '192.168.2.120:3306' (111)

$ mysql -h 127.0.0.1 -u tom -p  #但是使用localhost IP可以登录！
mysql> quit
Bye
wangjl@YStation:~$ ping 192.168.2.120
PING 192.168.2.120 (192.168.2.120) 56(84) bytes of data.
64 bytes from 192.168.2.120: icmp_seq=1 ttl=64 time=0.079 ms


看到有说屏蔽掉：/etc/mysql/my.cnf 中的 bind-address           = 127.0.0.1 
  https://blog.csdn.net/wang1144/article/details/39498559

$ sudo vim /etc/mysql/my.cnf
!includedir /etc/mysql/conf.d/
!includedir /etc/mysql/mysql.conf.d/

$ sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf #在这个里，两行
#bind-address           = 127.0.0.1
#mysqlx-bind-address    = 127.0.0.1

重启数据库
$ sudo service mysql restart

继续连接，可以了
$ mysql -h 192.168.2.120 -u tom -p
测试权限：
  建库: 不能
  建表: 不能
    mysql> create database wang2;
    ERROR 1044 (42000): Access denied for user 'tom'@'%' to database 'wang2'


(7) 授权
https://dev.mysql.com/blog-archive/how-to-grant-privileges-to-users-in-mysql-80/

mysql> grant all privileges on *.* to 'tom'@'%';
Query OK, 0 rows affected (0.01 sec)

mysql> show grants; 查看权限

退出重新登录
mysql> quit
Bye

$ mysql -h 192.168.2.120 -u tom -p
Enter password: 
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 18
Server version: 8.0.32-0ubuntu0.20.04.2 (Ubuntu)


新建库：
  mysql> create database wang2;
  Query OK, 1 row affected (0.01 sec)
新建表：
  create table user(id int primary key auto_increment, name varchar(20)) DEFAULT CHARSET=utf8;

mysql> desc user;
+-------+-------------+------+-----+---------+----------------+
| Field | Type        | Null | Key | Default | Extra          |
+-------+-------------+------+-----+---------+----------------+
| id    | int         | NO   | PRI | NULL    | auto_increment |
| name  | varchar(20) | YES  |     | NULL    |                |
+-------+-------------+------+-----+---------+----------------+
2 rows in set (0.00 sec)








2.版本变化
(1) 5.*之后的版本取消了password函数，故不适用于8.*版本。

MySQL 5.*的版本修改密码命令为
  UPDATE user SET authentication_string="123456" WHERE user="root";

MySQL 8.*的版本修改密码命令为
  ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY "123456";


(2) 加密规则
MySQL8.0之前的版本密码加密规则：mysql_native_password，
MySQL8.0密码加密规则：caching_sha2_password
所以需要修改mysql加密规则
ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '你的密码';












3.更多修改
(1) 修改Host为%：
update user set host='%' where host= 'localhost';



















========================================
mysql命令用户连接数据库，日常操作命令
----------------------------------------

mysql命令格式： mysql -h主机地址 -P 端口号 -u用户名 -p用户密码


1) 连接到本机上的MYSQL，可以省略-h参数。
 - windows用户：首先win+R打开DOS窗口，然后通过cd命令进入目录mysql\bin，再键入命令mysql -u root -p，回车后提示你输密码。
 - Linux用户：直接输入命令即可 $ mysql -h y.biomooc.com -P 7070 -u root -p
如果端口号不是默认值3306，还需要使用-P指定端口号。

注意用户名前可以有空格也可以没有空格，但是密码前必须没有空格，否则让你重新输入密码。
如果刚安装好MYSQL，超级用户root是没有密码的，故直接回车即可进入到MYSQL中了，MYSQL的提示符是： mysql>


2) 连接到远程主机上的MYSQL
假设远程主机的IP为：110.110.110.110，用户名为root，密码为abcd123。则键入以下命令：
    >mysql -h110.110.110.110 -u root -p;（注：u与root之间可以不用加空格，其它也一样）
	>这里输入密码(比如：abcd123）


3) 退出MYSQL命令
exit （回车）




##
日常操作命令: 

4)查看状态:
请参考上文，先登录数据库。
mysql> \s

5) 查看数据库列表
mysql> show databases;

6) 选择数据库为当前数据库：
mysql> use myblog;
Database changed

再次查看数据库状态时，发现Current database已经改为myblog了：
mysql> \s
--------------
mysql  Ver 14.14 Distrib 5.6.11, for Win32 (x86)

Connection id:          6359
Current database:       myblog
Current user:           root@localhost
SSL:                    Not in use
Using delimiter:        ;
Server version:         5.6.11 MySQL Community Server (GPL)
Protocol version:       10
Connection:             localhost via TCP/IP
Server characterset:    latin1
Db     characterset:    latin1
Client characterset:    gbk
Conn.  characterset:    gbk
TCP port:               3306
Uptime:                 6 days 6 hours 5 min 42 sec

Threads: 1  Questions: 47026  Slow queries: 0  Opens: 394  Flush tables: 1  Open
 tables: 380  Queries per second avg: 0.087
--------------

7) 查看当前数据库下的表列表
mysql> show tables;
+-------------------+
| Tables_in_myblog  |
+-------------------+
| article           |
| article_tags      |

-- 选择带有shop的表名
show tables like '%shop%'; 


8) 查询某个表的表结构
mysql> desc article;
+-----------+-------------+------+-----+---------+----------------+
| Field     | Type        | Null | Key | Default | Extra          |
+-----------+-------------+------+-----+---------+----------------+
| id        | int(10)     | NO   | PRI | NULL    | auto_increment |
| title     | varchar(30) | YES  |     | NULL    |                |
| content   | text        | YES  |     | NULL    |                |
| modi_time | varchar(30) | YES  |     | NULL    |                |
| add_time  | varchar(30) | YES  |     | NULL    |                |
| u_id      | int(10)     | YES  | MUL | NULL    |                |
| cate_id   | int(10)     | YES  |     | NULL    |                |
+-----------+-------------+------+-----+---------+----------------+
7 rows in set (0.31 sec)

9) 查询某个表是如何构建的，精简后的输入如下：
mysql> show create table article;
CREATE TABLE `article` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `title` varchar(30) DEFAULT NULL,
  `content` text,
  `modi_time` varchar(30) DEFAULT NULL,
  `add_time` varchar(30) DEFAULT NULL,
  `u_id` int(10) DEFAULT NULL,
  `cate_id` int(10) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `u_id` (`u_id`)
) ENGINE=InnoDB AUTO_INCREMENT=47 DEFAULT CHARSET=utf8;
1 row in set (0.06 sec)

10) 查询某个表的内容：
mysql> select * from article;

如果字段太多，可以竖排输出：
mysql> select * from article \G
*************************** 1. row ***************************
       id: 33
    title: No1
  content: aaaaaaaaaaaa
modi_time: NULL
 add_time: 1450338638
     u_id: 2
  cate_id: 22
*************************** 2. row ***************************

11) 创建表，一定要注意最后的CHARSET=utf8; 要和你的网页编码一致，否则会发生中文乱码！
配合php网页中的 mysql_query("SET NAMES UTF8"); 即可避免中文乱码。
http://www.moke8.com/article-5544-1.html
http://www.cnblogs.com/hongfei/archive/2011/12/29/set-names-utf8.html/1441


mysql> CREATE TABLE `article2` (
    ->   `id` int(10) NOT NULL AUTO_INCREMENT,
    ->   `title` varchar(30) DEFAULT NULL,
    ->   `content` text,
    ->   `modi_time` varchar(30) DEFAULT NULL,
    ->   `add_time` varchar(30) DEFAULT NULL,
    ->   `u_id` int(10) DEFAULT NULL,
    ->   `cate_id` int(10) DEFAULT NULL,
    ->   PRIMARY KEY (`id`),
    ->   KEY `u_id` (`u_id`)
    -> ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
Query OK, 0 rows affected (1.32 sec)


12) 删除表：
（警告！请只删除刚才你自己建立的表，不要随便乱删！）
mysql> drop table article2;
Query OK, 0 rows affected (0.15 sec)

13) 删除数据库。
因为该命令过于危险，这里不介绍。
请自行多多百度，多多咨询，三思而后行！以免酿成大错！



14)cmd界面下中文乱码怎么办？
注意把这里2处设置成gbk即可：
mysql> show variables like 'char%';
+---- ----------- ---------+------ -------------- ----------+
| Variable_name            | Value                          |
+----- ---------- ---------+------ -------------- ----------+
| character_set_client     | gbk                            |
| character_set_connection | gbk                            |
| character_set_database   | latin1                         |
| character_set_filesystem | binary                         |
| character_set_results    | gbk                            |
| character_set_server     | latin1                         |
| character_set_system     | utf8                           |
| character_sets_dir       | F:\xampp\mysql\share\charsets\ |
+------ -------------------+---------------- ---------------+
8 rows in set (0.04 sec)

mysql> set character_set_client=gbk;
Query OK, 0 rows affected (0.00 sec)

mysql> set character_set_results=gbk;
Query OK, 0 rows affected (0.00 sec)



========================================
|-- mysqladmin命令用于修改用户密码
----------------------------------------

mysqladmin命令格式：mysqladmin -u 用户名 -p 旧密码 password 新密码

1) 给root加个密码ab12
首先在DOS下进入目录mysql\bin，然后键入以下命令：
    mysqladmin -u root -password aa12
注：因为开始时root没有密码，所以-p 旧密码一项就可以省略了。

2) 再将root的密码改为ddd345
    mysqladmin -u root -p aa12 password ddd345


========================================
|-- Mysql命令grant on：增加新用户并控制其权限
----------------------------------------
注意：和上面不同，下面的因为是MYSQL环境中的命令，所以后面都带一个分号作为命令结束符


1.grant on命令用于增加新用户并控制其权限。

MySQL 赋予用户权限命令的简单格式可概括为：
	grant 权限 on 数据库对象.数据表 to 用户@主机名  [identified by '密码'];

最常用的，弄主从同步的时候，给从库的slave用户设置拥有所有权限，权限all,
仅允许其从192.168.0.2登录，并限定使用密码 funsion  (密码要用 单/双引号 括起来)
	grant all on *.* to slave@192.168.0.2 identified by 'funsion';
执行完毕后，记得用 FLUSH PRIVILEGES;  刷新一下权限



1) 增加一个用户test1，密码为abc，让他可以在任何主机上登录，并对所有数据库有查询、插入、修改、删除的权限。首先用root用户连入MYSQL，然后键入以下命令：
    grant select,insert,update,delete on *.* to test1@'%' Identified by "abc";

但增加的用户是十分危险的，你想如某个人知道test1的密码，那么他就可以在internet上的任何一台电脑上登录你的mysql数据库并对你的数据可以为所欲为了，解决办法如下。

2) 增加一个用户test2密码为abc，让他只可以在localhost上登录，并可以对数据库mydb进行查询、插入、修改、删除的操作（localhost指本地主机，即MYSQL数据库所在的那台主机），这样用户即使用知道test2的密码，他也无法从internet上直接访问数据库，只能通过MYSQL主机上的web页来访问了。
    grant select,insert,update,delete on mydb.* to test2@localhost identified by "abc";

如果你不想test2有密码，可以再打一个命令将密码消掉。
    grant select,insert,update,delete on mydb.* to test2@localhost identified by "";
#



2.查看当前用户（自己）权限：
show grants;

查看其他 MySQL 用户权限：
show grants for dba@localhost;



http://www.jb51.net/article/50058.htm


========================================
|-- 教训：授权后要 FLUSH PRIVILEGES
----------------------------------------
1.权限修改后一定要注意刷新
FLUSH PRIVILEGES;


2.安装和初始化密码
$ sudo apt install mysql mysql-server

$ sudo mysql -uroot #以root身份登录mysql，默认无密码
mysql> SET PASSWORD=PASSWORD("passwd"); #设置mysql根用户的密码
mysql> FLUSH PRIVILEGES; 
# 注意sql语句末尾的分号

#新建用户和数据库
# 新建名字为<airflow>的数据库
mysql> CREATE DATABASE airflow; 

# 新建用户`ct`，密码为`152108`, 该用户对数据库`airflow`有完全操作权限
mysql> GRANT all privileges on airflow.* TO 'ct'@'localhost'  IDENTIFIED BY '152108'; 
mysql> FLUSH PRIVILEGES;





3.##新建数据库并授权
> create database english;
> GRANT all privileges on english.* TO 'yanpd'@'%'  IDENTIFIED BY '789789';
> FLUSH PRIVILEGES;

##登录
$ mysql -h y.biomooc.com -P 7070 -u yanpd -p
## 789789







========================================
|-- Mysql初始化root密码和允许远程访问
----------------------------------------
mysql默认root用户没有密码，输入mysql –u root 进入mysql

1、初始化root密码

进入mysql数据库
mysql>update user set password=PASSWORD('123456') where User='root';




2、允许mysql远程访问,可以使用以下三种方式:

a、改表。
mysql -u root –p
mysql>use mysql;
mysql>update user set host = '%' where user = 'root';
mysql>select host, user from user;



简单化：设置新用户root，密码是root，所有机器可以访问：
insert into mysql.user(Host,User,Password) values("%","root",password("root"));
select host, user,password from user;
FLUSH PRIVILEGES;



b、授权。
例如，你想root使用123456从任何主机连接到mysql服务器。
mysql>GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION;

如果你想允许用户jack从ip为10.10.50.127的主机连接到mysql服务器，并使用654321作为密码
mysql>GRANT ALL PRIVILEGES ON *.* TO 'jack'@’10.10.50.127’ IDENTIFIED BY '654321' WITH GRANT OPTION;
mysql>FLUSH RIVILEGES



c:在安装mysql的机器上运行：
//进入MySQL服务器
d:\mysql\bin\>mysql -h localhost -u root
//赋予任何主机访问数据的权限
mysql>GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION
//使修改生效
mysql>FLUSH PRIVILEGES
//退出MySQL服务器
mysql>EXIT


http://www.cnblogs.com/cnblogsfans/archive/2009/09/21/1570942.html



========================================
|-- mysql应急权限设置、获取助手(php脚本)
----------------------------------------
<?php
header('Content-Type: text/html; charset=UTF-8');
//设置时区
date_default_timezone_set('PRC');
/*
version:v0.3.1
auther:wjl
email:jimmyMall@live.com 
*/
?>
<title>[ Debuger by JimmyMall[AT]163.com ]</title>
<div class=light>[ MySQL Debuger by JimmyMall[AT]163.com v0.1.2 ]</div>
<style>
body,html,div,p{margin:0; padding:0;}
.red{ color:white;background:red; }
.light{color:#ddd;}
</style>

<?php
function debug($str){
	echo '<pre>';
	//var_dump($str);
	print_r($str);
	echo '</pre>';
}


function query($sql="show tables;"){
	print('<p class=red>'.$sql.'</p>');
	//连接数据库
	$conn = mysql_connect('localhost','root','root') or die('连接错误：'.mysql_error());
	//设置客户端和连接字符集
	mysql_query('set names utf8');

	//mysql_select_db('tianyin');
	mysql_select_db('mysql');
	//mysql_select_db('33hao');
	
	//查询条目是否已有
	//$sql="show databases;";
	//$sql="show tables;";//v9_admin
	//$sql="desc v9_admin;";
/*
Array
(
    [Field] => userid
    [Type] => mediumint(6) unsigned
    [Null] => NO
    [Key] => PRI
    [Default] => 
    [Extra] => auto_increment
)
*/
	//$sql="select * from v9_admin;";
	$rs=mysql_query($sql,$conn);
	$rows=array();
	while($row=mysql_fetch_assoc($rs)){
		$rows[]=$row;
	}
	return $rows;
}

//设置mysql管理员，获取所有权限
//debug(query());
//debug(query('desc v9_admin;'));
//debug(query('select * from v9_admin;'));
//debug(query('select * from user'));

//debug(query('insert into mysql.user(Host,User,Password) values("%","root",password("root"));'));
//debug(query('insert into mysql.user(Host,User) values("%","root");'));
//debug(query("GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root';"));

debug(query("FLUSH PRIVILEGES"));

//debug(query('delete from user where `user`="jimmy" and host=""'));
//query('update user set host=`202.196.120.202` where `user`="jimmy"');

//权限管理
//http://blog.csdn.net/h1017597898/article/details/9815987


//http://123.184.32.246:8077/API.aspx?method=add&truname=xx&username=xx&point=100&pwd=123456


/**
排错用的查询
*/
//debug(query('SELECT * FROM `33hao_pd_log`'));
//debug(query('SELECT * FROM `33hao_member`'));
//debug(query('select member_id, member_name, member_truename,available_predeposit from 33hao_member where available_predeposit>0 order by available_predeposit desc;'));

//debug(query('SELECT store_id,store_free_price FROM `33hao_store`'));

//debug(query('show tables;'));






========================================
mysql常用命令: 库操作
----------------------------------------
https://blog.csdn.net/sinat_40661941/article/details/79412255

库操作：
（1）查看当前使用什么数据库: \s
（2）新增数据库：create database 数据库名 charset utf8;
（3）查看所有数据库：show databases;
	查看某一类似“A”数据库：mysql> show databases like "%A%"; #mysql中的like语句模糊匹配使用%
（4）查看某一数据库：use db名; show tables;
（5）删除：drop databases db名；

请参考上文，先登录数据库 $ mysql -h y.biomooc.com -P 7070 -u root -p





1.查看状态:
mysql> \s
可以查看当前使用的数据库。





2. create命令用于创建数据库。
create命令格式：create database <数据库名>;

注意：创建数据库之前要先连接Mysql服务器。

(1) 建立一个名为xhkdb的数据库：
    mysql> create database xhkdb;

(2) 创建数据库并分配用户：
CREATE DATABASE 数据库名;
GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON 数据库名.* TO 数据库名@localhost IDENTIFIED BY '密码';
SET PASSWORD FOR '数据库名'@'localhost' = OLD_PASSWORD('密码');
依次执行3个命令完成数据库创建。

注意：中文 “密码”和“数据库”是户自己需要设置的。





3. 查看数据库列表 show databases命令，显示所有数据库。
mysql> show databases;  #注意：最后有个s
查看某一类似“my”数据库：
mysql> show databases like "%my%";


注意：为了不在显示的时候乱码，要修改数据库默认编码。以下以GBK编码页面为例进行说明。

1) 修改MYSQL的配置文件：my.ini里面修改default-character-set=gbk

2) 代码运行时修改：
Java代码：jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=gbk
PHP代码：header("Content-Type:text/html;charset=gb2312");
C语言代码：int mysql_set_character_set( MYSQL * mysql, char * csname);
该函数用于为当前连接设置默认的字符集。字符串csname指定了1个有效的字符集名称。连接校对成为字符集的默认校对。该函数的工作方式与SET NAMES语句类似，但它还能设置mysql- > charset的值，从而影响了由mysql_real_escape_string() 设置的字符集。

一般的，推荐使用utf8编码格式。





4. Mysql命令use：使用数据库
use命令可以让我们来使用数据库。
use命令格式： use <数据库名>;

例如，如果xhkdb数据库存在，尝试存取它：
   mysql> use xhkdb;
屏幕提示：Database changed
   mysql> \s 
   查看当前数据库 Current database 的值。

1) use 语句可以通告MySQL把db_name数据库作为默认（当前）数据库使用，用于后续语句。该数据库保持为默认数据库，直到语段的结尾，或者直到出现下一个不同的use语句：
   mysql> USE db1;
   mysql> SELECT COUNT(*) FROM mytable;   # selects from db1.mytable
   mysql> USE db2;
   mysql> SELECT COUNT(*) FROM mytable;   # selects from db2.mytable

2) 使用USE语句为一个特定的当前的数据库做标记，不会阻碍您访问其它数据库中的表。下面的例子可以从db1数据库访问author表，并从db2数据库访问editor表：
    mysql> USE db1;
    mysql> SELECT author_name,editor_name FROM author,db2.editor
        ->       WHERE author.editor_id = db2.editor.editor_id;

use语句被设立出来，用于与Sybase相兼容。

有些网友问到，连接以后怎么退出。其实，不用退出来，use 数据库后，使用show databases就能查询所有数据库，如果想跳到其他数据库，用
    use 其他数据库名字
就可以了。





5. drop命令用于删除数据库。
drop命令格式：drop database <数据库名>;

例如，删除名为 xhkdb的数据库：
mysql> drop database xhkdb;

[例1] 删除一个已经确定存在的数据库：
   mysql> drop database drop_database;
   Query OK, 0 rows affected (0.00 sec)

[例2] 删除一个不确定存在的数据库：
    mysql> drop database drop_database;
    ERROR 1008 (HY000): Can't drop database 'drop_database'; database doesn't exist
    // 发生错误，不能删除'drop_database'数据库，该数据库不存在。

    mysql> drop database if exists drop_database;
    Query OK, 0 rows affected, 1 warning (0.00 sec)
    //产生一个警告说明此数据库不存在

    mysql> create database drop_database;  // 创建一个数据库
    Query OK, 1 row affected (0.00 sec)
    mysql> drop database if exists drop_database;  // if exists 判断数据库是否存在，不存在也不产生错误
    Query OK, 0 rows affected (0.00 sec)





========================================
Mysql命令select：当前选择（连接）的数据库
----------------------------------------
select命令表示当前选择（连接）的数据库。

select命令格式：mysql> select database();

MySQL中SELECT命令类似于其他编程语言里的print或者write，你可以用它来显示一个字符串、数字、数学表达式的结果等等。如何使用MySQL中SELECT命令的特殊功能呢？

1) 显示MYSQL的版本
mysql> select version(); 
+--------- --------------+ 
| version()             | 
+--------- --------------+ 
| 6.0.4-alpha-community | 
+---------- -------------+ 
1 row in set (0.02 sec) 

2) 显示当前时间
mysql> select now(); 
+---------- -----------+ 
| now()               | 
+---------- -----------+ 
| 2009-09-15 22:35:32 | 
+---------- -----------+ 
1 row in set (0.04 sec) 

3) 显示年月日
SELECT DAYOFMONTH(CURRENT_DATE); 
+------------ --------------+ 
| DAYOFMONTH(CURRENT_DATE) | 
+------------- -------------+ 
|                       15 | 
+------------- -------------+ 
1 row in set (0.01 sec) 
  
SELECT MONTH(CURRENT_DATE); 
+---------- -----------+ 
| MONTH(CURRENT_DATE) | 
+---------- -----------+ 
|                   9 | 
+--------- ------------+ 
1 row in set (0.00 sec) 
  
SELECT YEAR(CURRENT_DATE); 
+---------- ----------+ 
| YEAR(CURRENT_DATE) | 
+--------- -----------+ 
|               2009 | 
+--------- -----------+ 
1 row in set (0.00 sec) 

4) 显示字符串
mysql> SELECT "welecome to my blog!"; 
+--------- -------------+ 
| welecome to my blog! | 
+-------- --------------+ 
| welecome to my blog! | 
+-------- --------------+ 
1 row in set (0.00 sec) 

5) 当计算器用
select ((4 * 4) / 10 ) + 25; 
+--------- -------------+ 
| ((4 * 4) / 10 ) + 25 | 
+--------- -------------+ 
|                26.60 | 
+---------- ------------+ 
1 row in set (0.00 sec) 

6) 串接字符串
select CONCAT(f_name, " ", l_name) 
AS Name 
from employee_data 
where title = 'Marketing Executive'; 
+---------------+ 
| Name          | 
+---------------+ 
| Monica Sehgal | 
| Hal Simlai    | 
| Joseph Irvine | 
+---------------+ 
3 rows in set (0.00 sec) 

注意：这里用到CONCAT()函数，用来把字符串串接起来。另外，我们还用到以前学到的AS给结果列'CONCAT(f_name, " ", l_name)'起了个假名。



========================================
mysql常用命令: 表操作与数据类型
----------------------------------------
表操作：
（1）新增表：create table table名(字段名,类型, ...) charset utf8;

（2）查看所有表：show tables;
	查看部分表：show tables like 'X';
	查看表结构： desc 表名;  或 show columns from 表名;
	查看创建表使用的sql语句： show create table 表名;
（4）修改表名：rename table oldname to newname;
（5）删除表：drop table 表1,表2, ...;




1. create table命令用来创建数据表。
命令格式：create table <表名> (<字段名1> <类型1> [,..<字段名n> <类型n>]);

例如，建立一个名为MyClass的表：
字段名	数字类型	数据宽度	是否为空	是否主键	自动增加	默认值
id	int	4	否	primary key	auto_increment	 
name	char	20	否	 	 	 
sex	int	4	否	 	 	0
degree	double	16	是	 

mysql> create table MyClass(
    > id int(4) not null primary key auto_increment,
    > name char(20) not null,
    > sex int(4) not null default '0',
    > degree double(16,2));
#

例2: 
CREATE TABLE `think_weibo` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `uid` int(20) NOT NULL,
  `content` text,
  `add_time` varchar(30) DEFAULT NULL,
  `cid` int(10) DEFAULT NULL,
  `archive` int(10) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


例3：>show create table mysql.user;
前面略，最后一行是：
ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='Users and global privileges'
其中 COMMENT 是注释吧？




(2)mysql 常见数据类型
MySQL 数据类型 https://www.runoob.com/mysql/mysql-data-types.html
char(20)















2. 查看表
(1)列出（当前数据库的）所有表
mysql> show tables;
+----------------+
| Tables_in_wang |
+----------------+
| EMPLOYEE       |
| msg_English    |
| think_weibo    |
| usarrests      |
| user           |
+----------------+
5 rows in set (0.00 sec)


(2)desc 查看表结构：
mysql> desc think_weibo;
mysql> show columns from think_weibo; #两条语句效果相同
+----------+-------------+------+-----+---------+----------------+
| Field    | Type        | Null | Key | Default | Extra          |
+----------+-------------+------+-----+---------+----------------+
| id       | int(10)     | NO   | PRI | NULL    | auto_increment |
| uid      | int(20)     | NO   |     | NULL    |                |
| content  | text        | YES  |     | NULL    |                |
| add_time | varchar(30) | YES  |     | NULL    |                |
| cid      | int(10)     | YES  |     | NULL    |                |
| archive  | int(10)     | YES  |     | NULL    |                |
+----------+-------------+------+-----+---------+----------------+
使用MySQL数据库desc 表名时，我们看到Key那一栏，可能会有4种值，即 ' '，'PRI'，'UNI'，'MUL'。
	如果Key是空的，那么该列值的可以重复，表示该列没有索引，或者是一个非唯一的复合索引的非前导列；
	如果Key是PRI，那么该列是主键的组成部分；
	如果Key是UNI，那么该列是一个唯一值索引的第一列（前导列），并别不能含有空值（NULL）；
	如果Key是MUL，那么该列的值可以重复，该列是一个非唯一索引的前导列（第一列）或者是一个唯一性索引的组成部分但是可以含有空值NULL。

如果对于一个列的定义，同时满足上述4种情况的多种，比如一个列既是PRI，又是UNI，那么"desc 表名"的时候，显示的Key值按照优先级来显示 PRI->UNI->MUL。那么此时，显示PRI。

一个唯一性索引列可以显示为PRI，并且该列不能含有空值，同时该表没有主键。

一个唯一性索引列可以显示为MUL，如果多列构成了一个唯一性复合索引，因为虽然索引的多列组合是唯一的，比如ID+NAME是唯一的，但是没一个单独的列依然可以有重复的值，只要ID+NAME是唯一的即可。


(3)show create table xx 查看创建这个表使用的sql语句
mysql> show create table think_weibo;





4. Mysql命令rename：修改表名
命令格式：rename table 原表名 to 新表名;
例如，在表MyClass名字更改为YouClass：
    mysql> rename table MyClass to YouClass;

命令格式2:（重新命名表名）把dept表的名字变成dept_tb:
	mysql> alter table dept rename to dept_tb;

当你执行 RENAME 时，你不能有任何锁定的表或活动的事务。你同样也必须有对原初表的 ALTER 和 DROP 权限，以及对新表的 CREATE 和 INSERT 权限。

如果在多表更名中，MySQL 遭遇到任何错误，它将对所有被更名的表进行倒退更名，将每件事务退回到最初状态。

RENAME TABLE 在 MySQL 3.23.23 中被加入。




5. drop table命令用于删除数据表。
命令格式：drop table <表名>;
例如，删除表名为 MyClass 的表：
    mysql> drop table MyClass;

DROP TABLE用于删除一个或多个表。您必须有每个表的DROP权限。所有的表数据和表定义会被取消，所以使用本语句要小心！

注意：对于一个带分区的表，DROP TABLE会永久性地取消表定义，取消各分区，并取消储存在这些分区中的所有数据。DROP TABLE还会取消与被取消的表有关联的分区定义（.par）文件。

对于不存在的表，使用IF EXISTS用于防止错误发生。当使用IF EXISTS时，对于每个不存在的表，会生成一个NOTE（警告）。

RESTRICT和CASCADE可以使分区更容易。目前，RESTRICT和CASCADE不起作用。//？？？todo






========================================
mysql常用命令: 数据操作(select查询语句是重点！)
----------------------------------------
增：insert into 表名(列1, 列2, ...) values (v1, v2, ...);
删：delete from 表名 where 条件;
改：update 表名 set 字段='值' [where 条件];
查：select 字段列表 from 表名 [where 条件];


正确的UPDATE SQL语句，需要更新的多个字段之间使用逗号连接：
UPDATE coupon_pool SET serialno = '319010010', name = '名字10'  WHERE id = 10;


1. Mysql命令insert into：向表中插入数据（记录）
命令格式：insert into <表名> [(<字段名1>[,..<字段名n > ])] values ( 值1 )[, ( 值n )];

例如：往表 MyClass中插入两条记录，这两条记录表示：编号为1的名为Tom的成绩为96.45，编号为2 的名为Joan 的成绩为82.99，编号为3 的名为Wang 的成绩为96.5。
    mysql> insert into MyClass values(1,'Tom',96.45),(2,'Joan',82.99), (2,'Wang', 96.59);
   或者向score表中仅插入分数，
   mysql> insert into Score(uid,degree) values(1,96.45),(2,82.99), (2, 96.59);
#




2.Mysql命令delete from：删除记录
命令格式：delete from 表名 where 表达式

例如，删除表 MyClass中编号为1 的记录：
    mysql> delete from MyClass where id=1;

请对比一下删除数据前后表的变化。
FirstName	LastName	Age
Peter	Griffin	35
Glenn	Quagmire	33


(2)
下面以PHP代码为例删除 "Persons" 表中所有 LastName='Griffin' 的记录：
<?php 
   $con = mysql_connect("localhost","peter","abc123"); 
   if (!$con){
      die('Could not connect: ' . mysql_error()); 
   } 
   mysql_select_db("my_db", $con);
   mysql_query("DELETE FROM Persons WHERE LastName='Griffin'"); 
   mysql_close($con); 
?>

在这次删除之后，表是这样的：
FirstName	LastName	Age
Glenn	Quagmire	33





3. Mysql命令update set：修改表中的数据
命令格式：update 表名 set 字段=新值,… where 条件;

举例如下：
mysql> update MyClass set name='Mary' where id=1;



例子1，单表的MySQL UPDATE语句：
UPDATE [LOW_PRIORITY] [IGNORE] tbl_name SET col_name1=expr1 [, col_name2=expr2 ...] [WHERE where_definition] [ORDER BY ...] [LIMIT row_count];


例子2，多表的UPDATE语句：
UPDATE [LOW_PRIORITY] [IGNORE] table_references SET col_name1=expr1 [, col_name2=expr2 ...] [WHERE where_definition];


UPDATE语法可以用新值更新原有表行中的各列。
SET子句指示要修改哪些列和要给予哪些值。
WHERE子句指定应更新哪些行。如果没有WHERE子句，则更新所有的行。
如果指定了ORDER BY子句，则按照被指定的顺序对行进行更新。
LIMIT子句用于给定一个限值，限制可以被更新的行的数目。

特别注意：update一定要有where子句，否则会更新所有记录！后果可能很可怕！





========================================
|-- select5种子句：查询表中的数据（记录）
----------------------------------------
select 语句是数据库查询中使用最频繁的语句，要熟悉其各个子句的功能和用法。

语法：
SELECT select_list　　　
FROM table_name
[ WHERE search_condition ]
[ GROUP BY group_by_expression ]
[ HAVING search_condition ]
[ ORDER BY order_expression [ ASC | DESC ] ]
[limit m,n]

-- 示例：
select classNo  from table_name  
group by classNo   
having(avg(成绩)>70) 
order by classNo  
limit 0,10



group by 有一个原则,就是 select 后面的所有列中,没有使用聚合函数的列,必须出现在 group by 后面
group by 分组属性 having 分组过滤的条件
这个是按照分组属性进行分组，所有分组属性上值相同的记录被分为一组，作为结果中的一条记录，后面的having是对分组进行过滤的条件，必须和group by一起使用。

order by 排序属性 是对结果集合进行排序，可以是升序asc，也可以是降序desc。

limit 起始记录位置，取记录的条数。对记录进行选取，主要用来实现分页功能
-- limit 0,10是从第一条开始,取10条数据


https://www.cnblogs.com/-beyond/p/8490020.html
https://www.cnblogs.com/ccw869476711/p/9210346.html
https://www.cnblogs.com/fengli9998/p/7473561.html



1) 查询所有行
命令格式： select <字段1, 字段2, ...> from < 表名 > where < 表达式 >;

例如，查看表 MyClass 中所有数据：
   mysql> select * from MyClass;

2) 查询前几行数据
例如，查看表 MyClass 中前2行数据：
    mysql> select * from MyClass order by id limit 0,2;

select一般配合where使用，以查询更精确更复杂的数据。

3)select 后可以使用DISTINCT去重 > select distinct cat_id from goods;




1、创建练习的表
create table goods (
  goods_id mediumint(8) unsigned primary key auto_increment,
  goods_name varchar(120) not null default '',
  cat_id smallint(5) unsigned not null default '0',
  brand_id smallint(5) unsigned not null default '0',
  goods_sn char(15) not null default '',
  goods_number smallint(5) unsigned not null default '0',
  shop_price decimal(10,2) unsigned not null default '0.00',
  market_price decimal(10,2) unsigned not null default '0.00',
  click_count int(10) unsigned not null default '0'
) engine=myisam default charset=utf8;



查看表结构
mysql> desc goods;
+--------------+------------------------+------+-----+---------+----------------+
| Field        | Type                   | Null | Key | Default | Extra          |
+--------------+------------------------+------+-----+---------+----------------+
| goods_id     | mediumint(8) unsigned  | NO   | PRI | NULL    | auto_increment |
| goods_name   | varchar(120)           | NO   |     |         |                |
| cat_id       | smallint(5) unsigned   | NO   |     | 0       |                |
| brand_id     | smallint(5) unsigned   | NO   |     | 0       |                |
| goods_sn     | char(15)               | NO   |     |         |                |
| goods_number | smallint(5) unsigned   | NO   |     | 0       |                |
| shop_price   | decimal(10,2) unsigned | NO   |     | 0.00    |                |
| market_price | decimal(10,2) unsigned | NO   |     | 0.00    |                |
| click_count  | int(10) unsigned       | NO   |     | 0       |                |
+--------------+------------------------+------+-----+---------+----------------+
9 rows in set (0.02 sec)


插入数据： 
insert into `goods` values
(1,'kd876',4,8,'ecs000000',1,1388.00,1665.60,9),
(3,'诺基亚原装5800耳机',8,1,'ecs000002',24,68.00,81.60,3),
(4,'诺基亚n85原装充电器',8,1,'ecs000004',17,58.00,69.60,0),
(5,'索爱原装m2卡读卡器',11,7,'ecs000005',8,20.00,24.00,3),
(6,'胜创kingmax内存卡',11,0,'ecs000006',15,42.00,50.40,0),
(7,'诺基亚n85原装立体声耳机hs-82',8,1,'ecs000007',20,100.00,120.00,0),
(8,'飞利浦9@9v',3,4,'ecs000008',1,399.00,478.79,10),
(9,'诺基亚e66',3,1,'ecs000009',4,2298.00,2757.60,20),
(10,'索爱c702c',3,7,'ecs000010',7,1328.00,1593.60,11),
(11,'索爱c702c',3,7,'ecs000011',1,1300.00,0.00,0),
(12,'摩托罗拉a810',3,2,'ecs000012',8,983.00,1179.60,13),
(13,'诺基亚5320 xpressmusic',3,1,'ecs000013',8,1311.00,1573.20,13),
(14,'诺基亚5800xm',4,1,'ecs000014',1,2625.00,3150.00,6),
(15,'摩托罗拉a810',3,2,'ecs000015',3,788.00,945.60,8),
(16,'恒基伟业g101',2,11,'ecs000016',0,823.33,988.00,3),
(17,'夏新n7',3,5,'ecs000017',1,2300.00,2760.00,2),
(18,'夏新t5',4,5,'ecs000018',1,2878.00,3453.60,0),
(19,'三星sgh-f258',3,6,'ecs000019',12,858.00,1029.60,7),
(20,'三星bc01',3,6,'ecs000020',12,280.00,336.00,14),
(21,'金立 a30',3,10,'ecs000021',40,2000.00,2400.00,4),
(22,'多普达touch hd',3,3,'ecs000022',1,5999.00,7198.80,16),
(23,'诺基亚n96',5,1,'ecs000023',8,3700.00,4440.00,17),
(24,'p806',3,9,'ecs000024',100,2000.00,2400.00,35),
(25,'小灵通/固话50元充值卡',13,0,'ecs000025',2,48.00,57.59,0),
(26,'小灵通/固话20元充值卡',13,0,'ecs000026',2,19.00,22.80,0),
(27,'联通100元充值卡',15,0,'ecs000027',2,95.00,100.00,0),
(28,'联通50元充值卡',15,0,'ecs000028',0,45.00,50.00,0),
(29,'移动100元充值卡',14,0,'ecs000029',0,90.00,0.00,0),
(30,'移动20元充值卡',14,0,'ecs000030',9,18.00,21.00,1),
(31,'摩托罗拉e8 ',3,2,'ecs000031',1,1337.00,1604.39,5),
(32,'诺基亚n85',3,1,'ecs000032',4,3010.00,3612.00,9);

## Query OK, 31 rows affected (0.01 sec)
## Records: 31  Duplicates: 0  Warnings: 0


查看全部数据:
mysql> select * from goods;



查询中用到的关键词主要包含六个，并且他们的顺序依次为
select--from--
where--group by--having--order by--limit





2、Where 条件查询
where常用运算符
	比较运算符: <, <=, =, !=, in, beteen A1 and A2(包括指定的开始值和结束值), is NULL, is not null,  
	逻辑运算符: NOT 或!, OR 或 ||, AND 或 &&
	通配符2个，like 模糊匹配: % 通配任意字符, _ 通配单一字符
#
(1)其他DBMS允许使用NOT对各种条件取反，但在MySQL中，只支持使用NOT对IN、BETWEEN和EXISTS子句取反。
(2)使用通配符的技巧
1).在能使用其他操作符的情况下，尽量不要使用通配符，因为它的搜索事件要比其他操作符的长
2).尽量不要把通配符用在搜索模式的开始处。放在搜索模式的开始处，搜索起来是最慢的。
3).仔细检查通配符的位置。如果放错地方，可能不会返回想要的数据。



2.1 取出goods商店价格(shop_price)低于或等于100元的商品
mysql> select * from goods where shop_price <=100;
select goods_id,cat_id,goods_name,shop_price from goods where shop_price <= 100;


2.2 取出第4栏目(cat_id)和第11栏目的商品(不许用or)
mysql> select * from goods where cat_id=4 or cat_id=11;
mysql> select * from goods where cat_id in (4,11);
select goods_id,cat_id,goods_name,shop_price  from goods where cat_id in (4, 11);

IN比or的优点：
1).IN操作符语法更加简洁直观，容易管理
2).IN操作符执行更快。
3).IN的最大优点是可以包含其他SELECT语句，从而可以动态地简历WHERE语句，第14章会对此进行详细介绍。



2.3 取出100<=价格(shop_price)<=500的商品(不许用and)
mysql> select * from goods where shop_price>=100 and shop_price<=500;
mysql> select * from goods where shop_price between 100 and 500;


2.4 取出名字以"诺基亚"开头的商品
mysql> select * from goods where goods_name like "诺基亚%";

取出名字为"诺基亚Nxx"的手机
mysql> select * from goods where goods_name like "诺基亚n__";


2.5 查出本店价格比市场价格省200元以上的商品
mysql> select * from goods where market_price-shop_price>200;
mysql> select *,(market_price-shop_price) as discount from goods where market_price-shop_price>200;






3. group by 分组
作用:把行 按 字段 分组
语法:group by col1,col2,...colN
运用场合:常见于统计场合,如按栏目计算帖子数, 统计每个人的平均成绩等.

(1)统计函数:
	max: 求最大 
	min: 求最小 
	sum: 求总和 
	avg: 求平均 
	count:求总行数（count不能识别null）

mysql> select min(shop_price) from goods;
+-----------------+
| min(shop_price) |
+-----------------+
|           18.00 |
+-----------------+
1 row in set (0.01 sec)


(2) 计算每一种商品的库存数量之和
mysql> select goods_name, sum(goods_number) from goods group by goods_name;

每一类商品的库存数量之和
mysql> select cat_id, sum(goods_number) from goods group by cat_id;





4. having 筛选
(1)having 与where异同点?
having 与where类似，可筛选数据
where后的表达式怎么写，having就怎么写

where针对表中的列发挥作用,查询数据
having针对查询结果中的列(也就是不在数据表中的列)发挥作用,筛选数据


(2)查询每个栏目(cat_id)下，积压的货款，且筛选出积压金额>20000的栏目
mysql> select cat_id, sum(goods_number*shop_price) as total from goods group by cat_id having total>20000;
+--------+-----------+
| cat_id | total     |
+--------+-----------+
|      3 | 356235.00 |
|      5 |  29600.00 |
+--------+-----------+
2 rows in set (0.00 sec)



(3) where-having-group综合练习题
# 建表
create table result (
    name varchar(20),
    subject varchar(20),
    score tinyint
)engine myisam charset utf8;

# 插入数据
insert into result
values
('张三','数学',90),
('张三','语文',50),
('张三','地理',40),
('李四','语文',55),
('李四','政治',45),
('王五','政治',30);

# 查询出2门及2门以上不及格者的平均成绩
mysql> select name, sum(score<60) as gk, avg(score) as pj from result group by name having gk>=2;
+--------+------+---------+
| name   | gk   | pj      |
+--------+------+---------+
| 张三   |    2 | 60.0000 |
| 李四   |    2 | 50.0000 |
+--------+------+---------+





5. order by 排序
按一个或多个字段对查询结果进行排序
用法:order by col1,col2,col3
各种排序场合,如新闻按点击量排序,商品按价格排序等
默认排序:升续排列

(1)asc代表升序（默认），desc代表降序。放在字段后面。大小写均可。
select goods_id,cat_id,goods_name,shop_price
from goods
order by cat_id asc, shop_price desc;





6. limit 限制结果条数
Limit 限制条数
limit [offset,] N,限制结果取N条
用法: limit [偏移量,],取出条目
分页应用中最为典型,如第1页取1-20条,第2页取21-40条.


(1)取出栏目3下，价格降序排列的前10条数据
select goods_id, cat_id, goods_name, shop_price
from goods
where cat_id = 3
order by shop_price desc
limit 10;

(2)查询本店商品价格从高到底排序的第三名到第五名的商品
select goods_id, goods_name, shop_price
from goods
order by shop_price desc
limit 2, 3; 
# limit 2,3中，2代表偏移量，从3个开始数，3代表要3条数据

分页的话，就可以设置成
limit 10*(page-1), 10; #第1页是(0-10]，第2页是(10,20],...












https://juejin.im/post/5c80a14bf265da2dd0526cc6#heading-22


========================================
|-- select 子查询
----------------------------------------
数据接上文goods表。


7. where子查询
查询每个栏目下goods_id最大的商品
(1)首先查出每个栏目下的goods_id
select cat_id, max(goods_id) from goods 
group by cat_id;
有商品id了，缺少的商品名怎么补上？

(2)把上面的查询结果作为where的子句
mysql> select goods_id, goods_name from goods 
where goods_id in 
(select max(goods_id) from goods  group by cat_id);
+----------+---------------- ------------------------+
| goods_id | goods_name                             |
+----------+---------------- ------------------------+
|        6 | 胜创kingmax内存卡                      |
|        7 | 诺基亚n85原装立体声耳机hs-82           |
|       16 | 恒基伟业g101                           |
|       18 | 夏新t5                                 |
|       23 | 诺基亚n96                              |
|       26 | 小灵通/固话20元充值卡                  |
|       28 | 联通50元充值卡                         |
|       30 | 移动20元充值卡                         |
|       32 | 诺基亚n85                              |
+----------+---------------- ------------------------+





8. from子查询
查询每个栏目下最贵的商品
(1) 按照cat_id升序排序，再按照goods_id降序排序：
select goods_id, cat_id, goods_name,shop_price from goods 
order by cat_id, shop_price desc;

(2)
select cat_id, max(shop_price) from 
(select goods_id, cat_id, goods_name,shop_price from goods order by cat_id, shop_price desc) as tmp group by cat_id;
+--------+-----------------+
| cat_id | max(shop_price) |
+--------+-----------------+
|      2 |          823.33 |
|      3 |         5999.00 |
|      4 |         2878.00 |
|      5 |         3700.00 |
|      8 |          100.00 |
|     11 |           42.00 |
|     13 |           48.00 |
|     14 |           90.00 |
|     15 |           95.00 |
+--------+-----------------+






9. exists子查询

# 需要再建一张表，结合上面的goods表练习
create table category(
    cat_id int auto_increment primary key,
    cat_name varchar(20) not null default ''
)engine myisam charset utf8;

# 插入数据
insert into category(cat_name)
values 
('手机类型'),
('CDMA手机'),
('GSM手机'),
('3G手机'),
('双模手机'),
('手机配件'),
('充电器'),
('耳机'),
('电池'),
('读卡器和内存'),
('充值卡'),
('小灵通/固话充值卡'),
('移动手机充值卡'),
('联通手机充值卡');

mysql> select * from category;
+--------+---------------------------+
| cat_id | cat_name                  |
+--------+---------------------------+
|      1 | 手机类型                  |
|      2 | CDMA手机                  |
|      3 | GSM手机                   |
|      4 | 3G手机                    |
|      5 | 双模手机                  |
|      6 | 手机配件                  |
|      7 | 充电器                    |
|      8 | 耳机                      |
|      9 | 电池                      |
|     10 | 读卡器和内存              |
|     11 | 充值卡                    |
|     12 | 小灵通/固话充值卡         |
|     13 | 移动手机充值卡            |
|     14 | 联通手机充值卡            |
+--------+---------------------------+


把栏目下有商品的商品栏目取出来（不是每个cat_id里都有商品）
(1) 连接表查询
select * from goods as g, category as c 
where g.cat_id=c.cat_id;

(2)找到商品件数？
select cat_id, sum(goods_number) as number from 
(select c.cat_id, goods_number  from goods as g, category as c 
where g.cat_id=c.cat_id) as tmp 
group by cat_id 
having number >0 
order by cat_id;
+--------+--------+
| cat_id | number |
+--------+--------+
|      3 |    203 |
|      4 |      3 |
|      5 |      8 |
|      8 |     61 |
|     11 |     23 |
|     13 |      4 |
|     14 |      9 |
+--------+--------+


(3)参考答案貌似只需要goods表中有goods_id即可，即使0件库存也算该类别有商品。
mysql> select cat_id,cat_name from category where exists 
    -> (select * from goods where goods.cat_id = category.cat_id);
+--------+-----------------------+
| cat_id | cat_name              |
+--------+-----------------------+
|      2 | CDMA手机              |
|      3 | GSM手机               |
|      4 | 3G手机                |
|      5 | 双模手机              |
|      8 | 耳机                  |
|     11 | 充值卡                |
|     13 | 移动手机充值卡        |
|     14 | 联通手机充值卡        |
+--------+-----------------------+

我的版本：不好，很复杂，而且没有cat_name
select cat_id, count(goods_id) as count from 
(select c.cat_id, goods_id  from goods as g, category as c  where g.cat_id=c.cat_id) as tmp 
group by cat_id 
having count >0 
order by cat_id;
+--------+-------+
| cat_id | count |
+--------+-------+
|      2 |     1 |
|      3 |    15 |
|      4 |     3 |
|      5 |     1 |
|      8 |     3 |
|     11 |     2 |
|     13 |     2 |
|     14 |     2 |
+--------+-------+





10. 为什么建表的时候要写not null default ''

# 我们先建立一张表
create table test9(
    sname varchar(20)
)engine myisam charset utf8;

# 插入数据
insert into test9
values
('lisi'),
('wangwu'),
(null);

mysql> select * from test9;
+--------+
| sname  |
+--------+
| lisi   |
| wangwu |
| NULL   |
+--------+


请对比以下两张图
select sname from test9 where sname != null;
select sname from test9 where sname = null;
结构都是 Empty set (0.00 sec)

这就奇怪了，！=null得到空集，=null也是空集。

原因在于null必须用特殊的表达式来表示，分为 is null 和is not null,例如
select sname from test9 where sname is not null;
+--------+
| sname  |
+--------+
| lisi   |
| wangwu |
+--------+





========================================
|-- Mysql正则表达式匹配
----------------------------------------
把正则当成一门单独的技术进行学习会比较好。
它很强大，值得花时间琢磨。


例1：MySql 查询以逗号分隔的字符串的方法
解决: select oligo_id, tag_ids from wjl_oligo where tag_ids REGEXP '(^|,)5($|,)';
2 3,5
3 5,6
5 3,5,7
7 5,15
10 5
13 3,5,6
14 3,5,7,8


例2：Mysql查询字段中非数字的条目。
右连接，以右侧的为准，如果左侧没有则空着。
select tbID, age, residence from background b right join vntr v on b.tbID=v.ID where v.Lineage='Lineage2' and residence REGEXP '[^0-9.]' order by residence;

tbID	age	residence
TB11219	24	10天
TB05112	16	1个月
TB02107	38	1个月
而 residence 为10, 40的纯数字则没有匹配。





========================================
mysql常用命令: 字段操作 alter table命令
----------------------------------------
增：alter table 表名 add 字段名 数据类型 【位置】；
删：alter table 表名 drop 字段名；
改：alter table 表名 modify 字段 数据类型 【位置】；
重命名：alter table 表名 change oldname newname  数据类型 【位置】；


查看表中列属性 
show columns from table-name;
或者
desc tableName;



1.alter add命令用来增加表的字段。
命令格式：alter table 表名 add 字段 类型 其他;

(1) 增加字段
    mysql> ALTER TABLE table_name ADD field_name field_type;

例如，在表MyClass中添加了一个字段passtest，类型为int(4)，默认值为0：
   mysql> alter table MyClass add passtest int(4) default '0';
#

增加列(单列)
alter table table-name add col-name col-type comment 'xxx';

增加列(多列)
alter table table-name add col-name col-type comment 'xxx', add col-name col-type(col-length) comment 'xxx';

1)增加表字段并指明字段放置为第一列
alter table table-name add col-name col-type COMMENT 'sss' FIRST;

2)增加表字段并指明字段放置为特定列后面
alter table table-name add col-name col-type after col-name-1;




(2) 加索引
   mysql> alter table 表名 add index 索引名 (字段名1[，字段名2 …]);
例子： mysql> alter table employee add index emp_name (name);

2) 加主关键字的索引
    mysql> alter table 表名 add primary key (字段名);

例子： mysql> alter table employee add primary key(id);

3) 加唯一限制条件的索引
   mysql> alter table 表名 add unique 索引名 (字段名);

例子： mysql> alter table employee add unique emp_name2(cardnumber);





2.alter drop命令
(1) 删除字段
    MySQL> ALTER TABLE table_name DROP field_name;

(2) 删除某个索引
   mysql> alter table 表名 drop index 索引名;
例子： mysql>alter table employee drop index emp_name;




3.使用MODIFY修改字段类型
alter table table-name modify column col-name col-type;





4.使用CHANGE修改字段类型
  mysql> ALTER TABLE table_name CHANGE old_field_name new_field_name field_type;


使用CHANGE修改字段名称
alter table table-name change old-col-name new-col-name col-type;

修改列类型、长度
alter table table-name change old-col-name new-col-name new-col-type;
#



5.其他修改
修改表名 rename table old-table-name to new-table-name;

为字段设置NULL和DEFAULT
alter table table-name modify col-name col-type not null default 100;

修改字段的默认值
alter table table-name alter col-name set default 10000;

字段删除默认值 
alter table table-name alter col-name drop default;




实例：	
select * from think_user;

(1)-- 删除字段
ALTER TABLE think_user DROP passwd;

(2)-- 在user字段后面增加passwd字段
alter table think_user add passwd char(35) default 'e10adc3949ba59abbe56e057f20f883e' after `user`;
默认是123456的md5加密后结果。


refer
https://www.cnblogs.com/lwcode6/p/11326666.html
https://www.runoob.com/mysql/mysql-alter.html


========================================
Mysql中的函数
----------------------------------------


1. 使用计算字段
某些场景下，存储在的表中的数据不是我们所需要的，我们需要对它进行转换、计算或格式化过，这就是计算字段的用途。

(1)使用Concat()函数对字段进行拼接
多数DBMS使用+或||来实现拼接， MySQL则使用Concat()函数来对字段进行拼接。Concat()可以将多个字符串拼接成一个

mysql> select concat(goods_name,"(",goods_number,")" ) from goods order by goods_number desc;
+-------------- -------------- ----------------+
| concat(goods_name,"(",goods_number,")" )   |
+------------- ---------------- ---------------+
| p806(100)                                  |
| 金立 a30(40)                               |
| 诺基亚原装5800耳机(24)                     |
| 诺基亚n85原装立体声耳机hs-82(20)           |
| 诺基亚n85原装充电器(17)                    |
| 胜创kingmax内存卡(15)                      |
...


(2)使用Trim()函数来去除空格
Trim()函数 ：去除字符串左右两边的空格 
LTrim()函数 ：去除字符串左边的空格 
RTrim()函数 ：去除字符串右边的空格 

select concat( trim(goods_name),"(",goods_number,")" ) from goods order by goods_number desc;


(3)使用别名:as 关键字
我们使用Concat()函数拼接出来的字段是没有名字的，可以使用AS关键字给它赋予一个名字，当然当已有的字段包含不符合规定的字符时，也可以AS关键字给一个已有字段起别名。

select concat( trim(goods_name),"(",goods_number,")" ) as note from goods order by goods_number desc;


(4)执行算术计算
除了使用Concat()函数得到一个计算字符，也可以使用+，-，，/计算得到一个字段。
mysql> select goods_id, goods_name, goods_number*shop_price as sumMoney from goods order by sumMoney desc;
+----------+-------------+-----------+
| goods_id | goods_name| sumMoney  |
+----------+------------+-----------+
|       24 | p806      | 200000.00 |
|       21 | 金立 a30  |  80000.00 |
|       23 | 诺基亚n96 |  29600.00 |






2.数据处理函数
除了使用SQL语句对数据进行处理，还可以使用一些函数对数据进行处理，需要注意的是，函数没有SQL的可移植性那么强。

(1)文本处理函数
1)left() 返回串左边的字符, 类似的Right(str, n)取出str右侧的n个字符。
select left(goods_name,3) from goods;
+--------------------+
| left(goods_name,3) |
+--------------------+
| kd8                |
| 诺基亚             |
| 诺基亚             |


2) length() 返回串的长度
3)locate() 找出串的一个子串，返回位置
select goods_name, locate("n", goods_name) as nLocate from goods;
+--------------------+---------+
| goods_name         | nLocate |
+--------------------+---------+
| kd876              |       0 |
| 诺基亚原装5800耳机 |       0 |
| 诺基亚n85原装充电器|       4 |
| 索爱原装m2卡读卡器 |       0 |
| 胜创kingmax内存卡  |       5 |

4) lower() 将串转换为小写， upper()转大写； select upper(goods_name) from goods;
5) LTrim() 去掉左边的空格; RTrim()去掉右侧的空格
6) substring() 返回子串的字符
7) 






========================================
Mysql实例：建库建表并插入数据
----------------------------------------
drop database if exists school;  // 如果存在school则删除
create database school;  // 建立库school
use school;  // 打开库SCHOOL
create table teacher(  // 建立表TEACHER
    id int(3) auto_increment not null primary key,
    name char(10) not null,
    address varchar(50) default ‘深圳’,
    year date
);  // 建表结束

// 以下为插入字段
insert into teacher values('','allen','大连一中','1976-10-10');
insert into teacher values('','jack', '大连二中','1975-12-23');
insert into teacher values('','glchengang','深圳一中','1976-10-10');
insert into teacher values('','jack','深圳一中','1975-12-23');


(1)
注意，在建表中：
将ID设为长度为3的数字字段:int(3)；并让它每个记录自动加一:auto_increment；并不能为空:not null；而且让它成为主键primary key。
将NAME设为长度为10的字符字段
将ADDRESS设为长度50的字符字段，而且缺省值为深圳。
将YEAR设为日期字段。


(2)
如果你在mysql提示符键入上面的命令也可以，但不方便调试。有两种方法来解决这个问题：
你可以将以上命令原样写入一个文本文件中，假设为school.sql，然后复制到c:\\下，并在DOS状态进入目录\mysql\bin，然后键入以下命令：
    mysql -uroot -p密码 < c:\\school.sql
如果成功，空出一行无任何显示；如有错误，会有提示。（以上命令已经调试，你只要将//的注释去掉即可使用）。
或者进入命令行后使用 mysql> source c:\\school.sql; 也可以将school.sql文件导入数据库中。

mysql>source d:\abc.sql 







========================================
|-- Mysql命令mysqldump：备份数据库、恢复数据库
----------------------------------------
1. mysqldump命令用来备份数据库。

mysqldump命令在DOS的\mysql\bin目录下执行。

1) 导出整个数据库(导出文件默认是存在mysql\bin目录下)
    mysqldump -u 用户名 -p 数据库名 > 导出的文件名
    mysqldump -u user_name -p123456 database_name > outfile_name.sql

2) 导出一个表
    mysqldump -u 用户名 -p 数据库名 表名> 导出的文件名
    mysqldump -u user_name -p database_name table_name > outfile_name.sql

3) 导出一个数据库结构
    mysqldump -u user_name -p -d –add-drop-table database_name > outfile_name.sql
    -d 没有数据 
	–add-drop-table 在每个create语句之前增加一个drop table

4) 带语言参数导出
    mysqldump -uroot -p –default-character-set=latin1 –set-charset=gbk –skip-opt database_name > outfile_name.sql

例如，将aaa库备份到文件back_aaa中：
[root@test1 root]# cd　/home/data/mysql
[root@test1 mysql]# mysqldump -u root -p --opt aaa > back_aaa


例：在windows下
# 任何目录调用，要用绝对路径 G:\xampp\mysql\bin\mysqldump
# 保存到任何指定的目录内，直接写绝对路径;
# -p后面要紧跟密码，不能有空格，也可以省略密码，回车后再下一行输入密码;
# wang是DB名字，word_unknown是表名字;
G:\xampp\mysql\bin\mysqldump -h y.biomooc.com -P 7070 -u root -p123456 wang word_unknown > G:\xampp\htdocs\IELTS\dict\backup\tb_word_unknown_20191127_1040.sql



2. 恢复 MySQL 数据库

要恢复 MySQL 数据库，可以使用以下命令：
	> mysql -u username -p password database_name < backup_file.sql
其中，username 表示要恢复的 MySQL 服务器的用户名，password 表示要恢复的 MySQL 服务器的密码，database_name 表示要恢复的 MySQL 数据库的名称，backup_file.sql 表示备份数据的文件名。




3. 小结

备份 MySQL 数据库
	> mysqldump -u root -p mydatabase > mydatabase_backup.sql
	该命令将备份名为 mydatabase 的 MySQL 数据库，并将备份数据保存到 mydatabase_backup.sql 文件中。
恢复 MySQL 数据库
	> mysql -u root -p mydatabase < mydatabase_backup.sql
	该命令将从备份文件 mydatabase_backup.sql 中恢复 mydatabase 数据库。








========================================
|-- Mysql实例：从excel导入数据到MySQL
----------------------------------------
1.修改mysql配置文件my.ini，打开所有utf8的设置项，重启mysql，查看mysql命令行中\s命令的提示。
建立表格，字段名和顺序要和excel一样。

2.excel保存为csv文件，用notepad++打开，删除第一行的表头，另存为utf8编码格式的；

3.使用如下mysql命令导入该文件
load data infile 'C:\\xxx_v0.3.7.csv' into table background fields terminated by ','; 


该语句的完整形式：
LOAD DATA LOCAL INFILE "C:\\wamp\\apps\\litigationinfo.csv"    --MariaDB10.1.21中需要去掉local关键字
REPLACE INTO TABLE litigationinfo   
CHARACTER SET utf8  
FIELDS TERMINATED BY ","   
ENCLOSED BY ""   
LINES TERMINATED BY "\r\n"  
IGNORE 1 LINES -- 忽略特定行数，CSV文件可以忽略掉第一行标题


http://www.alanjames.org/2009/08/mysql-row-n-was-truncated-a-solution/
建议增加行结尾语句：
'\r\n' for files that came from Windows systems
'\r' for files from VMS
'\n' for every other source.


例：
>load data infile 'E:\\tb-VNTR\\JJN\\bg-add-v0.3.2.csv' 
into table bg_add 
fields terminated by ',' 
LINES TERMINATED BY "\r\n" 
IGNORE 1 LINES; 

Query OK, 160 rows affected (0.30 sec)
Records: 160  Deleted: 0  Skipped: 0  Warnings: 0


如果依旧有报错：
> show warnings;
| Warning | 1262 | Row 20 was truncated; it contained more data than there wereinput columns |
| Warning | 1262 | Row 21 was truncated; it contained more data than there wereinput columns |
则需要检查是否csv文件最右边有空列: 用notepadd++打开csv文件看表头后面是否有连续逗号。



4.检查总行数和中文乱码问题。
推荐使用navicat、php等查看是否乱码。因为在windows的cmd窗口下始终不是utf8编码。


5.如果有必须要加添的字段，可以在完成数据导入后用SQL语句加添字段，实例如下：
ALTER TABLE litigationinfo ADD id INT NOT NULL PRIMARY KEY AUTO_INCREMENT FIRST


注意：
1).CSV文件及路径最好以英文命名。中文名称经测试无法正确执行。

2).建表时一定不要（请注意是一定不要）建好索引，外键约束等等，可以再数据导入完成后添加各种约束，否则数据的导入将会出错，或特别慢。当时我加了各种约束，导入一个120M+的CSV文件出错。
最后一点是忠告，浪费了我两个多小时来检查。

更多解释：http://blog.csdn.net/myslq/article/details/48176581


========================================
|-- Mysql实例：从mysql导出到excel
----------------------------------------
1.输出结果到csv文件：http://blog.csdn.net/fdipzone/article/details/48399831
select * from vntr v left join background b on v.ID=b.tbID where v.Lineage="Lineage2" 
into outfile 'c://vntrLeftJoinBackground.csv' fields terminated by ',' optionally enclosed by '"' lines terminated by '\r\n';
执行后，会把talbe中记录数据导出到/tmp/table.csv文件中。每个字段以,分隔，字段内容是字符串的以”包围，每条记录使用\r\n换行。
Query OK, 2900 rows affected (0.04 sec)
不过没有表头。


2.怎么加表头呢？不进入mysql的情况下输入mysql命令。
一般格式： mysql -u root -p -e"select * from tbName" dbName > fileName.txt
比如：mysql -u root -p -e"select * from vntr" tb > c://wjl.txt

实例： mysql -u root -p -e"select * from vntr v left join background b on v.ID=b.tbID where v.Lineage='Lineage2';" tb > E://tb-VNTR//inMySQL//LeftJoin//Lineage2_vntrLeftJoinBackground-v0.2.3.txt 
结果文件是tab分割的，用notepad++打开，复制到excel中即可。




========================================
使用技巧/维护
----------------------------------------





========================================
|-- 如何才能让这个字段自动从1开始自动递增呢？
----------------------------------------
本文给大家讲述如何使mysql重置自动递增id或自动递增列的方法。
我们只需要执行如下sql语句：
	ALTER TABLE tablename AUTO_INCREMENT = 1 ;
这样就实现了重置，重新从1开始递增
注意：如果自增列中仍有值，则还是从最大值+1开始递增，不会从1开始递增

另外彻底推倒重建表当然也是可以实现重置的
比如TRUNCATE TABLE，DROP TABLE，CREATE TABLE
不推荐使用



========================================
|-- MySQL从其他数据表或者查询结果中创建数据表
----------------------------------------
1.从其他数据表中创建数据表

创建表结构：
从其他数据表中创建数据表，可以使用如下命令：
create table ... like ...
该语句将创建一个新的数据表作为原始数据表的一份空白副本。它将把原始数据表的所有列属性都会一摸一样的复制过来，但是数据表的内容是空的。
create table user like `think_user`;

插入数据：
如果我们想填充它，可以使用如下命令:
Insert into user select * from think_user;


2.从查询结果中创建数据表
使用如下命令，从一个select语句中创建新的数据表。
create table ... select ...

例: 
#用于做破坏性操作之前对表备份：
CREATE TABLE background_v039 SELECT * FROM background;

我尝试跨库拷贝表，没有主键：
create table test.orders as select * from think.think_order;

该语句优点是不仅仅创建了数据表，还复制了数据表中的数据。
缺点是该语句不会复制所有的数据 列属性，如索引、auto_increment等。
因为结果集本身就不带索引等。 

http://blog.csdn.net/hsd2012/article/details/51434125

1)既复制表结构也复制表内容的SQL语句：CREATE TABLE tab_new AS SELECT * FROM tab_old;
2)只复制表结构不复制表内容的SQL语句：CREATE TABLE tab_new AS SELECT * FROM tab_old WHERE 1=2;
3)不复制表结构，只复制内容的sql语句：insert into tab_new select * from tab_old;
或者SELECT vale1, value2 into Table2 from Table1





========================================
|-- 解决mysql表不能查询修改删除等操作并出现卡死
----------------------------------------

问题现象1：进程wait卡住

测试环境mysql出现了一个怪表：select查询表卡死，alter修改表卡死，甚至我不想要这个表了，delete、truncate、drop表都卡死卡主了......
解决办法：
>show full processlist; 　　 // 列出进程，找出处于waiting的process，要杀死这些process
......
......
>kill ID;　　　　　　　　　　　　// ID号就是指的列出的第一列“Id”
到此，可以解决一般性的卡死。（如果必要，考虑重启一下mysql）







https://www.cnblogs.com/ding2016/p/9890440.html





========================================
|-- docker中的 mysql 连接报错
----------------------------------------
1.ERROR 2003 (HY000): Can't connect to MySQL server on 'y.biomooc.com' (111)
 "Can't connect to MySQL server on 'y.biomooc.com' ([WinError 10061] 由于目标计算机积极拒绝，无法连接。)"
1). 重启docker不行，重启mysql不行；
2). 进入docker是可以登陆数据库的；
3). 使用 127.0.0.1 可以登录，然后再使用 y.biomooc.com 就可以登录了。

这个是偶然发生错误，并持续几个小时，偶然就又正常了。
可能是防火墙的原因，已经关掉 Ubuntu的防火墙，并清除了 iptables规则。


2. ERROR 2013 (HY000): Lost connection to MySQL server at 'reading initial communication packet', system error: 104



3.
更多信息看本博客 linux/docker。



========================================
mysql日期格式化
----------------------------------------

1.date_format函数

不知道为什么不行，昨天还可以的
https://zhidao.baidu.com/question/97880731.html

select date_format(日期字段,’%Y-%m-%d’) as ‘日期’ from test
select date_format(日期字段,"yyyy-mm-dd hh:mm:ss") as '日期'
SELECT order_id,buyer_name,date_format(add_time,'%Y-%m-%d') as 'time',pd_amount FROM `33hao_order`;
结果输出null列。

DATE_FORMAT(date,format)  
根据format字符串安排date值的格式。 




2.from_unixtime()函数
https://my.oschina.net/unteacher/blog/214213
  
select from_unixtime(time,'%Y-%m-%d %H:%i:%s'); 
select from_unixtime(now(),'%Y-%m-%d %H:%i:%s'); 

SELECT order_id,buyer_name,from_unixtime(add_time,'%Y-%m-%d %H:%i:%s') AS stp, pd_amount FROM `33hao_order`;
这个可以。

SELECT order_id,buyer_name,from_unixtime(add_time,'%Y-%m-%d %H:%i:%s') AS '时间', pd_amount FROM `33hao_order` where order_id>=290 and pd_amount>0 and buyer_name="lrx99";


========================================
图形化工具 MySQL Workbench: 据说可以修改编辑blob类型数据
----------------------------------------
1. 下载地址
https://dev.mysql.com/downloads/workbench/

$ wget https://dev.mysql.com/get/Downloads/MySQLGUITools/mysql-workbench-community-dbgsym_8.0.22-1ubuntu20.10_amd64.deb

$ sudo dpkg -i mysql-workbench-community-dbgsym_8.0.22-1ubuntu20.10_amd64.deb
//安装失败，缺少依赖，无法解决

## mysql-workbench-community-dbgsym depends on mysql-workbench-community (= 8.0.22-1ubuntu20.10); however:
##  Package mysql-workbench-community is not installed.


$ sudo apt-get  --fix-broken install
$ sudo apt-get install mysql-workbench #耗时2min

看来上面的下载不需要了。


必须本机桌面启动图形界面
$ mysql-workbench

(1) 添加mysql登录信息
host, port, user, pass;

(2) 写 SQL 语句，点击左上角闪电符号执行。

右侧下方有执行结果，然后右侧可以切换显示和编辑。

中间分割线上也有编辑按钮，编辑后，右下角有apply按钮，会生成sql语句，再次确定则更新成功。



https://www.cnblogs.com/jpfss/p/10892411.html




========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------


========================================
----------------------------------------

